!function(e){function r(e,r,o){return 4===arguments.length?t.apply(this,arguments):void n(e,{declarative:!0,deps:r,declare:o})}function t(e,r,t,o){n(e,{declarative:!1,deps:r,executingRequire:t,execute:o})}function n(e,r){r.name=e,e in v||(v[e]=r),r.normalizedDeps=r.deps}function o(e,r){if(r[e.groupIndex]=r[e.groupIndex]||[],-1==g.call(r[e.groupIndex],e)){r[e.groupIndex].push(e);for(var t=0,n=e.normalizedDeps.length;n>t;t++){var a=e.normalizedDeps[t],u=v[a];if(u&&!u.evaluated){var d=e.groupIndex+(u.declarative!=e.declarative);if(void 0===u.groupIndex||u.groupIndex<d){if(void 0!==u.groupIndex&&(r[u.groupIndex].splice(g.call(r[u.groupIndex],u),1),0==r[u.groupIndex].length))throw new TypeError("Mixed dependency cycle detected");u.groupIndex=d}o(u,r)}}}}function a(e){var r=v[e];r.groupIndex=0;var t=[];o(r,t);for(var n=!!r.declarative==t.length%2,a=t.length-1;a>=0;a--){for(var u=t[a],i=0;i<u.length;i++){var s=u[i];n?d(s):l(s)}n=!n}}function u(e){return y[e]||(y[e]={name:e,dependencies:[],exports:{},importers:[]})}function d(r){if(!r.module){var t=r.module=u(r.name),n=r.module.exports,o=r.declare.call(e,function(e,r){if(t.locked=!0,"object"==typeof e)for(var o in e)n[o]=e[o];else n[e]=r;for(var a=0,u=t.importers.length;u>a;a++){var d=t.importers[a];if(!d.locked)for(var i=0;i<d.dependencies.length;++i)d.dependencies[i]===t&&d.setters[i](n)}return t.locked=!1,r},{id:r.name});t.setters=o.setters,t.execute=o.execute;for(var a=0,i=r.normalizedDeps.length;i>a;a++){var l,s=r.normalizedDeps[a],c=v[s],f=y[s];f?l=f.exports:c&&!c.declarative?l=c.esModule:c?(d(c),f=c.module,l=f.exports):l=p(s),f&&f.importers?(f.importers.push(t),t.dependencies.push(f)):t.dependencies.push(null),t.setters[a]&&t.setters[a](l)}}}function i(e){var r,t=v[e];if(t)t.declarative?f(e,[]):t.evaluated||l(t),r=t.module.exports;else if(r=p(e),!r)throw new Error("Unable to load dependency "+e+".");return(!t||t.declarative)&&r&&r.__useDefault?r["default"]:r}function l(r){if(!r.module){var t={},n=r.module={exports:t,id:r.name};if(!r.executingRequire)for(var o=0,a=r.normalizedDeps.length;a>o;o++){var u=r.normalizedDeps[o],d=v[u];d&&l(d)}r.evaluated=!0;var c=r.execute.call(e,function(e){for(var t=0,n=r.deps.length;n>t;t++)if(r.deps[t]==e)return i(r.normalizedDeps[t]);throw new TypeError("Module "+e+" not declared as a dependency.")},t,n);c&&(n.exports=c),t=n.exports,t&&t.__esModule?r.esModule=t:r.esModule=s(t)}}function s(r){var t={};if(("object"==typeof r||"function"==typeof r)&&r!==e)if(m)for(var n in r)"default"!==n&&c(t,r,n);else{var o=r&&r.hasOwnProperty;for(var n in r)"default"===n||o&&!r.hasOwnProperty(n)||(t[n]=r[n])}return t["default"]=r,x(t,"__useDefault",{value:!0}),t}function c(e,r,t){try{var n;(n=Object.getOwnPropertyDescriptor(r,t))&&x(e,t,n)}catch(o){return e[t]=r[t],!1}}function f(r,t){var n=v[r];if(n&&!n.evaluated&&n.declarative){t.push(r);for(var o=0,a=n.normalizedDeps.length;a>o;o++){var u=n.normalizedDeps[o];-1==g.call(t,u)&&(v[u]?f(u,t):p(u))}n.evaluated||(n.evaluated=!0,n.module.execute.call(e))}}function p(e){if(I[e])return I[e];if("@node/"==e.substr(0,6))return D(e.substr(6));var r=v[e];if(!r)throw"Module "+e+" not present.";return a(e),f(e,[]),v[e]=void 0,r.declarative&&x(r.module.exports,"__esModule",{value:!0}),I[e]=r.declarative?r.module.exports:r.esModule}var v={},g=Array.prototype.indexOf||function(e){for(var r=0,t=this.length;t>r;r++)if(this[r]===e)return r;return-1},m=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(h){m=!1}var x;!function(){try{Object.defineProperty({},"a",{})&&(x=Object.defineProperty)}catch(e){x=function(e,r,t){try{e[r]=t.value||t.get.call(e)}catch(n){}}}}();var y={},D="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,I={"@empty":{}};return function(e,n,o,a){return function(u){u(function(u){for(var d={_nodeRequire:D,register:r,registerDynamic:t,get:p,set:function(e,r){I[e]=r},newModule:function(e){return e}},i=0;i<n.length;i++)(function(e,r){r&&r.__esModule?I[e]=r:I[e]=s(r)})(n[i],arguments[i]);a(d);var l=p(e[0]);if(e.length>1)for(var i=1;i<e.length;i++)p(e[i]);return o?l["default"]:l})}}}("undefined"!=typeof self?self:global)

(["1"], [], true, function($__System) {
var require = this.require, exports = this.exports, module = this.module;
!function(e){function r(e,r){for(var n=e.split(".");n.length;)r=r[n.shift()];return r}function n(n){if("string"==typeof n)return r(n,e);if(!(n instanceof Array))throw new Error("Global exports must be a string or array.");for(var t={},o=!0,f=0;f<n.length;f++){var i=r(n[f],e);o&&(t["default"]=i,o=!1),t[n[f].split(".").pop()]=i}return t}function t(r){if(Object.keys)Object.keys(e).forEach(r);else for(var n in e)a.call(e,n)&&r(n)}function o(r){t(function(n){if(-1==l.call(s,n)){try{var t=e[n]}catch(o){s.push(n)}r(n,t)}})}var f,i=$__System,a=Object.prototype.hasOwnProperty,l=Array.prototype.indexOf||function(e){for(var r=0,n=this.length;n>r;r++)if(this[r]===e)return r;return-1},s=["_g","sessionStorage","localStorage","clipboardData","frames","frameElement","external","mozAnimationStartTime","webkitStorageInfo","webkitIndexedDB","mozInnerScreenY","mozInnerScreenX"];i.set("@@global-helpers",i.newModule({prepareGlobal:function(r,t,i){var a=e.define;e.define=void 0;var l;if(i){l={};for(var s in i)l[s]=e[s],e[s]=i[s]}return t||(f={},o(function(e,r){f[e]=r})),function(){var r;if(t)r=n(t);else{r={};var i,s;o(function(e,n){f[e]!==n&&"undefined"!=typeof n&&(r[e]=n,"undefined"!=typeof i?s||i===n||(s=!0):i=n)}),r=s?r:i}if(l)for(var u in l)e[u]=l[u];return e.define=a,r}}}))}("undefined"!=typeof self?self:global);
!function(e){function n(e,n){e=e.replace(l,"");var r=e.match(u),t=(r[1].split(",")[n]||"require").replace(s,""),i=p[t]||(p[t]=new RegExp(a+t+f,"g"));i.lastIndex=0;for(var o,c=[];o=i.exec(e);)c.push(o[2]||o[3]);return c}function r(e,n,t,o){if("object"==typeof e&&!(e instanceof Array))return r.apply(null,Array.prototype.splice.call(arguments,1,arguments.length-1));if("string"==typeof e&&"function"==typeof n&&(e=[e]),!(e instanceof Array)){if("string"==typeof e){var l=i.get(e);return l.__useDefault?l["default"]:l}throw new TypeError("Invalid require")}for(var a=[],f=0;f<e.length;f++)a.push(i["import"](e[f],o));Promise.all(a).then(function(e){n&&n.apply(null,e)},t)}function t(t,l,a){"string"!=typeof t&&(a=l,l=t,t=null),l instanceof Array||(a=l,l=["require","exports","module"].splice(0,a.length)),"function"!=typeof a&&(a=function(e){return function(){return e}}(a)),void 0===l[l.length-1]&&l.pop();var f,u,s;-1!=(f=o.call(l,"require"))&&(l.splice(f,1),t||(l=l.concat(n(a.toString(),f)))),-1!=(u=o.call(l,"exports"))&&l.splice(u,1),-1!=(s=o.call(l,"module"))&&l.splice(s,1);var p={name:t,deps:l,execute:function(n,t,o){for(var p=[],c=0;c<l.length;c++)p.push(n(l[c]));o.uri=o.id,o.config=function(){},-1!=s&&p.splice(s,0,o),-1!=u&&p.splice(u,0,t),-1!=f&&p.splice(f,0,function(e,t,l){return"string"==typeof e&&"function"!=typeof t?n(e):r.call(i,e,t,l,o.id)});var d=a.apply(-1==u?e:t,p);return"undefined"==typeof d&&o&&(d=o.exports),"undefined"!=typeof d?d:void 0}};if(t)c.anonDefine||c.isBundle?c.anonDefine&&c.anonDefine.name&&(c.anonDefine=null):c.anonDefine=p,c.isBundle=!0,i.registerDynamic(p.name,p.deps,!1,p.execute);else{if(c.anonDefine&&!c.anonDefine.name)throw new Error("Multiple anonymous defines in module "+t);c.anonDefine=p}}var i=$__System,o=Array.prototype.indexOf||function(e){for(var n=0,r=this.length;r>n;n++)if(this[n]===e)return n;return-1},l=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,a="(?:^|[^$_a-zA-Z\\xA0-\\uFFFF.])",f="\\s*\\(\\s*(\"([^\"]+)\"|'([^']+)')\\s*\\)",u=/\(([^\)]*)\)/,s=/^\s+|\s+$/g,p={};t.amd={};var c={isBundle:!1,anonDefine:null};i.amdDefine=t,i.amdRequire=r}("undefined"!=typeof self?self:global);
(function() {
var define = $__System.amdDefine;
var __extends = this && this.__extends || function(d, b) {
  function __() {
    this.constructor = d;
  }
  for (var p in b)
    b.hasOwnProperty(p) && (d[p] = b[p]);
  d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __);
};
!function(global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/core"), require("rxjs/Subject"), require("rxjs/observable/PromiseObservable"), require("rxjs/operator/toPromise"), require("rxjs/Observable")) : "function" == typeof define && define.amd ? define("2", ["exports", "3", "4", "5", "6", "7"], factory) : factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}), global.ng.core, global.Rx, global.Rx, global.Rx.Observable.prototype, global.Rx);
}(this, function(exports, _angular_core, rxjs_Subject, rxjs_observable_PromiseObservable, rxjs_operator_toPromise, rxjs_Observable) {
  "use strict";
  function isPresent(obj) {
    return void 0 !== obj && null !== obj;
  }
  function isBlank(obj) {
    return void 0 === obj || null === obj;
  }
  function isBoolean(obj) {
    return "boolean" == typeof obj;
  }
  function isNumber(obj) {
    return "number" == typeof obj;
  }
  function isString(obj) {
    return "string" == typeof obj;
  }
  function isStringMap(obj) {
    return "object" == typeof obj && null !== obj;
  }
  function isStrictStringMap(obj) {
    return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function noop() {}
  function stringify(token) {
    if ("string" == typeof token)
      return token;
    if (void 0 === token || null === token)
      return "" + token;
    if (token.name)
      return token.name;
    if (token.overriddenName)
      return token.overriddenName;
    var res = token.toString(),
        newLineIndex = res.indexOf("\n");
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function serializeEnum(val) {
    return val;
  }
  function resolveEnumToken(enumValue, val) {
    return enumValue[val];
  }
  function normalizeBlank(obj) {
    return isBlank(obj) ? null : obj;
  }
  function normalizeBool(obj) {
    return !isBlank(obj) && obj;
  }
  function isJsObject(o) {
    return null !== o && ("function" == typeof o || "object" == typeof o);
  }
  function evalExpression(sourceUrl, expr, declarations, vars) {
    var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl,
        fnArgNames = [],
        fnArgValues = [];
    for (var argName in vars)
      fnArgNames.push(argName), fnArgValues.push(vars[argName]);
    return (new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))).apply(void 0, fnArgValues);
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function escape(s) {
    return global$1.encodeURI(s);
  }
  function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1");
  }
  function templateVisitAll(visitor, asts, context) {
    void 0 === context && (context = null);
    var result = [];
    return asts.forEach(function(ast) {
      var astResult = ast.visit(visitor, context);
      isPresent(astResult) && result.push(astResult);
    }), result;
  }
  function _flattenArray(source, target) {
    if (isPresent(source))
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        isArray(item) ? _flattenArray(item, target) : target.push(item);
      }
    return target;
  }
  function unimplemented() {
    throw new BaseException$1("unimplemented");
  }
  function isWhitespace(code) {
    return code >= $TAB && code <= $SPACE || code == $NBSP;
  }
  function isDigit(code) {
    return $0 <= code && code <= $9;
  }
  function isAsciiLetter(code) {
    return code >= $a && code <= $z || code >= $A && code <= $Z;
  }
  function isAsciiHexDigit(code) {
    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
  }
  function newCharacterToken(index, code) {
    return new Token(index, TokenType.Character, code, StringWrapper.fromCharCode(code));
  }
  function newIdentifierToken(index, text) {
    return new Token(index, TokenType.Identifier, 0, text);
  }
  function newKeywordToken(index, text) {
    return new Token(index, TokenType.Keyword, 0, text);
  }
  function newOperatorToken(index, text) {
    return new Token(index, TokenType.Operator, 0, text);
  }
  function newStringToken(index, text) {
    return new Token(index, TokenType.String, 0, text);
  }
  function newNumberToken(index, n) {
    return new Token(index, TokenType.Number, n, "");
  }
  function isIdentifierStart(code) {
    return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$;
  }
  function isIdentifier(input) {
    if (0 == input.length)
      return !1;
    var scanner = new _Scanner(input);
    if (!isIdentifierStart(scanner.peek))
      return !1;
    for (scanner.advance(); scanner.peek !== $EOF; ) {
      if (!isIdentifierPart(scanner.peek))
        return !1;
      scanner.advance();
    }
    return !0;
  }
  function isIdentifierPart(code) {
    return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$;
  }
  function isExponentStart(code) {
    return code == $e || code == $E;
  }
  function isExponentSign(code) {
    return code == $MINUS || code == $PLUS;
  }
  function isQuote(code) {
    return code === $SQ || code === $DQ || code === $BT;
  }
  function unescape(code) {
    switch (code) {
      case $n:
        return $LF;
      case $f:
        return $FF;
      case $r:
        return $CR;
      case $t:
        return $TAB;
      case $v:
        return $VTAB;
      default:
        return code;
    }
  }
  function _createInterpolateRegExp(config) {
    var regexp = escapeRegExp(config.start) + "([\\s\\S]*?)" + escapeRegExp(config.end);
    return RegExpWrapper.create(regexp, "g");
  }
  function htmlVisitAll(visitor, asts, context) {
    void 0 === context && (context = null);
    var result = [];
    return asts.forEach(function(ast) {
      var astResult = ast.visit(visitor, context);
      isPresent(astResult) && result.push(astResult);
    }), result;
  }
  function getHtmlTagDefinition(tagName) {
    var result = TAG_DEFINITIONS[tagName.toLowerCase()];
    return isPresent(result) ? result : DEFAULT_TAG_DEFINITION;
  }
  function splitNsName(elementName) {
    if (":" != elementName[0])
      return [null, elementName];
    var match = RegExpWrapper.firstMatch(NS_PREFIX_RE, elementName);
    return [match[1], match[2]];
  }
  function getNsPrefix(elementName) {
    return splitNsName(elementName)[0];
  }
  function mergeNsAndName(prefix, localName) {
    return isPresent(prefix) ? ":" + prefix + ":" + localName : localName;
  }
  function tokenizeHtml(sourceContent, sourceUrl, tokenizeExpansionForms, interpolationConfig) {
    return void 0 === tokenizeExpansionForms && (tokenizeExpansionForms = !1), void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), new _HtmlTokenizer(new ParseSourceFile(sourceContent, sourceUrl), tokenizeExpansionForms, interpolationConfig).tokenize();
  }
  function unexpectedCharacterErrorMsg(charCode) {
    var char = charCode === $EOF ? "EOF" : StringWrapper.fromCharCode(charCode);
    return 'Unexpected character "' + char + '"';
  }
  function unknownEntityErrorMsg(entitySrc) {
    return 'Unknown entity "' + entitySrc + '" - use the "&#<decimal>;" or  "&#x<hex>;" syntax';
  }
  function isNotWhitespace(code) {
    return !isWhitespace(code) || code === $EOF;
  }
  function isNameEnd(code) {
    return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ;
  }
  function isPrefixEnd(code) {
    return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
  }
  function isDigitEntityEnd(code) {
    return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
  }
  function isNamedEntityEnd(code) {
    return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
  }
  function isExpansionFormStart(input, offset, interpolationStart) {
    return input.charCodeAt(offset) == $LBRACE && input.indexOf(interpolationStart, offset) != offset;
  }
  function isExpansionCaseStart(peek) {
    return peek === $EQ || isAsciiLetter(peek);
  }
  function compareCharCodeCaseInsensitive(code1, code2) {
    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
  }
  function toUpperCaseCharCode(code) {
    return code >= $a && code <= $z ? code - $a + $A : code;
  }
  function mergeTextTokens(srcTokens) {
    for (var lastDstToken,
        dstTokens = [],
        i = 0; i < srcTokens.length; i++) {
      var token = srcTokens[i];
      isPresent(lastDstToken) && lastDstToken.type == HtmlTokenType.TEXT && token.type == HtmlTokenType.TEXT ? (lastDstToken.parts[0] += token.parts[0], lastDstToken.sourceSpan.end = token.sourceSpan.end) : (lastDstToken = token, dstTokens.push(lastDstToken));
    }
    return dstTokens;
  }
  function getElementFullName(prefix, localName, parentElement) {
    return isBlank(prefix) && (prefix = getHtmlTagDefinition(localName).implicitNamespacePrefix, isBlank(prefix) && isPresent(parentElement) && (prefix = getNsPrefix(parentElement.name))), mergeNsAndName(prefix, localName);
  }
  function lastOnStack(stack, element) {
    return stack.length > 0 && stack[stack.length - 1] === element;
  }
  function preparseElement(ast) {
    var selectAttr = null,
        hrefAttr = null,
        relAttr = null,
        nonBindable = !1,
        projectAs = null;
    ast.attrs.forEach(function(attr) {
      var lcAttrName = attr.name.toLowerCase();
      lcAttrName == NG_CONTENT_SELECT_ATTR ? selectAttr = attr.value : lcAttrName == LINK_STYLE_HREF_ATTR ? hrefAttr = attr.value : lcAttrName == LINK_STYLE_REL_ATTR ? relAttr = attr.value : attr.name == NG_NON_BINDABLE_ATTR ? nonBindable = !0 : attr.name == NG_PROJECT_AS && attr.value.length > 0 && (projectAs = attr.value);
    }), selectAttr = normalizeNgContentSelect(selectAttr);
    var nodeName = ast.name.toLowerCase(),
        type = PreparsedElementType.OTHER;
    return splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT ? type = PreparsedElementType.NG_CONTENT : nodeName == STYLE_ELEMENT ? type = PreparsedElementType.STYLE : nodeName == SCRIPT_ELEMENT ? type = PreparsedElementType.SCRIPT : nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE && (type = PreparsedElementType.STYLESHEET), new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
  }
  function normalizeNgContentSelect(selectAttr) {
    return isBlank(selectAttr) || 0 === selectAttr.length ? "*" : selectAttr;
  }
  function isStyleUrlResolvable(url) {
    if (isBlank(url) || 0 === url.length || "/" == url[0])
      return !1;
    var schemeMatch = RegExpWrapper.firstMatch(_urlWithSchemaRe, url);
    return isBlank(schemeMatch) || "package" == schemeMatch[1] || "asset" == schemeMatch[1];
  }
  function extractStyleUrls(resolver, baseUrl, cssText) {
    var foundUrls = [],
        modifiedCssText = StringWrapper.replaceAllMapped(cssText, _cssImportRe, function(m) {
          var url = isPresent(m[1]) ? m[1] : m[2];
          return isStyleUrlResolvable(url) ? (foundUrls.push(resolver.resolve(baseUrl, url)), "") : m[0];
        });
    return new StyleWithImports(modifiedCssText, foundUrls);
  }
  function camelCaseToDashCase(input) {
    return StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function(m) {
      return "-" + m[1].toLowerCase();
    });
  }
  function splitAtColon(input, defaultValues) {
    var parts = StringWrapper.split(input.trim(), /\s*:\s*/g);
    return parts.length > 1 ? parts : defaultValues;
  }
  function sanitizeIdentifier(name) {
    return StringWrapper.replaceAll(name, /\W/g, "_");
  }
  function visitValue(value, visitor, context) {
    return isArray(value) ? visitor.visitArray(value, context) : isStrictStringMap(value) ? visitor.visitStringMap(value, context) : isBlank(value) || isPrimitive(value) ? visitor.visitPrimitive(value, context) : visitor.visitOther(value, context);
  }
  function assetUrl(pkg, path, type) {
    return void 0 === path && (path = null), void 0 === type && (type = "src"), IS_DART ? null == path ? "asset:angular2/" + pkg + "/" + pkg + ".dart" : "asset:angular2/lib/" + pkg + "/src/" + path + ".dart" : null == path ? "asset:@angular/lib/" + pkg + "/index" : "asset:@angular/lib/" + pkg + "/src/" + path;
  }
  function createOfflineCompileUrlResolver() {
    return new UrlResolver(_ASSET_SCHEME);
  }
  function getUrlScheme(url) {
    var match = _split(url);
    return match && match[_ComponentIndex.Scheme] || "";
  }
  function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
    var out = [];
    return isPresent(opt_scheme) && out.push(opt_scheme + ":"), isPresent(opt_domain) && (out.push("//"), isPresent(opt_userInfo) && out.push(opt_userInfo + "@"), out.push(opt_domain), isPresent(opt_port) && out.push(":" + opt_port)), isPresent(opt_path) && out.push(opt_path), isPresent(opt_queryData) && out.push("?" + opt_queryData), isPresent(opt_fragment) && out.push("#" + opt_fragment), out.join("");
  }
  function _split(uri) {
    return RegExpWrapper.firstMatch(_splitRe, uri);
  }
  function _removeDotSegments(path) {
    if ("/" == path)
      return "/";
    for (var leadingSlash = "/" == path[0] ? "/" : "",
        trailingSlash = "/" === path[path.length - 1] ? "/" : "",
        segments = path.split("/"),
        out = [],
        up = 0,
        pos = 0; pos < segments.length; pos++) {
      var segment = segments[pos];
      switch (segment) {
        case "":
        case ".":
          break;
        case "..":
          out.length > 0 ? out.pop() : up++;
          break;
        default:
          out.push(segment);
      }
    }
    if ("" == leadingSlash) {
      for (; up-- > 0; )
        out.unshift("..");
      0 === out.length && out.push(".");
    }
    return leadingSlash + out.join("/") + trailingSlash;
  }
  function _joinAndCanonicalizePath(parts) {
    var path = parts[_ComponentIndex.Path];
    return path = isBlank(path) ? "" : _removeDotSegments(path), parts[_ComponentIndex.Path] = path, _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
  }
  function _resolveUrl(base, url) {
    var parts = _split(encodeURI(url)),
        baseParts = _split(base);
    if (isPresent(parts[_ComponentIndex.Scheme]))
      return _joinAndCanonicalizePath(parts);
    parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
    for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++)
      isBlank(parts[i]) && (parts[i] = baseParts[i]);
    if ("/" == parts[_ComponentIndex.Path][0])
      return _joinAndCanonicalizePath(parts);
    var path = baseParts[_ComponentIndex.Path];
    isBlank(path) && (path = "/");
    var index = path.lastIndexOf("/");
    return path = path.substring(0, index + 1) + parts[_ComponentIndex.Path], parts[_ComponentIndex.Path] = path, _joinAndCanonicalizePath(parts);
  }
  function metadataFromJson(data) {
    return _COMPILE_METADATA_FROM_JSON[data.class](data);
  }
  function createHostComponentMeta(componentType, componentSelector) {
    var template = CssSelector.parse(componentSelector)[0].getMatchingElementTemplate();
    return CompileDirectiveMetadata.create({
      type: new CompileTypeMetadata({
        runtime: Object,
        name: componentType.name + "_Host",
        moduleUrl: componentType.moduleUrl,
        isHost: !0
      }),
      template: new CompileTemplateMetadata({
        template: template,
        templateUrl: "",
        styles: [],
        styleUrls: [],
        ngContentSelectors: [],
        animations: []
      }),
      changeDetection: _angular_core.ChangeDetectionStrategy.Default,
      inputs: [],
      outputs: [],
      host: {},
      lifecycleHooks: [],
      isComponent: !0,
      selector: "*",
      providers: [],
      viewProviders: [],
      queries: [],
      viewQueries: []
    });
  }
  function _arrayFromJson(obj, fn) {
    return isBlank(obj) ? null : obj.map(function(o) {
      return _objFromJson(o, fn);
    });
  }
  function _arrayToJson(obj) {
    return isBlank(obj) ? null : obj.map(_objToJson);
  }
  function _objFromJson(obj, fn) {
    return isArray(obj) ? _arrayFromJson(obj, fn) : isString(obj) || isBlank(obj) || isBoolean(obj) || isNumber(obj) ? obj : fn(obj);
  }
  function _objToJson(obj) {
    return isArray(obj) ? _arrayToJson(obj) : isString(obj) || isBlank(obj) || isBoolean(obj) || isNumber(obj) ? obj : obj.toJson();
  }
  function _normalizeArray(obj) {
    return isPresent(obj) ? obj : [];
  }
  function identifierToken(identifier) {
    return new CompileTokenMetadata({identifier: identifier});
  }
  function _transformProvider(provider, _a) {
    var useExisting = _a.useExisting,
        useValue = _a.useValue,
        deps = _a.deps;
    return new CompileProviderMetadata({
      token: provider.token,
      useClass: provider.useClass,
      useExisting: useExisting,
      useFactory: provider.useFactory,
      useValue: useValue,
      deps: deps,
      multi: provider.multi
    });
  }
  function _transformProviderAst(provider, _a) {
    var eager = _a.eager,
        providers = _a.providers;
    return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.sourceSpan);
  }
  function _normalizeProviders(providers, sourceSpan, targetErrors, targetProviders) {
    return void 0 === targetProviders && (targetProviders = null), isBlank(targetProviders) && (targetProviders = []), isPresent(providers) && providers.forEach(function(provider) {
      if (isArray(provider))
        _normalizeProviders(provider, sourceSpan, targetErrors, targetProviders);
      else {
        var normalizeProvider;
        provider instanceof CompileProviderMetadata ? normalizeProvider = provider : provider instanceof CompileTypeMetadata ? normalizeProvider = new CompileProviderMetadata({
          token: new CompileTokenMetadata({identifier: provider}),
          useClass: provider
        }) : targetErrors.push(new ProviderError("Unknown provider type " + provider, sourceSpan)), isPresent(normalizeProvider) && targetProviders.push(normalizeProvider);
      }
    }), targetProviders;
  }
  function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
    var providersByToken = new CompileTokenMap;
    directives.forEach(function(directive) {
      var dirProvider = new CompileProviderMetadata({
        token: new CompileTokenMetadata({identifier: directive.type}),
        useClass: directive.type
      });
      _resolveProviders([dirProvider], directive.isComponent ? exports.ProviderAstType.Component : exports.ProviderAstType.Directive, !0, sourceSpan, targetErrors, providersByToken);
    });
    var directivesWithComponentFirst = directives.filter(function(dir) {
      return dir.isComponent;
    }).concat(directives.filter(function(dir) {
      return !dir.isComponent;
    }));
    return directivesWithComponentFirst.forEach(function(directive) {
      _resolveProviders(_normalizeProviders(directive.providers, sourceSpan, targetErrors), exports.ProviderAstType.PublicService, !1, sourceSpan, targetErrors, providersByToken), _resolveProviders(_normalizeProviders(directive.viewProviders, sourceSpan, targetErrors), exports.ProviderAstType.PrivateService, !1, sourceSpan, targetErrors, providersByToken);
    }), providersByToken;
  }
  function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
    providers.forEach(function(provider) {
      var resolvedProvider = targetProvidersByToken.get(provider.token);
      isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi && targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + resolvedProvider.token.name, sourceSpan)), isBlank(resolvedProvider) ? (resolvedProvider = new ProviderAst(provider.token, provider.multi, eager, [provider], providerType, sourceSpan), targetProvidersByToken.add(provider.token, resolvedProvider)) : (provider.multi || ListWrapper.clear(resolvedProvider.providers), resolvedProvider.providers.push(provider));
    });
  }
  function _getViewQueries(component) {
    var viewQueries = new CompileTokenMap;
    return isPresent(component.viewQueries) && component.viewQueries.forEach(function(query) {
      return _addQueryToTokenMap(viewQueries, query);
    }), component.type.diDeps.forEach(function(dep) {
      isPresent(dep.viewQuery) && _addQueryToTokenMap(viewQueries, dep.viewQuery);
    }), viewQueries;
  }
  function _getContentQueries(directives) {
    var contentQueries = new CompileTokenMap;
    return directives.forEach(function(directive) {
      isPresent(directive.queries) && directive.queries.forEach(function(query) {
        return _addQueryToTokenMap(contentQueries, query);
      }), directive.type.diDeps.forEach(function(dep) {
        isPresent(dep.query) && _addQueryToTokenMap(contentQueries, dep.query);
      });
    }), contentQueries;
  }
  function _addQueryToTokenMap(map, query) {
    query.selectors.forEach(function(token) {
      var entry = map.get(token);
      isBlank(entry) && (entry = [], map.add(token, entry)), entry.push(query);
    });
  }
  function splitClasses(classAttrValue) {
    return StringWrapper.split(classAttrValue.trim(), /\s+/g);
  }
  function createElementCssSelector(elementName, matchableAttrs) {
    var cssSelector = new CssSelector,
        elNameNoNs = splitNsName(elementName)[1];
    cssSelector.setElement(elNameNoNs);
    for (var i = 0; i < matchableAttrs.length; i++) {
      var attrName = matchableAttrs[i][0],
          attrNameNoNs = splitNsName(attrName)[1],
          attrValue = matchableAttrs[i][1];
      if (cssSelector.addAttribute(attrNameNoNs, attrValue), attrName.toLowerCase() == CLASS_ATTR) {
        var classes = splitClasses(attrValue);
        classes.forEach(function(className) {
          return cssSelector.addClassName(className);
        });
      }
    }
    return cssSelector;
  }
  function removeDuplicates(items) {
    var res = [];
    return items.forEach(function(item) {
      var hasMatch = res.filter(function(r) {
        return r.type.name == item.type.name && r.type.moduleUrl == item.type.moduleUrl && r.type.runtime == item.type.runtime;
      }).length > 0;
      hasMatch || res.push(item);
    }), res;
  }
  function replaceVarInExpression(varName, newValue, expression) {
    var transformer = new _ReplaceVariableTransformer(varName, newValue);
    return expression.visitExpression(transformer, null);
  }
  function findReadVarNames(stmts) {
    var finder = new _VariableFinder;
    return finder.visitAllStatements(stmts, null), finder.varNames;
  }
  function variable(name, type) {
    return void 0 === type && (type = null), new ReadVarExpr(name, type);
  }
  function importExpr(id, typeParams) {
    return void 0 === typeParams && (typeParams = null), new ExternalExpr(id, null, typeParams);
  }
  function importType(id, typeParams, typeModifiers) {
    return void 0 === typeParams && (typeParams = null), void 0 === typeModifiers && (typeModifiers = null), isPresent(id) ? new ExternalType(id, typeParams, typeModifiers) : null;
  }
  function literal(value, type) {
    return void 0 === type && (type = null), new LiteralExpr(value, type);
  }
  function literalArr(values, type) {
    return void 0 === type && (type = null), new LiteralArrayExpr(values, type);
  }
  function literalMap(values, type) {
    return void 0 === type && (type = null), new LiteralMapExpr(values, type);
  }
  function not(expr) {
    return new NotExpr(expr);
  }
  function fn(params, body, type) {
    return void 0 === type && (type = null), new FunctionExpr(params, body, type);
  }
  function parseAnimationEntry(entry) {
    var errors = [],
        stateStyles = {},
        transitions = [],
        stateDeclarationAsts = [];
    entry.definitions.forEach(function(def) {
      def instanceof CompileAnimationStateDeclarationMetadata ? _parseAnimationDeclarationStates(def, errors).forEach(function(ast) {
        stateDeclarationAsts.push(ast), stateStyles[ast.stateName] = ast.styles;
      }) : transitions.push(def);
    });
    var stateTransitionAsts = transitions.map(function(transDef) {
      return _parseAnimationStateTransition(transDef, stateStyles, errors);
    }),
        ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
    return new ParsedAnimationResult(ast, errors);
  }
  function _parseAnimationDeclarationStates(stateMetadata, errors) {
    var styleValues = [];
    stateMetadata.styles.styles.forEach(function(stylesEntry) {
      isStringMap(stylesEntry) ? styleValues.push(stylesEntry) : errors.push(new AnimationParseError("State based animations cannot contain references to other states"));
    });
    var defStyles = new AnimationStylesAst(styleValues),
        states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
    return states.map(function(state) {
      return new AnimationStateDeclarationAst(state, defStyles);
    });
  }
  function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, errors) {
    var styles = new StylesCollection,
        transitionExprs = [],
        transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/);
    transitionStates.forEach(function(expr) {
      _parseAnimationTransitionExpr(expr, errors).forEach(function(transExpr) {
        transitionExprs.push(transExpr);
      });
    });
    var entry = _normalizeAnimationEntry(transitionStateMetadata.steps),
        animation = _normalizeStyleSteps(entry, stateStyles, errors),
        animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
    0 == errors.length && _fillAnimationAstStartingKeyframes(animationAst, styles, errors);
    var sequenceAst = animationAst instanceof AnimationSequenceAst ? animationAst : new AnimationSequenceAst([animationAst]);
    return new AnimationStateTransitionAst(transitionExprs, sequenceAst);
  }
  function _parseAnimationTransitionExpr(eventStr, errors) {
    var expressions = [],
        match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
    if (!isPresent(match) || match.length < 4)
      return errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format")), expressions;
    var fromState = match[1],
        separator = match[2],
        toState = match[3];
    expressions.push(new AnimationStateTransitionExpression(fromState, toState));
    var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
    return "<" != separator[0] || isFullAnyStateExpr || expressions.push(new AnimationStateTransitionExpression(toState, fromState)), expressions;
  }
  function _normalizeAnimationEntry(entry) {
    return isArray(entry) ? new CompileAnimationSequenceMetadata(entry) : entry;
  }
  function _normalizeStyleMetadata(entry, stateStyles, errors) {
    var normalizedStyles = [];
    return entry.styles.forEach(function(styleEntry) {
      isString(styleEntry) ? ListWrapper.addAll(normalizedStyles, _resolveStylesFromState(styleEntry, stateStyles, errors)) : normalizedStyles.push(styleEntry);
    }), normalizedStyles;
  }
  function _normalizeStyleSteps(entry, stateStyles, errors) {
    var steps = _normalizeStyleStepEntry(entry, stateStyles, errors);
    return new CompileAnimationSequenceMetadata(steps);
  }
  function _mergeAnimationStyles(stylesList, newItem) {
    if (isStringMap(newItem) && stylesList.length > 0) {
      var lastIndex = stylesList.length - 1,
          lastItem = stylesList[lastIndex];
      if (isStringMap(lastItem))
        return void(stylesList[lastIndex] = StringMapWrapper.merge(lastItem, newItem));
    }
    stylesList.push(newItem);
  }
  function _normalizeStyleStepEntry(entry, stateStyles, errors) {
    var steps;
    if (!(entry instanceof CompileAnimationWithStepsMetadata))
      return [entry];
    steps = entry.steps;
    var combinedStyles,
        newSteps = [];
    return steps.forEach(function(step) {
      if (step instanceof CompileAnimationStyleMetadata)
        isPresent(combinedStyles) || (combinedStyles = []), _normalizeStyleMetadata(step, stateStyles, errors).forEach(function(entry) {
          _mergeAnimationStyles(combinedStyles, entry);
        });
      else {
        if (isPresent(combinedStyles) && (newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles)), combinedStyles = null), step instanceof CompileAnimationAnimateMetadata) {
          var animateStyleValue = step.styles;
          animateStyleValue instanceof CompileAnimationStyleMetadata ? animateStyleValue.styles = _normalizeStyleMetadata(animateStyleValue, stateStyles, errors) : animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata && animateStyleValue.steps.forEach(function(step) {
            step.styles = _normalizeStyleMetadata(step, stateStyles, errors);
          });
        } else if (step instanceof CompileAnimationWithStepsMetadata) {
          var innerSteps = _normalizeStyleStepEntry(step, stateStyles, errors);
          step = step instanceof CompileAnimationGroupMetadata ? new CompileAnimationGroupMetadata(innerSteps) : new CompileAnimationSequenceMetadata(innerSteps);
        }
        newSteps.push(step);
      }
    }), isPresent(combinedStyles) && newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles)), newSteps;
  }
  function _resolveStylesFromState(stateName, stateStyles, errors) {
    var styles = [];
    if (":" != stateName[0])
      errors.push(new AnimationParseError('Animation states via styles must be prefixed with a ":"'));
    else {
      var normalizedStateName = stateName.substring(1),
          value = stateStyles[normalizedStateName];
      isPresent(value) ? value.styles.forEach(function(stylesEntry) {
        isStringMap(stylesEntry) && styles.push(stylesEntry);
      }) : errors.push(new AnimationParseError('Unable to apply styles due to missing a state: "' + normalizedStateName + '"'));
    }
    return styles;
  }
  function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
    var totalEntries = keyframeSequence.steps.length,
        totalOffsets = 0;
    keyframeSequence.steps.forEach(function(step) {
      return totalOffsets += isPresent(step.offset) ? 1 : 0;
    }), totalOffsets > 0 && totalOffsets < totalEntries && (errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()")), totalOffsets = totalEntries);
    var limit = totalEntries - 1,
        margin = 0 == totalOffsets ? 1 / limit : 0,
        rawKeyframes = [],
        index = 0,
        doSortKeyframes = !1,
        lastOffset = 0;
    keyframeSequence.steps.forEach(function(styleMetadata) {
      var offset = styleMetadata.offset,
          keyframeStyles = {};
      styleMetadata.styles.forEach(function(entry) {
        StringMapWrapper.forEach(entry, function(value, prop) {
          "offset" != prop && (keyframeStyles[prop] = value);
        });
      }), isPresent(offset) ? doSortKeyframes = doSortKeyframes || offset < lastOffset : offset = index == limit ? _TERMINAL_KEYFRAME : margin * index, rawKeyframes.push([offset, keyframeStyles]), lastOffset = offset, index++;
    }), doSortKeyframes && ListWrapper.sort(rawKeyframes, function(a, b) {
      return a[0] <= b[0] ? -1 : 1;
    });
    var i,
        firstKeyframe = rawKeyframes[0];
    firstKeyframe[0] != _INITIAL_KEYFRAME && ListWrapper.insert(rawKeyframes, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);
    var firstKeyframeStyles = firstKeyframe[1],
        limit = rawKeyframes.length - 1,
        lastKeyframe = rawKeyframes[limit];
    lastKeyframe[0] != _TERMINAL_KEYFRAME && (rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]), limit++);
    var lastKeyframeStyles = lastKeyframe[1];
    for (i = 1; i <= limit; i++) {
      var entry = rawKeyframes[i],
          styles = entry[1];
      StringMapWrapper.forEach(styles, function(value, prop) {
        isPresent(firstKeyframeStyles[prop]) || (firstKeyframeStyles[prop] = FILL_STYLE_FLAG);
      });
    }
    for (i = limit - 1; i >= 0; i--) {
      var entry = rawKeyframes[i],
          styles = entry[1];
      StringMapWrapper.forEach(styles, function(value, prop) {
        isPresent(lastKeyframeStyles[prop]) || (lastKeyframeStyles[prop] = value);
      });
    }
    return rawKeyframes.map(function(entry) {
      return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]]));
    });
  }
  function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
    var ast,
        playTime = 0,
        startingTime = currentTime;
    if (entry instanceof CompileAnimationWithStepsMetadata) {
      var previousStyles,
          maxDuration = 0,
          steps = [],
          isGroup = entry instanceof CompileAnimationGroupMetadata;
      if (entry.steps.forEach(function(entry) {
        var time = isGroup ? startingTime : currentTime;
        if (entry instanceof CompileAnimationStyleMetadata)
          return entry.styles.forEach(function(stylesEntry) {
            var map = stylesEntry;
            StringMapWrapper.forEach(map, function(value, prop) {
              collectedStyles.insertAtTime(prop, time, value);
            });
          }), void(previousStyles = entry.styles);
        var innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
        if (isPresent(previousStyles)) {
          if (entry instanceof CompileAnimationWithStepsMetadata) {
            var startingStyles = new AnimationStylesAst(previousStyles);
            steps.push(new AnimationStepAst(startingStyles, [], 0, 0, ""));
          } else {
            var innerStep = innerAst;
            ListWrapper.addAll(innerStep.startingStyles.styles, previousStyles);
          }
          previousStyles = null;
        }
        var astDuration = innerAst.playTime;
        currentTime += astDuration, playTime += astDuration, maxDuration = Math$1.max(astDuration, maxDuration), steps.push(innerAst);
      }), isPresent(previousStyles)) {
        var startingStyles = new AnimationStylesAst(previousStyles);
        steps.push(new AnimationStepAst(startingStyles, [], 0, 0, ""));
      }
      isGroup ? (ast = new AnimationGroupAst(steps), playTime = maxDuration, currentTime = startingTime + playTime) : ast = new AnimationSequenceAst(steps);
    } else if (entry instanceof CompileAnimationAnimateMetadata) {
      var keyframes,
          timings = _parseTimeExpression(entry.timings, errors),
          styles = entry.styles;
      if (styles instanceof CompileAnimationKeyframesSequenceMetadata)
        keyframes = _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
      else {
        var styleData = styles,
            offset = _TERMINAL_KEYFRAME,
            styleAst = new AnimationStylesAst(styleData.styles),
            keyframe = new AnimationKeyframeAst(offset, styleAst);
        keyframes = [keyframe];
      }
      ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing), playTime = timings.duration + timings.delay, currentTime += playTime, keyframes.forEach(function(keyframe) {
        return keyframe.styles.styles.forEach(function(entry) {
          return StringMapWrapper.forEach(entry, function(value, prop) {
            return collectedStyles.insertAtTime(prop, currentTime, value);
          });
        });
      });
    } else
      ast = new AnimationStepAst(null, [], 0, 0, "");
    return ast.playTime = playTime, ast.startTime = startingTime, ast;
  }
  function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
    if (ast instanceof AnimationStepAst && ast.keyframes.length > 0) {
      var keyframes = ast.keyframes;
      if (1 == keyframes.length) {
        var endKeyframe = keyframes[0],
            startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
        ast.keyframes = [startKeyframe, endKeyframe];
      }
    } else
      ast instanceof AnimationWithStepsAst && ast.steps.forEach(function(entry) {
        return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors);
      });
  }
  function _parseTimeExpression(exp, errors) {
    var duration,
        regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/gi,
        delay = 0,
        easing = null;
    if (isString(exp)) {
      var matches = RegExpWrapper.firstMatch(regex, exp);
      if (!isPresent(matches))
        return errors.push(new AnimationParseError('The provided timing value "' + exp + '" is invalid.')), new _AnimationTimings(0, 0, null);
      var durationMatch = NumberWrapper.parseFloat(matches[1]),
          durationUnit = matches[2];
      "s" == durationUnit && (durationMatch *= _ONE_SECOND), duration = Math$1.floor(durationMatch);
      var delayMatch = matches[3],
          delayUnit = matches[4];
      if (isPresent(delayMatch)) {
        var delayVal = NumberWrapper.parseFloat(delayMatch);
        isPresent(delayUnit) && "s" == delayUnit && (delayVal *= _ONE_SECOND), delay = Math$1.floor(delayVal);
      }
      var easingVal = matches[5];
      isBlank(easingVal) || (easing = easingVal);
    } else
      duration = exp;
    return new _AnimationTimings(duration, delay, easing);
  }
  function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
    var values = {},
        endTime = startTime + duration;
    return endKeyframe.styles.styles.forEach(function(styleData) {
      StringMapWrapper.forEach(styleData, function(val, prop) {
        if ("offset" != prop) {
          var resultEntry,
              nextEntry,
              value,
              resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
          isPresent(resultIndex) ? (resultEntry = collectedStyles.getByIndex(prop, resultIndex), value = resultEntry.value, nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1)) : value = FILL_STYLE_FLAG, isPresent(nextEntry) && !nextEntry.matches(endTime, val) && errors.push(new AnimationParseError('The animated CSS property "' + prop + '" unexpectedly changes between steps "' + resultEntry.time + 'ms" and "' + endTime + 'ms" at "' + nextEntry.time + 'ms"')), values[prop] = value;
        }
      });
    }), new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values]));
  }
  function _compareToAnimationStateExpr(value, animationState) {
    var emptyStateLiteral = literal(EMPTY_ANIMATION_STATE);
    switch (animationState) {
      case EMPTY_ANIMATION_STATE:
        return value.equals(emptyStateLiteral);
      case ANY_STATE:
        return literal(!0);
      default:
        return value.equals(literal(animationState));
    }
  }
  function _isEndStateAnimateStep(step) {
    if (step instanceof AnimationStepAst && step.duration > 0 && 2 == step.keyframes.length) {
      var styles1 = _getStylesArray(step.keyframes[0])[0],
          styles2 = _getStylesArray(step.keyframes[1])[0];
      return StringMapWrapper.isEmpty(styles1) && StringMapWrapper.isEmpty(styles2);
    }
    return !1;
  }
  function _getStylesArray(obj) {
    return obj.styles.styles;
  }
  function _enumExpression(classIdentifier, value) {
    if (isBlank(value))
      return NULL_EXPR;
    var name = resolveEnumToken(classIdentifier.runtime, value);
    return importExpr(new CompileIdentifierMetadata({
      name: classIdentifier.name + "." + name,
      moduleUrl: classIdentifier.moduleUrl,
      runtime: value
    }));
  }
  function getPropertyInView(property, callingView, definedView) {
    if (callingView === definedView)
      return property;
    for (var viewProp = THIS_EXPR,
        currView = callingView; currView !== definedView && isPresent(currView.declarationElement.view); )
      currView = currView.declarationElement.view, viewProp = viewProp.prop("parent");
    if (currView !== definedView)
      throw new BaseException$1("Internal error: Could not calculate a property in a parent view: " + property);
    if (property instanceof ReadPropExpr) {
      var readPropExpr_1 = property;
      (definedView.fields.some(function(field) {
        return field.name == readPropExpr_1.name;
      }) || definedView.getters.some(function(field) {
        return field.name == readPropExpr_1.name;
      })) && (viewProp = viewProp.cast(definedView.classType));
    }
    return replaceVarInExpression(THIS_EXPR.name, viewProp, property);
  }
  function injectFromViewParentInjector(token, optional) {
    var args = [createDiTokenExpression(token)];
    return optional && args.push(NULL_EXPR), THIS_EXPR.prop("parentInjector").callMethod("get", args);
  }
  function getViewFactoryName(component, embeddedTemplateIndex) {
    return "viewFactory_" + component.type.name + embeddedTemplateIndex;
  }
  function createDiTokenExpression(token) {
    return isPresent(token.value) ? literal(token.value) : token.identifierIsInstance ? importExpr(token.identifier).instantiate([], importType(token.identifier, [], [TypeModifier.Const])) : importExpr(token.identifier);
  }
  function createFlatArray(expressions) {
    for (var lastNonArrayExpressions = [],
        result = literalArr([]),
        i = 0; i < expressions.length; i++) {
      var expr = expressions[i];
      expr.type instanceof ArrayType ? (lastNonArrayExpressions.length > 0 && (result = result.callMethod(BuiltinMethod.ConcatArray, [literalArr(lastNonArrayExpressions)]), lastNonArrayExpressions = []), result = result.callMethod(BuiltinMethod.ConcatArray, [expr])) : lastNonArrayExpressions.push(expr);
    }
    return lastNonArrayExpressions.length > 0 && (result = result.callMethod(BuiltinMethod.ConcatArray, [literalArr(lastNonArrayExpressions)])), result;
  }
  function createPureProxy(fn, argCount, pureProxyProp, view) {
    view.fields.push(new ClassField(pureProxyProp.name, null));
    var pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;
    if (isBlank(pureProxyId))
      throw new BaseException$1("Unsupported number of argument for pure functions: " + argCount);
    view.createMethod.addStmt(THIS_EXPR.prop(pureProxyProp.name).set(importExpr(pureProxyId).callFn([fn])).toStmt());
  }
  function createQueryValues(viewValues) {
    return ListWrapper.flatten(viewValues.values.map(function(entry) {
      return entry instanceof ViewQueryValues ? mapNestedViews(entry.view.declarationElement.appElement, entry.view, createQueryValues(entry)) : entry;
    }));
  }
  function mapNestedViews(declarationAppElement, view, expressions) {
    var adjustedExpressions = expressions.map(function(expr) {
      return replaceVarInExpression(THIS_EXPR.name, variable("nestedView"), expr);
    });
    return declarationAppElement.callMethod("mapNestedViews", [variable(view.className), fn([new FnParam("nestedView", view.classType)], [new ReturnStatement(literalArr(adjustedExpressions))])]);
  }
  function createQueryList(query, directiveInstance, propertyName, compileView) {
    compileView.fields.push(new ClassField(propertyName, importType(Identifiers.QueryList, [DYNAMIC_TYPE])));
    var expr = THIS_EXPR.prop(propertyName);
    return compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName).set(importExpr(Identifiers.QueryList, [DYNAMIC_TYPE]).instantiate([])).toStmt()), expr;
  }
  function addQueryToTokenMap(map, query) {
    query.meta.selectors.forEach(function(selector) {
      var entry = map.get(selector);
      isBlank(entry) && (entry = [], map.add(selector, entry)), entry.push(query);
    });
  }
  function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
    var indexCondition;
    return indexCondition = childNodeCount > 0 ? literal(nodeIndex).lowerEquals(InjectMethodVars.requestNodeIndex).and(InjectMethodVars.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount))) : literal(nodeIndex).identical(InjectMethodVars.requestNodeIndex), new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new ReturnStatement(providerExpr)]);
  }
  function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) {
    var resolvedProviderValueExpr,
        type,
        view = compileElement.view;
    if (isMulti ? (resolvedProviderValueExpr = literalArr(providerValueExpressions), type = new ArrayType(DYNAMIC_TYPE)) : (resolvedProviderValueExpr = providerValueExpressions[0], type = providerValueExpressions[0].type), isBlank(type) && (type = DYNAMIC_TYPE), isEager)
      view.fields.push(new ClassField(propName, type)), view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
    else {
      var internalField = "_" + propName;
      view.fields.push(new ClassField(internalField, type));
      var getter = new CompileMethod(view);
      getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst), getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()])), getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField))), view.getters.push(new ClassGetter(propName, getter.finish(), type));
    }
    return THIS_EXPR.prop(propName);
  }
  function _convertValueToOutputAst(value) {
    return visitValue(value, new _ValueOutputAstTransformer, null);
  }
  function _findPipeMeta(view, name) {
    for (var pipeMeta = null,
        i = view.pipeMetas.length - 1; i >= 0; i--) {
      var localPipeMeta = view.pipeMetas[i];
      if (localPipeMeta.name == name) {
        pipeMeta = localPipeMeta;
        break;
      }
    }
    if (isBlank(pipeMeta))
      throw new BaseException$1("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
    return pipeMeta;
  }
  function getViewType(component, embeddedTemplateIndex) {
    return embeddedTemplateIndex > 0 ? ViewType.EMBEDDED : component.type.isHost ? ViewType.HOST : ViewType.COMPONENT;
  }
  function convertCdExpressionToIr(nameResolver, implicitReceiver, expression, valueUnwrapper) {
    var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, valueUnwrapper),
        irAst = expression.visit(visitor, _Mode.Expression);
    return new ExpressionWithWrappedValueInfo(irAst, visitor.needsValueUnwrapper);
  }
  function convertCdStatementToIr(nameResolver, implicitReceiver, stmt) {
    var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, null),
        statements = [];
    return flattenStatements(stmt.visit(visitor, _Mode.Statement), statements), statements;
  }
  function ensureStatementMode(mode, ast) {
    if (mode !== _Mode.Statement)
      throw new BaseException$1("Expected a statement, but saw " + ast);
  }
  function ensureExpressionMode(mode, ast) {
    if (mode !== _Mode.Expression)
      throw new BaseException$1("Expected an expression, but saw " + ast);
  }
  function convertToStatementIfNeeded(mode, expr) {
    return mode === _Mode.Statement ? expr.toStmt() : expr;
  }
  function flattenStatements(arg, output) {
    isArray(arg) ? arg.forEach(function(entry) {
      return flattenStatements(entry, output);
    }) : output.push(arg);
  }
  function createBindFieldExpr(exprIndex) {
    return THIS_EXPR.prop("_expr_" + exprIndex);
  }
  function createCurrValueExpr(exprIndex) {
    return variable("currVal_" + exprIndex);
  }
  function bind(view, currValExpr, fieldExpr, parsedExpression, context, actions, method) {
    var checkExpression = convertCdExpressionToIr(view, context, parsedExpression, DetectChangesVars.valUnwrapper);
    if (!isBlank(checkExpression.expression)) {
      if (view.fields.push(new ClassField(fieldExpr.name, null, [StmtModifier.Private])), view.createMethod.addStmt(THIS_EXPR.prop(fieldExpr.name).set(importExpr(Identifiers.uninitialized)).toStmt()), checkExpression.needsValueUnwrapper) {
        var initValueUnwrapperStmt = DetectChangesVars.valUnwrapper.callMethod("reset", []).toStmt();
        method.addStmt(initValueUnwrapperStmt);
      }
      method.addStmt(currValExpr.set(checkExpression.expression).toDeclStmt(null, [StmtModifier.Final]));
      var condition = importExpr(Identifiers.checkBinding).callFn([DetectChangesVars.throwOnChange, fieldExpr, currValExpr]);
      checkExpression.needsValueUnwrapper && (condition = DetectChangesVars.valUnwrapper.prop("hasWrappedValue").or(condition)), method.addStmt(new IfStmt(condition, actions.concat([THIS_EXPR.prop(fieldExpr.name).set(currValExpr).toStmt()])));
    }
  }
  function bindRenderText(boundText, compileNode, view) {
    var bindingIndex = view.bindings.length;
    view.bindings.push(new CompileBinding(compileNode, boundText));
    var currValExpr = createCurrValueExpr(bindingIndex),
        valueField = createBindFieldExpr(bindingIndex);
    view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText), bind(view, currValExpr, valueField, boundText.value, view.componentContext, [THIS_EXPR.prop("renderer").callMethod("setText", [compileNode.renderNode, currValExpr]).toStmt()], view.detectChangesRenderPropertiesMethod);
  }
  function bindAndWriteToRenderer(boundProps, context, compileElement) {
    var view = compileElement.view,
        renderNode = compileElement.renderNode;
    boundProps.forEach(function(boundProp) {
      var bindingIndex = view.bindings.length;
      view.bindings.push(new CompileBinding(compileElement, boundProp)), view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
      var fieldExpr = createBindFieldExpr(bindingIndex),
          currValExpr = createCurrValueExpr(bindingIndex),
          oldRenderValue = sanitizedValue(boundProp, fieldExpr),
          renderValue = sanitizedValue(boundProp, currValExpr),
          updateStmts = [];
      switch (boundProp.type) {
        case exports.PropertyBindingType.Property:
          view.genConfig.logBindingUpdate && updateStmts.push(logBindingUpdateStmt(renderNode, boundProp.name, renderValue)), updateStmts.push(THIS_EXPR.prop("renderer").callMethod("setElementProperty", [renderNode, literal(boundProp.name), renderValue]).toStmt());
          break;
        case exports.PropertyBindingType.Attribute:
          renderValue = renderValue.isBlank().conditional(NULL_EXPR, renderValue.callMethod("toString", [])), updateStmts.push(THIS_EXPR.prop("renderer").callMethod("setElementAttribute", [renderNode, literal(boundProp.name), renderValue]).toStmt());
          break;
        case exports.PropertyBindingType.Class:
          updateStmts.push(THIS_EXPR.prop("renderer").callMethod("setElementClass", [renderNode, literal(boundProp.name), renderValue]).toStmt());
          break;
        case exports.PropertyBindingType.Style:
          var strValue = renderValue.callMethod("toString", []);
          isPresent(boundProp.unit) && (strValue = strValue.plus(literal(boundProp.unit))), renderValue = renderValue.isBlank().conditional(NULL_EXPR, strValue), updateStmts.push(THIS_EXPR.prop("renderer").callMethod("setElementStyle", [renderNode, literal(boundProp.name), renderValue]).toStmt());
          break;
        case exports.PropertyBindingType.Animation:
          var animationName = boundProp.name,
              animation = view.componentView.animations.get(animationName);
          if (!isPresent(animation))
            throw new _angular_core.BaseException("Internal Error: couldn't find an animation entry for " + boundProp.name);
          var emptyStateValue = literal(EMPTY_ANIMATION_STATE),
              oldRenderVar = variable("oldRenderVar");
          updateStmts.push(oldRenderVar.set(oldRenderValue).toDeclStmt()), updateStmts.push(new IfStmt(oldRenderVar.equals(importExpr(Identifiers.uninitialized)), [oldRenderVar.set(emptyStateValue).toStmt()]));
          var newRenderVar = variable("newRenderVar");
          updateStmts.push(newRenderVar.set(renderValue).toDeclStmt()), updateStmts.push(new IfStmt(newRenderVar.equals(importExpr(Identifiers.uninitialized)), [newRenderVar.set(emptyStateValue).toStmt()])), updateStmts.push(animation.fnVariable.callFn([THIS_EXPR, renderNode, oldRenderVar, newRenderVar]).toStmt()), view.detachMethod.addStmt(animation.fnVariable.callFn([THIS_EXPR, renderNode, oldRenderValue, emptyStateValue]).toStmt());
      }
      bind(view, currValExpr, fieldExpr, boundProp.value, context, updateStmts, view.detectChangesRenderPropertiesMethod);
    });
  }
  function sanitizedValue(boundProp, renderValue) {
    var enumValue;
    switch (boundProp.securityContext) {
      case SecurityContext.NONE:
        return renderValue;
      case SecurityContext.HTML:
        enumValue = "HTML";
        break;
      case SecurityContext.STYLE:
        enumValue = "STYLE";
        break;
      case SecurityContext.SCRIPT:
        enumValue = "SCRIPT";
        break;
      case SecurityContext.URL:
        enumValue = "URL";
        break;
      case SecurityContext.RESOURCE_URL:
        enumValue = "RESOURCE_URL";
        break;
      default:
        throw new Error("internal error, unexpected SecurityContext " + boundProp.securityContext + ".");
    }
    var ctx = ViewProperties.viewUtils.prop("sanitizer"),
        args = [importExpr(Identifiers.SecurityContext).prop(enumValue), renderValue];
    return ctx.callMethod("sanitize", args);
  }
  function bindRenderInputs(boundProps, compileElement) {
    bindAndWriteToRenderer(boundProps, compileElement.view.componentContext, compileElement);
  }
  function bindDirectiveHostProps(directiveAst, directiveInstance, compileElement) {
    bindAndWriteToRenderer(directiveAst.hostProperties, directiveInstance, compileElement);
  }
  function bindDirectiveInputs(directiveAst, directiveInstance, compileElement) {
    if (0 !== directiveAst.inputs.length) {
      var view = compileElement.view,
          detectChangesInInputsMethod = view.detectChangesInInputsMethod;
      detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
      var lifecycleHooks = directiveAst.directive.lifecycleHooks,
          calcChangesMap = lifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1,
          isOnPushComp = directiveAst.directive.isComponent && !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
      calcChangesMap && detectChangesInInputsMethod.addStmt(DetectChangesVars.changes.set(NULL_EXPR).toStmt()), isOnPushComp && detectChangesInInputsMethod.addStmt(DetectChangesVars.changed.set(literal(!1)).toStmt()), directiveAst.inputs.forEach(function(input) {
        var bindingIndex = view.bindings.length;
        view.bindings.push(new CompileBinding(compileElement, input)), detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
        var fieldExpr = createBindFieldExpr(bindingIndex),
            currValExpr = createCurrValueExpr(bindingIndex),
            statements = [directiveInstance.prop(input.directiveName).set(currValExpr).toStmt()];
        calcChangesMap && (statements.push(new IfStmt(DetectChangesVars.changes.identical(NULL_EXPR), [DetectChangesVars.changes.set(literalMap([], new MapType(importType(Identifiers.SimpleChange)))).toStmt()])), statements.push(DetectChangesVars.changes.key(literal(input.directiveName)).set(importExpr(Identifiers.SimpleChange).instantiate([fieldExpr, currValExpr])).toStmt())), isOnPushComp && statements.push(DetectChangesVars.changed.set(literal(!0)).toStmt()), view.genConfig.logBindingUpdate && statements.push(logBindingUpdateStmt(compileElement.renderNode, input.directiveName, currValExpr)), bind(view, currValExpr, fieldExpr, input.value, view.componentContext, statements, detectChangesInInputsMethod);
      }), isOnPushComp && detectChangesInInputsMethod.addStmt(new IfStmt(DetectChangesVars.changed, [compileElement.appElement.prop("componentView").callMethod("markAsCheckOnce", []).toStmt()]));
    }
  }
  function logBindingUpdateStmt(renderNode, propName, value) {
    return THIS_EXPR.prop("renderer").callMethod("setBindingDebugInfo", [renderNode, literal("ng-reflect-" + camelCaseToDashCase(propName)), value.isBlank().conditional(NULL_EXPR, value.callMethod("toString", []))]).toStmt();
  }
  function collectEventListeners(hostEvents, dirs, compileElement) {
    var eventListeners = [];
    return hostEvents.forEach(function(hostEvent) {
      compileElement.view.bindings.push(new CompileBinding(compileElement, hostEvent));
      var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);
      listener.addAction(hostEvent, null, null);
    }), ListWrapper.forEachWithIndex(dirs, function(directiveAst, i) {
      var directiveInstance = compileElement.directiveInstances[i];
      directiveAst.hostEvents.forEach(function(hostEvent) {
        compileElement.view.bindings.push(new CompileBinding(compileElement, hostEvent));
        var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);
        listener.addAction(hostEvent, directiveAst.directive, directiveInstance);
      });
    }), eventListeners.forEach(function(listener) {
      return listener.finishMethod();
    }), eventListeners;
  }
  function bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners) {
    StringMapWrapper.forEach(directiveAst.directive.outputs, function(eventName, observablePropName) {
      eventListeners.filter(function(listener) {
        return listener.eventName == eventName;
      }).forEach(function(listener) {
        listener.listenToDirective(directiveInstance, observablePropName);
      });
    });
  }
  function bindRenderOutputs(eventListeners) {
    eventListeners.forEach(function(listener) {
      return listener.listenToRenderer();
    });
  }
  function convertStmtIntoExpression(stmt) {
    return stmt instanceof ExpressionStatement ? stmt.expr : stmt instanceof ReturnStatement ? stmt.value : null;
  }
  function santitizeEventName(name) {
    return StringWrapper.replaceAll(name, /[^a-zA-Z_]/g, "_");
  }
  function bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement) {
    var view = compileElement.view,
        detectChangesInInputsMethod = view.detectChangesInInputsMethod,
        lifecycleHooks = directiveAst.directive.lifecycleHooks;
    lifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 && directiveAst.inputs.length > 0 && detectChangesInInputsMethod.addStmt(new IfStmt(DetectChangesVars.changes.notIdentical(NULL_EXPR), [directiveInstance.callMethod("ngOnChanges", [DetectChangesVars.changes]).toStmt()])), lifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1 && detectChangesInInputsMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED.and(NOT_THROW_ON_CHANGES), [directiveInstance.callMethod("ngOnInit", []).toStmt()])), lifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1 && detectChangesInInputsMethod.addStmt(new IfStmt(NOT_THROW_ON_CHANGES, [directiveInstance.callMethod("ngDoCheck", []).toStmt()]));
  }
  function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
    var view = compileElement.view,
        lifecycleHooks = directiveMeta.lifecycleHooks,
        afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
    afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst), lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1 && afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod("ngAfterContentInit", []).toStmt()])), lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1 && afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod("ngAfterContentChecked", []).toStmt());
  }
  function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
    var view = compileElement.view,
        lifecycleHooks = directiveMeta.lifecycleHooks,
        afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
    afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst), lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1 && afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod("ngAfterViewInit", []).toStmt()])), lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1 && afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod("ngAfterViewChecked", []).toStmt());
  }
  function bindDirectiveDestroyLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
    var onDestroyMethod = compileElement.view.destroyMethod;
    onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst), directiveMeta.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 && onDestroyMethod.addStmt(directiveInstance.callMethod("ngOnDestroy", []).toStmt());
  }
  function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
    var onDestroyMethod = view.destroyMethod;
    pipeMeta.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 && onDestroyMethod.addStmt(pipeInstance.callMethod("ngOnDestroy", []).toStmt());
  }
  function bindView(view, parsedTemplate) {
    var visitor = new ViewBinderVisitor(view);
    templateVisitAll(visitor, parsedTemplate), view.pipes.forEach(function(pipe) {
      bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view);
    });
  }
  function buildView(view, template, targetDependencies) {
    var builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
    return templateVisitAll(builderVisitor, template, view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent), builderVisitor.nestedViewCount;
  }
  function finishView(view, targetStatements) {
    view.afterNodes(), createViewTopLevelStmts(view, targetStatements), view.nodes.forEach(function(node) {
      node instanceof CompileElement && node.hasEmbeddedView && finishView(node.embeddedView, targetStatements);
    });
  }
  function _getOuterContainerOrSelf(node) {
    for (var view = node.view; _isNgContainer(node.parent, view); )
      node = node.parent;
    return node;
  }
  function _getOuterContainerParentOrSelf(el) {
    for (var view = el.view; _isNgContainer(el, view); )
      el = el.parent;
    return el;
  }
  function _isNgContainer(node, view) {
    return !node.isNull() && node.sourceAst.name === NG_CONTAINER_TAG && node.view === view;
  }
  function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
    var result = {};
    return StringMapWrapper.forEach(declaredHtmlAttrs, function(value, key) {
      result[key] = value;
    }), directives.forEach(function(directiveMeta) {
      StringMapWrapper.forEach(directiveMeta.hostAttributes, function(value, name) {
        var prevValue = result[name];
        result[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
      });
    }), mapToKeyValueArray(result);
  }
  function _readHtmlAttrs(attrs) {
    var htmlAttrs = {};
    return attrs.forEach(function(ast) {
      htmlAttrs[ast.name] = ast.value;
    }), htmlAttrs;
  }
  function mergeAttributeValue(attrName, attrValue1, attrValue2) {
    return attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR ? attrValue1 + " " + attrValue2 : attrValue2;
  }
  function mapToKeyValueArray(data) {
    var entryArray = [];
    return StringMapWrapper.forEach(data, function(value, name) {
      entryArray.push([name, value]);
    }), ListWrapper.sort(entryArray, function(entry1, entry2) {
      return StringWrapper.compare(entry1[0], entry2[0]);
    }), entryArray;
  }
  function createViewTopLevelStmts(view, targetStatements) {
    var nodeDebugInfosVar = NULL_EXPR;
    view.genConfig.genDebugInfo && (nodeDebugInfosVar = variable("nodeDebugInfos_" + view.component.type.name + view.viewIndex), targetStatements.push(nodeDebugInfosVar.set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(new ExternalType(Identifiers.StaticNodeDebugInfo), [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final])));
    var renderCompTypeVar = variable("renderType_" + view.component.type.name);
    0 === view.viewIndex && targetStatements.push(renderCompTypeVar.set(NULL_EXPR).toDeclStmt(importType(Identifiers.RenderComponentType)));
    var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
    targetStatements.push(viewClass), targetStatements.push(createViewFactory(view, viewClass, renderCompTypeVar));
  }
  function createStaticNodeDebugInfo(node) {
    var compileElement = node instanceof CompileElement ? node : null,
        providerTokens = [],
        componentToken = NULL_EXPR,
        varTokenEntries = [];
    return isPresent(compileElement) && (providerTokens = compileElement.getProviderTokens(), isPresent(compileElement.component) && (componentToken = createDiTokenExpression(identifierToken(compileElement.component.type))), StringMapWrapper.forEach(compileElement.referenceTokens, function(token, varName) {
      varTokenEntries.push([varName, isPresent(token) ? createDiTokenExpression(token) : NULL_EXPR]);
    })), importExpr(Identifiers.StaticNodeDebugInfo).instantiate([literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])), componentToken, literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [TypeModifier.Const]))], importType(Identifiers.StaticNodeDebugInfo, null, [TypeModifier.Const]));
  }
  function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
    var viewConstructorArgs = [new FnParam(ViewConstructorVars.viewUtils.name, importType(Identifiers.ViewUtils)), new FnParam(ViewConstructorVars.parentInjector.name, importType(Identifiers.Injector)), new FnParam(ViewConstructorVars.declarationEl.name, importType(Identifiers.AppElement))],
        superConstructorArgs = [variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType), ViewConstructorVars.viewUtils, ViewConstructorVars.parentInjector, ViewConstructorVars.declarationEl, ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))];
    view.genConfig.genDebugInfo && superConstructorArgs.push(nodeDebugInfosVar);
    var viewConstructor = new ClassMethod(null, viewConstructorArgs, [SUPER_EXPR.callFn(superConstructorArgs).toStmt()]),
        viewMethods = [new ClassMethod("createInternal", [new FnParam(rootSelectorVar.name, STRING_TYPE)], generateCreateMethod(view), importType(Identifiers.AppElement)), new ClassMethod("injectorGetInternal", [new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars.requestNodeIndex.name, NUMBER_TYPE), new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars.notFoundResult), DYNAMIC_TYPE), new ClassMethod("detectChangesInternal", [new FnParam(DetectChangesVars.throwOnChange.name, BOOL_TYPE)], generateDetectChangesMethod(view)), new ClassMethod("dirtyParentQueriesInternal", [], view.dirtyParentQueriesMethod.finish()), new ClassMethod("destroyInternal", [], view.destroyMethod.finish()), new ClassMethod("detachInternal", [], view.detachMethod.finish())].concat(view.eventHandlerMethods),
        superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView,
        viewClass = new ClassStmt(view.className, importExpr(superClass, [getContextType(view)]), view.fields, view.getters, viewConstructor, viewMethods.filter(function(method) {
          return method.body.length > 0;
        }));
    return viewClass;
  }
  function createViewFactory(view, viewClass, renderCompTypeVar) {
    var templateUrlInfo,
        viewFactoryArgs = [new FnParam(ViewConstructorVars.viewUtils.name, importType(Identifiers.ViewUtils)), new FnParam(ViewConstructorVars.parentInjector.name, importType(Identifiers.Injector)), new FnParam(ViewConstructorVars.declarationEl.name, importType(Identifiers.AppElement))],
        initRenderCompTypeStmts = [];
    return templateUrlInfo = view.component.template.templateUrl == view.component.type.moduleUrl ? view.component.type.moduleUrl + " class " + view.component.type.name + " - inline template" : view.component.template.templateUrl, 0 === view.viewIndex && (initRenderCompTypeStmts = [new IfStmt(renderCompTypeVar.identical(NULL_EXPR), [renderCompTypeVar.set(ViewConstructorVars.viewUtils.callMethod("createRenderComponentType", [literal(templateUrlInfo), literal(view.component.template.ngContentSelectors.length), ViewEncapsulationEnum.fromValue(view.component.template.encapsulation), view.styles])).toStmt()])]), fn(viewFactoryArgs, initRenderCompTypeStmts.concat([new ReturnStatement(variable(viewClass.name).instantiate(viewClass.constructorMethod.params.map(function(param) {
      return variable(param.name);
    })))]), importType(Identifiers.AppView, [getContextType(view)])).toDeclStmt(view.viewFactory.name, [StmtModifier.Final]);
  }
  function generateCreateMethod(view) {
    var parentRenderNodeExpr = NULL_EXPR,
        parentRenderNodeStmts = [];
    view.viewType === ViewType.COMPONENT && (parentRenderNodeExpr = ViewProperties.renderer.callMethod("createViewRoot", [THIS_EXPR.prop("declarationAppElement").prop("nativeElement")]), parentRenderNodeStmts = [parentRenderNodeVar.set(parentRenderNodeExpr).toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [StmtModifier.Final])]);
    var resultExpr;
    return resultExpr = view.viewType === ViewType.HOST ? view.nodes[0].appElement : NULL_EXPR, parentRenderNodeStmts.concat(view.createMethod.finish(), [THIS_EXPR.callMethod("init", [createFlatArray(view.rootNodesOrAppElements), literalArr(view.nodes.map(function(node) {
      return node.renderNode;
    })), literalArr(view.disposables), literalArr(view.subscriptions)]).toStmt(), new ReturnStatement(resultExpr)]);
  }
  function generateDetectChangesMethod(view) {
    var stmts = [];
    if (view.detectChangesInInputsMethod.isEmpty() && view.updateContentQueriesMethod.isEmpty() && view.afterContentLifecycleCallbacksMethod.isEmpty() && view.detectChangesRenderPropertiesMethod.isEmpty() && view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty())
      return stmts;
    ListWrapper.addAll(stmts, view.detectChangesInInputsMethod.finish()), stmts.push(THIS_EXPR.callMethod("detectContentChildrenChanges", [DetectChangesVars.throwOnChange]).toStmt());
    var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
    afterContentStmts.length > 0 && stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterContentStmts)), ListWrapper.addAll(stmts, view.detectChangesRenderPropertiesMethod.finish()), stmts.push(THIS_EXPR.callMethod("detectViewChildrenChanges", [DetectChangesVars.throwOnChange]).toStmt());
    var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
    afterViewStmts.length > 0 && stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterViewStmts));
    var varStmts = [],
        readVars = findReadVarNames(stmts);
    return SetWrapper.has(readVars, DetectChangesVars.changed.name) && varStmts.push(DetectChangesVars.changed.set(literal(!0)).toDeclStmt(BOOL_TYPE)), SetWrapper.has(readVars, DetectChangesVars.changes.name) && varStmts.push(DetectChangesVars.changes.set(NULL_EXPR).toDeclStmt(new MapType(importType(Identifiers.SimpleChange)))), SetWrapper.has(readVars, DetectChangesVars.valUnwrapper.name) && varStmts.push(DetectChangesVars.valUnwrapper.set(importExpr(Identifiers.ValueUnwrapper).instantiate([])).toDeclStmt(null, [StmtModifier.Final])), varStmts.concat(stmts);
  }
  function addReturnValuefNotEmpty(statements, value) {
    return statements.length > 0 ? statements.concat([new ReturnStatement(value)]) : statements;
  }
  function getContextType(view) {
    return view.viewType === ViewType.COMPONENT ? importType(view.component.type) : DYNAMIC_TYPE;
  }
  function getChangeDetectionMode(view) {
    var mode;
    return mode = view.viewType === ViewType.COMPONENT ? isDefaultChangeDetectionStrategy(view.component.changeDetection) ? ChangeDetectorStatus.CheckAlways : ChangeDetectorStatus.CheckOnce : ChangeDetectorStatus.CheckAlways;
  }
  function _resolveViewStatements(compileResult) {
    return compileResult.dependencies.forEach(function(dep) {
      if (dep instanceof ViewFactoryDependency) {
        var vfd = dep;
        vfd.placeholder.moduleUrl = _ngfactoryModuleUrl(vfd.comp);
      } else if (dep instanceof ComponentFactoryDependency) {
        var cfd = dep;
        cfd.placeholder.name = _componentFactoryName(cfd.comp), cfd.placeholder.moduleUrl = _ngfactoryModuleUrl(cfd.comp);
      }
    }), compileResult.statements;
  }
  function _resolveStyleStatements(compileResult, fileSuffix) {
    return compileResult.dependencies.forEach(function(dep) {
      dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix);
    }), compileResult.statements;
  }
  function _ngfactoryModuleUrl(comp) {
    var urlWithSuffix = _splitLastSuffix(comp.moduleUrl);
    return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
  }
  function _componentFactoryName(comp) {
    return comp.name + "NgFactory";
  }
  function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
    return shim ? stylesheetUrl + ".shim" + suffix : "" + stylesheetUrl + suffix;
  }
  function _assertComponent(meta) {
    if (!meta.isComponent)
      throw new BaseException$1("Could not compile '" + meta.type.name + "' because it is not a component.");
  }
  function _splitLastSuffix(path) {
    var lastDot = path.lastIndexOf(".");
    return lastDot !== -1 ? [path.substring(0, lastDot), path.substring(lastDot)] : [path, ""];
  }
  function stripComments(input) {
    return StringWrapper.replaceAllMapped(input, _commentRe, function(_) {
      return "";
    });
  }
  function processRules(input, ruleCallback) {
    var inputWithEscapedBlocks = escapeBlocks(input),
        nextBlockIndex = 0;
    return StringWrapper.replaceAllMapped(inputWithEscapedBlocks.escapedString, _ruleRe, function(m) {
      var selector = m[2],
          content = "",
          suffix = m[4],
          contentPrefix = "";
      isPresent(m[4]) && m[4].startsWith("{" + BLOCK_PLACEHOLDER) && (content = inputWithEscapedBlocks.blocks[nextBlockIndex++], suffix = m[4].substring(BLOCK_PLACEHOLDER.length + 1), contentPrefix = "{");
      var rule = ruleCallback(new CssRule(selector, content));
      return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
    });
  }
  function escapeBlocks(input) {
    for (var inputParts = StringWrapper.split(input, _curlyRe),
        resultParts = [],
        escapedBlocks = [],
        bracketCount = 0,
        currentBlockParts = [],
        partIndex = 0; partIndex < inputParts.length; partIndex++) {
      var part = inputParts[partIndex];
      part == CLOSE_CURLY && bracketCount--, bracketCount > 0 ? currentBlockParts.push(part) : (currentBlockParts.length > 0 && (escapedBlocks.push(currentBlockParts.join("")), resultParts.push(BLOCK_PLACEHOLDER), currentBlockParts = []), resultParts.push(part)), part == OPEN_CURLY && bracketCount++;
    }
    return currentBlockParts.length > 0 && (escapedBlocks.push(currentBlockParts.join("")), resultParts.push(BLOCK_PLACEHOLDER)), new StringWithEscapedBlocks(resultParts.join(""), escapedBlocks);
  }
  function getStylesVarName(component) {
    var result = "styles";
    return component && (result += "_" + component.type.name), result;
  }
  function _cloneDirectiveWithTemplate(directive, template) {
    return new CompileDirectiveMetadata({
      type: directive.type,
      isComponent: directive.isComponent,
      selector: directive.selector,
      exportAs: directive.exportAs,
      changeDetection: directive.changeDetection,
      inputs: directive.inputs,
      outputs: directive.outputs,
      hostListeners: directive.hostListeners,
      hostProperties: directive.hostProperties,
      hostAttributes: directive.hostAttributes,
      lifecycleHooks: directive.lifecycleHooks,
      providers: directive.providers,
      viewProviders: directive.viewProviders,
      queries: directive.queries,
      viewQueries: directive.viewQueries,
      precompile: directive.precompile,
      template: template
    });
  }
  function assertArrayOfStrings(identifier, value) {
    if (_angular_core.isDevMode() && !isBlank(value)) {
      if (!isArray(value))
        throw new BaseException$1("Expected '" + identifier + "' to be an array of strings.");
      for (var i = 0; i < value.length; i += 1)
        if (!isString(value[i]))
          throw new BaseException$1("Expected '" + identifier + "' to be an array of strings.");
    }
  }
  function assertInterpolationSymbols(identifier, value) {
    if (!(!_angular_core.isDevMode() || isBlank(value) || isArray(value) && 2 == value.length))
      throw new BaseException$1("Expected '" + identifier + "' to be an array, [start, end].");
    if (_angular_core.isDevMode() && !isBlank(value)) {
      var start_1 = value[0],
          end_1 = value[1];
      INTERPOLATION_BLACKLIST_REGEXPS.forEach(function(regexp) {
        if (regexp.test(start_1) || regexp.test(end_1))
          throw new BaseException$1("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
      });
    }
  }
  function hasLifecycleHook(hook, token) {
    var lcInterface = LIFECYCLE_INTERFACES.get(hook),
        lcProp = LIFECYCLE_PROPS.get(hook);
    return reflector.hasLifecycleHook(token, lcInterface, lcProp);
  }
  function _isDirectiveMetadata(type) {
    return type instanceof _angular_core.DirectiveMetadata;
  }
  function _isPipeMetadata(type) {
    return type instanceof _angular_core.PipeMetadata;
  }
  function flattenDirectives(view, platformDirectives) {
    var directives = [];
    return isPresent(platformDirectives) && flattenArray(platformDirectives, directives), isPresent(view.directives) && flattenArray(view.directives, directives), directives;
  }
  function flattenPipes(view, platformPipes) {
    var pipes = [];
    return isPresent(platformPipes) && flattenArray(platformPipes, pipes), isPresent(view.pipes) && flattenArray(view.pipes, pipes), pipes;
  }
  function flattenArray(tree, out) {
    void 0 === out && (out = []);
    for (var i = 0; i < tree.length; i++) {
      var item = _angular_core.resolveForwardRef(tree[i]);
      isArray(item) ? flattenArray(item, out) : out.push(item);
    }
    return out;
  }
  function verifyNonBlankProviders(directiveType, providersTree, providersType) {
    var errMsg,
        flat = [];
    flattenArray(providersTree, flat);
    for (var i = 0; i < flat.length; i++)
      if (isBlank(flat[i]))
        throw errMsg = flat.map(function(provider) {
          return isBlank(provider) ? "?" : stringify(provider);
        }).join(", "), new BaseException$1("One or more of " + providersType + ' for "' + stringify(directiveType) + '" were not defined: [' + errMsg + "].");
    return providersTree;
  }
  function isStaticType(value) {
    return isStringMap(value) && isPresent(value.name) && isPresent(value.filePath);
  }
  function isValidType(value) {
    return isStaticType(value) || value instanceof Type;
  }
  function staticTypeModuleUrl(value) {
    return isStaticType(value) ? value.filePath : null;
  }
  function componentModuleUrl(reflector, type, cmpMetadata) {
    if (isStaticType(type))
      return staticTypeModuleUrl(type);
    if (isPresent(cmpMetadata.moduleId)) {
      var moduleId = cmpMetadata.moduleId,
          scheme = getUrlScheme(moduleId);
      return isPresent(scheme) && scheme.length > 0 ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
    }
    return reflector.importUri(type);
  }
  function convertToCompileValue(value) {
    return visitValue(value, new _CompileValueConverter, null);
  }
  function escapeSingleQuoteString(input, escapeDollar) {
    if (isBlank(input))
      return null;
    var body = StringWrapper.replaceAllMapped(input, _SINGLE_QUOTE_ESCAPE_STRING_RE, function(match) {
      return "$" == match[0] ? escapeDollar ? "\\$" : "$" : "\n" == match[0] ? "\\n" : "\r" == match[0] ? "\\r" : "\\" + match[0];
    });
    return "'" + body + "'";
  }
  function _createIndent(count) {
    for (var res = "",
        i = 0; i < count; i++)
      res += "  ";
    return res;
  }
  function jitStatements(sourceUrl, statements, resultVar) {
    var converter = new JitEmitterVisitor,
        ctx = EmitterVisitorContext.createRoot([resultVar]);
    return converter.visitAllStatements(statements, ctx), evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
  }
  function debugOutputAstAsDart(ast) {
    var asts,
        converter = new _DartEmitterVisitor(_debugModuleUrl),
        ctx = EmitterVisitorContext.createRoot([]);
    return asts = isArray(ast) ? ast : [ast], asts.forEach(function(ast) {
      if (ast instanceof Statement)
        ast.visitStatement(converter, ctx);
      else if (ast instanceof Expression)
        ast.visitExpression(converter, ctx);
      else {
        if (!(ast instanceof Type$1))
          throw new BaseException$1("Don't know how to print debug info for " + ast);
        ast.visitType(converter, ctx);
      }
    }), ctx.toSource();
  }
  function getSuperConstructorCallExpr(stmt) {
    if (stmt instanceof ExpressionStatement) {
      var expr = stmt.expr;
      if (expr instanceof InvokeFunctionExpr) {
        var fn = expr.fn;
        if (fn instanceof ReadVarExpr && fn.builtin === BuiltinVar.Super)
          return expr;
      }
    }
    return null;
  }
  function isConstType(type) {
    return isPresent(type) && type.hasModifier(TypeModifier.Const);
  }
  function debugOutputAstAsTypeScript(ast) {
    var asts,
        converter = new _TsEmitterVisitor(_debugModuleUrl$1),
        ctx = EmitterVisitorContext.createRoot([]);
    return asts = isArray(ast) ? ast : [ast], asts.forEach(function(ast) {
      if (ast instanceof Statement)
        ast.visitStatement(converter, ctx);
      else if (ast instanceof Expression)
        ast.visitExpression(converter, ctx);
      else {
        if (!(ast instanceof Type$1))
          throw new BaseException$1("Don't know how to print debug info for " + ast);
        ast.visitType(converter, ctx);
      }
    }), ctx.toSource();
  }
  function interpretStatements(statements, resultVar, instanceFactory) {
    var stmtsWithReturn = statements.concat([new ReturnStatement(variable(resultVar))]),
        ctx = new _ExecutionContext(null, null, null, null, new Map, new Map, new Map, new Map, instanceFactory),
        visitor = new StatementInterpreter,
        result = visitor.visitAllStatements(stmtsWithReturn, ctx);
    return isPresent(result) ? result.value : null;
  }
  function isDynamicInstance(instance) {
    return IS_DART ? instance instanceof DynamicInstance : isPresent(instance) && isPresent(instance.props) && isPresent(instance.getters) && isPresent(instance.methods);
  }
  function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
    for (var childCtx = ctx.createChildWihtLocalVars(),
        i = 0; i < varNames.length; i++)
      childCtx.vars.set(varNames[i], varValues[i]);
    var result = visitor.visitAllStatements(statements, childCtx);
    return isPresent(result) ? result.value : null;
  }
  function _declareFn(varNames, statements, ctx, visitor) {
    switch (varNames.length) {
      case 0:
        return function() {
          return _executeFunctionStatements(varNames, [], statements, ctx, visitor);
        };
      case 1:
        return function(d0) {
          return _executeFunctionStatements(varNames, [d0], statements, ctx, visitor);
        };
      case 2:
        return function(d0, d1) {
          return _executeFunctionStatements(varNames, [d0, d1], statements, ctx, visitor);
        };
      case 3:
        return function(d0, d1, d2) {
          return _executeFunctionStatements(varNames, [d0, d1, d2], statements, ctx, visitor);
        };
      case 4:
        return function(d0, d1, d2, d3) {
          return _executeFunctionStatements(varNames, [d0, d1, d2, d3], statements, ctx, visitor);
        };
      case 5:
        return function(d0, d1, d2, d3, d4) {
          return _executeFunctionStatements(varNames, [d0, d1, d2, d3, d4], statements, ctx, visitor);
        };
      case 6:
        return function(d0, d1, d2, d3, d4, d5) {
          return _executeFunctionStatements(varNames, [d0, d1, d2, d3, d4, d5], statements, ctx, visitor);
        };
      case 7:
        return function(d0, d1, d2, d3, d4, d5, d6) {
          return _executeFunctionStatements(varNames, [d0, d1, d2, d3, d4, d5, d6], statements, ctx, visitor);
        };
      case 8:
        return function(d0, d1, d2, d3, d4, d5, d6, d7) {
          return _executeFunctionStatements(varNames, [d0, d1, d2, d3, d4, d5, d6, d7], statements, ctx, visitor);
        };
      case 9:
        return function(d0, d1, d2, d3, d4, d5, d6, d7, d8) {
          return _executeFunctionStatements(varNames, [d0, d1, d2, d3, d4, d5, d6, d7, d8], statements, ctx, visitor);
        };
      case 10:
        return function(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9) {
          return _executeFunctionStatements(varNames, [d0, d1, d2, d3, d4, d5, d6, d7, d8, d9], statements, ctx, visitor);
        };
      default:
        throw new BaseException$1("Declaring functions with more than 10 arguments is not supported right now");
    }
  }
  function assertComponent(meta) {
    if (!meta.isComponent)
      throw new BaseException$1("Could not compile '" + meta.type.name + "' because it is not a component.");
  }
  function registerContext(ctx, specs) {
    for (var _i = 0,
        specs_1 = specs; _i < specs_1.length; _i++) {
      var spec = specs_1[_i];
      SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
    }
  }
  function id(m) {
    var meaning = isPresent(m.meaning) ? m.meaning : "",
        content = isPresent(m.content) ? m.content : "";
    return escape("$ng|" + meaning + "|" + content);
  }
  function partition(nodes, errors, implicitTags) {
    for (var parts = [],
        i = 0; i < nodes.length; ++i) {
      var node = nodes[i],
          msgNodes = [];
      if (_isOpeningComment(node)) {
        for (var i18n = node.value.replace(/^i18n:?/, "").trim(); ++i < nodes.length && !_isClosingComment(nodes[i]); )
          msgNodes.push(nodes[i]);
        if (i === nodes.length) {
          errors.push(new I18nError(node.sourceSpan, "Missing closing 'i18n' comment."));
          break;
        }
        parts.push(new Part(null, null, msgNodes, i18n, (!0)));
      } else if (node instanceof HtmlElementAst) {
        var i18n = _findI18nAttr(node),
            hasI18n = isPresent(i18n) || implicitTags.indexOf(node.name) > -1;
        parts.push(new Part(node, null, node.children, isPresent(i18n) ? i18n.value : null, hasI18n));
      } else
        node instanceof HtmlTextAst && parts.push(new Part(null, node, null, null, (!1)));
    }
    return parts;
  }
  function _isOpeningComment(n) {
    return n instanceof HtmlCommentAst && isPresent(n.value) && n.value.startsWith("i18n");
  }
  function _isClosingComment(n) {
    return n instanceof HtmlCommentAst && isPresent(n.value) && "/i18n" === n.value;
  }
  function _findI18nAttr(p) {
    for (var attrs = p.attrs,
        i = 0; i < attrs.length; i++)
      if (attrs[i].name === I18N_ATTR)
        return attrs[i];
    return null;
  }
  function meaning(i18n) {
    return isBlank(i18n) || "" == i18n ? null : i18n.split("|")[0];
  }
  function description(i18n) {
    if (isBlank(i18n) || "" == i18n)
      return null;
    var parts = i18n.split("|", 2);
    return parts.length > 1 ? parts[1] : null;
  }
  function messageFromI18nAttribute(parser, interpolationConfig, p, i18nAttr) {
    var expectedName = i18nAttr.name.substring(5),
        attr = p.attrs.find(function(a) {
          return a.name == expectedName;
        });
    if (attr)
      return messageFromAttribute(parser, interpolationConfig, attr, meaning(i18nAttr.value), description(i18nAttr.value));
    throw new I18nError(p.sourceSpan, "Missing attribute '" + expectedName + "'.");
  }
  function messageFromAttribute(parser, interpolationConfig, attr, meaning, description) {
    void 0 === meaning && (meaning = null), void 0 === description && (description = null);
    var value = removeInterpolation(attr.value, attr.sourceSpan, parser, interpolationConfig);
    return new Message(value, meaning, description);
  }
  function removeInterpolation(value, source, parser, interpolationConfig) {
    try {
      var parsed = parser.splitInterpolation(value, source.toString(), interpolationConfig),
          usedNames = new Map;
      if (isPresent(parsed)) {
        for (var res = "",
            i = 0; i < parsed.strings.length; ++i)
          if (res += parsed.strings[i], i != parsed.strings.length - 1) {
            var customPhName = getPhNameFromBinding(parsed.expressions[i], i);
            customPhName = dedupePhName(usedNames, customPhName), res += '<ph name="' + customPhName + '"/>';
          }
        return res;
      }
      return value;
    } catch (e) {
      return value;
    }
  }
  function getPhNameFromBinding(input, index) {
    var customPhMatch = StringWrapper.split(input, CUSTOM_PH_EXP);
    return customPhMatch.length > 1 ? customPhMatch[1] : "" + index;
  }
  function dedupePhName(usedNames, name) {
    var duplicateNameCount = usedNames.get(name);
    return isPresent(duplicateNameCount) ? (usedNames.set(name, duplicateNameCount + 1), name + "_" + duplicateNameCount) : (usedNames.set(name, 1), name);
  }
  function stringifyNodes(nodes, parser, interpolationConfig) {
    var visitor = new _StringifyVisitor(parser, interpolationConfig);
    return htmlVisitAll(visitor, nodes).join("");
  }
  function expandNodes(nodes) {
    var expander = new _Expander;
    return new ExpansionResult(htmlVisitAll(expander, nodes), expander.isExpanded, expander.errors);
  }
  function _expandPluralForm(ast, errors) {
    var children = ast.cases.map(function(c) {
      PLURAL_CASES.indexOf(c.value) != -1 || c.value.match(/^=\d+$/) || errors.push(new I18nError(c.valueSourceSpan, 'Plural cases should be "=<number>" or one of ' + PLURAL_CASES.join(", ")));
      var expansionResult = expandNodes(c.expression);
      return errors.push.apply(errors, expansionResult.errors), new HtmlElementAst("template", [new HtmlAttrAst("ngPluralCase", "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    }),
        switchAttr = new HtmlAttrAst("[ngPlural]", ast.switchValue, ast.switchValueSourceSpan);
    return new HtmlElementAst("ng-container", [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }
  function _expandDefaultForm(ast, errors) {
    var children = ast.cases.map(function(c) {
      var expansionResult = expandNodes(c.expression);
      return errors.push.apply(errors, expansionResult.errors), new HtmlElementAst("template", [new HtmlAttrAst("ngSwitchCase", "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    }),
        switchAttr = new HtmlAttrAst("[ngSwitch]", ast.switchValue, ast.switchValueSourceSpan);
    return new HtmlElementAst("ng-container", [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }
  function removeDuplicates$1(messages) {
    var uniq = {};
    return messages.forEach(function(m) {
      StringMapWrapper.contains(uniq, id(m)) || (uniq[id(m)] = m);
    }), StringMapWrapper.values(uniq);
  }
  function serializeXmb(messages) {
    var ms = messages.map(function(m) {
      return _serializeMessage(m);
    }).join("");
    return "<message-bundle>" + ms + "</message-bundle>";
  }
  function deserializeXmb(content, url) {
    var parser = new HtmlParser,
        normalizedContent = _expandPlaceholder(content.trim()),
        parsed = parser.parse(normalizedContent, url);
    if (parsed.errors.length > 0)
      return new XmbDeserializationResult(null, {}, parsed.errors);
    if (_checkRootElement(parsed.rootNodes))
      return new XmbDeserializationResult(null, {}, [new XmbDeserializationError(null, 'Missing element "' + _BUNDLE_ELEMENT + '"')]);
    var bundleEl = parsed.rootNodes[0],
        errors = [],
        messages = {};
    return _createMessages(bundleEl.children, messages, errors), 0 == errors.length ? new XmbDeserializationResult(normalizedContent, messages, []) : new XmbDeserializationResult(null, {}, errors);
  }
  function _checkRootElement(nodes) {
    return nodes.length < 1 || !(nodes[0] instanceof HtmlElementAst) || nodes[0].name != _BUNDLE_ELEMENT;
  }
  function _createMessages(nodes, messages, errors) {
    nodes.forEach(function(item) {
      if (item instanceof HtmlElementAst) {
        var msg = item;
        if (msg.name != _MSG_ELEMENT)
          return void errors.push(new XmbDeserializationError(item.sourceSpan, 'Unexpected element "' + msg.name + '"'));
        var id_1 = _id(msg);
        if (isBlank(id_1))
          return void errors.push(new XmbDeserializationError(item.sourceSpan, '"' + _ID_ATTR + '" attribute is missing'));
        messages[id_1] = msg.children;
      }
    });
  }
  function _id(el) {
    var ids = el.attrs.filter(function(a) {
      return a.name == _ID_ATTR;
    });
    return ids.length > 0 ? ids[0].value : null;
  }
  function _serializeMessage(m) {
    var desc = isPresent(m.description) ? " desc='" + _escapeXml(m.description) + "'" : "",
        meaning = isPresent(m.meaning) ? " meaning='" + _escapeXml(m.meaning) + "'" : "";
    return "<msg id='" + id(m) + "'" + desc + meaning + ">" + m.content + "</msg>";
  }
  function _expandPlaceholder(input) {
    return RegExpWrapper.replaceAll(_PLACEHOLDER_REGEXP, input, function(match) {
      var nameWithQuotes = match[2];
      return "<ph name=" + nameWithQuotes + "></ph>";
    });
  }
  function _escapeXml(value) {
    return _XML_ESCAPED_CHARS.reduce(function(value, escape) {
      return value.replace(escape[0], escape[1]);
    }, value);
  }
  var globalScope;
  globalScope = "undefined" == typeof window ? "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : global : window;
  var IS_DART = !1,
      global$1 = globalScope,
      Type = Function;
  global$1.assert = function(condition) {};
  var STRING_MAP_PROTO = Object.getPrototypeOf({}),
      StringWrapper = function() {
        function StringWrapper() {}
        return StringWrapper.fromCharCode = function(code) {
          return String.fromCharCode(code);
        }, StringWrapper.charCodeAt = function(s, index) {
          return s.charCodeAt(index);
        }, StringWrapper.split = function(s, regExp) {
          return s.split(regExp);
        }, StringWrapper.equals = function(s, s2) {
          return s === s2;
        }, StringWrapper.stripLeft = function(s, charVal) {
          if (s && s.length) {
            for (var pos = 0,
                i = 0; i < s.length && s[i] == charVal; i++)
              pos++;
            s = s.substring(pos);
          }
          return s;
        }, StringWrapper.stripRight = function(s, charVal) {
          if (s && s.length) {
            for (var pos = s.length,
                i = s.length - 1; i >= 0 && s[i] == charVal; i--)
              pos--;
            s = s.substring(0, pos);
          }
          return s;
        }, StringWrapper.replace = function(s, from, replace) {
          return s.replace(from, replace);
        }, StringWrapper.replaceAll = function(s, from, replace) {
          return s.replace(from, replace);
        }, StringWrapper.slice = function(s, from, to) {
          return void 0 === from && (from = 0), void 0 === to && (to = null), s.slice(from, null === to ? void 0 : to);
        }, StringWrapper.replaceAllMapped = function(s, from, cb) {
          return s.replace(from, function() {
            for (var matches = [],
                _i = 0; _i < arguments.length; _i++)
              matches[_i - 0] = arguments[_i];
            return matches.splice(-2, 2), cb(matches);
          });
        }, StringWrapper.contains = function(s, substr) {
          return s.indexOf(substr) != -1;
        }, StringWrapper.compare = function(a, b) {
          return a < b ? -1 : a > b ? 1 : 0;
        }, StringWrapper;
      }(),
      StringJoiner = function() {
        function StringJoiner(parts) {
          void 0 === parts && (parts = []), this.parts = parts;
        }
        return StringJoiner.prototype.add = function(part) {
          this.parts.push(part);
        }, StringJoiner.prototype.toString = function() {
          return this.parts.join("");
        }, StringJoiner;
      }(),
      NumberParseError = function(_super) {
        function NumberParseError(message) {
          _super.call(this), this.message = message;
        }
        return __extends(NumberParseError, _super), NumberParseError.prototype.toString = function() {
          return this.message;
        }, NumberParseError;
      }(Error),
      NumberWrapper = function() {
        function NumberWrapper() {}
        return NumberWrapper.toFixed = function(n, fractionDigits) {
          return n.toFixed(fractionDigits);
        }, NumberWrapper.equal = function(a, b) {
          return a === b;
        }, NumberWrapper.parseIntAutoRadix = function(text) {
          var result = parseInt(text);
          if (isNaN(result))
            throw new NumberParseError("Invalid integer literal when parsing " + text);
          return result;
        }, NumberWrapper.parseInt = function(text, radix) {
          if (10 == radix) {
            if (/^(\-|\+)?[0-9]+$/.test(text))
              return parseInt(text, radix);
          } else if (16 == radix) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text))
              return parseInt(text, radix);
          } else {
            var result = parseInt(text, radix);
            if (!isNaN(result))
              return result;
          }
          throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
        }, NumberWrapper.parseFloat = function(text) {
          return parseFloat(text);
        }, Object.defineProperty(NumberWrapper, "NaN", {
          get: function() {
            return NaN;
          },
          enumerable: !0,
          configurable: !0
        }), NumberWrapper.isNumeric = function(value) {
          return !isNaN(value - parseFloat(value));
        }, NumberWrapper.isNaN = function(value) {
          return isNaN(value);
        }, NumberWrapper.isInteger = function(value) {
          return Number.isInteger(value);
        }, NumberWrapper;
      }(),
      RegExpWrapper = function() {
        function RegExpWrapper() {}
        return RegExpWrapper.create = function(regExpStr, flags) {
          return void 0 === flags && (flags = ""), flags = flags.replace(/g/g, ""), new global$1.RegExp(regExpStr, flags + "g");
        }, RegExpWrapper.firstMatch = function(regExp, input) {
          return regExp.lastIndex = 0, regExp.exec(input);
        }, RegExpWrapper.test = function(regExp, input) {
          return regExp.lastIndex = 0, regExp.test(input);
        }, RegExpWrapper.matcher = function(regExp, input) {
          return regExp.lastIndex = 0, {
            re: regExp,
            input: input
          };
        }, RegExpWrapper.replaceAll = function(regExp, input, replace) {
          var c = regExp.exec(input),
              res = "";
          regExp.lastIndex = 0;
          for (var prev = 0; c; )
            res += input.substring(prev, c.index), res += replace(c), prev = c.index + c[0].length, regExp.lastIndex = prev, c = regExp.exec(input);
          return res += input.substring(prev);
        }, RegExpWrapper;
      }(),
      RegExpMatcherWrapper = function() {
        function RegExpMatcherWrapper() {}
        return RegExpMatcherWrapper.next = function(matcher) {
          return matcher.re.exec(matcher.input);
        }, RegExpMatcherWrapper;
      }(),
      FunctionWrapper = function() {
        function FunctionWrapper() {}
        return FunctionWrapper.apply = function(fn, posArgs) {
          return fn.apply(null, posArgs);
        }, FunctionWrapper.bind = function(fn, scope) {
          return fn.bind(scope);
        }, FunctionWrapper;
      }(),
      TextAst = function() {
        function TextAst(value, ngContentIndex, sourceSpan) {
          this.value = value, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan;
        }
        return TextAst.prototype.visit = function(visitor, context) {
          return visitor.visitText(this, context);
        }, TextAst;
      }(),
      BoundTextAst = function() {
        function BoundTextAst(value, ngContentIndex, sourceSpan) {
          this.value = value, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan;
        }
        return BoundTextAst.prototype.visit = function(visitor, context) {
          return visitor.visitBoundText(this, context);
        }, BoundTextAst;
      }(),
      AttrAst = function() {
        function AttrAst(name, value, sourceSpan) {
          this.name = name, this.value = value, this.sourceSpan = sourceSpan;
        }
        return AttrAst.prototype.visit = function(visitor, context) {
          return visitor.visitAttr(this, context);
        }, AttrAst;
      }(),
      BoundElementPropertyAst = function() {
        function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {
          this.name = name, this.type = type, this.securityContext = securityContext, this.value = value, this.unit = unit, this.sourceSpan = sourceSpan;
        }
        return BoundElementPropertyAst.prototype.visit = function(visitor, context) {
          return visitor.visitElementProperty(this, context);
        }, BoundElementPropertyAst;
      }(),
      BoundEventAst = function() {
        function BoundEventAst(name, target, handler, sourceSpan) {
          this.name = name, this.target = target, this.handler = handler, this.sourceSpan = sourceSpan;
        }
        return BoundEventAst.prototype.visit = function(visitor, context) {
          return visitor.visitEvent(this, context);
        }, Object.defineProperty(BoundEventAst.prototype, "fullName", {
          get: function() {
            return isPresent(this.target) ? this.target + ":" + this.name : this.name;
          },
          enumerable: !0,
          configurable: !0
        }), BoundEventAst;
      }(),
      ReferenceAst = function() {
        function ReferenceAst(name, value, sourceSpan) {
          this.name = name, this.value = value, this.sourceSpan = sourceSpan;
        }
        return ReferenceAst.prototype.visit = function(visitor, context) {
          return visitor.visitReference(this, context);
        }, ReferenceAst;
      }(),
      VariableAst = function() {
        function VariableAst(name, value, sourceSpan) {
          this.name = name, this.value = value, this.sourceSpan = sourceSpan;
        }
        return VariableAst.prototype.visit = function(visitor, context) {
          return visitor.visitVariable(this, context);
        }, VariableAst;
      }(),
      ElementAst = function() {
        function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
          this.name = name, this.attrs = attrs, this.inputs = inputs, this.outputs = outputs, this.references = references, this.directives = directives, this.providers = providers, this.hasViewContainer = hasViewContainer, this.children = children, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan;
        }
        return ElementAst.prototype.visit = function(visitor, context) {
          return visitor.visitElement(this, context);
        }, ElementAst;
      }(),
      EmbeddedTemplateAst = function() {
        function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
          this.attrs = attrs, this.outputs = outputs, this.references = references, this.variables = variables, this.directives = directives, this.providers = providers, this.hasViewContainer = hasViewContainer, this.children = children, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan;
        }
        return EmbeddedTemplateAst.prototype.visit = function(visitor, context) {
          return visitor.visitEmbeddedTemplate(this, context);
        }, EmbeddedTemplateAst;
      }(),
      BoundDirectivePropertyAst = function() {
        function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
          this.directiveName = directiveName, this.templateName = templateName, this.value = value, this.sourceSpan = sourceSpan;
        }
        return BoundDirectivePropertyAst.prototype.visit = function(visitor, context) {
          return visitor.visitDirectiveProperty(this, context);
        }, BoundDirectivePropertyAst;
      }(),
      DirectiveAst = function() {
        function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
          this.directive = directive, this.inputs = inputs, this.hostProperties = hostProperties, this.hostEvents = hostEvents, this.sourceSpan = sourceSpan;
        }
        return DirectiveAst.prototype.visit = function(visitor, context) {
          return visitor.visitDirective(this, context);
        }, DirectiveAst;
      }(),
      ProviderAst = function() {
        function ProviderAst(token, multiProvider, eager, providers, providerType, sourceSpan) {
          this.token = token, this.multiProvider = multiProvider, this.eager = eager, this.providers = providers, this.providerType = providerType, this.sourceSpan = sourceSpan;
        }
        return ProviderAst.prototype.visit = function(visitor, context) {
          return null;
        }, ProviderAst;
      }();
  exports.ProviderAstType, function(ProviderAstType) {
    ProviderAstType[ProviderAstType.PublicService = 0] = "PublicService", ProviderAstType[ProviderAstType.PrivateService = 1] = "PrivateService", ProviderAstType[ProviderAstType.Component = 2] = "Component", ProviderAstType[ProviderAstType.Directive = 3] = "Directive", ProviderAstType[ProviderAstType.Builtin = 4] = "Builtin";
  }(exports.ProviderAstType || (exports.ProviderAstType = {}));
  var NgContentAst = function() {
    function NgContentAst(index, ngContentIndex, sourceSpan) {
      this.index = index, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan;
    }
    return NgContentAst.prototype.visit = function(visitor, context) {
      return visitor.visitNgContent(this, context);
    }, NgContentAst;
  }();
  exports.PropertyBindingType, function(PropertyBindingType) {
    PropertyBindingType[PropertyBindingType.Property = 0] = "Property", PropertyBindingType[PropertyBindingType.Attribute = 1] = "Attribute", PropertyBindingType[PropertyBindingType.Class = 2] = "Class", PropertyBindingType[PropertyBindingType.Style = 3] = "Style", PropertyBindingType[PropertyBindingType.Animation = 4] = "Animation";
  }(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
  var TokenType,
      isDefaultChangeDetectionStrategy = _angular_core.__core_private__.isDefaultChangeDetectionStrategy,
      ChangeDetectorStatus = _angular_core.__core_private__.ChangeDetectorStatus,
      CHANGE_DETECTION_STRATEGY_VALUES = _angular_core.__core_private__.CHANGE_DETECTION_STRATEGY_VALUES,
      LifecycleHooks = _angular_core.__core_private__.LifecycleHooks,
      LIFECYCLE_HOOKS_VALUES = _angular_core.__core_private__.LIFECYCLE_HOOKS_VALUES,
      ReflectorReader = _angular_core.__core_private__.ReflectorReader,
      AppElement = _angular_core.__core_private__.AppElement,
      CodegenComponentFactoryResolver = _angular_core.__core_private__.CodegenComponentFactoryResolver,
      AppView = _angular_core.__core_private__.AppView,
      DebugAppView = _angular_core.__core_private__.DebugAppView,
      ViewType = _angular_core.__core_private__.ViewType,
      MAX_INTERPOLATION_VALUES = _angular_core.__core_private__.MAX_INTERPOLATION_VALUES,
      checkBinding = _angular_core.__core_private__.checkBinding,
      flattenNestedViewRenderNodes = _angular_core.__core_private__.flattenNestedViewRenderNodes,
      interpolate = _angular_core.__core_private__.interpolate,
      ViewUtils = _angular_core.__core_private__.ViewUtils,
      VIEW_ENCAPSULATION_VALUES = _angular_core.__core_private__.VIEW_ENCAPSULATION_VALUES,
      DebugContext = _angular_core.__core_private__.DebugContext,
      StaticNodeDebugInfo = _angular_core.__core_private__.StaticNodeDebugInfo,
      devModeEqual = _angular_core.__core_private__.devModeEqual,
      uninitialized = _angular_core.__core_private__.uninitialized,
      ValueUnwrapper = _angular_core.__core_private__.ValueUnwrapper,
      TemplateRef_ = _angular_core.__core_private__.TemplateRef_,
      SecurityContext = _angular_core.__core_private__.SecurityContext,
      createProvider = _angular_core.__core_private__.createProvider,
      isProviderLiteral = _angular_core.__core_private__.isProviderLiteral,
      EMPTY_ARRAY = _angular_core.__core_private__.EMPTY_ARRAY,
      EMPTY_MAP = _angular_core.__core_private__.EMPTY_MAP,
      pureProxy1 = _angular_core.__core_private__.pureProxy1,
      pureProxy2 = _angular_core.__core_private__.pureProxy2,
      pureProxy3 = _angular_core.__core_private__.pureProxy3,
      pureProxy4 = _angular_core.__core_private__.pureProxy4,
      pureProxy5 = _angular_core.__core_private__.pureProxy5,
      pureProxy6 = _angular_core.__core_private__.pureProxy6,
      pureProxy7 = _angular_core.__core_private__.pureProxy7,
      pureProxy8 = _angular_core.__core_private__.pureProxy8,
      pureProxy9 = _angular_core.__core_private__.pureProxy9,
      pureProxy10 = _angular_core.__core_private__.pureProxy10,
      castByValue = _angular_core.__core_private__.castByValue,
      Console = _angular_core.__core_private__.Console,
      reflector = _angular_core.__core_private__.reflector,
      NoOpAnimationPlayer_ = _angular_core.__core_private__.NoOpAnimationPlayer,
      AnimationSequencePlayer_ = _angular_core.__core_private__.AnimationSequencePlayer,
      AnimationGroupPlayer_ = _angular_core.__core_private__.AnimationGroupPlayer,
      AnimationKeyframe_ = _angular_core.__core_private__.AnimationKeyframe,
      AnimationStyles_ = _angular_core.__core_private__.AnimationStyles,
      ANY_STATE = _angular_core.__core_private__.ANY_STATE,
      DEFAULT_STATE = _angular_core.__core_private__.DEFAULT_STATE,
      EMPTY_ANIMATION_STATE = _angular_core.__core_private__.EMPTY_STATE,
      FILL_STYLE_FLAG = _angular_core.__core_private__.FILL_STYLE_FLAG,
      impBalanceAnimationStyles = _angular_core.__core_private__.prepareFinalAnimationStyles,
      impBalanceAnimationKeyframes = _angular_core.__core_private__.balanceAnimationKeyframes,
      impClearStyles = _angular_core.__core_private__.clearStyles,
      impCollectAndResolveStyles = _angular_core.__core_private__.collectAndResolveStyles,
      impRenderStyles = _angular_core.__core_private__.renderStyles,
      Map$1 = global$1.Map,
      Set$1 = global$1.Set,
      createMapFromPairs = function() {
        try {
          if (1 === new Map$1([[1, 2]]).size)
            return function(pairs) {
              return new Map$1(pairs);
            };
        } catch (e) {}
        return function(pairs) {
          for (var map = new Map$1,
              i = 0; i < pairs.length; i++) {
            var pair = pairs[i];
            map.set(pair[0], pair[1]);
          }
          return map;
        };
      }(),
      createMapFromMap = function() {
        try {
          if (new Map$1(new Map$1))
            return function(m) {
              return new Map$1(m);
            };
        } catch (e) {}
        return function(m) {
          var map = new Map$1;
          return m.forEach(function(v, k) {
            map.set(k, v);
          }), map;
        };
      }(),
      _clearValues = function() {
        return (new Map$1).keys().next ? function(m) {
          for (var k,
              keyIterator = m.keys(); !(k = keyIterator.next()).done; )
            m.set(k.value, null);
        } : function(m) {
          m.forEach(function(v, k) {
            m.set(k, null);
          });
        };
      }(),
      _arrayFromMap = function() {
        try {
          if ((new Map$1).values().next)
            return function(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
        } catch (e) {}
        return function(m, getValues) {
          var res = ListWrapper.createFixedSize(m.size),
              i = 0;
          return m.forEach(function(v, k) {
            res[i] = getValues ? v : k, i++;
          }), res;
        };
      }(),
      MapWrapper = function() {
        function MapWrapper() {}
        return MapWrapper.clone = function(m) {
          return createMapFromMap(m);
        }, MapWrapper.createFromStringMap = function(stringMap) {
          var result = new Map$1;
          for (var prop in stringMap)
            result.set(prop, stringMap[prop]);
          return result;
        }, MapWrapper.toStringMap = function(m) {
          var r = {};
          return m.forEach(function(v, k) {
            return r[k] = v;
          }), r;
        }, MapWrapper.createFromPairs = function(pairs) {
          return createMapFromPairs(pairs);
        }, MapWrapper.clearValues = function(m) {
          _clearValues(m);
        }, MapWrapper.iterable = function(m) {
          return m;
        }, MapWrapper.keys = function(m) {
          return _arrayFromMap(m, !1);
        }, MapWrapper.values = function(m) {
          return _arrayFromMap(m, !0);
        }, MapWrapper;
      }(),
      StringMapWrapper = function() {
        function StringMapWrapper() {}
        return StringMapWrapper.create = function() {
          return {};
        }, StringMapWrapper.contains = function(map, key) {
          return map.hasOwnProperty(key);
        }, StringMapWrapper.get = function(map, key) {
          return map.hasOwnProperty(key) ? map[key] : void 0;
        }, StringMapWrapper.set = function(map, key, value) {
          map[key] = value;
        }, StringMapWrapper.keys = function(map) {
          return Object.keys(map);
        }, StringMapWrapper.values = function(map) {
          return Object.keys(map).reduce(function(r, a) {
            return r.push(map[a]), r;
          }, []);
        }, StringMapWrapper.isEmpty = function(map) {
          for (var prop in map)
            return !1;
          return !0;
        }, StringMapWrapper.delete = function(map, key) {
          delete map[key];
        }, StringMapWrapper.forEach = function(map, callback) {
          for (var prop in map)
            map.hasOwnProperty(prop) && callback(map[prop], prop);
        }, StringMapWrapper.merge = function(m1, m2) {
          var m = {};
          for (var attr in m1)
            m1.hasOwnProperty(attr) && (m[attr] = m1[attr]);
          for (var attr in m2)
            m2.hasOwnProperty(attr) && (m[attr] = m2[attr]);
          return m;
        }, StringMapWrapper.equals = function(m1, m2) {
          var k1 = Object.keys(m1),
              k2 = Object.keys(m2);
          if (k1.length != k2.length)
            return !1;
          for (var key,
              i = 0; i < k1.length; i++)
            if (key = k1[i], m1[key] !== m2[key])
              return !1;
          return !0;
        }, StringMapWrapper;
      }(),
      ListWrapper = function() {
        function ListWrapper() {}
        return ListWrapper.createFixedSize = function(size) {
          return new Array(size);
        }, ListWrapper.createGrowableSize = function(size) {
          return new Array(size);
        }, ListWrapper.clone = function(array) {
          return array.slice(0);
        }, ListWrapper.forEachWithIndex = function(array, fn) {
          for (var i = 0; i < array.length; i++)
            fn(array[i], i);
        }, ListWrapper.first = function(array) {
          return array ? array[0] : null;
        }, ListWrapper.last = function(array) {
          return array && 0 != array.length ? array[array.length - 1] : null;
        }, ListWrapper.indexOf = function(array, value, startIndex) {
          return void 0 === startIndex && (startIndex = 0), array.indexOf(value, startIndex);
        }, ListWrapper.contains = function(list, el) {
          return list.indexOf(el) !== -1;
        }, ListWrapper.reversed = function(array) {
          var a = ListWrapper.clone(array);
          return a.reverse();
        }, ListWrapper.concat = function(a, b) {
          return a.concat(b);
        }, ListWrapper.insert = function(list, index, value) {
          list.splice(index, 0, value);
        }, ListWrapper.removeAt = function(list, index) {
          var res = list[index];
          return list.splice(index, 1), res;
        }, ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        }, ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          return index > -1 && (list.splice(index, 1), !0);
        }, ListWrapper.clear = function(list) {
          list.length = 0;
        }, ListWrapper.isEmpty = function(list) {
          return 0 == list.length;
        }, ListWrapper.fill = function(list, value, start, end) {
          void 0 === start && (start = 0), void 0 === end && (end = null), list.fill(value, start, null === end ? list.length : end);
        }, ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return !1;
          for (var i = 0; i < a.length; ++i)
            if (a[i] !== b[i])
              return !1;
          return !0;
        }, ListWrapper.slice = function(l, from, to) {
          return void 0 === from && (from = 0), void 0 === to && (to = null), l.slice(from, null === to ? void 0 : to);
        }, ListWrapper.splice = function(l, from, length) {
          return l.splice(from, length);
        }, ListWrapper.sort = function(l, compareFn) {
          isPresent(compareFn) ? l.sort(compareFn) : l.sort();
        }, ListWrapper.toString = function(l) {
          return l.toString();
        }, ListWrapper.toJSON = function(l) {
          return JSON.stringify(l);
        }, ListWrapper.maximum = function(list, predicate) {
          if (0 == list.length)
            return null;
          for (var solution = null,
              maxValue = -(1 / 0),
              index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (!isBlank(candidate)) {
              var candidateValue = predicate(candidate);
              candidateValue > maxValue && (solution = candidate, maxValue = candidateValue);
            }
          }
          return solution;
        }, ListWrapper.flatten = function(list) {
          var target = [];
          return _flattenArray(list, target), target;
        }, ListWrapper.addAll = function(list, source) {
          for (var i = 0; i < source.length; i++)
            list.push(source[i]);
        }, ListWrapper;
      }(),
      createSetFromList = function() {
        var test = new Set$1([1, 2, 3]);
        return 3 === test.size ? function(lst) {
          return new Set$1(lst);
        } : function(lst) {
          var res = new Set$1(lst);
          if (res.size !== lst.length)
            for (var i = 0; i < lst.length; i++)
              res.add(lst[i]);
          return res;
        };
      }(),
      SetWrapper = function() {
        function SetWrapper() {}
        return SetWrapper.createFromList = function(lst) {
          return createSetFromList(lst);
        }, SetWrapper.has = function(s, key) {
          return s.has(key);
        }, SetWrapper.delete = function(m, k) {
          m.delete(k);
        }, SetWrapper;
      }(),
      BaseException$1 = function(_super) {
        function BaseException$1(message) {
          void 0 === message && (message = "--"), _super.call(this, message), this.message = message, this.stack = new Error(message).stack;
        }
        return __extends(BaseException$1, _super), BaseException$1.prototype.toString = function() {
          return this.message;
        }, BaseException$1;
      }(Error),
      AST = function() {
        function AST() {}
        return AST.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), null;
        }, AST.prototype.toString = function() {
          return "AST";
        }, AST;
      }(),
      Quote = function(_super) {
        function Quote(prefix, uninterpretedExpression, location) {
          _super.call(this), this.prefix = prefix, this.uninterpretedExpression = uninterpretedExpression, this.location = location;
        }
        return __extends(Quote, _super), Quote.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitQuote(this, context);
        }, Quote.prototype.toString = function() {
          return "Quote";
        }, Quote;
      }(AST),
      EmptyExpr = function(_super) {
        function EmptyExpr() {
          _super.apply(this, arguments);
        }
        return __extends(EmptyExpr, _super), EmptyExpr.prototype.visit = function(visitor, context) {
          void 0 === context && (context = null);
        }, EmptyExpr;
      }(AST),
      ImplicitReceiver = function(_super) {
        function ImplicitReceiver() {
          _super.apply(this, arguments);
        }
        return __extends(ImplicitReceiver, _super), ImplicitReceiver.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitImplicitReceiver(this, context);
        }, ImplicitReceiver;
      }(AST),
      Chain = function(_super) {
        function Chain(expressions) {
          _super.call(this), this.expressions = expressions;
        }
        return __extends(Chain, _super), Chain.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitChain(this, context);
        }, Chain;
      }(AST),
      Conditional = function(_super) {
        function Conditional(condition, trueExp, falseExp) {
          _super.call(this), this.condition = condition, this.trueExp = trueExp, this.falseExp = falseExp;
        }
        return __extends(Conditional, _super), Conditional.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitConditional(this, context);
        }, Conditional;
      }(AST),
      PropertyRead = function(_super) {
        function PropertyRead(receiver, name) {
          _super.call(this), this.receiver = receiver, this.name = name;
        }
        return __extends(PropertyRead, _super), PropertyRead.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitPropertyRead(this, context);
        }, PropertyRead;
      }(AST),
      PropertyWrite = function(_super) {
        function PropertyWrite(receiver, name, value) {
          _super.call(this), this.receiver = receiver, this.name = name, this.value = value;
        }
        return __extends(PropertyWrite, _super), PropertyWrite.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitPropertyWrite(this, context);
        }, PropertyWrite;
      }(AST),
      SafePropertyRead = function(_super) {
        function SafePropertyRead(receiver, name) {
          _super.call(this), this.receiver = receiver, this.name = name;
        }
        return __extends(SafePropertyRead, _super), SafePropertyRead.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitSafePropertyRead(this, context);
        }, SafePropertyRead;
      }(AST),
      KeyedRead = function(_super) {
        function KeyedRead(obj, key) {
          _super.call(this), this.obj = obj, this.key = key;
        }
        return __extends(KeyedRead, _super), KeyedRead.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitKeyedRead(this, context);
        }, KeyedRead;
      }(AST),
      KeyedWrite = function(_super) {
        function KeyedWrite(obj, key, value) {
          _super.call(this), this.obj = obj, this.key = key, this.value = value;
        }
        return __extends(KeyedWrite, _super), KeyedWrite.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitKeyedWrite(this, context);
        }, KeyedWrite;
      }(AST),
      BindingPipe = function(_super) {
        function BindingPipe(exp, name, args) {
          _super.call(this), this.exp = exp, this.name = name, this.args = args;
        }
        return __extends(BindingPipe, _super), BindingPipe.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitPipe(this, context);
        }, BindingPipe;
      }(AST),
      LiteralPrimitive = function(_super) {
        function LiteralPrimitive(value) {
          _super.call(this), this.value = value;
        }
        return __extends(LiteralPrimitive, _super), LiteralPrimitive.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitLiteralPrimitive(this, context);
        }, LiteralPrimitive;
      }(AST),
      LiteralArray = function(_super) {
        function LiteralArray(expressions) {
          _super.call(this), this.expressions = expressions;
        }
        return __extends(LiteralArray, _super), LiteralArray.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitLiteralArray(this, context);
        }, LiteralArray;
      }(AST),
      LiteralMap = function(_super) {
        function LiteralMap(keys, values) {
          _super.call(this), this.keys = keys, this.values = values;
        }
        return __extends(LiteralMap, _super), LiteralMap.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitLiteralMap(this, context);
        }, LiteralMap;
      }(AST),
      Interpolation = function(_super) {
        function Interpolation(strings, expressions) {
          _super.call(this), this.strings = strings, this.expressions = expressions;
        }
        return __extends(Interpolation, _super), Interpolation.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitInterpolation(this, context);
        }, Interpolation;
      }(AST),
      Binary = function(_super) {
        function Binary(operation, left, right) {
          _super.call(this), this.operation = operation, this.left = left, this.right = right;
        }
        return __extends(Binary, _super), Binary.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitBinary(this, context);
        }, Binary;
      }(AST),
      PrefixNot = function(_super) {
        function PrefixNot(expression) {
          _super.call(this), this.expression = expression;
        }
        return __extends(PrefixNot, _super), PrefixNot.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitPrefixNot(this, context);
        }, PrefixNot;
      }(AST),
      MethodCall = function(_super) {
        function MethodCall(receiver, name, args) {
          _super.call(this), this.receiver = receiver, this.name = name, this.args = args;
        }
        return __extends(MethodCall, _super), MethodCall.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitMethodCall(this, context);
        }, MethodCall;
      }(AST),
      SafeMethodCall = function(_super) {
        function SafeMethodCall(receiver, name, args) {
          _super.call(this), this.receiver = receiver, this.name = name, this.args = args;
        }
        return __extends(SafeMethodCall, _super), SafeMethodCall.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitSafeMethodCall(this, context);
        }, SafeMethodCall;
      }(AST),
      FunctionCall = function(_super) {
        function FunctionCall(target, args) {
          _super.call(this), this.target = target, this.args = args;
        }
        return __extends(FunctionCall, _super), FunctionCall.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitFunctionCall(this, context);
        }, FunctionCall;
      }(AST),
      ASTWithSource = function(_super) {
        function ASTWithSource(ast, source, location) {
          _super.call(this), this.ast = ast, this.source = source, this.location = location;
        }
        return __extends(ASTWithSource, _super), ASTWithSource.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), this.ast.visit(visitor, context);
        }, ASTWithSource.prototype.toString = function() {
          return this.source + " in " + this.location;
        }, ASTWithSource;
      }(AST),
      TemplateBinding = function() {
        function TemplateBinding(key, keyIsVar, name, expression) {
          this.key = key, this.keyIsVar = keyIsVar, this.name = name, this.expression = expression;
        }
        return TemplateBinding;
      }(),
      RecursiveAstVisitor = function() {
        function RecursiveAstVisitor() {}
        return RecursiveAstVisitor.prototype.visitBinary = function(ast, context) {
          return ast.left.visit(this), ast.right.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitChain = function(ast, context) {
          return this.visitAll(ast.expressions, context);
        }, RecursiveAstVisitor.prototype.visitConditional = function(ast, context) {
          return ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitPipe = function(ast, context) {
          return ast.exp.visit(this), this.visitAll(ast.args, context), null;
        }, RecursiveAstVisitor.prototype.visitFunctionCall = function(ast, context) {
          return ast.target.visit(this), this.visitAll(ast.args, context), null;
        }, RecursiveAstVisitor.prototype.visitImplicitReceiver = function(ast, context) {
          return null;
        }, RecursiveAstVisitor.prototype.visitInterpolation = function(ast, context) {
          return this.visitAll(ast.expressions, context);
        }, RecursiveAstVisitor.prototype.visitKeyedRead = function(ast, context) {
          return ast.obj.visit(this), ast.key.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitKeyedWrite = function(ast, context) {
          return ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitLiteralArray = function(ast, context) {
          return this.visitAll(ast.expressions, context);
        }, RecursiveAstVisitor.prototype.visitLiteralMap = function(ast, context) {
          return this.visitAll(ast.values, context);
        }, RecursiveAstVisitor.prototype.visitLiteralPrimitive = function(ast, context) {
          return null;
        }, RecursiveAstVisitor.prototype.visitMethodCall = function(ast, context) {
          return ast.receiver.visit(this), this.visitAll(ast.args, context);
        }, RecursiveAstVisitor.prototype.visitPrefixNot = function(ast, context) {
          return ast.expression.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitPropertyRead = function(ast, context) {
          return ast.receiver.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitPropertyWrite = function(ast, context) {
          return ast.receiver.visit(this), ast.value.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitSafePropertyRead = function(ast, context) {
          return ast.receiver.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitSafeMethodCall = function(ast, context) {
          return ast.receiver.visit(this), this.visitAll(ast.args, context);
        }, RecursiveAstVisitor.prototype.visitAll = function(asts, context) {
          var _this = this;
          return asts.forEach(function(ast) {
            return ast.visit(_this, context);
          }), null;
        }, RecursiveAstVisitor.prototype.visitQuote = function(ast, context) {
          return null;
        }, RecursiveAstVisitor;
      }(),
      $EOF = 0,
      $TAB = 9,
      $LF = 10,
      $VTAB = 11,
      $FF = 12,
      $CR = 13,
      $SPACE = 32,
      $BANG = 33,
      $DQ = 34,
      $HASH = 35,
      $$ = 36,
      $PERCENT = 37,
      $AMPERSAND = 38,
      $SQ = 39,
      $LPAREN = 40,
      $RPAREN = 41,
      $STAR = 42,
      $PLUS = 43,
      $COMMA = 44,
      $MINUS = 45,
      $PERIOD = 46,
      $SLASH = 47,
      $COLON = 58,
      $SEMICOLON = 59,
      $LT = 60,
      $EQ = 61,
      $GT = 62,
      $QUESTION = 63,
      $0 = 48,
      $9 = 57,
      $A = 65,
      $E = 69,
      $F = 70,
      $X = 88,
      $Z = 90,
      $LBRACKET = 91,
      $BACKSLASH = 92,
      $RBRACKET = 93,
      $CARET = 94,
      $_ = 95,
      $a = 97,
      $e = 101,
      $f = 102,
      $n = 110,
      $r = 114,
      $t = 116,
      $u = 117,
      $v = 118,
      $x = 120,
      $z = 122,
      $LBRACE = 123,
      $BAR = 124,
      $RBRACE = 125,
      $NBSP = 160,
      $BT = 96,
      DEFAULT_INTERPOLATION_CONFIG = {
        start: "{{",
        end: "}}"
      };
  !function(TokenType) {
    TokenType[TokenType.Character = 0] = "Character", TokenType[TokenType.Identifier = 1] = "Identifier", TokenType[TokenType.Keyword = 2] = "Keyword", TokenType[TokenType.String = 3] = "String", TokenType[TokenType.Operator = 4] = "Operator", TokenType[TokenType.Number = 5] = "Number";
  }(TokenType || (TokenType = {}));
  var KEYWORDS = ["var", "let", "null", "undefined", "true", "false", "if", "else"],
      Lexer = function() {
        function Lexer() {}
        return Lexer.prototype.tokenize = function(text) {
          for (var scanner = new _Scanner(text),
              tokens = [],
              token = scanner.scanToken(); null != token; )
            tokens.push(token), token = scanner.scanToken();
          return tokens;
        }, Lexer;
      }();
  Lexer.decorators = [{type: _angular_core.Injectable}];
  var Token = function() {
    function Token(index, type, numValue, strValue) {
      this.index = index, this.type = type, this.numValue = numValue, this.strValue = strValue;
    }
    return Token.prototype.isCharacter = function(code) {
      return this.type == TokenType.Character && this.numValue == code;
    }, Token.prototype.isNumber = function() {
      return this.type == TokenType.Number;
    }, Token.prototype.isString = function() {
      return this.type == TokenType.String;
    }, Token.prototype.isOperator = function(operater) {
      return this.type == TokenType.Operator && this.strValue == operater;
    }, Token.prototype.isIdentifier = function() {
      return this.type == TokenType.Identifier;
    }, Token.prototype.isKeyword = function() {
      return this.type == TokenType.Keyword;
    }, Token.prototype.isKeywordDeprecatedVar = function() {
      return this.type == TokenType.Keyword && "var" == this.strValue;
    }, Token.prototype.isKeywordLet = function() {
      return this.type == TokenType.Keyword && "let" == this.strValue;
    }, Token.prototype.isKeywordNull = function() {
      return this.type == TokenType.Keyword && "null" == this.strValue;
    }, Token.prototype.isKeywordUndefined = function() {
      return this.type == TokenType.Keyword && "undefined" == this.strValue;
    }, Token.prototype.isKeywordTrue = function() {
      return this.type == TokenType.Keyword && "true" == this.strValue;
    }, Token.prototype.isKeywordFalse = function() {
      return this.type == TokenType.Keyword && "false" == this.strValue;
    }, Token.prototype.toNumber = function() {
      return this.type == TokenType.Number ? this.numValue : -1;
    }, Token.prototype.toString = function() {
      switch (this.type) {
        case TokenType.Character:
        case TokenType.Identifier:
        case TokenType.Keyword:
        case TokenType.Operator:
        case TokenType.String:
          return this.strValue;
        case TokenType.Number:
          return this.numValue.toString();
        default:
          return null;
      }
    }, Token;
  }(),
      EOF = new Token((-1), TokenType.Character, 0, ""),
      ScannerError = function(_super) {
        function ScannerError(message) {
          _super.call(this), this.message = message;
        }
        return __extends(ScannerError, _super), ScannerError.prototype.toString = function() {
          return this.message;
        }, ScannerError;
      }(BaseException$1),
      _Scanner = function() {
        function _Scanner(input) {
          this.input = input, this.peek = 0, this.index = -1, this.length = input.length, this.advance();
        }
        return _Scanner.prototype.advance = function() {
          this.peek = ++this.index >= this.length ? $EOF : StringWrapper.charCodeAt(this.input, this.index);
        }, _Scanner.prototype.scanToken = function() {
          for (var input = this.input,
              length = this.length,
              peek = this.peek,
              index = this.index; peek <= $SPACE; ) {
            if (++index >= length) {
              peek = $EOF;
              break;
            }
            peek = StringWrapper.charCodeAt(input, index);
          }
          if (this.peek = peek, this.index = index, index >= length)
            return null;
          if (isIdentifierStart(peek))
            return this.scanIdentifier();
          if (isDigit(peek))
            return this.scanNumber(index);
          var start = index;
          switch (peek) {
            case $PERIOD:
              return this.advance(), isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);
            case $LPAREN:
            case $RPAREN:
            case $LBRACE:
            case $RBRACE:
            case $LBRACKET:
            case $RBRACKET:
            case $COMMA:
            case $COLON:
            case $SEMICOLON:
              return this.scanCharacter(start, peek);
            case $SQ:
            case $DQ:
              return this.scanString();
            case $HASH:
            case $PLUS:
            case $MINUS:
            case $STAR:
            case $SLASH:
            case $PERCENT:
            case $CARET:
              return this.scanOperator(start, StringWrapper.fromCharCode(peek));
            case $QUESTION:
              return this.scanComplexOperator(start, "?", $PERIOD, ".");
            case $LT:
            case $GT:
              return this.scanComplexOperator(start, StringWrapper.fromCharCode(peek), $EQ, "=");
            case $BANG:
            case $EQ:
              return this.scanComplexOperator(start, StringWrapper.fromCharCode(peek), $EQ, "=", $EQ, "=");
            case $AMPERSAND:
              return this.scanComplexOperator(start, "&", $AMPERSAND, "&");
            case $BAR:
              return this.scanComplexOperator(start, "|", $BAR, "|");
            case $NBSP:
              for (; isWhitespace(this.peek); )
                this.advance();
              return this.scanToken();
          }
          return this.error("Unexpected character [" + StringWrapper.fromCharCode(peek) + "]", 0), null;
        }, _Scanner.prototype.scanCharacter = function(start, code) {
          return this.advance(), newCharacterToken(start, code);
        }, _Scanner.prototype.scanOperator = function(start, str) {
          return this.advance(), newOperatorToken(start, str);
        }, _Scanner.prototype.scanComplexOperator = function(start, one, twoCode, two, threeCode, three) {
          this.advance();
          var str = one;
          return this.peek == twoCode && (this.advance(), str += two), isPresent(threeCode) && this.peek == threeCode && (this.advance(), str += three), newOperatorToken(start, str);
        }, _Scanner.prototype.scanIdentifier = function() {
          var start = this.index;
          for (this.advance(); isIdentifierPart(this.peek); )
            this.advance();
          var str = this.input.substring(start, this.index);
          return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) : newIdentifierToken(start, str);
        }, _Scanner.prototype.scanNumber = function(start) {
          var simple = this.index === start;
          for (this.advance(); ; ) {
            if (isDigit(this.peek))
              ;
            else if (this.peek == $PERIOD)
              simple = !1;
            else {
              if (!isExponentStart(this.peek))
                break;
              this.advance(), isExponentSign(this.peek) && this.advance(), isDigit(this.peek) || this.error("Invalid exponent", -1), simple = !1;
            }
            this.advance();
          }
          var str = this.input.substring(start, this.index),
              value = simple ? NumberWrapper.parseIntAutoRadix(str) : NumberWrapper.parseFloat(str);
          return newNumberToken(start, value);
        }, _Scanner.prototype.scanString = function() {
          var start = this.index,
              quote = this.peek;
          this.advance();
          for (var buffer,
              marker = this.index,
              input = this.input; this.peek != quote; )
            if (this.peek == $BACKSLASH) {
              null == buffer && (buffer = new StringJoiner), buffer.add(input.substring(marker, this.index)), this.advance();
              var unescapedCode;
              if (this.peek == $u) {
                var hex = input.substring(this.index + 1, this.index + 5);
                try {
                  unescapedCode = NumberWrapper.parseInt(hex, 16);
                } catch (e) {
                  this.error("Invalid unicode escape [\\u" + hex + "]", 0);
                }
                for (var i = 0; i < 5; i++)
                  this.advance();
              } else
                unescapedCode = unescape(this.peek), this.advance();
              buffer.add(StringWrapper.fromCharCode(unescapedCode)), marker = this.index;
            } else
              this.peek == $EOF ? this.error("Unterminated quote", 0) : this.advance();
          var last = input.substring(marker, this.index);
          this.advance();
          var unescaped = last;
          return null != buffer && (buffer.add(last), unescaped = buffer.toString()), newStringToken(start, unescaped);
        }, _Scanner.prototype.error = function(message, offset) {
          var position = this.index + offset;
          throw new ScannerError("Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
        }, _Scanner;
      }(),
      _implicitReceiver = new ImplicitReceiver,
      ParseException = function(_super) {
        function ParseException(message, input, errLocation, ctxLocation) {
          _super.call(this, "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation);
        }
        return __extends(ParseException, _super), ParseException;
      }(BaseException$1),
      SplitInterpolation = function() {
        function SplitInterpolation(strings, expressions) {
          this.strings = strings, this.expressions = expressions;
        }
        return SplitInterpolation;
      }(),
      TemplateBindingParseResult = function() {
        function TemplateBindingParseResult(templateBindings, warnings) {
          this.templateBindings = templateBindings, this.warnings = warnings;
        }
        return TemplateBindingParseResult;
      }(),
      Parser = function() {
        function Parser(_lexer) {
          this._lexer = _lexer;
        }
        return Parser.prototype.parseAction = function(input, location, interpolationConfig) {
          void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), this._checkNoInterpolation(input, location, interpolationConfig);
          var tokens = this._lexer.tokenize(this._stripComments(input)),
              ast = new _ParseAST(input, location, tokens, (!0)).parseChain();
          return new ASTWithSource(ast, input, location);
        }, Parser.prototype.parseBinding = function(input, location, interpolationConfig) {
          void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG);
          var ast = this._parseBindingAst(input, location, interpolationConfig);
          return new ASTWithSource(ast, input, location);
        }, Parser.prototype.parseSimpleBinding = function(input, location, interpolationConfig) {
          void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG);
          var ast = this._parseBindingAst(input, location, interpolationConfig);
          if (!SimpleExpressionChecker.check(ast))
            throw new ParseException("Host binding expression can only contain field access and constants", input, location);
          return new ASTWithSource(ast, input, location);
        }, Parser.prototype._parseBindingAst = function(input, location, interpolationConfig) {
          var quote = this._parseQuote(input, location);
          if (isPresent(quote))
            return quote;
          this._checkNoInterpolation(input, location, interpolationConfig);
          var tokens = this._lexer.tokenize(this._stripComments(input));
          return new _ParseAST(input, location, tokens, (!1)).parseChain();
        }, Parser.prototype._parseQuote = function(input, location) {
          if (isBlank(input))
            return null;
          var prefixSeparatorIndex = input.indexOf(":");
          if (prefixSeparatorIndex == -1)
            return null;
          var prefix = input.substring(0, prefixSeparatorIndex).trim();
          if (!isIdentifier(prefix))
            return null;
          var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
          return new Quote(prefix, uninterpretedExpression, location);
        }, Parser.prototype.parseTemplateBindings = function(input, location) {
          var tokens = this._lexer.tokenize(input);
          return new _ParseAST(input, location, tokens, (!1)).parseTemplateBindings();
        }, Parser.prototype.parseInterpolation = function(input, location, interpolationConfig) {
          void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG);
          var split = this.splitInterpolation(input, location, interpolationConfig);
          if (null == split)
            return null;
          for (var expressions = [],
              i = 0; i < split.expressions.length; ++i) {
            var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i])),
                ast = new _ParseAST(input, location, tokens, (!1)).parseChain();
            expressions.push(ast);
          }
          return new ASTWithSource(new Interpolation(split.strings, expressions), input, location);
        }, Parser.prototype.splitInterpolation = function(input, location, interpolationConfig) {
          void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG);
          var regexp = _createInterpolateRegExp(interpolationConfig),
              parts = StringWrapper.split(input, regexp);
          if (parts.length <= 1)
            return null;
          for (var strings = [],
              expressions = [],
              i = 0; i < parts.length; i++) {
            var part = parts[i];
            if (i % 2 === 0)
              strings.push(part);
            else {
              if (!(part.trim().length > 0))
                throw new ParseException("Blank expressions are not allowed in interpolated strings", input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
              expressions.push(part);
            }
          }
          return new SplitInterpolation(strings, expressions);
        }, Parser.prototype.wrapLiteralPrimitive = function(input, location) {
          return new ASTWithSource(new LiteralPrimitive(input), input, location);
        }, Parser.prototype._stripComments = function(input) {
          var i = this._commentStart(input);
          return isPresent(i) ? input.substring(0, i).trim() : input;
        }, Parser.prototype._commentStart = function(input) {
          for (var outerQuote = null,
              i = 0; i < input.length - 1; i++) {
            var char = StringWrapper.charCodeAt(input, i),
                nextChar = StringWrapper.charCodeAt(input, i + 1);
            if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote))
              return i;
            outerQuote === char ? outerQuote = null : isBlank(outerQuote) && isQuote(char) && (outerQuote = char);
          }
          return null;
        }, Parser.prototype._checkNoInterpolation = function(input, location, interpolationConfig) {
          var regexp = _createInterpolateRegExp(interpolationConfig),
              parts = StringWrapper.split(input, regexp);
          if (parts.length > 1)
            throw new ParseException("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
        }, Parser.prototype._findInterpolationErrorColumn = function(parts, partInErrIdx, interpolationConfig) {
          for (var errLocation = "",
              j = 0; j < partInErrIdx; j++)
            errLocation += j % 2 === 0 ? parts[j] : "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
          return errLocation.length;
        }, Parser;
      }();
  Parser.decorators = [{type: _angular_core.Injectable}], Parser.ctorParameters = [{type: Lexer}];
  var HtmlTagContentType,
      _ParseAST = function() {
        function _ParseAST(input, location, tokens, parseAction) {
          this.input = input, this.location = location, this.tokens = tokens, this.parseAction = parseAction, this.index = 0;
        }
        return _ParseAST.prototype.peek = function(offset) {
          var i = this.index + offset;
          return i < this.tokens.length ? this.tokens[i] : EOF;
        }, Object.defineProperty(_ParseAST.prototype, "next", {
          get: function() {
            return this.peek(0);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(_ParseAST.prototype, "inputIndex", {
          get: function() {
            return this.index < this.tokens.length ? this.next.index : this.input.length;
          },
          enumerable: !0,
          configurable: !0
        }), _ParseAST.prototype.advance = function() {
          this.index++;
        }, _ParseAST.prototype.optionalCharacter = function(code) {
          return !!this.next.isCharacter(code) && (this.advance(), !0);
        }, _ParseAST.prototype.peekKeywordLet = function() {
          return this.next.isKeywordLet();
        }, _ParseAST.prototype.peekDeprecatedKeywordVar = function() {
          return this.next.isKeywordDeprecatedVar();
        }, _ParseAST.prototype.peekDeprecatedOperatorHash = function() {
          return this.next.isOperator("#");
        }, _ParseAST.prototype.expectCharacter = function(code) {
          this.optionalCharacter(code) || this.error("Missing expected " + StringWrapper.fromCharCode(code));
        }, _ParseAST.prototype.optionalOperator = function(op) {
          return !!this.next.isOperator(op) && (this.advance(), !0);
        }, _ParseAST.prototype.expectOperator = function(operator) {
          this.optionalOperator(operator) || this.error("Missing expected operator " + operator);
        }, _ParseAST.prototype.expectIdentifierOrKeyword = function() {
          var n = this.next;
          return n.isIdentifier() || n.isKeyword() || this.error("Unexpected token " + n + ", expected identifier or keyword"), this.advance(), n.toString();
        }, _ParseAST.prototype.expectIdentifierOrKeywordOrString = function() {
          var n = this.next;
          return n.isIdentifier() || n.isKeyword() || n.isString() || this.error("Unexpected token " + n + ", expected identifier, keyword, or string"), this.advance(), n.toString();
        }, _ParseAST.prototype.parseChain = function() {
          for (var exprs = []; this.index < this.tokens.length; ) {
            var expr = this.parsePipe();
            if (exprs.push(expr), this.optionalCharacter($SEMICOLON))
              for (this.parseAction || this.error("Binding expression cannot contain chained expression"); this.optionalCharacter($SEMICOLON); )
                ;
            else
              this.index < this.tokens.length && this.error("Unexpected token '" + this.next + "'");
          }
          return 0 == exprs.length ? new EmptyExpr : 1 == exprs.length ? exprs[0] : new Chain(exprs);
        }, _ParseAST.prototype.parsePipe = function() {
          var result = this.parseExpression();
          if (this.optionalOperator("|")) {
            this.parseAction && this.error("Cannot have a pipe in an action expression");
            do {
              for (var name = this.expectIdentifierOrKeyword(),
                  args = []; this.optionalCharacter($COLON); )
                args.push(this.parseExpression());
              result = new BindingPipe(result, name, args);
            } while (this.optionalOperator("|"));
          }
          return result;
        }, _ParseAST.prototype.parseExpression = function() {
          return this.parseConditional();
        }, _ParseAST.prototype.parseConditional = function() {
          var start = this.inputIndex,
              result = this.parseLogicalOr();
          if (this.optionalOperator("?")) {
            var yes = this.parsePipe();
            if (!this.optionalCharacter($COLON)) {
              var end = this.inputIndex,
                  expression = this.input.substring(start, end);
              this.error("Conditional expression " + expression + " requires all 3 expressions");
            }
            var no = this.parsePipe();
            return new Conditional(result, yes, no);
          }
          return result;
        }, _ParseAST.prototype.parseLogicalOr = function() {
          for (var result = this.parseLogicalAnd(); this.optionalOperator("||"); )
            result = new Binary("||", result, this.parseLogicalAnd());
          return result;
        }, _ParseAST.prototype.parseLogicalAnd = function() {
          for (var result = this.parseEquality(); this.optionalOperator("&&"); )
            result = new Binary("&&", result, this.parseEquality());
          return result;
        }, _ParseAST.prototype.parseEquality = function() {
          for (var result = this.parseRelational(); ; )
            if (this.optionalOperator("=="))
              result = new Binary("==", result, this.parseRelational());
            else if (this.optionalOperator("==="))
              result = new Binary("===", result, this.parseRelational());
            else if (this.optionalOperator("!="))
              result = new Binary("!=", result, this.parseRelational());
            else {
              if (!this.optionalOperator("!=="))
                return result;
              result = new Binary("!==", result, this.parseRelational());
            }
        }, _ParseAST.prototype.parseRelational = function() {
          for (var result = this.parseAdditive(); ; )
            if (this.optionalOperator("<"))
              result = new Binary("<", result, this.parseAdditive());
            else if (this.optionalOperator(">"))
              result = new Binary(">", result, this.parseAdditive());
            else if (this.optionalOperator("<="))
              result = new Binary("<=", result, this.parseAdditive());
            else {
              if (!this.optionalOperator(">="))
                return result;
              result = new Binary(">=", result, this.parseAdditive());
            }
        }, _ParseAST.prototype.parseAdditive = function() {
          for (var result = this.parseMultiplicative(); ; )
            if (this.optionalOperator("+"))
              result = new Binary("+", result, this.parseMultiplicative());
            else {
              if (!this.optionalOperator("-"))
                return result;
              result = new Binary("-", result, this.parseMultiplicative());
            }
        }, _ParseAST.prototype.parseMultiplicative = function() {
          for (var result = this.parsePrefix(); ; )
            if (this.optionalOperator("*"))
              result = new Binary("*", result, this.parsePrefix());
            else if (this.optionalOperator("%"))
              result = new Binary("%", result, this.parsePrefix());
            else {
              if (!this.optionalOperator("/"))
                return result;
              result = new Binary("/", result, this.parsePrefix());
            }
        }, _ParseAST.prototype.parsePrefix = function() {
          return this.optionalOperator("+") ? this.parsePrefix() : this.optionalOperator("-") ? new Binary("-", new LiteralPrimitive(0), this.parsePrefix()) : this.optionalOperator("!") ? new PrefixNot(this.parsePrefix()) : this.parseCallChain();
        }, _ParseAST.prototype.parseCallChain = function() {
          for (var result = this.parsePrimary(); ; )
            if (this.optionalCharacter($PERIOD))
              result = this.parseAccessMemberOrMethodCall(result, !1);
            else if (this.optionalOperator("?."))
              result = this.parseAccessMemberOrMethodCall(result, !0);
            else if (this.optionalCharacter($LBRACKET)) {
              var key = this.parsePipe();
              if (this.expectCharacter($RBRACKET), this.optionalOperator("=")) {
                var value = this.parseConditional();
                result = new KeyedWrite(result, key, value);
              } else
                result = new KeyedRead(result, key);
            } else {
              if (!this.optionalCharacter($LPAREN))
                return result;
              var args = this.parseCallArguments();
              this.expectCharacter($RPAREN), result = new FunctionCall(result, args);
            }
        }, _ParseAST.prototype.parsePrimary = function() {
          if (this.optionalCharacter($LPAREN)) {
            var result = this.parsePipe();
            return this.expectCharacter($RPAREN), result;
          }
          if (this.next.isKeywordNull() || this.next.isKeywordUndefined())
            return this.advance(), new LiteralPrimitive(null);
          if (this.next.isKeywordTrue())
            return this.advance(), new LiteralPrimitive((!0));
          if (this.next.isKeywordFalse())
            return this.advance(), new LiteralPrimitive((!1));
          if (this.optionalCharacter($LBRACKET)) {
            var elements = this.parseExpressionList($RBRACKET);
            return this.expectCharacter($RBRACKET), new LiteralArray(elements);
          }
          if (this.next.isCharacter($LBRACE))
            return this.parseLiteralMap();
          if (this.next.isIdentifier())
            return this.parseAccessMemberOrMethodCall(_implicitReceiver, !1);
          if (this.next.isNumber()) {
            var value = this.next.toNumber();
            return this.advance(), new LiteralPrimitive(value);
          }
          if (this.next.isString()) {
            var literalValue = this.next.toString();
            return this.advance(), new LiteralPrimitive(literalValue);
          }
          throw this.index >= this.tokens.length ? this.error("Unexpected end of expression: " + this.input) : this.error("Unexpected token " + this.next), new BaseException$1("Fell through all cases in parsePrimary");
        }, _ParseAST.prototype.parseExpressionList = function(terminator) {
          var result = [];
          if (!this.next.isCharacter(terminator))
            do
              result.push(this.parsePipe());
 while (this.optionalCharacter($COMMA));
          return result;
        }, _ParseAST.prototype.parseLiteralMap = function() {
          var keys = [],
              values = [];
          if (this.expectCharacter($LBRACE), !this.optionalCharacter($RBRACE)) {
            do {
              var key = this.expectIdentifierOrKeywordOrString();
              keys.push(key), this.expectCharacter($COLON), values.push(this.parsePipe());
            } while (this.optionalCharacter($COMMA));
            this.expectCharacter($RBRACE);
          }
          return new LiteralMap(keys, values);
        }, _ParseAST.prototype.parseAccessMemberOrMethodCall = function(receiver, isSafe) {
          void 0 === isSafe && (isSafe = !1);
          var id = this.expectIdentifierOrKeyword();
          if (this.optionalCharacter($LPAREN)) {
            var args = this.parseCallArguments();
            return this.expectCharacter($RPAREN), isSafe ? new SafeMethodCall(receiver, id, args) : new MethodCall(receiver, id, args);
          }
          if (!isSafe) {
            if (this.optionalOperator("=")) {
              this.parseAction || this.error("Bindings cannot contain assignments");
              var value = this.parseConditional();
              return new PropertyWrite(receiver, id, value);
            }
            return new PropertyRead(receiver, id);
          }
          return this.optionalOperator("=") ? (this.error("The '?.' operator cannot be used in the assignment"), null) : new SafePropertyRead(receiver, id);
        }, _ParseAST.prototype.parseCallArguments = function() {
          if (this.next.isCharacter($RPAREN))
            return [];
          var positionals = [];
          do
            positionals.push(this.parsePipe());
 while (this.optionalCharacter($COMMA));
          return positionals;
        }, _ParseAST.prototype.expectTemplateBindingKey = function() {
          var result = "",
              operatorFound = !1;
          do
            result += this.expectIdentifierOrKeywordOrString(), operatorFound = this.optionalOperator("-"), operatorFound && (result += "-");
 while (operatorFound);
          return result.toString();
        }, _ParseAST.prototype.parseTemplateBindings = function() {
          for (var bindings = [],
              prefix = null,
              warnings = []; this.index < this.tokens.length; ) {
            var keyIsVar = this.peekKeywordLet();
            !keyIsVar && this.peekDeprecatedKeywordVar() && (keyIsVar = !0, warnings.push('"var" inside of expressions is deprecated. Use "let" instead!')), !keyIsVar && this.peekDeprecatedOperatorHash() && (keyIsVar = !0, warnings.push('"#" inside of expressions is deprecated. Use "let" instead!')), keyIsVar && this.advance();
            var key = this.expectTemplateBindingKey();
            keyIsVar || (null == prefix ? prefix = key : key = prefix + key[0].toUpperCase() + key.substring(1)), this.optionalCharacter($COLON);
            var name = null,
                expression = null;
            if (keyIsVar)
              name = this.optionalOperator("=") ? this.expectTemplateBindingKey() : "$implicit";
            else if (this.next !== EOF && !this.peekKeywordLet() && !this.peekDeprecatedKeywordVar() && !this.peekDeprecatedOperatorHash()) {
              var start = this.inputIndex,
                  ast = this.parsePipe(),
                  source = this.input.substring(start, this.inputIndex);
              expression = new ASTWithSource(ast, source, this.location);
            }
            bindings.push(new TemplateBinding(key, keyIsVar, name, expression)), this.optionalCharacter($SEMICOLON) || this.optionalCharacter($COMMA);
          }
          return new TemplateBindingParseResult(bindings, warnings);
        }, _ParseAST.prototype.error = function(message, index) {
          void 0 === index && (index = null), isBlank(index) && (index = this.index);
          var location = index < this.tokens.length ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
          throw new ParseException(message, this.input, location, this.location);
        }, _ParseAST;
      }(),
      SimpleExpressionChecker = function() {
        function SimpleExpressionChecker() {
          this.simple = !0;
        }
        return SimpleExpressionChecker.check = function(ast) {
          var s = new SimpleExpressionChecker;
          return ast.visit(s), s.simple;
        }, SimpleExpressionChecker.prototype.visitImplicitReceiver = function(ast, context) {}, SimpleExpressionChecker.prototype.visitInterpolation = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitLiteralPrimitive = function(ast, context) {}, SimpleExpressionChecker.prototype.visitPropertyRead = function(ast, context) {}, SimpleExpressionChecker.prototype.visitPropertyWrite = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitSafePropertyRead = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitMethodCall = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitSafeMethodCall = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitFunctionCall = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitLiteralArray = function(ast, context) {
          this.visitAll(ast.expressions);
        }, SimpleExpressionChecker.prototype.visitLiteralMap = function(ast, context) {
          this.visitAll(ast.values);
        }, SimpleExpressionChecker.prototype.visitBinary = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitPrefixNot = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitConditional = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitPipe = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitKeyedRead = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitKeyedWrite = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitAll = function(asts) {
          for (var res = ListWrapper.createFixedSize(asts.length),
              i = 0; i < asts.length; ++i)
            res[i] = asts[i].visit(this);
          return res;
        }, SimpleExpressionChecker.prototype.visitChain = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitQuote = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker;
      }(),
      HtmlTextAst = function() {
        function HtmlTextAst(value, sourceSpan) {
          this.value = value, this.sourceSpan = sourceSpan;
        }
        return HtmlTextAst.prototype.visit = function(visitor, context) {
          return visitor.visitText(this, context);
        }, HtmlTextAst;
      }(),
      HtmlExpansionAst = function() {
        function HtmlExpansionAst(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
          this.switchValue = switchValue, this.type = type, this.cases = cases, this.sourceSpan = sourceSpan, this.switchValueSourceSpan = switchValueSourceSpan;
        }
        return HtmlExpansionAst.prototype.visit = function(visitor, context) {
          return visitor.visitExpansion(this, context);
        }, HtmlExpansionAst;
      }(),
      HtmlExpansionCaseAst = function() {
        function HtmlExpansionCaseAst(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
          this.value = value, this.expression = expression, this.sourceSpan = sourceSpan, this.valueSourceSpan = valueSourceSpan, this.expSourceSpan = expSourceSpan;
        }
        return HtmlExpansionCaseAst.prototype.visit = function(visitor, context) {
          return visitor.visitExpansionCase(this, context);
        }, HtmlExpansionCaseAst;
      }(),
      HtmlAttrAst = function() {
        function HtmlAttrAst(name, value, sourceSpan) {
          this.name = name, this.value = value, this.sourceSpan = sourceSpan;
        }
        return HtmlAttrAst.prototype.visit = function(visitor, context) {
          return visitor.visitAttr(this, context);
        }, HtmlAttrAst;
      }(),
      HtmlElementAst = function() {
        function HtmlElementAst(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
          this.name = name, this.attrs = attrs, this.children = children, this.sourceSpan = sourceSpan, this.startSourceSpan = startSourceSpan, this.endSourceSpan = endSourceSpan;
        }
        return HtmlElementAst.prototype.visit = function(visitor, context) {
          return visitor.visitElement(this, context);
        }, HtmlElementAst;
      }(),
      HtmlCommentAst = function() {
        function HtmlCommentAst(value, sourceSpan) {
          this.value = value, this.sourceSpan = sourceSpan;
        }
        return HtmlCommentAst.prototype.visit = function(visitor, context) {
          return visitor.visitComment(this, context);
        }, HtmlCommentAst;
      }(),
      NAMED_ENTITIES = {
        Aacute: "Á",
        aacute: "á",
        Acirc: "Â",
        acirc: "â",
        acute: "´",
        AElig: "Æ",
        aelig: "æ",
        Agrave: "À",
        agrave: "à",
        alefsym: "ℵ",
        Alpha: "Α",
        alpha: "α",
        amp: "&",
        and: "∧",
        ang: "∠",
        apos: "'",
        Aring: "Å",
        aring: "å",
        asymp: "≈",
        Atilde: "Ã",
        atilde: "ã",
        Auml: "Ä",
        auml: "ä",
        bdquo: "„",
        Beta: "Β",
        beta: "β",
        brvbar: "¦",
        bull: "•",
        cap: "∩",
        Ccedil: "Ç",
        ccedil: "ç",
        cedil: "¸",
        cent: "¢",
        Chi: "Χ",
        chi: "χ",
        circ: "ˆ",
        clubs: "♣",
        cong: "≅",
        copy: "©",
        crarr: "↵",
        cup: "∪",
        curren: "¤",
        dagger: "†",
        Dagger: "‡",
        darr: "↓",
        dArr: "⇓",
        deg: "°",
        Delta: "Δ",
        delta: "δ",
        diams: "♦",
        divide: "÷",
        Eacute: "É",
        eacute: "é",
        Ecirc: "Ê",
        ecirc: "ê",
        Egrave: "È",
        egrave: "è",
        empty: "∅",
        emsp: " ",
        ensp: " ",
        Epsilon: "Ε",
        epsilon: "ε",
        equiv: "≡",
        Eta: "Η",
        eta: "η",
        ETH: "Ð",
        eth: "ð",
        Euml: "Ë",
        euml: "ë",
        euro: "€",
        exist: "∃",
        fnof: "ƒ",
        forall: "∀",
        frac12: "½",
        frac14: "¼",
        frac34: "¾",
        frasl: "⁄",
        Gamma: "Γ",
        gamma: "γ",
        ge: "≥",
        gt: ">",
        harr: "↔",
        hArr: "⇔",
        hearts: "♥",
        hellip: "…",
        Iacute: "Í",
        iacute: "í",
        Icirc: "Î",
        icirc: "î",
        iexcl: "¡",
        Igrave: "Ì",
        igrave: "ì",
        image: "ℑ",
        infin: "∞",
        int: "∫",
        Iota: "Ι",
        iota: "ι",
        iquest: "¿",
        isin: "∈",
        Iuml: "Ï",
        iuml: "ï",
        Kappa: "Κ",
        kappa: "κ",
        Lambda: "Λ",
        lambda: "λ",
        lang: "⟨",
        laquo: "«",
        larr: "←",
        lArr: "⇐",
        lceil: "⌈",
        ldquo: "“",
        le: "≤",
        lfloor: "⌊",
        lowast: "∗",
        loz: "◊",
        lrm: "‎",
        lsaquo: "‹",
        lsquo: "‘",
        lt: "<",
        macr: "¯",
        mdash: "—",
        micro: "µ",
        middot: "·",
        minus: "−",
        Mu: "Μ",
        mu: "μ",
        nabla: "∇",
        nbsp: " ",
        ndash: "–",
        ne: "≠",
        ni: "∋",
        not: "¬",
        notin: "∉",
        nsub: "⊄",
        Ntilde: "Ñ",
        ntilde: "ñ",
        Nu: "Ν",
        nu: "ν",
        Oacute: "Ó",
        oacute: "ó",
        Ocirc: "Ô",
        ocirc: "ô",
        OElig: "Œ",
        oelig: "œ",
        Ograve: "Ò",
        ograve: "ò",
        oline: "‾",
        Omega: "Ω",
        omega: "ω",
        Omicron: "Ο",
        omicron: "ο",
        oplus: "⊕",
        or: "∨",
        ordf: "ª",
        ordm: "º",
        Oslash: "Ø",
        oslash: "ø",
        Otilde: "Õ",
        otilde: "õ",
        otimes: "⊗",
        Ouml: "Ö",
        ouml: "ö",
        para: "¶",
        permil: "‰",
        perp: "⊥",
        Phi: "Φ",
        phi: "φ",
        Pi: "Π",
        pi: "π",
        piv: "ϖ",
        plusmn: "±",
        pound: "£",
        prime: "′",
        Prime: "″",
        prod: "∏",
        prop: "∝",
        Psi: "Ψ",
        psi: "ψ",
        quot: '"',
        radic: "√",
        rang: "⟩",
        raquo: "»",
        rarr: "→",
        rArr: "⇒",
        rceil: "⌉",
        rdquo: "”",
        real: "ℜ",
        reg: "®",
        rfloor: "⌋",
        Rho: "Ρ",
        rho: "ρ",
        rlm: "‏",
        rsaquo: "›",
        rsquo: "’",
        sbquo: "‚",
        Scaron: "Š",
        scaron: "š",
        sdot: "⋅",
        sect: "§",
        shy: "­",
        Sigma: "Σ",
        sigma: "σ",
        sigmaf: "ς",
        sim: "∼",
        spades: "♠",
        sub: "⊂",
        sube: "⊆",
        sum: "∑",
        sup: "⊃",
        sup1: "¹",
        sup2: "²",
        sup3: "³",
        supe: "⊇",
        szlig: "ß",
        Tau: "Τ",
        tau: "τ",
        there4: "∴",
        Theta: "Θ",
        theta: "θ",
        thetasym: "ϑ",
        thinsp: " ",
        THORN: "Þ",
        thorn: "þ",
        tilde: "˜",
        times: "×",
        trade: "™",
        Uacute: "Ú",
        uacute: "ú",
        uarr: "↑",
        uArr: "⇑",
        Ucirc: "Û",
        ucirc: "û",
        Ugrave: "Ù",
        ugrave: "ù",
        uml: "¨",
        upsih: "ϒ",
        Upsilon: "Υ",
        upsilon: "υ",
        Uuml: "Ü",
        uuml: "ü",
        weierp: "℘",
        Xi: "Ξ",
        xi: "ξ",
        Yacute: "Ý",
        yacute: "ý",
        yen: "¥",
        yuml: "ÿ",
        Yuml: "Ÿ",
        Zeta: "Ζ",
        zeta: "ζ",
        zwj: "‍",
        zwnj: "‌"
      };
  !function(HtmlTagContentType) {
    HtmlTagContentType[HtmlTagContentType.RAW_TEXT = 0] = "RAW_TEXT", HtmlTagContentType[HtmlTagContentType.ESCAPABLE_RAW_TEXT = 1] = "ESCAPABLE_RAW_TEXT", HtmlTagContentType[HtmlTagContentType.PARSABLE_DATA = 2] = "PARSABLE_DATA";
  }(HtmlTagContentType || (HtmlTagContentType = {}));
  var ParseErrorLevel,
      HtmlTagDefinition = function() {
        function HtmlTagDefinition(_a) {
          var _this = this,
              _b = void 0 === _a ? {} : _a,
              closedByChildren = _b.closedByChildren,
              requiredParents = _b.requiredParents,
              implicitNamespacePrefix = _b.implicitNamespacePrefix,
              contentType = _b.contentType,
              closedByParent = _b.closedByParent,
              isVoid = _b.isVoid,
              ignoreFirstLf = _b.ignoreFirstLf;
          this.closedByChildren = {}, this.closedByParent = !1, isPresent(closedByChildren) && closedByChildren.length > 0 && closedByChildren.forEach(function(tagName) {
            return _this.closedByChildren[tagName] = !0;
          }), this.isVoid = normalizeBool(isVoid), this.closedByParent = normalizeBool(closedByParent) || this.isVoid, isPresent(requiredParents) && requiredParents.length > 0 && (this.requiredParents = {}, this.parentToAdd = requiredParents[0], requiredParents.forEach(function(tagName) {
            return _this.requiredParents[tagName] = !0;
          })), this.implicitNamespacePrefix = implicitNamespacePrefix, this.contentType = isPresent(contentType) ? contentType : HtmlTagContentType.PARSABLE_DATA, this.ignoreFirstLf = normalizeBool(ignoreFirstLf);
        }
        return HtmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
          if (isBlank(this.requiredParents))
            return !1;
          if (isBlank(currentParent))
            return !0;
          var lcParent = currentParent.toLowerCase();
          return 1 != this.requiredParents[lcParent] && "template" != lcParent;
        }, HtmlTagDefinition.prototype.isClosedByChild = function(name) {
          return this.isVoid || normalizeBool(this.closedByChildren[name.toLowerCase()]);
        }, HtmlTagDefinition;
      }(),
      TAG_DEFINITIONS = {
        base: new HtmlTagDefinition({isVoid: !0}),
        meta: new HtmlTagDefinition({isVoid: !0}),
        area: new HtmlTagDefinition({isVoid: !0}),
        embed: new HtmlTagDefinition({isVoid: !0}),
        link: new HtmlTagDefinition({isVoid: !0}),
        img: new HtmlTagDefinition({isVoid: !0}),
        input: new HtmlTagDefinition({isVoid: !0}),
        param: new HtmlTagDefinition({isVoid: !0}),
        hr: new HtmlTagDefinition({isVoid: !0}),
        br: new HtmlTagDefinition({isVoid: !0}),
        source: new HtmlTagDefinition({isVoid: !0}),
        track: new HtmlTagDefinition({isVoid: !0}),
        wbr: new HtmlTagDefinition({isVoid: !0}),
        p: new HtmlTagDefinition({
          closedByChildren: ["address", "article", "aside", "blockquote", "div", "dl", "fieldset", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "main", "nav", "ol", "p", "pre", "section", "table", "ul"],
          closedByParent: !0
        }),
        thead: new HtmlTagDefinition({closedByChildren: ["tbody", "tfoot"]}),
        tbody: new HtmlTagDefinition({
          closedByChildren: ["tbody", "tfoot"],
          closedByParent: !0
        }),
        tfoot: new HtmlTagDefinition({
          closedByChildren: ["tbody"],
          closedByParent: !0
        }),
        tr: new HtmlTagDefinition({
          closedByChildren: ["tr"],
          requiredParents: ["tbody", "tfoot", "thead"],
          closedByParent: !0
        }),
        td: new HtmlTagDefinition({
          closedByChildren: ["td", "th"],
          closedByParent: !0
        }),
        th: new HtmlTagDefinition({
          closedByChildren: ["td", "th"],
          closedByParent: !0
        }),
        col: new HtmlTagDefinition({
          requiredParents: ["colgroup"],
          isVoid: !0
        }),
        svg: new HtmlTagDefinition({implicitNamespacePrefix: "svg"}),
        math: new HtmlTagDefinition({implicitNamespacePrefix: "math"}),
        li: new HtmlTagDefinition({
          closedByChildren: ["li"],
          closedByParent: !0
        }),
        dt: new HtmlTagDefinition({closedByChildren: ["dt", "dd"]}),
        dd: new HtmlTagDefinition({
          closedByChildren: ["dt", "dd"],
          closedByParent: !0
        }),
        rb: new HtmlTagDefinition({
          closedByChildren: ["rb", "rt", "rtc", "rp"],
          closedByParent: !0
        }),
        rt: new HtmlTagDefinition({
          closedByChildren: ["rb", "rt", "rtc", "rp"],
          closedByParent: !0
        }),
        rtc: new HtmlTagDefinition({
          closedByChildren: ["rb", "rtc", "rp"],
          closedByParent: !0
        }),
        rp: new HtmlTagDefinition({
          closedByChildren: ["rb", "rt", "rtc", "rp"],
          closedByParent: !0
        }),
        optgroup: new HtmlTagDefinition({
          closedByChildren: ["optgroup"],
          closedByParent: !0
        }),
        option: new HtmlTagDefinition({
          closedByChildren: ["option", "optgroup"],
          closedByParent: !0
        }),
        pre: new HtmlTagDefinition({ignoreFirstLf: !0}),
        listing: new HtmlTagDefinition({ignoreFirstLf: !0}),
        style: new HtmlTagDefinition({contentType: HtmlTagContentType.RAW_TEXT}),
        script: new HtmlTagDefinition({contentType: HtmlTagContentType.RAW_TEXT}),
        title: new HtmlTagDefinition({contentType: HtmlTagContentType.ESCAPABLE_RAW_TEXT}),
        textarea: new HtmlTagDefinition({
          contentType: HtmlTagContentType.ESCAPABLE_RAW_TEXT,
          ignoreFirstLf: !0
        })
      },
      DEFAULT_TAG_DEFINITION = new HtmlTagDefinition,
      NS_PREFIX_RE = /^:([^:]+):(.+)/g,
      ParseLocation = function() {
        function ParseLocation(file, offset, line, col) {
          this.file = file, this.offset = offset, this.line = line, this.col = col;
        }
        return ParseLocation.prototype.toString = function() {
          return this.file.url + "@" + this.line + ":" + this.col;
        }, ParseLocation;
      }(),
      ParseSourceFile = function() {
        function ParseSourceFile(content, url) {
          this.content = content, this.url = url;
        }
        return ParseSourceFile;
      }(),
      ParseSourceSpan = function() {
        function ParseSourceSpan(start, end) {
          this.start = start, this.end = end;
        }
        return ParseSourceSpan.prototype.toString = function() {
          return this.start.file.content.substring(this.start.offset, this.end.offset);
        }, ParseSourceSpan;
      }();
  !function(ParseErrorLevel) {
    ParseErrorLevel[ParseErrorLevel.WARNING = 0] = "WARNING", ParseErrorLevel[ParseErrorLevel.FATAL = 1] = "FATAL";
  }(ParseErrorLevel || (ParseErrorLevel = {}));
  var HtmlTokenType,
      ParseError = function() {
        function ParseError(span, msg, level) {
          void 0 === level && (level = ParseErrorLevel.FATAL), this.span = span, this.msg = msg, this.level = level;
        }
        return ParseError.prototype.toString = function() {
          var source = this.span.start.file.content,
              ctxStart = this.span.start.offset;
          ctxStart > source.length - 1 && (ctxStart = source.length - 1);
          for (var ctxEnd = ctxStart,
              ctxLen = 0,
              ctxLines = 0; ctxLen < 100 && ctxStart > 0 && (ctxStart--, ctxLen++, "\n" != source[ctxStart] || 3 != ++ctxLines); )
            ;
          for (ctxLen = 0, ctxLines = 0; ctxLen < 100 && ctxEnd < source.length - 1 && (ctxEnd++, ctxLen++, "\n" != source[ctxEnd] || 3 != ++ctxLines); )
            ;
          var context = source.substring(ctxStart, this.span.start.offset) + "[ERROR ->]" + source.substring(this.span.start.offset, ctxEnd + 1);
          return this.msg + ' ("' + context + '"): ' + this.span.start;
        }, ParseError;
      }();
  !function(HtmlTokenType) {
    HtmlTokenType[HtmlTokenType.TAG_OPEN_START = 0] = "TAG_OPEN_START", HtmlTokenType[HtmlTokenType.TAG_OPEN_END = 1] = "TAG_OPEN_END", HtmlTokenType[HtmlTokenType.TAG_OPEN_END_VOID = 2] = "TAG_OPEN_END_VOID", HtmlTokenType[HtmlTokenType.TAG_CLOSE = 3] = "TAG_CLOSE", HtmlTokenType[HtmlTokenType.TEXT = 4] = "TEXT", HtmlTokenType[HtmlTokenType.ESCAPABLE_RAW_TEXT = 5] = "ESCAPABLE_RAW_TEXT", HtmlTokenType[HtmlTokenType.RAW_TEXT = 6] = "RAW_TEXT", HtmlTokenType[HtmlTokenType.COMMENT_START = 7] = "COMMENT_START", HtmlTokenType[HtmlTokenType.COMMENT_END = 8] = "COMMENT_END", HtmlTokenType[HtmlTokenType.CDATA_START = 9] = "CDATA_START", HtmlTokenType[HtmlTokenType.CDATA_END = 10] = "CDATA_END", HtmlTokenType[HtmlTokenType.ATTR_NAME = 11] = "ATTR_NAME", HtmlTokenType[HtmlTokenType.ATTR_VALUE = 12] = "ATTR_VALUE", HtmlTokenType[HtmlTokenType.DOC_TYPE = 13] = "DOC_TYPE", HtmlTokenType[HtmlTokenType.EXPANSION_FORM_START = 14] = "EXPANSION_FORM_START", HtmlTokenType[HtmlTokenType.EXPANSION_CASE_VALUE = 15] = "EXPANSION_CASE_VALUE", HtmlTokenType[HtmlTokenType.EXPANSION_CASE_EXP_START = 16] = "EXPANSION_CASE_EXP_START", HtmlTokenType[HtmlTokenType.EXPANSION_CASE_EXP_END = 17] = "EXPANSION_CASE_EXP_END", HtmlTokenType[HtmlTokenType.EXPANSION_FORM_END = 18] = "EXPANSION_FORM_END", HtmlTokenType[HtmlTokenType.EOF = 19] = "EOF";
  }(HtmlTokenType || (HtmlTokenType = {}));
  var HtmlToken = function() {
    function HtmlToken(type, parts, sourceSpan) {
      this.type = type, this.parts = parts, this.sourceSpan = sourceSpan;
    }
    return HtmlToken;
  }(),
      HtmlTokenError = function(_super) {
        function HtmlTokenError(errorMsg, tokenType, span) {
          _super.call(this, span, errorMsg), this.tokenType = tokenType;
        }
        return __extends(HtmlTokenError, _super), HtmlTokenError;
      }(ParseError),
      HtmlTokenizeResult = function() {
        function HtmlTokenizeResult(tokens, errors) {
          this.tokens = tokens, this.errors = errors;
        }
        return HtmlTokenizeResult;
      }(),
      CR_OR_CRLF_REGEXP = /\r\n?/g,
      ControlFlowError = function() {
        function ControlFlowError(error) {
          this.error = error;
        }
        return ControlFlowError;
      }(),
      _HtmlTokenizer = function() {
        function _HtmlTokenizer(file, tokenizeExpansionForms, interpolationConfig) {
          void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), this.file = file, this.tokenizeExpansionForms = tokenizeExpansionForms, this.interpolationConfig = interpolationConfig, this._peek = -1, this._nextPeek = -1, this._index = -1, this._line = 0, this._column = -1, this._expansionCaseStack = [], this._inInterpolation = !1, this.tokens = [], this.errors = [], this._input = file.content, this._length = file.content.length, this._advance();
        }
        return _HtmlTokenizer.prototype._processCarriageReturns = function(content) {
          return StringWrapper.replaceAll(content, CR_OR_CRLF_REGEXP, "\n");
        }, _HtmlTokenizer.prototype.tokenize = function() {
          for (; this._peek !== $EOF; ) {
            var start = this._getLocation();
            try {
              this._attemptCharCode($LT) ? this._attemptCharCode($BANG) ? this._attemptCharCode($LBRACKET) ? this._consumeCdata(start) : this._attemptCharCode($MINUS) ? this._consumeComment(start) : this._consumeDocType(start) : this._attemptCharCode($SLASH) ? this._consumeTagClose(start) : this._consumeTagOpen(start) : isExpansionFormStart(this._input, this._index, this.interpolationConfig.start) && this.tokenizeExpansionForms ? this._consumeExpansionFormStart() : isExpansionCaseStart(this._peek) && this._isInExpansionForm() && this.tokenizeExpansionForms ? this._consumeExpansionCaseStart() : this._peek === $RBRACE && this._isInExpansionCase() && this.tokenizeExpansionForms ? this._consumeExpansionCaseEnd() : this._peek === $RBRACE && this._isInExpansionForm() && this.tokenizeExpansionForms ? this._consumeExpansionFormEnd() : this._consumeText();
            } catch (e) {
              if (!(e instanceof ControlFlowError))
                throw e;
              this.errors.push(e.error);
            }
          }
          return this._beginToken(HtmlTokenType.EOF), this._endToken([]), new HtmlTokenizeResult(mergeTextTokens(this.tokens), this.errors);
        }, _HtmlTokenizer.prototype._getLocation = function() {
          return new ParseLocation(this.file, this._index, this._line, this._column);
        }, _HtmlTokenizer.prototype._getSpan = function(start, end) {
          return isBlank(start) && (start = this._getLocation()), isBlank(end) && (end = this._getLocation()), new ParseSourceSpan(start, end);
        }, _HtmlTokenizer.prototype._beginToken = function(type, start) {
          void 0 === start && (start = null), isBlank(start) && (start = this._getLocation()), this._currentTokenStart = start, this._currentTokenType = type;
        }, _HtmlTokenizer.prototype._endToken = function(parts, end) {
          void 0 === end && (end = null), isBlank(end) && (end = this._getLocation());
          var token = new HtmlToken(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
          return this.tokens.push(token), this._currentTokenStart = null, this._currentTokenType = null, token;
        }, _HtmlTokenizer.prototype._createError = function(msg, span) {
          var error = new HtmlTokenError(msg, this._currentTokenType, span);
          return this._currentTokenStart = null, this._currentTokenType = null, new ControlFlowError(error);
        }, _HtmlTokenizer.prototype._advance = function() {
          if (this._index >= this._length)
            throw this._createError(unexpectedCharacterErrorMsg($EOF), this._getSpan());
          this._peek === $LF ? (this._line++, this._column = 0) : this._peek !== $LF && this._peek !== $CR && this._column++, this._index++, this._peek = this._index >= this._length ? $EOF : StringWrapper.charCodeAt(this._input, this._index), this._nextPeek = this._index + 1 >= this._length ? $EOF : StringWrapper.charCodeAt(this._input, this._index + 1);
        }, _HtmlTokenizer.prototype._attemptCharCode = function(charCode) {
          return this._peek === charCode && (this._advance(), !0);
        }, _HtmlTokenizer.prototype._attemptCharCodeCaseInsensitive = function(charCode) {
          return !!compareCharCodeCaseInsensitive(this._peek, charCode) && (this._advance(), !0);
        }, _HtmlTokenizer.prototype._requireCharCode = function(charCode) {
          var location = this._getLocation();
          if (!this._attemptCharCode(charCode))
            throw this._createError(unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
        }, _HtmlTokenizer.prototype._attemptStr = function(chars) {
          var len = chars.length;
          if (this._index + len > this._length)
            return !1;
          for (var initialPosition = this._savePosition(),
              i = 0; i < len; i++)
            if (!this._attemptCharCode(StringWrapper.charCodeAt(chars, i)))
              return this._restorePosition(initialPosition), !1;
          return !0;
        }, _HtmlTokenizer.prototype._attemptStrCaseInsensitive = function(chars) {
          for (var i = 0; i < chars.length; i++)
            if (!this._attemptCharCodeCaseInsensitive(StringWrapper.charCodeAt(chars, i)))
              return !1;
          return !0;
        }, _HtmlTokenizer.prototype._requireStr = function(chars) {
          var location = this._getLocation();
          if (!this._attemptStr(chars))
            throw this._createError(unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
        }, _HtmlTokenizer.prototype._attemptCharCodeUntilFn = function(predicate) {
          for (; !predicate(this._peek); )
            this._advance();
        }, _HtmlTokenizer.prototype._requireCharCodeUntilFn = function(predicate, len) {
          var start = this._getLocation();
          if (this._attemptCharCodeUntilFn(predicate), this._index - start.offset < len)
            throw this._createError(unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
        }, _HtmlTokenizer.prototype._attemptUntilChar = function(char) {
          for (; this._peek !== char; )
            this._advance();
        }, _HtmlTokenizer.prototype._readChar = function(decodeEntities) {
          if (decodeEntities && this._peek === $AMPERSAND)
            return this._decodeEntity();
          var index = this._index;
          return this._advance(), this._input[index];
        }, _HtmlTokenizer.prototype._decodeEntity = function() {
          var start = this._getLocation();
          if (this._advance(), !this._attemptCharCode($HASH)) {
            var startPosition = this._savePosition();
            if (this._attemptCharCodeUntilFn(isNamedEntityEnd), this._peek != $SEMICOLON)
              return this._restorePosition(startPosition), "&";
            this._advance();
            var name_1 = this._input.substring(start.offset + 1, this._index - 1),
                char = NAMED_ENTITIES[name_1];
            if (isBlank(char))
              throw this._createError(unknownEntityErrorMsg(name_1), this._getSpan(start));
            return char;
          }
          var isHex = this._attemptCharCode($x) || this._attemptCharCode($X),
              numberStart = this._getLocation().offset;
          if (this._attemptCharCodeUntilFn(isDigitEntityEnd), this._peek != $SEMICOLON)
            throw this._createError(unexpectedCharacterErrorMsg(this._peek), this._getSpan());
          this._advance();
          var strNum = this._input.substring(numberStart, this._index - 1);
          try {
            var charCode = NumberWrapper.parseInt(strNum, isHex ? 16 : 10);
            return StringWrapper.fromCharCode(charCode);
          } catch (e) {
            var entity = this._input.substring(start.offset + 1, this._index - 1);
            throw this._createError(unknownEntityErrorMsg(entity), this._getSpan(start));
          }
        }, _HtmlTokenizer.prototype._consumeRawText = function(decodeEntities, firstCharOfEnd, attemptEndRest) {
          var tagCloseStart,
              textStart = this._getLocation();
          this._beginToken(decodeEntities ? HtmlTokenType.ESCAPABLE_RAW_TEXT : HtmlTokenType.RAW_TEXT, textStart);
          for (var parts = []; ; ) {
            if (tagCloseStart = this._getLocation(), this._attemptCharCode(firstCharOfEnd) && attemptEndRest())
              break;
            for (this._index > tagCloseStart.offset && parts.push(this._input.substring(tagCloseStart.offset, this._index)); this._peek !== firstCharOfEnd; )
              parts.push(this._readChar(decodeEntities));
          }
          return this._endToken([this._processCarriageReturns(parts.join(""))], tagCloseStart);
        }, _HtmlTokenizer.prototype._consumeComment = function(start) {
          var _this = this;
          this._beginToken(HtmlTokenType.COMMENT_START, start), this._requireCharCode($MINUS), this._endToken([]);
          var textToken = this._consumeRawText(!1, $MINUS, function() {
            return _this._attemptStr("->");
          });
          this._beginToken(HtmlTokenType.COMMENT_END, textToken.sourceSpan.end), this._endToken([]);
        }, _HtmlTokenizer.prototype._consumeCdata = function(start) {
          var _this = this;
          this._beginToken(HtmlTokenType.CDATA_START, start), this._requireStr("CDATA["), this._endToken([]);
          var textToken = this._consumeRawText(!1, $RBRACKET, function() {
            return _this._attemptStr("]>");
          });
          this._beginToken(HtmlTokenType.CDATA_END, textToken.sourceSpan.end), this._endToken([]);
        }, _HtmlTokenizer.prototype._consumeDocType = function(start) {
          this._beginToken(HtmlTokenType.DOC_TYPE, start), this._attemptUntilChar($GT), this._advance(), this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
        }, _HtmlTokenizer.prototype._consumePrefixAndName = function() {
          for (var nameOrPrefixStart = this._index,
              prefix = null; this._peek !== $COLON && !isPrefixEnd(this._peek); )
            this._advance();
          var nameStart;
          this._peek === $COLON ? (this._advance(), prefix = this._input.substring(nameOrPrefixStart, this._index - 1), nameStart = this._index) : nameStart = nameOrPrefixStart, this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
          var name = this._input.substring(nameStart, this._index);
          return [prefix, name];
        }, _HtmlTokenizer.prototype._consumeTagOpen = function(start) {
          var lowercaseTagName,
              savedPos = this._savePosition();
          try {
            if (!isAsciiLetter(this._peek))
              throw this._createError(unexpectedCharacterErrorMsg(this._peek), this._getSpan());
            var nameStart = this._index;
            for (this._consumeTagOpenStart(start), lowercaseTagName = this._input.substring(nameStart, this._index).toLowerCase(), this._attemptCharCodeUntilFn(isNotWhitespace); this._peek !== $SLASH && this._peek !== $GT; )
              this._consumeAttributeName(), this._attemptCharCodeUntilFn(isNotWhitespace), this._attemptCharCode($EQ) && (this._attemptCharCodeUntilFn(isNotWhitespace), this._consumeAttributeValue()), this._attemptCharCodeUntilFn(isNotWhitespace);
            this._consumeTagOpenEnd();
          } catch (e) {
            if (e instanceof ControlFlowError)
              return this._restorePosition(savedPos), this._beginToken(HtmlTokenType.TEXT, start), void this._endToken(["<"]);
            throw e;
          }
          var contentTokenType = getHtmlTagDefinition(lowercaseTagName).contentType;
          contentTokenType === HtmlTagContentType.RAW_TEXT ? this._consumeRawTextWithTagClose(lowercaseTagName, !1) : contentTokenType === HtmlTagContentType.ESCAPABLE_RAW_TEXT && this._consumeRawTextWithTagClose(lowercaseTagName, !0);
        }, _HtmlTokenizer.prototype._consumeRawTextWithTagClose = function(lowercaseTagName, decodeEntities) {
          var _this = this,
              textToken = this._consumeRawText(decodeEntities, $LT, function() {
                return !!_this._attemptCharCode($SLASH) && (_this._attemptCharCodeUntilFn(isNotWhitespace), !!_this._attemptStrCaseInsensitive(lowercaseTagName) && (_this._attemptCharCodeUntilFn(isNotWhitespace), !!_this._attemptCharCode($GT)));
              });
          this._beginToken(HtmlTokenType.TAG_CLOSE, textToken.sourceSpan.end), this._endToken([null, lowercaseTagName]);
        }, _HtmlTokenizer.prototype._consumeTagOpenStart = function(start) {
          this._beginToken(HtmlTokenType.TAG_OPEN_START, start);
          var parts = this._consumePrefixAndName();
          this._endToken(parts);
        }, _HtmlTokenizer.prototype._consumeAttributeName = function() {
          this._beginToken(HtmlTokenType.ATTR_NAME);
          var prefixAndName = this._consumePrefixAndName();
          this._endToken(prefixAndName);
        }, _HtmlTokenizer.prototype._consumeAttributeValue = function() {
          this._beginToken(HtmlTokenType.ATTR_VALUE);
          var value;
          if (this._peek === $SQ || this._peek === $DQ) {
            var quoteChar = this._peek;
            this._advance();
            for (var parts = []; this._peek !== quoteChar; )
              parts.push(this._readChar(!0));
            value = parts.join(""), this._advance();
          } else {
            var valueStart = this._index;
            this._requireCharCodeUntilFn(isNameEnd, 1), value = this._input.substring(valueStart, this._index);
          }
          this._endToken([this._processCarriageReturns(value)]);
        }, _HtmlTokenizer.prototype._consumeTagOpenEnd = function() {
          var tokenType = this._attemptCharCode($SLASH) ? HtmlTokenType.TAG_OPEN_END_VOID : HtmlTokenType.TAG_OPEN_END;
          this._beginToken(tokenType), this._requireCharCode($GT), this._endToken([]);
        }, _HtmlTokenizer.prototype._consumeTagClose = function(start) {
          this._beginToken(HtmlTokenType.TAG_CLOSE, start), this._attemptCharCodeUntilFn(isNotWhitespace);
          var prefixAndName = this._consumePrefixAndName();
          this._attemptCharCodeUntilFn(isNotWhitespace), this._requireCharCode($GT), this._endToken(prefixAndName);
        }, _HtmlTokenizer.prototype._consumeExpansionFormStart = function() {
          this._beginToken(HtmlTokenType.EXPANSION_FORM_START, this._getLocation()), this._requireCharCode($LBRACE), this._endToken([]), this._beginToken(HtmlTokenType.RAW_TEXT, this._getLocation());
          var condition = this._readUntil($COMMA);
          this._endToken([condition], this._getLocation()), this._requireCharCode($COMMA), this._attemptCharCodeUntilFn(isNotWhitespace), this._beginToken(HtmlTokenType.RAW_TEXT, this._getLocation());
          var type = this._readUntil($COMMA);
          this._endToken([type], this._getLocation()), this._requireCharCode($COMMA), this._attemptCharCodeUntilFn(isNotWhitespace), this._expansionCaseStack.push(HtmlTokenType.EXPANSION_FORM_START);
        }, _HtmlTokenizer.prototype._consumeExpansionCaseStart = function() {
          this._beginToken(HtmlTokenType.EXPANSION_CASE_VALUE, this._getLocation());
          var value = this._readUntil($LBRACE).trim();
          this._endToken([value], this._getLocation()), this._attemptCharCodeUntilFn(isNotWhitespace), this._beginToken(HtmlTokenType.EXPANSION_CASE_EXP_START, this._getLocation()), this._requireCharCode($LBRACE), this._endToken([], this._getLocation()), this._attemptCharCodeUntilFn(isNotWhitespace), this._expansionCaseStack.push(HtmlTokenType.EXPANSION_CASE_EXP_START);
        }, _HtmlTokenizer.prototype._consumeExpansionCaseEnd = function() {
          this._beginToken(HtmlTokenType.EXPANSION_CASE_EXP_END, this._getLocation()), this._requireCharCode($RBRACE), this._endToken([], this._getLocation()), this._attemptCharCodeUntilFn(isNotWhitespace), this._expansionCaseStack.pop();
        }, _HtmlTokenizer.prototype._consumeExpansionFormEnd = function() {
          this._beginToken(HtmlTokenType.EXPANSION_FORM_END, this._getLocation()), this._requireCharCode($RBRACE), this._endToken([]), this._expansionCaseStack.pop();
        }, _HtmlTokenizer.prototype._consumeText = function() {
          var start = this._getLocation();
          this._beginToken(HtmlTokenType.TEXT, start);
          var parts = [];
          do
            this._attemptStr(this.interpolationConfig.start) ? (parts.push(this.interpolationConfig.start), this._inInterpolation = !0) : this._attemptStr(this.interpolationConfig.end) && this._inInterpolation ? (parts.push(this.interpolationConfig.end), this._inInterpolation = !1) : parts.push(this._readChar(!0));
 while (!this._isTextEnd());
          this._endToken([this._processCarriageReturns(parts.join(""))]);
        }, _HtmlTokenizer.prototype._isTextEnd = function() {
          if (this._peek === $LT || this._peek === $EOF)
            return !0;
          if (this.tokenizeExpansionForms) {
            if (isExpansionFormStart(this._input, this._index, this.interpolationConfig.start))
              return !0;
            if (this._peek === $RBRACE && !this._inInterpolation && this._isInExpansionCase())
              return !0;
          }
          return !1;
        }, _HtmlTokenizer.prototype._savePosition = function() {
          return [this._peek, this._index, this._column, this._line, this.tokens.length];
        }, _HtmlTokenizer.prototype._readUntil = function(char) {
          var start = this._index;
          return this._attemptUntilChar(char), this._input.substring(start, this._index);
        }, _HtmlTokenizer.prototype._restorePosition = function(position) {
          this._peek = position[0], this._index = position[1], this._column = position[2], this._line = position[3];
          var nbTokens = position[4];
          nbTokens < this.tokens.length && (this.tokens = this.tokens.slice(0, nbTokens));
        }, _HtmlTokenizer.prototype._isInExpansionCase = function() {
          return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === HtmlTokenType.EXPANSION_CASE_EXP_START;
        }, _HtmlTokenizer.prototype._isInExpansionForm = function() {
          return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === HtmlTokenType.EXPANSION_FORM_START;
        }, _HtmlTokenizer;
      }(),
      HtmlTreeError = function(_super) {
        function HtmlTreeError(elementName, span, msg) {
          _super.call(this, span, msg), this.elementName = elementName;
        }
        return __extends(HtmlTreeError, _super), HtmlTreeError.create = function(elementName, span, msg) {
          return new HtmlTreeError(elementName, span, msg);
        }, HtmlTreeError;
      }(ParseError),
      HtmlParseTreeResult = function() {
        function HtmlParseTreeResult(rootNodes, errors) {
          this.rootNodes = rootNodes, this.errors = errors;
        }
        return HtmlParseTreeResult;
      }(),
      HtmlParser = function() {
        function HtmlParser() {}
        return HtmlParser.prototype.parse = function(sourceContent, sourceUrl, parseExpansionForms) {
          void 0 === parseExpansionForms && (parseExpansionForms = !1);
          var tokensAndErrors = tokenizeHtml(sourceContent, sourceUrl, parseExpansionForms),
              treeAndErrors = new TreeBuilder(tokensAndErrors.tokens).build();
          return new HtmlParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
        }, HtmlParser;
      }();
  HtmlParser.decorators = [{type: _angular_core.Injectable}];
  var PreparsedElementType,
      TreeBuilder = function() {
        function TreeBuilder(tokens) {
          this.tokens = tokens, this.index = -1, this.rootNodes = [], this.errors = [], this.elementStack = [], this._advance();
        }
        return TreeBuilder.prototype.build = function() {
          for (; this.peek.type !== HtmlTokenType.EOF; )
            this.peek.type === HtmlTokenType.TAG_OPEN_START ? this._consumeStartTag(this._advance()) : this.peek.type === HtmlTokenType.TAG_CLOSE ? this._consumeEndTag(this._advance()) : this.peek.type === HtmlTokenType.CDATA_START ? (this._closeVoidElement(), this._consumeCdata(this._advance())) : this.peek.type === HtmlTokenType.COMMENT_START ? (this._closeVoidElement(), this._consumeComment(this._advance())) : this.peek.type === HtmlTokenType.TEXT || this.peek.type === HtmlTokenType.RAW_TEXT || this.peek.type === HtmlTokenType.ESCAPABLE_RAW_TEXT ? (this._closeVoidElement(), this._consumeText(this._advance())) : this.peek.type === HtmlTokenType.EXPANSION_FORM_START ? this._consumeExpansion(this._advance()) : this._advance();
          return new HtmlParseTreeResult(this.rootNodes, this.errors);
        }, TreeBuilder.prototype._advance = function() {
          var prev = this.peek;
          return this.index < this.tokens.length - 1 && this.index++, this.peek = this.tokens[this.index], prev;
        }, TreeBuilder.prototype._advanceIf = function(type) {
          return this.peek.type === type ? this._advance() : null;
        }, TreeBuilder.prototype._consumeCdata = function(startToken) {
          this._consumeText(this._advance()), this._advanceIf(HtmlTokenType.CDATA_END);
        }, TreeBuilder.prototype._consumeComment = function(token) {
          var text = this._advanceIf(HtmlTokenType.RAW_TEXT);
          this._advanceIf(HtmlTokenType.COMMENT_END);
          var value = isPresent(text) ? text.parts[0].trim() : null;
          this._addToParent(new HtmlCommentAst(value, token.sourceSpan));
        }, TreeBuilder.prototype._consumeExpansion = function(token) {
          for (var switchValue = this._advance(),
              type = this._advance(),
              cases = []; this.peek.type === HtmlTokenType.EXPANSION_CASE_VALUE; ) {
            var expCase = this._parseExpansionCase();
            if (isBlank(expCase))
              return;
            cases.push(expCase);
          }
          if (this.peek.type !== HtmlTokenType.EXPANSION_FORM_END)
            return void this.errors.push(HtmlTreeError.create(null, this.peek.sourceSpan, "Invalid expansion form. Missing '}'."));
          this._advance();
          var mainSourceSpan = new ParseSourceSpan(token.sourceSpan.start, this.peek.sourceSpan.end);
          this._addToParent(new HtmlExpansionAst(switchValue.parts[0], type.parts[0], cases, mainSourceSpan, switchValue.sourceSpan));
        }, TreeBuilder.prototype._parseExpansionCase = function() {
          var value = this._advance();
          if (this.peek.type !== HtmlTokenType.EXPANSION_CASE_EXP_START)
            return this.errors.push(HtmlTreeError.create(null, this.peek.sourceSpan, "Invalid expansion form. Missing '{'.,")), null;
          var start = this._advance(),
              exp = this._collectExpansionExpTokens(start);
          if (isBlank(exp))
            return null;
          var end = this._advance();
          exp.push(new HtmlToken(HtmlTokenType.EOF, [], end.sourceSpan));
          var parsedExp = new TreeBuilder(exp).build();
          if (parsedExp.errors.length > 0)
            return this.errors = this.errors.concat(parsedExp.errors), null;
          var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end),
              expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
          return new HtmlExpansionCaseAst(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
        }, TreeBuilder.prototype._collectExpansionExpTokens = function(start) {
          for (var exp = [],
              expansionFormStack = [HtmlTokenType.EXPANSION_CASE_EXP_START]; ; ) {
            if (this.peek.type !== HtmlTokenType.EXPANSION_FORM_START && this.peek.type !== HtmlTokenType.EXPANSION_CASE_EXP_START || expansionFormStack.push(this.peek.type), this.peek.type === HtmlTokenType.EXPANSION_CASE_EXP_END) {
              if (!lastOnStack(expansionFormStack, HtmlTokenType.EXPANSION_CASE_EXP_START))
                return this.errors.push(HtmlTreeError.create(null, start.sourceSpan, "Invalid expansion form. Missing '}'.")), null;
              if (expansionFormStack.pop(), 0 == expansionFormStack.length)
                return exp;
            }
            if (this.peek.type === HtmlTokenType.EXPANSION_FORM_END) {
              if (!lastOnStack(expansionFormStack, HtmlTokenType.EXPANSION_FORM_START))
                return this.errors.push(HtmlTreeError.create(null, start.sourceSpan, "Invalid expansion form. Missing '}'.")), null;
              expansionFormStack.pop();
            }
            if (this.peek.type === HtmlTokenType.EOF)
              return this.errors.push(HtmlTreeError.create(null, start.sourceSpan, "Invalid expansion form. Missing '}'.")), null;
            exp.push(this._advance());
          }
        }, TreeBuilder.prototype._consumeText = function(token) {
          var text = token.parts[0];
          if (text.length > 0 && "\n" == text[0]) {
            var parent_1 = this._getParentElement();
            isPresent(parent_1) && 0 == parent_1.children.length && getHtmlTagDefinition(parent_1.name).ignoreFirstLf && (text = text.substring(1));
          }
          text.length > 0 && this._addToParent(new HtmlTextAst(text, token.sourceSpan));
        }, TreeBuilder.prototype._closeVoidElement = function() {
          if (this.elementStack.length > 0) {
            var el = ListWrapper.last(this.elementStack);
            getHtmlTagDefinition(el.name).isVoid && this.elementStack.pop();
          }
        }, TreeBuilder.prototype._consumeStartTag = function(startTagToken) {
          for (var prefix = startTagToken.parts[0],
              name = startTagToken.parts[1],
              attrs = []; this.peek.type === HtmlTokenType.ATTR_NAME; )
            attrs.push(this._consumeAttr(this._advance()));
          var fullName = getElementFullName(prefix, name, this._getParentElement()),
              selfClosing = !1;
          this.peek.type === HtmlTokenType.TAG_OPEN_END_VOID ? (this._advance(), selfClosing = !0, null != getNsPrefix(fullName) || getHtmlTagDefinition(fullName).isVoid || this.errors.push(HtmlTreeError.create(fullName, startTagToken.sourceSpan, 'Only void and foreign elements can be self closed "' + startTagToken.parts[1] + '"'))) : this.peek.type === HtmlTokenType.TAG_OPEN_END && (this._advance(), selfClosing = !1);
          var end = this.peek.sourceSpan.start,
              span = new ParseSourceSpan(startTagToken.sourceSpan.start, end),
              el = new HtmlElementAst(fullName, attrs, [], span, span, null);
          this._pushElement(el), selfClosing && (this._popElement(fullName), el.endSourceSpan = span);
        }, TreeBuilder.prototype._pushElement = function(el) {
          if (this.elementStack.length > 0) {
            var parentEl = ListWrapper.last(this.elementStack);
            getHtmlTagDefinition(parentEl.name).isClosedByChild(el.name) && this.elementStack.pop();
          }
          var tagDef = getHtmlTagDefinition(el.name),
              _a = this._getParentElementSkippingContainers(),
              parent = _a.parent,
              container = _a.container;
          if (isPresent(parent) && tagDef.requireExtraParent(parent.name)) {
            var newParent = new HtmlElementAst(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
            this._insertBeforeContainer(parent, container, newParent);
          }
          this._addToParent(el), this.elementStack.push(el);
        }, TreeBuilder.prototype._consumeEndTag = function(endTagToken) {
          var fullName = getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
          this._getParentElement() && (this._getParentElement().endSourceSpan = endTagToken.sourceSpan), getHtmlTagDefinition(fullName).isVoid ? this.errors.push(HtmlTreeError.create(fullName, endTagToken.sourceSpan, 'Void elements do not have end tags "' + endTagToken.parts[1] + '"')) : this._popElement(fullName) || this.errors.push(HtmlTreeError.create(fullName, endTagToken.sourceSpan, 'Unexpected closing tag "' + endTagToken.parts[1] + '"'));
        }, TreeBuilder.prototype._popElement = function(fullName) {
          for (var stackIndex = this.elementStack.length - 1; stackIndex >= 0; stackIndex--) {
            var el = this.elementStack[stackIndex];
            if (el.name == fullName)
              return ListWrapper.splice(this.elementStack, stackIndex, this.elementStack.length - stackIndex), !0;
            if (!getHtmlTagDefinition(el.name).closedByParent)
              return !1;
          }
          return !1;
        }, TreeBuilder.prototype._consumeAttr = function(attrName) {
          var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]),
              end = attrName.sourceSpan.end,
              value = "";
          if (this.peek.type === HtmlTokenType.ATTR_VALUE) {
            var valueToken = this._advance();
            value = valueToken.parts[0], end = valueToken.sourceSpan.end;
          }
          return new HtmlAttrAst(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end));
        }, TreeBuilder.prototype._getParentElement = function() {
          return this.elementStack.length > 0 ? ListWrapper.last(this.elementStack) : null;
        }, TreeBuilder.prototype._getParentElementSkippingContainers = function() {
          for (var container = null,
              i = this.elementStack.length - 1; i >= 0; i--) {
            if ("ng-container" !== this.elementStack[i].name)
              return {
                parent: this.elementStack[i],
                container: container
              };
            container = this.elementStack[i];
          }
          return {
            parent: ListWrapper.last(this.elementStack),
            container: container
          };
        }, TreeBuilder.prototype._addToParent = function(node) {
          var parent = this._getParentElement();
          isPresent(parent) ? parent.children.push(node) : this.rootNodes.push(node);
        }, TreeBuilder.prototype._insertBeforeContainer = function(parent, container, node) {
          if (container) {
            if (parent) {
              var index = parent.children.indexOf(container);
              parent.children[index] = node;
            } else
              this.rootNodes.push(node);
            node.children.push(container), this.elementStack.splice(this.elementStack.indexOf(container), 0, node);
          } else
            this._addToParent(node), this.elementStack.push(node);
        }, TreeBuilder;
      }(),
      _EMPTY_ATTR_VALUE = "",
      _SELECTOR_REGEXP = RegExpWrapper.create("(\\:not\\()|([-\\w]+)|(?:\\.([-\\w]+))|(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|(\\))|(\\s*,\\s*)"),
      CssSelector = function() {
        function CssSelector() {
          this.element = null, this.classNames = [], this.attrs = [], this.notSelectors = [];
        }
        return CssSelector.parse = function(selector) {
          for (var match,
              results = [],
              _addResult = function(res, cssSel) {
                cssSel.notSelectors.length > 0 && isBlank(cssSel.element) && ListWrapper.isEmpty(cssSel.classNames) && ListWrapper.isEmpty(cssSel.attrs) && (cssSel.element = "*"), res.push(cssSel);
              },
              cssSelector = new CssSelector,
              matcher = RegExpWrapper.matcher(_SELECTOR_REGEXP, selector),
              current = cssSelector,
              inNot = !1; isPresent(match = RegExpMatcherWrapper.next(matcher)); ) {
            if (isPresent(match[1])) {
              if (inNot)
                throw new BaseException$1("Nesting :not is not allowed in a selector");
              inNot = !0, current = new CssSelector, cssSelector.notSelectors.push(current);
            }
            if (isPresent(match[2]) && current.setElement(match[2]), isPresent(match[3]) && current.addClassName(match[3]), isPresent(match[4]) && current.addAttribute(match[4], match[5]), isPresent(match[6]) && (inNot = !1, current = cssSelector), isPresent(match[7])) {
              if (inNot)
                throw new BaseException$1("Multiple selectors in :not are not supported");
              _addResult(results, cssSelector), cssSelector = current = new CssSelector;
            }
          }
          return _addResult(results, cssSelector), results;
        }, CssSelector.prototype.isElementSelector = function() {
          return isPresent(this.element) && ListWrapper.isEmpty(this.classNames) && ListWrapper.isEmpty(this.attrs) && 0 === this.notSelectors.length;
        }, CssSelector.prototype.setElement = function(element) {
          void 0 === element && (element = null), this.element = element;
        }, CssSelector.prototype.getMatchingElementTemplate = function() {
          for (var tagName = isPresent(this.element) ? this.element : "div",
              classAttr = this.classNames.length > 0 ? ' class="' + this.classNames.join(" ") + '"' : "",
              attrs = "",
              i = 0; i < this.attrs.length; i += 2) {
            var attrName = this.attrs[i],
                attrValue = "" !== this.attrs[i + 1] ? '="' + this.attrs[i + 1] + '"' : "";
            attrs += " " + attrName + attrValue;
          }
          return "<" + tagName + classAttr + attrs + "></" + tagName + ">";
        }, CssSelector.prototype.addAttribute = function(name, value) {
          void 0 === value && (value = _EMPTY_ATTR_VALUE), this.attrs.push(name), value = isPresent(value) ? value.toLowerCase() : _EMPTY_ATTR_VALUE, this.attrs.push(value);
        }, CssSelector.prototype.addClassName = function(name) {
          this.classNames.push(name.toLowerCase());
        }, CssSelector.prototype.toString = function() {
          var res = "";
          if (isPresent(this.element) && (res += this.element), isPresent(this.classNames))
            for (var i = 0; i < this.classNames.length; i++)
              res += "." + this.classNames[i];
          if (isPresent(this.attrs))
            for (var i = 0; i < this.attrs.length; ) {
              var attrName = this.attrs[i++],
                  attrValue = this.attrs[i++];
              res += "[" + attrName, attrValue.length > 0 && (res += "=" + attrValue), res += "]";
            }
          return this.notSelectors.forEach(function(notSelector) {
            return res += ":not(" + notSelector + ")";
          }), res;
        }, CssSelector;
      }(),
      SelectorMatcher = function() {
        function SelectorMatcher() {
          this._elementMap = new Map$1, this._elementPartialMap = new Map$1, this._classMap = new Map$1, this._classPartialMap = new Map$1, this._attrValueMap = new Map$1, this._attrValuePartialMap = new Map$1, this._listContexts = [];
        }
        return SelectorMatcher.createNotMatcher = function(notSelectors) {
          var notMatcher = new SelectorMatcher;
          return notMatcher.addSelectables(notSelectors, null), notMatcher;
        }, SelectorMatcher.prototype.addSelectables = function(cssSelectors, callbackCtxt) {
          var listContext = null;
          cssSelectors.length > 1 && (listContext = new SelectorListContext(cssSelectors), this._listContexts.push(listContext));
          for (var i = 0; i < cssSelectors.length; i++)
            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
        }, SelectorMatcher.prototype._addSelectable = function(cssSelector, callbackCtxt, listContext) {
          var matcher = this,
              element = cssSelector.element,
              classNames = cssSelector.classNames,
              attrs = cssSelector.attrs,
              selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
          if (isPresent(element)) {
            var isTerminal = 0 === attrs.length && 0 === classNames.length;
            isTerminal ? this._addTerminal(matcher._elementMap, element, selectable) : matcher = this._addPartial(matcher._elementPartialMap, element);
          }
          if (isPresent(classNames))
            for (var index = 0; index < classNames.length; index++) {
              var isTerminal = 0 === attrs.length && index === classNames.length - 1,
                  className = classNames[index];
              isTerminal ? this._addTerminal(matcher._classMap, className, selectable) : matcher = this._addPartial(matcher._classPartialMap, className);
            }
          if (isPresent(attrs))
            for (var index = 0; index < attrs.length; ) {
              var isTerminal = index === attrs.length - 2,
                  attrName = attrs[index++],
                  attrValue = attrs[index++];
              if (isTerminal) {
                var terminalMap = matcher._attrValueMap,
                    terminalValuesMap = terminalMap.get(attrName);
                isBlank(terminalValuesMap) && (terminalValuesMap = new Map$1, terminalMap.set(attrName, terminalValuesMap)), this._addTerminal(terminalValuesMap, attrValue, selectable);
              } else {
                var parttialMap = matcher._attrValuePartialMap,
                    partialValuesMap = parttialMap.get(attrName);
                isBlank(partialValuesMap) && (partialValuesMap = new Map$1, parttialMap.set(attrName, partialValuesMap)), matcher = this._addPartial(partialValuesMap, attrValue);
              }
            }
        }, SelectorMatcher.prototype._addTerminal = function(map, name, selectable) {
          var terminalList = map.get(name);
          isBlank(terminalList) && (terminalList = [], map.set(name, terminalList)), terminalList.push(selectable);
        }, SelectorMatcher.prototype._addPartial = function(map, name) {
          var matcher = map.get(name);
          return isBlank(matcher) && (matcher = new SelectorMatcher, map.set(name, matcher)), matcher;
        }, SelectorMatcher.prototype.match = function(cssSelector, matchedCallback) {
          for (var result = !1,
              element = cssSelector.element,
              classNames = cssSelector.classNames,
              attrs = cssSelector.attrs,
              i = 0; i < this._listContexts.length; i++)
            this._listContexts[i].alreadyMatched = !1;
          if (result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result, result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result, isPresent(classNames))
            for (var index = 0; index < classNames.length; index++) {
              var className = classNames[index];
              result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result, result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
            }
          if (isPresent(attrs))
            for (var index = 0; index < attrs.length; ) {
              var attrName = attrs[index++],
                  attrValue = attrs[index++],
                  terminalValuesMap = this._attrValueMap.get(attrName);
              StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE) || (result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result), result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) || result;
              var partialValuesMap = this._attrValuePartialMap.get(attrName);
              StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE) || (result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result), result = this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
            }
          return result;
        }, SelectorMatcher.prototype._matchTerminal = function(map, name, cssSelector, matchedCallback) {
          if (isBlank(map) || isBlank(name))
            return !1;
          var selectables = map.get(name),
              starSelectables = map.get("*");
          if (isPresent(starSelectables) && (selectables = selectables.concat(starSelectables)), isBlank(selectables))
            return !1;
          for (var selectable,
              result = !1,
              index = 0; index < selectables.length; index++)
            selectable = selectables[index], result = selectable.finalize(cssSelector, matchedCallback) || result;
          return result;
        }, SelectorMatcher.prototype._matchPartial = function(map, name, cssSelector, matchedCallback) {
          if (isBlank(map) || isBlank(name))
            return !1;
          var nestedSelector = map.get(name);
          return !isBlank(nestedSelector) && nestedSelector.match(cssSelector, matchedCallback);
        }, SelectorMatcher;
      }(),
      SelectorListContext = function() {
        function SelectorListContext(selectors) {
          this.selectors = selectors, this.alreadyMatched = !1;
        }
        return SelectorListContext;
      }(),
      SelectorContext = function() {
        function SelectorContext(selector, cbContext, listContext) {
          this.selector = selector, this.cbContext = cbContext, this.listContext = listContext, this.notSelectors = selector.notSelectors;
        }
        return SelectorContext.prototype.finalize = function(cssSelector, callback) {
          var result = !0;
          if (this.notSelectors.length > 0 && (isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
            var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
            result = !notMatcher.match(cssSelector, null);
          }
          return result && isPresent(callback) && (isBlank(this.listContext) || !this.listContext.alreadyMatched) && (isPresent(this.listContext) && (this.listContext.alreadyMatched = !0), callback(this.selector, this.cbContext)), result;
        }, SelectorContext;
      }(),
      ElementSchemaRegistry = function() {
        function ElementSchemaRegistry() {}
        return ElementSchemaRegistry;
      }(),
      NG_CONTENT_SELECT_ATTR = "select",
      NG_CONTENT_ELEMENT = "ng-content",
      LINK_ELEMENT = "link",
      LINK_STYLE_REL_ATTR = "rel",
      LINK_STYLE_HREF_ATTR = "href",
      LINK_STYLE_REL_VALUE = "stylesheet",
      STYLE_ELEMENT = "style",
      SCRIPT_ELEMENT = "script",
      NG_NON_BINDABLE_ATTR = "ngNonBindable",
      NG_PROJECT_AS = "ngProjectAs";
  !function(PreparsedElementType) {
    PreparsedElementType[PreparsedElementType.NG_CONTENT = 0] = "NG_CONTENT", PreparsedElementType[PreparsedElementType.STYLE = 1] = "STYLE", PreparsedElementType[PreparsedElementType.STYLESHEET = 2] = "STYLESHEET", PreparsedElementType[PreparsedElementType.SCRIPT = 3] = "SCRIPT", PreparsedElementType[PreparsedElementType.OTHER = 4] = "OTHER";
  }(PreparsedElementType || (PreparsedElementType = {}));
  var PreparsedElement = function() {
    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
      this.type = type, this.selectAttr = selectAttr, this.hrefAttr = hrefAttr, this.nonBindable = nonBindable, this.projectAs = projectAs;
    }
    return PreparsedElement;
  }(),
      StyleWithImports = function() {
        function StyleWithImports(style, styleUrls) {
          this.style = style, this.styleUrls = styleUrls;
        }
        return StyleWithImports;
      }(),
      _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g,
      _urlWithSchemaRe = /^([a-zA-Z\-\+\.]+):/g,
      MODULE_SUFFIX = IS_DART ? ".dart" : "",
      CAMEL_CASE_REGEXP = /([A-Z])/g,
      ValueTransformer = function() {
        function ValueTransformer() {}
        return ValueTransformer.prototype.visitArray = function(arr, context) {
          var _this = this;
          return arr.map(function(value) {
            return visitValue(value, _this, context);
          });
        }, ValueTransformer.prototype.visitStringMap = function(map, context) {
          var _this = this,
              result = {};
          return StringMapWrapper.forEach(map, function(value, key) {
            result[key] = visitValue(value, _this, context);
          }), result;
        }, ValueTransformer.prototype.visitPrimitive = function(value, context) {
          return value;
        }, ValueTransformer.prototype.visitOther = function(value, context) {
          return value;
        }, ValueTransformer;
      }(),
      _ASSET_SCHEME = "asset:",
      DEFAULT_PACKAGE_URL_PROVIDER = {
        provide: _angular_core.PACKAGE_ROOT_URL,
        useValue: "/"
      },
      UrlResolver = function() {
        function UrlResolver(_packagePrefix) {
          void 0 === _packagePrefix && (_packagePrefix = null), this._packagePrefix = _packagePrefix;
        }
        return UrlResolver.prototype.resolve = function(baseUrl, url) {
          var resolvedUrl = url;
          isPresent(baseUrl) && baseUrl.length > 0 && (resolvedUrl = _resolveUrl(baseUrl, resolvedUrl));
          var resolvedParts = _split(resolvedUrl),
              prefix = this._packagePrefix;
          if (isPresent(prefix) && isPresent(resolvedParts) && "package" == resolvedParts[_ComponentIndex.Scheme]) {
            var path = resolvedParts[_ComponentIndex.Path];
            if (this._packagePrefix !== _ASSET_SCHEME)
              return prefix = StringWrapper.stripRight(prefix, "/"), path = StringWrapper.stripLeft(path, "/"), prefix + "/" + path;
            var pathSegements = path.split(/\//);
            resolvedUrl = "asset:" + pathSegements[0] + "/lib/" + pathSegements.slice(1).join("/");
          }
          return resolvedUrl;
        }, UrlResolver;
      }();
  UrlResolver.decorators = [{type: _angular_core.Injectable}], UrlResolver.ctorParameters = [{
    type: void 0,
    decorators: [{
      type: _angular_core.Inject,
      args: [_angular_core.PACKAGE_ROOT_URL]
    }]
  }];
  var _ComponentIndex,
      _splitRe = RegExpWrapper.create("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$");
  !function(_ComponentIndex) {
    _ComponentIndex[_ComponentIndex.Scheme = 1] = "Scheme", _ComponentIndex[_ComponentIndex.UserInfo = 2] = "UserInfo", _ComponentIndex[_ComponentIndex.Domain = 3] = "Domain", _ComponentIndex[_ComponentIndex.Port = 4] = "Port", _ComponentIndex[_ComponentIndex.Path = 5] = "Path", _ComponentIndex[_ComponentIndex.QueryData = 6] = "QueryData", _ComponentIndex[_ComponentIndex.Fragment = 7] = "Fragment";
  }(_ComponentIndex || (_ComponentIndex = {}));
  var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))$/g,
      CompileMetadataWithIdentifier = function() {
        function CompileMetadataWithIdentifier() {}
        return Object.defineProperty(CompileMetadataWithIdentifier.prototype, "identifier", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), CompileMetadataWithIdentifier;
      }(),
      CompileMetadataWithType = function(_super) {
        function CompileMetadataWithType() {
          _super.apply(this, arguments);
        }
        return __extends(CompileMetadataWithType, _super), Object.defineProperty(CompileMetadataWithType.prototype, "type", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompileMetadataWithType.prototype, "identifier", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), CompileMetadataWithType;
      }(CompileMetadataWithIdentifier),
      CompileAnimationEntryMetadata = function() {
        function CompileAnimationEntryMetadata(name, definitions) {
          void 0 === name && (name = null), void 0 === definitions && (definitions = null), this.name = name, this.definitions = definitions;
        }
        return CompileAnimationEntryMetadata.fromJson = function(data) {
          var value = data.value,
              defs = _arrayFromJson(value.definitions, metadataFromJson);
          return new CompileAnimationEntryMetadata(value.name, defs);
        }, CompileAnimationEntryMetadata.prototype.toJson = function() {
          return {
            class: "AnimationEntryMetadata",
            value: {
              name: this.name,
              definitions: _arrayToJson(this.definitions)
            }
          };
        }, CompileAnimationEntryMetadata;
      }(),
      CompileAnimationStateMetadata = function() {
        function CompileAnimationStateMetadata() {}
        return CompileAnimationStateMetadata;
      }(),
      CompileAnimationStateDeclarationMetadata = function(_super) {
        function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
          _super.call(this), this.stateNameExpr = stateNameExpr, this.styles = styles;
        }
        return __extends(CompileAnimationStateDeclarationMetadata, _super), CompileAnimationStateDeclarationMetadata.fromJson = function(data) {
          var value = data.value,
              styles = _objFromJson(value.styles, metadataFromJson);
          return new CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
        }, CompileAnimationStateDeclarationMetadata.prototype.toJson = function() {
          return {
            class: "AnimationStateDeclarationMetadata",
            value: {
              stateNameExpr: this.stateNameExpr,
              styles: this.styles.toJson()
            }
          };
        }, CompileAnimationStateDeclarationMetadata;
      }(CompileAnimationStateMetadata),
      CompileAnimationStateTransitionMetadata = function(_super) {
        function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
          _super.call(this), this.stateChangeExpr = stateChangeExpr, this.steps = steps;
        }
        return __extends(CompileAnimationStateTransitionMetadata, _super), CompileAnimationStateTransitionMetadata.fromJson = function(data) {
          var value = data.value,
              steps = _objFromJson(value.steps, metadataFromJson);
          return new CompileAnimationStateTransitionMetadata(value.stateChangeExpr, steps);
        }, CompileAnimationStateTransitionMetadata.prototype.toJson = function() {
          return {
            class: "AnimationStateTransitionMetadata",
            value: {
              stateChangeExpr: this.stateChangeExpr,
              steps: this.steps.toJson()
            }
          };
        }, CompileAnimationStateTransitionMetadata;
      }(CompileAnimationStateMetadata),
      CompileAnimationMetadata = function() {
        function CompileAnimationMetadata() {}
        return CompileAnimationMetadata;
      }(),
      CompileAnimationKeyframesSequenceMetadata = function(_super) {
        function CompileAnimationKeyframesSequenceMetadata(steps) {
          void 0 === steps && (steps = []), _super.call(this), this.steps = steps;
        }
        return __extends(CompileAnimationKeyframesSequenceMetadata, _super), CompileAnimationKeyframesSequenceMetadata.fromJson = function(data) {
          var steps = _arrayFromJson(data.value, metadataFromJson);
          return new CompileAnimationKeyframesSequenceMetadata(steps);
        }, CompileAnimationKeyframesSequenceMetadata.prototype.toJson = function() {
          return {
            class: "AnimationKeyframesSequenceMetadata",
            value: _arrayToJson(this.steps)
          };
        }, CompileAnimationKeyframesSequenceMetadata;
      }(CompileAnimationMetadata),
      CompileAnimationStyleMetadata = function(_super) {
        function CompileAnimationStyleMetadata(offset, styles) {
          void 0 === styles && (styles = null), _super.call(this), this.offset = offset, this.styles = styles;
        }
        return __extends(CompileAnimationStyleMetadata, _super), CompileAnimationStyleMetadata.fromJson = function(data) {
          var value = data.value,
              offsetVal = value.offset,
              offset = isPresent(offsetVal) ? NumberWrapper.parseFloat(offsetVal) : null,
              styles = value.styles;
          return new CompileAnimationStyleMetadata(offset, styles);
        }, CompileAnimationStyleMetadata.prototype.toJson = function() {
          return {
            class: "AnimationStyleMetadata",
            value: {
              offset: this.offset,
              styles: this.styles
            }
          };
        }, CompileAnimationStyleMetadata;
      }(CompileAnimationMetadata),
      CompileAnimationAnimateMetadata = function(_super) {
        function CompileAnimationAnimateMetadata(timings, styles) {
          void 0 === timings && (timings = 0), void 0 === styles && (styles = null), _super.call(this), this.timings = timings, this.styles = styles;
        }
        return __extends(CompileAnimationAnimateMetadata, _super), CompileAnimationAnimateMetadata.fromJson = function(data) {
          var value = data.value,
              timings = value.timings,
              styles = _objFromJson(value.styles, metadataFromJson);
          return new CompileAnimationAnimateMetadata(timings, styles);
        }, CompileAnimationAnimateMetadata.prototype.toJson = function() {
          return {
            class: "AnimationAnimateMetadata",
            value: {
              timings: this.timings,
              styles: _objToJson(this.styles)
            }
          };
        }, CompileAnimationAnimateMetadata;
      }(CompileAnimationMetadata),
      CompileAnimationWithStepsMetadata = function(_super) {
        function CompileAnimationWithStepsMetadata(steps) {
          void 0 === steps && (steps = null), _super.call(this), this.steps = steps;
        }
        return __extends(CompileAnimationWithStepsMetadata, _super), CompileAnimationWithStepsMetadata;
      }(CompileAnimationMetadata),
      CompileAnimationSequenceMetadata = function(_super) {
        function CompileAnimationSequenceMetadata(steps) {
          void 0 === steps && (steps = null), _super.call(this, steps);
        }
        return __extends(CompileAnimationSequenceMetadata, _super), CompileAnimationSequenceMetadata.fromJson = function(data) {
          var steps = _arrayFromJson(data.value, metadataFromJson);
          return new CompileAnimationSequenceMetadata(steps);
        }, CompileAnimationSequenceMetadata.prototype.toJson = function() {
          return {
            class: "AnimationSequenceMetadata",
            value: _arrayToJson(this.steps)
          };
        }, CompileAnimationSequenceMetadata;
      }(CompileAnimationWithStepsMetadata),
      CompileAnimationGroupMetadata = function(_super) {
        function CompileAnimationGroupMetadata(steps) {
          void 0 === steps && (steps = null), _super.call(this, steps);
        }
        return __extends(CompileAnimationGroupMetadata, _super), CompileAnimationGroupMetadata.fromJson = function(data) {
          var steps = _arrayFromJson(data.value, metadataFromJson);
          return new CompileAnimationGroupMetadata(steps);
        }, CompileAnimationGroupMetadata.prototype.toJson = function() {
          return {
            class: "AnimationGroupMetadata",
            value: _arrayToJson(this.steps)
          };
        }, CompileAnimationGroupMetadata;
      }(CompileAnimationWithStepsMetadata),
      CompileIdentifierMetadata = function() {
        function CompileIdentifierMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              runtime = _b.runtime,
              name = _b.name,
              moduleUrl = _b.moduleUrl,
              prefix = _b.prefix,
              value = _b.value;
          this.runtime = runtime, this.name = name, this.prefix = prefix, this.moduleUrl = moduleUrl, this.value = value;
        }
        return CompileIdentifierMetadata.fromJson = function(data) {
          var value = isArray(data.value) ? _arrayFromJson(data.value, metadataFromJson) : _objFromJson(data.value, metadataFromJson);
          return new CompileIdentifierMetadata({
            name: data.name,
            prefix: data.prefix,
            moduleUrl: data.moduleUrl,
            value: value
          });
        }, CompileIdentifierMetadata.prototype.toJson = function() {
          var value = isArray(this.value) ? _arrayToJson(this.value) : _objToJson(this.value);
          return {
            class: "Identifier",
            name: this.name,
            moduleUrl: this.moduleUrl,
            prefix: this.prefix,
            value: value
          };
        }, Object.defineProperty(CompileIdentifierMetadata.prototype, "identifier", {
          get: function() {
            return this;
          },
          enumerable: !0,
          configurable: !0
        }), CompileIdentifierMetadata;
      }(),
      CompileDiDependencyMetadata = function() {
        function CompileDiDependencyMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              isAttribute = _b.isAttribute,
              isSelf = _b.isSelf,
              isHost = _b.isHost,
              isSkipSelf = _b.isSkipSelf,
              isOptional = _b.isOptional,
              isValue = _b.isValue,
              query = _b.query,
              viewQuery = _b.viewQuery,
              token = _b.token,
              value = _b.value;
          this.isAttribute = normalizeBool(isAttribute), this.isSelf = normalizeBool(isSelf), this.isHost = normalizeBool(isHost), this.isSkipSelf = normalizeBool(isSkipSelf), this.isOptional = normalizeBool(isOptional), this.isValue = normalizeBool(isValue), this.query = query, this.viewQuery = viewQuery, this.token = token, this.value = value;
        }
        return CompileDiDependencyMetadata.fromJson = function(data) {
          return new CompileDiDependencyMetadata({
            token: _objFromJson(data.token, CompileTokenMetadata.fromJson),
            query: _objFromJson(data.query, CompileQueryMetadata.fromJson),
            viewQuery: _objFromJson(data.viewQuery, CompileQueryMetadata.fromJson),
            value: data.value,
            isAttribute: data.isAttribute,
            isSelf: data.isSelf,
            isHost: data.isHost,
            isSkipSelf: data.isSkipSelf,
            isOptional: data.isOptional,
            isValue: data.isValue
          });
        }, CompileDiDependencyMetadata.prototype.toJson = function() {
          return {
            token: _objToJson(this.token),
            query: _objToJson(this.query),
            viewQuery: _objToJson(this.viewQuery),
            value: this.value,
            isAttribute: this.isAttribute,
            isSelf: this.isSelf,
            isHost: this.isHost,
            isSkipSelf: this.isSkipSelf,
            isOptional: this.isOptional,
            isValue: this.isValue
          };
        }, CompileDiDependencyMetadata;
      }(),
      CompileProviderMetadata = function() {
        function CompileProviderMetadata(_a) {
          var token = _a.token,
              useClass = _a.useClass,
              useValue = _a.useValue,
              useExisting = _a.useExisting,
              useFactory = _a.useFactory,
              deps = _a.deps,
              multi = _a.multi;
          this.token = token, this.useClass = useClass, this.useValue = useValue, this.useExisting = useExisting, this.useFactory = useFactory, this.deps = normalizeBlank(deps), this.multi = normalizeBool(multi);
        }
        return CompileProviderMetadata.fromJson = function(data) {
          return new CompileProviderMetadata({
            token: _objFromJson(data.token, CompileTokenMetadata.fromJson),
            useClass: _objFromJson(data.useClass, CompileTypeMetadata.fromJson),
            useExisting: _objFromJson(data.useExisting, CompileTokenMetadata.fromJson),
            useValue: _objFromJson(data.useValue, CompileIdentifierMetadata.fromJson),
            useFactory: _objFromJson(data.useFactory, CompileFactoryMetadata.fromJson),
            multi: data.multi,
            deps: _arrayFromJson(data.deps, CompileDiDependencyMetadata.fromJson)
          });
        }, CompileProviderMetadata.prototype.toJson = function() {
          return {
            class: "Provider",
            token: _objToJson(this.token),
            useClass: _objToJson(this.useClass),
            useExisting: _objToJson(this.useExisting),
            useValue: _objToJson(this.useValue),
            useFactory: _objToJson(this.useFactory),
            multi: this.multi,
            deps: _arrayToJson(this.deps)
          };
        }, CompileProviderMetadata;
      }(),
      CompileFactoryMetadata = function() {
        function CompileFactoryMetadata(_a) {
          var runtime = _a.runtime,
              name = _a.name,
              moduleUrl = _a.moduleUrl,
              prefix = _a.prefix,
              diDeps = _a.diDeps,
              value = _a.value;
          this.runtime = runtime, this.name = name, this.prefix = prefix, this.moduleUrl = moduleUrl, this.diDeps = _normalizeArray(diDeps), this.value = value;
        }
        return Object.defineProperty(CompileFactoryMetadata.prototype, "identifier", {
          get: function() {
            return this;
          },
          enumerable: !0,
          configurable: !0
        }), CompileFactoryMetadata.fromJson = function(data) {
          return new CompileFactoryMetadata({
            name: data.name,
            prefix: data.prefix,
            moduleUrl: data.moduleUrl,
            value: data.value,
            diDeps: _arrayFromJson(data.diDeps, CompileDiDependencyMetadata.fromJson)
          });
        }, CompileFactoryMetadata.prototype.toJson = function() {
          return {
            class: "Factory",
            name: this.name,
            prefix: this.prefix,
            moduleUrl: this.moduleUrl,
            value: this.value,
            diDeps: _arrayToJson(this.diDeps)
          };
        }, CompileFactoryMetadata;
      }(),
      UNDEFINED = new Object,
      CompileTokenMetadata = function() {
        function CompileTokenMetadata(_a) {
          var value = _a.value,
              identifier = _a.identifier,
              identifierIsInstance = _a.identifierIsInstance;
          this._assetCacheKey = UNDEFINED, this.value = value, this.identifier = identifier, this.identifierIsInstance = normalizeBool(identifierIsInstance);
        }
        return CompileTokenMetadata.fromJson = function(data) {
          return new CompileTokenMetadata({
            value: data.value,
            identifier: _objFromJson(data.identifier, CompileIdentifierMetadata.fromJson),
            identifierIsInstance: data.identifierIsInstance
          });
        }, CompileTokenMetadata.prototype.toJson = function() {
          return {
            value: this.value,
            identifier: _objToJson(this.identifier),
            identifierIsInstance: this.identifierIsInstance
          };
        }, Object.defineProperty(CompileTokenMetadata.prototype, "runtimeCacheKey", {
          get: function() {
            return isPresent(this.identifier) ? this.identifier.runtime : this.value;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompileTokenMetadata.prototype, "assetCacheKey", {
          get: function() {
            if (this._assetCacheKey === UNDEFINED)
              if (isPresent(this.identifier))
                if (isPresent(this.identifier.moduleUrl) && isPresent(getUrlScheme(this.identifier.moduleUrl))) {
                  var uri = reflector.importUri({
                    filePath: this.identifier.moduleUrl,
                    name: this.identifier.name
                  });
                  this._assetCacheKey = this.identifier.name + "|" + uri + "|" + this.identifierIsInstance;
                } else
                  this._assetCacheKey = null;
              else
                this._assetCacheKey = this.value;
            return this._assetCacheKey;
          },
          enumerable: !0,
          configurable: !0
        }), CompileTokenMetadata.prototype.equalsTo = function(token2) {
          var rk = this.runtimeCacheKey,
              ak = this.assetCacheKey;
          return isPresent(rk) && rk == token2.runtimeCacheKey || isPresent(ak) && ak == token2.assetCacheKey;
        }, Object.defineProperty(CompileTokenMetadata.prototype, "name", {
          get: function() {
            return isPresent(this.value) ? sanitizeIdentifier(this.value) : this.identifier.name;
          },
          enumerable: !0,
          configurable: !0
        }), CompileTokenMetadata;
      }(),
      CompileTokenMap = function() {
        function CompileTokenMap() {
          this._valueMap = new Map, this._values = [];
        }
        return CompileTokenMap.prototype.add = function(token, value) {
          var existing = this.get(token);
          if (isPresent(existing))
            throw new BaseException$1("Can only add to a TokenMap! Token: " + token.name);
          this._values.push(value);
          var rk = token.runtimeCacheKey;
          isPresent(rk) && this._valueMap.set(rk, value);
          var ak = token.assetCacheKey;
          isPresent(ak) && this._valueMap.set(ak, value);
        }, CompileTokenMap.prototype.get = function(token) {
          var result,
              rk = token.runtimeCacheKey,
              ak = token.assetCacheKey;
          return isPresent(rk) && (result = this._valueMap.get(rk)), isBlank(result) && isPresent(ak) && (result = this._valueMap.get(ak)), result;
        }, CompileTokenMap.prototype.values = function() {
          return this._values;
        }, Object.defineProperty(CompileTokenMap.prototype, "size", {
          get: function() {
            return this._values.length;
          },
          enumerable: !0,
          configurable: !0
        }), CompileTokenMap;
      }(),
      CompileTypeMetadata = function() {
        function CompileTypeMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              runtime = _b.runtime,
              name = _b.name,
              moduleUrl = _b.moduleUrl,
              prefix = _b.prefix,
              isHost = _b.isHost,
              value = _b.value,
              diDeps = _b.diDeps;
          this.runtime = runtime, this.name = name, this.moduleUrl = moduleUrl, this.prefix = prefix, this.isHost = normalizeBool(isHost), this.value = value, this.diDeps = _normalizeArray(diDeps);
        }
        return CompileTypeMetadata.fromJson = function(data) {
          return new CompileTypeMetadata({
            name: data.name,
            moduleUrl: data.moduleUrl,
            prefix: data.prefix,
            isHost: data.isHost,
            value: data.value,
            diDeps: _arrayFromJson(data.diDeps, CompileDiDependencyMetadata.fromJson)
          });
        }, Object.defineProperty(CompileTypeMetadata.prototype, "identifier", {
          get: function() {
            return this;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompileTypeMetadata.prototype, "type", {
          get: function() {
            return this;
          },
          enumerable: !0,
          configurable: !0
        }), CompileTypeMetadata.prototype.toJson = function() {
          return {
            class: "Type",
            name: this.name,
            moduleUrl: this.moduleUrl,
            prefix: this.prefix,
            isHost: this.isHost,
            value: this.value,
            diDeps: _arrayToJson(this.diDeps)
          };
        }, CompileTypeMetadata;
      }(),
      CompileQueryMetadata = function() {
        function CompileQueryMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              selectors = _b.selectors,
              descendants = _b.descendants,
              first = _b.first,
              propertyName = _b.propertyName,
              read = _b.read;
          this.selectors = selectors, this.descendants = normalizeBool(descendants), this.first = normalizeBool(first), this.propertyName = propertyName, this.read = read;
        }
        return CompileQueryMetadata.fromJson = function(data) {
          return new CompileQueryMetadata({
            selectors: _arrayFromJson(data.selectors, CompileTokenMetadata.fromJson),
            descendants: data.descendants,
            first: data.first,
            propertyName: data.propertyName,
            read: _objFromJson(data.read, CompileTokenMetadata.fromJson)
          });
        }, CompileQueryMetadata.prototype.toJson = function() {
          return {
            selectors: _arrayToJson(this.selectors),
            descendants: this.descendants,
            first: this.first,
            propertyName: this.propertyName,
            read: _objToJson(this.read)
          };
        }, CompileQueryMetadata;
      }(),
      CompileStylesheetMetadata = function() {
        function CompileStylesheetMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              moduleUrl = _b.moduleUrl,
              styles = _b.styles,
              styleUrls = _b.styleUrls;
          this.moduleUrl = moduleUrl, this.styles = _normalizeArray(styles), this.styleUrls = _normalizeArray(styleUrls);
        }
        return CompileStylesheetMetadata.fromJson = function(data) {
          return new CompileStylesheetMetadata({
            moduleUrl: data.moduleUrl,
            styles: data.styles,
            styleUrls: data.styleUrls
          });
        }, CompileStylesheetMetadata.prototype.toJson = function() {
          return {
            moduleUrl: this.moduleUrl,
            styles: this.styles,
            styleUrls: this.styleUrls
          };
        }, CompileStylesheetMetadata;
      }(),
      CompileTemplateMetadata = function() {
        function CompileTemplateMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              encapsulation = _b.encapsulation,
              template = _b.template,
              templateUrl = _b.templateUrl,
              styles = _b.styles,
              styleUrls = _b.styleUrls,
              externalStylesheets = _b.externalStylesheets,
              animations = _b.animations,
              ngContentSelectors = _b.ngContentSelectors,
              interpolation = _b.interpolation;
          if (this.encapsulation = encapsulation, this.template = template, this.templateUrl = templateUrl, this.styles = _normalizeArray(styles), this.styleUrls = _normalizeArray(styleUrls), this.externalStylesheets = _normalizeArray(externalStylesheets), this.animations = isPresent(animations) ? ListWrapper.flatten(animations) : [], this.ngContentSelectors = isPresent(ngContentSelectors) ? ngContentSelectors : [], isPresent(interpolation) && 2 != interpolation.length)
            throw new BaseException$1("'interpolation' should have a start and an end symbol.");
          this.interpolation = interpolation;
        }
        return CompileTemplateMetadata.fromJson = function(data) {
          var animations = _arrayFromJson(data.animations, metadataFromJson);
          return new CompileTemplateMetadata({
            encapsulation: isPresent(data.encapsulation) ? VIEW_ENCAPSULATION_VALUES[data.encapsulation] : data.encapsulation,
            template: data.template,
            templateUrl: data.templateUrl,
            styles: data.styles,
            styleUrls: data.styleUrls,
            externalStylesheets: _arrayFromJson(data.externalStylesheets, CompileStylesheetMetadata.fromJson),
            animations: animations,
            ngContentSelectors: data.ngContentSelectors,
            interpolation: data.interpolation
          });
        }, CompileTemplateMetadata.prototype.toJson = function() {
          return {
            encapsulation: isPresent(this.encapsulation) ? serializeEnum(this.encapsulation) : this.encapsulation,
            template: this.template,
            templateUrl: this.templateUrl,
            styles: this.styles,
            styleUrls: this.styleUrls,
            externalStylesheets: _objToJson(this.externalStylesheets),
            animations: _objToJson(this.animations),
            ngContentSelectors: this.ngContentSelectors,
            interpolation: this.interpolation
          };
        }, CompileTemplateMetadata;
      }(),
      CompileDirectiveMetadata = function() {
        function CompileDirectiveMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              type = _b.type,
              isComponent = _b.isComponent,
              selector = _b.selector,
              exportAs = _b.exportAs,
              changeDetection = _b.changeDetection,
              inputs = _b.inputs,
              outputs = _b.outputs,
              hostListeners = _b.hostListeners,
              hostProperties = _b.hostProperties,
              hostAttributes = _b.hostAttributes,
              lifecycleHooks = _b.lifecycleHooks,
              providers = _b.providers,
              viewProviders = _b.viewProviders,
              queries = _b.queries,
              viewQueries = _b.viewQueries,
              precompile = _b.precompile,
              template = _b.template;
          this.type = type, this.isComponent = isComponent, this.selector = selector, this.exportAs = exportAs, this.changeDetection = changeDetection, this.inputs = inputs, this.outputs = outputs, this.hostListeners = hostListeners, this.hostProperties = hostProperties, this.hostAttributes = hostAttributes, this.lifecycleHooks = _normalizeArray(lifecycleHooks), this.providers = _normalizeArray(providers), this.viewProviders = _normalizeArray(viewProviders), this.queries = _normalizeArray(queries), this.viewQueries = _normalizeArray(viewQueries), this.precompile = _normalizeArray(precompile), this.template = template;
        }
        return CompileDirectiveMetadata.create = function(_a) {
          var _b = void 0 === _a ? {} : _a,
              type = _b.type,
              isComponent = _b.isComponent,
              selector = _b.selector,
              exportAs = _b.exportAs,
              changeDetection = _b.changeDetection,
              inputs = _b.inputs,
              outputs = _b.outputs,
              host = _b.host,
              lifecycleHooks = _b.lifecycleHooks,
              providers = _b.providers,
              viewProviders = _b.viewProviders,
              queries = _b.queries,
              viewQueries = _b.viewQueries,
              precompile = _b.precompile,
              template = _b.template,
              hostListeners = {},
              hostProperties = {},
              hostAttributes = {};
          isPresent(host) && StringMapWrapper.forEach(host, function(value, key) {
            var matches = RegExpWrapper.firstMatch(HOST_REG_EXP, key);
            isBlank(matches) ? hostAttributes[key] = value : isPresent(matches[1]) ? hostProperties[matches[1]] = value : isPresent(matches[2]) && (hostListeners[matches[2]] = value);
          });
          var inputsMap = {};
          isPresent(inputs) && inputs.forEach(function(bindConfig) {
            var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
            inputsMap[parts[0]] = parts[1];
          });
          var outputsMap = {};
          return isPresent(outputs) && outputs.forEach(function(bindConfig) {
            var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
            outputsMap[parts[0]] = parts[1];
          }), new CompileDirectiveMetadata({
            type: type,
            isComponent: normalizeBool(isComponent),
            selector: selector,
            exportAs: exportAs,
            changeDetection: changeDetection,
            inputs: inputsMap,
            outputs: outputsMap,
            hostListeners: hostListeners,
            hostProperties: hostProperties,
            hostAttributes: hostAttributes,
            lifecycleHooks: isPresent(lifecycleHooks) ? lifecycleHooks : [],
            providers: providers,
            viewProviders: viewProviders,
            queries: queries,
            viewQueries: viewQueries,
            precompile: precompile,
            template: template
          });
        }, Object.defineProperty(CompileDirectiveMetadata.prototype, "identifier", {
          get: function() {
            return this.type;
          },
          enumerable: !0,
          configurable: !0
        }), CompileDirectiveMetadata.fromJson = function(data) {
          return new CompileDirectiveMetadata({
            isComponent: data.isComponent,
            selector: data.selector,
            exportAs: data.exportAs,
            type: isPresent(data.type) ? CompileTypeMetadata.fromJson(data.type) : data.type,
            changeDetection: isPresent(data.changeDetection) ? CHANGE_DETECTION_STRATEGY_VALUES[data.changeDetection] : data.changeDetection,
            inputs: data.inputs,
            outputs: data.outputs,
            hostListeners: data.hostListeners,
            hostProperties: data.hostProperties,
            hostAttributes: data.hostAttributes,
            lifecycleHooks: data.lifecycleHooks.map(function(hookValue) {
              return LIFECYCLE_HOOKS_VALUES[hookValue];
            }),
            template: isPresent(data.template) ? CompileTemplateMetadata.fromJson(data.template) : data.template,
            providers: _arrayFromJson(data.providers, metadataFromJson),
            viewProviders: _arrayFromJson(data.viewProviders, metadataFromJson),
            queries: _arrayFromJson(data.queries, CompileQueryMetadata.fromJson),
            viewQueries: _arrayFromJson(data.viewQueries, CompileQueryMetadata.fromJson),
            precompile: _arrayFromJson(data.precompile, CompileTypeMetadata.fromJson)
          });
        }, CompileDirectiveMetadata.prototype.toJson = function() {
          return {
            class: "Directive",
            isComponent: this.isComponent,
            selector: this.selector,
            exportAs: this.exportAs,
            type: isPresent(this.type) ? this.type.toJson() : this.type,
            changeDetection: isPresent(this.changeDetection) ? serializeEnum(this.changeDetection) : this.changeDetection,
            inputs: this.inputs,
            outputs: this.outputs,
            hostListeners: this.hostListeners,
            hostProperties: this.hostProperties,
            hostAttributes: this.hostAttributes,
            lifecycleHooks: this.lifecycleHooks.map(function(hook) {
              return serializeEnum(hook);
            }),
            template: isPresent(this.template) ? this.template.toJson() : this.template,
            providers: _arrayToJson(this.providers),
            viewProviders: _arrayToJson(this.viewProviders),
            queries: _arrayToJson(this.queries),
            viewQueries: _arrayToJson(this.viewQueries),
            precompile: _arrayToJson(this.precompile)
          };
        }, CompileDirectiveMetadata;
      }(),
      CompilePipeMetadata = function() {
        function CompilePipeMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              type = _b.type,
              name = _b.name,
              pure = _b.pure,
              lifecycleHooks = _b.lifecycleHooks;
          this.type = type, this.name = name, this.pure = normalizeBool(pure), this.lifecycleHooks = _normalizeArray(lifecycleHooks);
        }
        return Object.defineProperty(CompilePipeMetadata.prototype, "identifier", {
          get: function() {
            return this.type;
          },
          enumerable: !0,
          configurable: !0
        }), CompilePipeMetadata.fromJson = function(data) {
          return new CompilePipeMetadata({
            type: isPresent(data.type) ? CompileTypeMetadata.fromJson(data.type) : data.type,
            name: data.name,
            pure: data.pure
          });
        }, CompilePipeMetadata.prototype.toJson = function() {
          return {
            class: "Pipe",
            type: isPresent(this.type) ? this.type.toJson() : null,
            name: this.name,
            pure: this.pure
          };
        }, CompilePipeMetadata;
      }(),
      _COMPILE_METADATA_FROM_JSON = {
        Directive: CompileDirectiveMetadata.fromJson,
        Pipe: CompilePipeMetadata.fromJson,
        Type: CompileTypeMetadata.fromJson,
        Provider: CompileProviderMetadata.fromJson,
        Identifier: CompileIdentifierMetadata.fromJson,
        Factory: CompileFactoryMetadata.fromJson,
        AnimationEntryMetadata: CompileAnimationEntryMetadata.fromJson,
        AnimationStateDeclarationMetadata: CompileAnimationStateDeclarationMetadata.fromJson,
        AnimationStateTransitionMetadata: CompileAnimationStateTransitionMetadata.fromJson,
        AnimationSequenceMetadata: CompileAnimationSequenceMetadata.fromJson,
        AnimationGroupMetadata: CompileAnimationGroupMetadata.fromJson,
        AnimationAnimateMetadata: CompileAnimationAnimateMetadata.fromJson,
        AnimationStyleMetadata: CompileAnimationStyleMetadata.fromJson,
        AnimationKeyframesSequenceMetadata: CompileAnimationKeyframesSequenceMetadata.fromJson
      },
      APP_VIEW_MODULE_URL = assetUrl("core", "linker/view"),
      VIEW_UTILS_MODULE_URL = assetUrl("core", "linker/view_utils"),
      CD_MODULE_URL = assetUrl("core", "change_detection/change_detection"),
      impViewUtils = ViewUtils,
      impAppView = AppView,
      impDebugAppView = DebugAppView,
      impDebugContext = DebugContext,
      impAppElement = AppElement,
      impElementRef = _angular_core.ElementRef,
      impViewContainerRef = _angular_core.ViewContainerRef,
      impChangeDetectorRef = _angular_core.ChangeDetectorRef,
      impRenderComponentType = _angular_core.RenderComponentType,
      impQueryList = _angular_core.QueryList,
      impTemplateRef = _angular_core.TemplateRef,
      impTemplateRef_ = TemplateRef_,
      impValueUnwrapper = ValueUnwrapper,
      impInjector = _angular_core.Injector,
      impViewEncapsulation = _angular_core.ViewEncapsulation,
      impViewType = ViewType,
      impChangeDetectionStrategy = _angular_core.ChangeDetectionStrategy,
      impStaticNodeDebugInfo = StaticNodeDebugInfo,
      impRenderer = _angular_core.Renderer,
      impSimpleChange = _angular_core.SimpleChange,
      impUninitialized = uninitialized,
      impChangeDetectorStatus = ChangeDetectorStatus,
      impFlattenNestedViewRenderNodes = flattenNestedViewRenderNodes,
      impDevModeEqual = devModeEqual,
      impInterpolate = interpolate,
      impCheckBinding = checkBinding,
      impCastByValue = castByValue,
      impEMPTY_ARRAY = EMPTY_ARRAY,
      impEMPTY_MAP = EMPTY_MAP,
      impAnimationGroupPlayer = AnimationGroupPlayer_,
      impAnimationSequencePlayer = AnimationSequencePlayer_,
      impAnimationKeyframe = AnimationKeyframe_,
      impAnimationStyles = AnimationStyles_,
      impNoOpAnimationPlayer = NoOpAnimationPlayer_,
      ANIMATION_STYLE_UTIL_ASSET_URL = assetUrl("core", "animation/animation_style_util"),
      Identifiers = function() {
        function Identifiers() {}
        return Identifiers;
      }();
  Identifiers.ViewUtils = new CompileIdentifierMetadata({
    name: "ViewUtils",
    moduleUrl: assetUrl("core", "linker/view_utils"),
    runtime: impViewUtils
  }), Identifiers.AppView = new CompileIdentifierMetadata({
    name: "AppView",
    moduleUrl: APP_VIEW_MODULE_URL,
    runtime: impAppView
  }), Identifiers.DebugAppView = new CompileIdentifierMetadata({
    name: "DebugAppView",
    moduleUrl: APP_VIEW_MODULE_URL,
    runtime: impDebugAppView
  }), Identifiers.AppElement = new CompileIdentifierMetadata({
    name: "AppElement",
    moduleUrl: assetUrl("core", "linker/element"),
    runtime: impAppElement
  }), Identifiers.ElementRef = new CompileIdentifierMetadata({
    name: "ElementRef",
    moduleUrl: assetUrl("core", "linker/element_ref"),
    runtime: impElementRef
  }), Identifiers.ViewContainerRef = new CompileIdentifierMetadata({
    name: "ViewContainerRef",
    moduleUrl: assetUrl("core", "linker/view_container_ref"),
    runtime: impViewContainerRef
  }), Identifiers.ChangeDetectorRef = new CompileIdentifierMetadata({
    name: "ChangeDetectorRef",
    moduleUrl: assetUrl("core", "change_detection/change_detector_ref"),
    runtime: impChangeDetectorRef
  }), Identifiers.RenderComponentType = new CompileIdentifierMetadata({
    name: "RenderComponentType",
    moduleUrl: assetUrl("core", "render/api"),
    runtime: impRenderComponentType
  }), Identifiers.QueryList = new CompileIdentifierMetadata({
    name: "QueryList",
    moduleUrl: assetUrl("core", "linker/query_list"),
    runtime: impQueryList
  }), Identifiers.TemplateRef = new CompileIdentifierMetadata({
    name: "TemplateRef",
    moduleUrl: assetUrl("core", "linker/template_ref"),
    runtime: impTemplateRef
  }), Identifiers.TemplateRef_ = new CompileIdentifierMetadata({
    name: "TemplateRef_",
    moduleUrl: assetUrl("core", "linker/template_ref"),
    runtime: impTemplateRef_
  }), Identifiers.CodegenComponentFactoryResolver = new CompileIdentifierMetadata({
    name: "CodegenComponentFactoryResolver",
    moduleUrl: assetUrl("core", "linker/component_factory_resolver"),
    runtime: CodegenComponentFactoryResolver
  }), Identifiers.ComponentFactoryResolver = new CompileIdentifierMetadata({
    name: "ComponentFactoryResolver",
    moduleUrl: assetUrl("core", "linker/component_factory_resolver"),
    runtime: _angular_core.ComponentFactoryResolver
  }), Identifiers.ValueUnwrapper = new CompileIdentifierMetadata({
    name: "ValueUnwrapper",
    moduleUrl: CD_MODULE_URL,
    runtime: impValueUnwrapper
  }), Identifiers.Injector = new CompileIdentifierMetadata({
    name: "Injector",
    moduleUrl: assetUrl("core", "di/injector"),
    runtime: impInjector
  }), Identifiers.ViewEncapsulation = new CompileIdentifierMetadata({
    name: "ViewEncapsulation",
    moduleUrl: assetUrl("core", "metadata/view"),
    runtime: impViewEncapsulation
  }), Identifiers.ViewType = new CompileIdentifierMetadata({
    name: "ViewType",
    moduleUrl: assetUrl("core", "linker/view_type"),
    runtime: impViewType
  }), Identifiers.ChangeDetectionStrategy = new CompileIdentifierMetadata({
    name: "ChangeDetectionStrategy",
    moduleUrl: CD_MODULE_URL,
    runtime: impChangeDetectionStrategy
  }), Identifiers.StaticNodeDebugInfo = new CompileIdentifierMetadata({
    name: "StaticNodeDebugInfo",
    moduleUrl: assetUrl("core", "linker/debug_context"),
    runtime: impStaticNodeDebugInfo
  }), Identifiers.DebugContext = new CompileIdentifierMetadata({
    name: "DebugContext",
    moduleUrl: assetUrl("core", "linker/debug_context"),
    runtime: impDebugContext
  }), Identifiers.Renderer = new CompileIdentifierMetadata({
    name: "Renderer",
    moduleUrl: assetUrl("core", "render/api"),
    runtime: impRenderer
  }), Identifiers.SimpleChange = new CompileIdentifierMetadata({
    name: "SimpleChange",
    moduleUrl: CD_MODULE_URL,
    runtime: impSimpleChange
  }), Identifiers.uninitialized = new CompileIdentifierMetadata({
    name: "uninitialized",
    moduleUrl: CD_MODULE_URL,
    runtime: impUninitialized
  }), Identifiers.ChangeDetectorStatus = new CompileIdentifierMetadata({
    name: "ChangeDetectorStatus",
    moduleUrl: CD_MODULE_URL,
    runtime: impChangeDetectorStatus
  }), Identifiers.checkBinding = new CompileIdentifierMetadata({
    name: "checkBinding",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: impCheckBinding
  }), Identifiers.flattenNestedViewRenderNodes = new CompileIdentifierMetadata({
    name: "flattenNestedViewRenderNodes",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: impFlattenNestedViewRenderNodes
  }), Identifiers.devModeEqual = new CompileIdentifierMetadata({
    name: "devModeEqual",
    moduleUrl: CD_MODULE_URL,
    runtime: impDevModeEqual
  }), Identifiers.interpolate = new CompileIdentifierMetadata({
    name: "interpolate",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: impInterpolate
  }), Identifiers.castByValue = new CompileIdentifierMetadata({
    name: "castByValue",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: impCastByValue
  }), Identifiers.EMPTY_ARRAY = new CompileIdentifierMetadata({
    name: "EMPTY_ARRAY",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: impEMPTY_ARRAY
  }), Identifiers.EMPTY_MAP = new CompileIdentifierMetadata({
    name: "EMPTY_MAP",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: impEMPTY_MAP
  }), Identifiers.pureProxies = [null, new CompileIdentifierMetadata({
    name: "pureProxy1",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy1
  }), new CompileIdentifierMetadata({
    name: "pureProxy2",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy2
  }), new CompileIdentifierMetadata({
    name: "pureProxy3",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy3
  }), new CompileIdentifierMetadata({
    name: "pureProxy4",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy4
  }), new CompileIdentifierMetadata({
    name: "pureProxy5",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy5
  }), new CompileIdentifierMetadata({
    name: "pureProxy6",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy6
  }), new CompileIdentifierMetadata({
    name: "pureProxy7",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy7
  }), new CompileIdentifierMetadata({
    name: "pureProxy8",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy8
  }), new CompileIdentifierMetadata({
    name: "pureProxy9",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy9
  }), new CompileIdentifierMetadata({
    name: "pureProxy10",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy10
  })], Identifiers.SecurityContext = new CompileIdentifierMetadata({
    name: "SecurityContext",
    moduleUrl: assetUrl("core", "security"),
    runtime: SecurityContext
  }), Identifiers.AnimationKeyframe = new CompileIdentifierMetadata({
    name: "AnimationKeyframe",
    moduleUrl: assetUrl("core", "animation/animation_keyframe"),
    runtime: impAnimationKeyframe
  }), Identifiers.AnimationStyles = new CompileIdentifierMetadata({
    name: "AnimationStyles",
    moduleUrl: assetUrl("core", "animation/animation_styles"),
    runtime: impAnimationStyles
  }), Identifiers.NoOpAnimationPlayer = new CompileIdentifierMetadata({
    name: "NoOpAnimationPlayer",
    moduleUrl: assetUrl("core", "animation/animation_player"),
    runtime: impNoOpAnimationPlayer
  }), Identifiers.AnimationGroupPlayer = new CompileIdentifierMetadata({
    name: "AnimationGroupPlayer",
    moduleUrl: assetUrl("core", "animation/animation_group_player"),
    runtime: impAnimationGroupPlayer
  }), Identifiers.AnimationSequencePlayer = new CompileIdentifierMetadata({
    name: "AnimationSequencePlayer",
    moduleUrl: assetUrl("core", "animation/animation_sequence_player"),
    runtime: impAnimationSequencePlayer
  }), Identifiers.prepareFinalAnimationStyles = new CompileIdentifierMetadata({
    name: "prepareFinalAnimationStyles",
    moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
    runtime: impBalanceAnimationStyles
  }), Identifiers.balanceAnimationKeyframes = new CompileIdentifierMetadata({
    name: "balanceAnimationKeyframes",
    moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
    runtime: impBalanceAnimationKeyframes
  }), Identifiers.clearStyles = new CompileIdentifierMetadata({
    name: "clearStyles",
    moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
    runtime: impClearStyles
  }), Identifiers.renderStyles = new CompileIdentifierMetadata({
    name: "renderStyles",
    moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
    runtime: impRenderStyles
  }), Identifiers.collectAndResolveStyles = new CompileIdentifierMetadata({
    name: "collectAndResolveStyles",
    moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
    runtime: impCollectAndResolveStyles
  });
  var ProviderError = function(_super) {
    function ProviderError(message, span) {
      _super.call(this, span, message);
    }
    return __extends(ProviderError, _super), ProviderError;
  }(ParseError),
      ProviderViewContext = function() {
        function ProviderViewContext(component, sourceSpan) {
          var _this = this;
          this.component = component, this.sourceSpan = sourceSpan, this.errors = [], this.viewQueries = _getViewQueries(component), this.viewProviders = new CompileTokenMap, _normalizeProviders(component.viewProviders, sourceSpan, this.errors).forEach(function(provider) {
            isBlank(_this.viewProviders.get(provider.token)) && _this.viewProviders.add(provider.token, !0);
          });
        }
        return ProviderViewContext;
      }(),
      ProviderElementContext = function() {
        function ProviderElementContext(_viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
          var _this = this;
          this._viewContext = _viewContext, this._parent = _parent, this._isViewRoot = _isViewRoot, this._directiveAsts = _directiveAsts, this._sourceSpan = _sourceSpan, this._transformedProviders = new CompileTokenMap, this._seenProviders = new CompileTokenMap, this._hasViewContainer = !1, this._attrs = {}, attrs.forEach(function(attrAst) {
            return _this._attrs[attrAst.name] = attrAst.value;
          });
          var directivesMeta = _directiveAsts.map(function(directiveAst) {
            return directiveAst.directive;
          });
          this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, _viewContext.errors), this._contentQueries = _getContentQueries(directivesMeta);
          var queriedTokens = new CompileTokenMap;
          this._allProviders.values().forEach(function(provider) {
            _this._addQueryReadsTo(provider.token, queriedTokens);
          }), refs.forEach(function(refAst) {
            _this._addQueryReadsTo(new CompileTokenMetadata({value: refAst.name}), queriedTokens);
          }), isPresent(queriedTokens.get(identifierToken(Identifiers.ViewContainerRef))) && (this._hasViewContainer = !0), this._allProviders.values().forEach(function(provider) {
            var eager = provider.eager || isPresent(queriedTokens.get(provider.token));
            eager && _this._getOrCreateLocalProvider(provider.providerType, provider.token, !0);
          });
        }
        return ProviderElementContext.prototype.afterElement = function() {
          var _this = this;
          this._allProviders.values().forEach(function(provider) {
            _this._getOrCreateLocalProvider(provider.providerType, provider.token, !1);
          });
        }, Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
          get: function() {
            return this._transformedProviders.values();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
          get: function() {
            var sortedProviderTypes = this._transformedProviders.values().map(function(provider) {
              return provider.token.identifier;
            }),
                sortedDirectives = ListWrapper.clone(this._directiveAsts);
            return ListWrapper.sort(sortedDirectives, function(dir1, dir2) {
              return sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type);
            }), sortedDirectives;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
          get: function() {
            return this._hasViewContainer;
          },
          enumerable: !0,
          configurable: !0
        }), ProviderElementContext.prototype._addQueryReadsTo = function(token, queryReadTokens) {
          this._getQueriesFor(token).forEach(function(query) {
            var queryReadToken = isPresent(query.read) ? query.read : token;
            isBlank(queryReadTokens.get(queryReadToken)) && queryReadTokens.add(queryReadToken, !0);
          });
        }, ProviderElementContext.prototype._getQueriesFor = function(token) {
          for (var queries,
              result = [],
              currentEl = this,
              distance = 0; null !== currentEl; )
            queries = currentEl._contentQueries.get(token), isPresent(queries) && ListWrapper.addAll(result, queries.filter(function(query) {
              return query.descendants || distance <= 1;
            })), currentEl._directiveAsts.length > 0 && distance++, currentEl = currentEl._parent;
          return queries = this._viewContext.viewQueries.get(token), isPresent(queries) && ListWrapper.addAll(result, queries), result;
        }, ProviderElementContext.prototype._getOrCreateLocalProvider = function(requestingProviderType, token, eager) {
          var _this = this,
              resolvedProvider = this._allProviders.get(token);
          if (isBlank(resolvedProvider) || (requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.PrivateService || (requestingProviderType === exports.ProviderAstType.PrivateService || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.Builtin)
            return null;
          var transformedProviderAst = this._transformedProviders.get(token);
          if (isPresent(transformedProviderAst))
            return transformedProviderAst;
          if (isPresent(this._seenProviders.get(token)))
            return this._viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, this._sourceSpan)), null;
          this._seenProviders.add(token, !0);
          var transformedProviders = resolvedProvider.providers.map(function(provider) {
            var transformedDeps,
                transformedUseValue = provider.useValue,
                transformedUseExisting = provider.useExisting;
            if (isPresent(provider.useExisting)) {
              var existingDiDep = _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({token: provider.useExisting}), eager);
              isPresent(existingDiDep.token) ? transformedUseExisting = existingDiDep.token : (transformedUseExisting = null, transformedUseValue = existingDiDep.value);
            } else if (isPresent(provider.useFactory)) {
              var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
              transformedDeps = deps.map(function(dep) {
                return _this._getDependency(resolvedProvider.providerType, dep, eager);
              });
            } else if (isPresent(provider.useClass)) {
              var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
              transformedDeps = deps.map(function(dep) {
                return _this._getDependency(resolvedProvider.providerType, dep, eager);
              });
            }
            return _transformProvider(provider, {
              useExisting: transformedUseExisting,
              useValue: transformedUseValue,
              deps: transformedDeps
            });
          });
          return transformedProviderAst = _transformProviderAst(resolvedProvider, {
            eager: eager,
            providers: transformedProviders
          }), this._transformedProviders.add(token, transformedProviderAst), transformedProviderAst;
        }, ProviderElementContext.prototype._getLocalDependency = function(requestingProviderType, dep, eager) {
          if (void 0 === eager && (eager = null), dep.isAttribute) {
            var attrValue = this._attrs[dep.token.value];
            return new CompileDiDependencyMetadata({
              isValue: !0,
              value: normalizeBlank(attrValue)
            });
          }
          if (isPresent(dep.query) || isPresent(dep.viewQuery))
            return dep;
          if (isPresent(dep.token)) {
            if (requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.Component) {
              if (dep.token.equalsTo(identifierToken(Identifiers.Renderer)) || dep.token.equalsTo(identifierToken(Identifiers.ElementRef)) || dep.token.equalsTo(identifierToken(Identifiers.ChangeDetectorRef)) || dep.token.equalsTo(identifierToken(Identifiers.TemplateRef)))
                return dep;
              dep.token.equalsTo(identifierToken(Identifiers.ViewContainerRef)) && (this._hasViewContainer = !0);
            }
            if (dep.token.equalsTo(identifierToken(Identifiers.Injector)))
              return dep;
            if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager)))
              return dep;
          }
          return null;
        }, ProviderElementContext.prototype._getDependency = function(requestingProviderType, dep, eager) {
          void 0 === eager && (eager = null);
          var currElement = this,
              currEager = eager,
              result = null;
          if (dep.isSkipSelf || (result = this._getLocalDependency(requestingProviderType, dep, eager)), dep.isSelf)
            isBlank(result) && dep.isOptional && (result = new CompileDiDependencyMetadata({
              isValue: !0,
              value: null
            }));
          else {
            for (; isBlank(result) && isPresent(currElement._parent); ) {
              var prevElement = currElement;
              currElement = currElement._parent, prevElement._isViewRoot && (currEager = !1), result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, dep, currEager);
            }
            isBlank(result) && (result = !dep.isHost || this._viewContext.component.type.isHost || identifierToken(this._viewContext.component.type).equalsTo(dep.token) || isPresent(this._viewContext.viewProviders.get(dep.token)) ? dep : dep.isOptional ? result = new CompileDiDependencyMetadata({
              isValue: !0,
              value: null
            }) : null);
          }
          return isBlank(result) && this._viewContext.errors.push(new ProviderError("No provider for " + dep.token.name, this._sourceSpan)), result;
        }, ProviderElementContext;
      }(),
      BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(var-)|(let-)|(ref-|#)|(on-)|(bindon-)|(animate-|@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/g,
      TEMPLATE_ELEMENT = "template",
      TEMPLATE_ATTR = "template",
      TEMPLATE_ATTR_PREFIX = "*",
      CLASS_ATTR = "class",
      PROPERTY_PARTS_SEPARATOR = ".",
      ATTRIBUTE_PREFIX = "attr",
      CLASS_PREFIX = "class",
      STYLE_PREFIX = "style",
      TEXT_CSS_SELECTOR = CssSelector.parse("*")[0],
      TEMPLATE_TRANSFORMS = new _angular_core.OpaqueToken("TemplateTransforms"),
      TemplateParseError = function(_super) {
        function TemplateParseError(message, span, level) {
          _super.call(this, span, message, level);
        }
        return __extends(TemplateParseError, _super), TemplateParseError;
      }(ParseError),
      TemplateParseResult = function() {
        function TemplateParseResult(templateAst, errors) {
          this.templateAst = templateAst, this.errors = errors;
        }
        return TemplateParseResult;
      }(),
      TemplateParser = function() {
        function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
          this._exprParser = _exprParser, this._schemaRegistry = _schemaRegistry, this._htmlParser = _htmlParser, this._console = _console, this.transforms = transforms;
        }
        return TemplateParser.prototype.parse = function(component, template, directives, pipes, templateUrl) {
          var result = this.tryParse(component, template, directives, pipes, templateUrl),
              warnings = result.errors.filter(function(error) {
                return error.level === ParseErrorLevel.WARNING;
              }),
              errors = result.errors.filter(function(error) {
                return error.level === ParseErrorLevel.FATAL;
              });
          if (warnings.length > 0 && this._console.warn("Template parse warnings:\n" + warnings.join("\n")), errors.length > 0) {
            var errorString = errors.join("\n");
            throw new BaseException$1("Template parse errors:\n" + errorString);
          }
          return result.templateAst;
        }, TemplateParser.prototype.tryParse = function(component, template, directives, pipes, templateUrl) {
          var result,
              htmlAstWithErrors = this._htmlParser.parse(template, templateUrl),
              errors = htmlAstWithErrors.errors;
          if (htmlAstWithErrors.rootNodes.length > 0) {
            var uniqDirectives = removeDuplicates(directives),
                uniqPipes = removeDuplicates(pipes),
                providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan),
                parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, uniqPipes, this._exprParser, this._schemaRegistry);
            result = htmlVisitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT), errors = errors.concat(parseVisitor.errors).concat(providerViewContext.errors);
          } else
            result = [];
          return this._assertNoReferenceDuplicationOnTemplate(result, errors), errors.length > 0 ? new TemplateParseResult(result, errors) : (isPresent(this.transforms) && this.transforms.forEach(function(transform) {
            result = templateVisitAll(transform, result);
          }), new TemplateParseResult(result, errors));
        }, TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function(result, errors) {
          var existingReferences = [];
          result.filter(function(element) {
            return !!element.references;
          }).forEach(function(element) {
            return element.references.forEach(function(reference) {
              var name = reference.name;
              if (existingReferences.indexOf(name) < 0)
                existingReferences.push(name);
              else {
                var error = new TemplateParseError('Reference "#' + name + '" is defined several times', reference.sourceSpan, ParseErrorLevel.FATAL);
                errors.push(error);
              }
            });
          });
        }, TemplateParser;
      }();
  TemplateParser.decorators = [{type: _angular_core.Injectable}], TemplateParser.ctorParameters = [{type: Parser}, {type: ElementSchemaRegistry}, {type: HtmlParser}, {type: Console}, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {
      type: _angular_core.Inject,
      args: [TEMPLATE_TRANSFORMS]
    }]
  }];
  var TypeModifier,
      TemplateParseVisitor = function() {
        function TemplateParseVisitor(providerViewContext, directives, pipes, _exprParser, _schemaRegistry) {
          var _this = this;
          this.providerViewContext = providerViewContext, this._exprParser = _exprParser, this._schemaRegistry = _schemaRegistry, this.errors = [], this.directivesIndex = new Map, this.ngContentCount = 0, this.selectorMatcher = new SelectorMatcher;
          var tempMeta = providerViewContext.component.template;
          isPresent(tempMeta) && isPresent(tempMeta.interpolation) && (this._interpolationConfig = {
            start: tempMeta.interpolation[0],
            end: tempMeta.interpolation[1]
          }), ListWrapper.forEachWithIndex(directives, function(directive, index) {
            var selector = CssSelector.parse(directive.selector);
            _this.selectorMatcher.addSelectables(selector, directive), _this.directivesIndex.set(directive, index);
          }), this.pipesByName = new Map, pipes.forEach(function(pipe) {
            return _this.pipesByName.set(pipe.name, pipe);
          });
        }
        return TemplateParseVisitor.prototype._reportError = function(message, sourceSpan, level) {
          void 0 === level && (level = ParseErrorLevel.FATAL), this.errors.push(new TemplateParseError(message, sourceSpan, level));
        }, TemplateParseVisitor.prototype._parseInterpolation = function(value, sourceSpan) {
          var sourceInfo = sourceSpan.start.toString();
          try {
            var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
            if (this._checkPipes(ast, sourceSpan), isPresent(ast) && ast.ast.expressions.length > MAX_INTERPOLATION_VALUES)
              throw new BaseException$1("Only support at most " + MAX_INTERPOLATION_VALUES + " interpolation values!");
            return ast;
          } catch (e) {
            return this._reportError("" + e, sourceSpan), this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
          }
        }, TemplateParseVisitor.prototype._parseAction = function(value, sourceSpan) {
          var sourceInfo = sourceSpan.start.toString();
          try {
            var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
            return this._checkPipes(ast, sourceSpan), ast;
          } catch (e) {
            return this._reportError("" + e, sourceSpan), this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
          }
        }, TemplateParseVisitor.prototype._parseBinding = function(value, sourceSpan) {
          var sourceInfo = sourceSpan.start.toString();
          try {
            var ast = this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
            return this._checkPipes(ast, sourceSpan), ast;
          } catch (e) {
            return this._reportError("" + e, sourceSpan), this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
          }
        }, TemplateParseVisitor.prototype._parseTemplateBindings = function(value, sourceSpan) {
          var _this = this,
              sourceInfo = sourceSpan.start.toString();
          try {
            var bindingsResult = this._exprParser.parseTemplateBindings(value, sourceInfo);
            return bindingsResult.templateBindings.forEach(function(binding) {
              isPresent(binding.expression) && _this._checkPipes(binding.expression, sourceSpan);
            }), bindingsResult.warnings.forEach(function(warning) {
              _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);
            }), bindingsResult.templateBindings;
          } catch (e) {
            return this._reportError("" + e, sourceSpan), [];
          }
        }, TemplateParseVisitor.prototype._checkPipes = function(ast, sourceSpan) {
          var _this = this;
          if (isPresent(ast)) {
            var collector = new PipeCollector;
            ast.visit(collector), collector.pipes.forEach(function(pipeName) {
              _this.pipesByName.has(pipeName) || _this._reportError("The pipe '" + pipeName + "' could not be found", sourceSpan);
            });
          }
        }, TemplateParseVisitor.prototype.visitExpansion = function(ast, context) {
          return null;
        }, TemplateParseVisitor.prototype.visitExpansionCase = function(ast, context) {
          return null;
        }, TemplateParseVisitor.prototype.visitText = function(ast, parent) {
          var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR),
              expr = this._parseInterpolation(ast.value, ast.sourceSpan);
          return isPresent(expr) ? new BoundTextAst(expr, ngContentIndex, ast.sourceSpan) : new TextAst(ast.value, ngContentIndex, ast.sourceSpan);
        }, TemplateParseVisitor.prototype.visitAttr = function(ast, contex) {
          return new AttrAst(ast.name, ast.value, ast.sourceSpan);
        }, TemplateParseVisitor.prototype.visitComment = function(ast, context) {
          return null;
        }, TemplateParseVisitor.prototype.visitElement = function(element, parent) {
          var _this = this,
              nodeName = element.name,
              preparsedElement = preparseElement(element);
          if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE)
            return null;
          if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr))
            return null;
          var matchableAttrs = [],
              elementOrDirectiveProps = [],
              elementOrDirectiveRefs = [],
              elementVars = [],
              animationProps = [],
              events = [],
              templateElementOrDirectiveProps = [],
              templateMatchableAttrs = [],
              templateElementVars = [],
              hasInlineTemplates = !1,
              attrs = [],
              lcElName = splitNsName(nodeName.toLowerCase())[1],
              isTemplateElement = lcElName == TEMPLATE_ELEMENT;
          element.attrs.forEach(function(attr) {
            var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, animationProps, events, elementOrDirectiveRefs, elementVars),
                hasTemplateBinding = _this._parseInlineTemplateBinding(attr, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
            hasTemplateBinding && hasInlineTemplates && _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan), hasBinding || hasTemplateBinding || (attrs.push(_this.visitAttr(attr, null)), matchableAttrs.push([attr.name, attr.value])), hasTemplateBinding && (hasInlineTemplates = !0);
          });
          var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs),
              directiveMetas = this._parseDirectives(this.selectorMatcher, elementCssSelector),
              references = [],
              directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references),
              elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts).concat(animationProps),
              isViewRoot = parent.isTemplateElement || hasInlineTemplates,
              providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan),
              children = htmlVisitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
          providerContext.afterElement();
          var parsedElement,
              projectionSelector = isPresent(preparsedElement.projectAs) ? CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector,
              ngContentIndex = parent.findNgContentIndex(projectionSelector);
          if (preparsedElement.type === PreparsedElementType.NG_CONTENT)
            isPresent(element.children) && element.children.length > 0 && this._reportError("<ng-content> element cannot have content. <ng-content> must be immediately followed by </ng-content>", element.sourceSpan), parsedElement = new NgContentAst((this.ngContentCount++), hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
          else if (isTemplateElement)
            this._assertAllEventsPublishedByDirectives(directiveAsts, events), this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan), parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
          else {
            this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
            var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
            parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan);
          }
          if (hasInlineTemplates) {
            var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs),
                templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector),
                templateDirectiveAsts = this._createDirectiveAsts(!0, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []),
                templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
            this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
            var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
            templateProviderContext.afterElement(), parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan);
          }
          return parsedElement;
        }, TemplateParseVisitor.prototype._parseInlineTemplateBinding = function(attr, targetMatchableAttrs, targetProps, targetVars) {
          var templateBindingsSource = null;
          if (attr.name == TEMPLATE_ATTR)
            templateBindingsSource = attr.value;
          else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
            var key = attr.name.substring(TEMPLATE_ATTR_PREFIX.length);
            templateBindingsSource = 0 == attr.value.length ? key : key + " " + attr.value;
          }
          if (isPresent(templateBindingsSource)) {
            for (var bindings = this._parseTemplateBindings(templateBindingsSource, attr.sourceSpan),
                i = 0; i < bindings.length; i++) {
              var binding = bindings[i];
              binding.keyIsVar ? targetVars.push(new VariableAst(binding.key, binding.name, attr.sourceSpan)) : isPresent(binding.expression) ? this._parsePropertyAst(binding.key, binding.expression, attr.sourceSpan, targetMatchableAttrs, targetProps) : (targetMatchableAttrs.push([binding.key, ""]), this._parseLiteralAttr(binding.key, null, attr.sourceSpan, targetProps));
            }
            return !0;
          }
          return !1;
        }, TemplateParseVisitor.prototype._parseAttr = function(isTemplateElement, attr, targetMatchableAttrs, targetProps, targetAnimationProps, targetEvents, targetRefs, targetVars) {
          var attrName = this._normalizeAttributeName(attr.name),
              attrValue = attr.value,
              bindParts = RegExpWrapper.firstMatch(BIND_NAME_REGEXP, attrName),
              hasBinding = !1;
          if (isPresent(bindParts))
            if (hasBinding = !0, isPresent(bindParts[1]))
              this._parseProperty(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
            else if (isPresent(bindParts[2])) {
              var identifier = bindParts[8];
              isTemplateElement ? (this._reportError('"var-" on <template> elements is deprecated. Use "let-" instead!', attr.sourceSpan, ParseErrorLevel.WARNING), this._parseVariable(identifier, attrValue, attr.sourceSpan, targetVars)) : (this._reportError('"var-" on non <template> elements is deprecated. Use "ref-" instead!', attr.sourceSpan, ParseErrorLevel.WARNING), this._parseReference(identifier, attrValue, attr.sourceSpan, targetRefs));
            } else if (isPresent(bindParts[3]))
              if (isTemplateElement) {
                var identifier = bindParts[8];
                this._parseVariable(identifier, attrValue, attr.sourceSpan, targetVars);
              } else
                this._reportError('"let-" is only supported on template elements.', attr.sourceSpan);
            else if (isPresent(bindParts[4])) {
              var identifier = bindParts[8];
              this._parseReference(identifier, attrValue, attr.sourceSpan, targetRefs);
            } else
              isPresent(bindParts[5]) ? this._parseEvent(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents) : isPresent(bindParts[6]) ? (this._parseProperty(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps), this._parseAssignmentEvent(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents)) : isPresent(bindParts[7]) ? this._parseAnimation(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetAnimationProps) : isPresent(bindParts[9]) ? (this._parseProperty(bindParts[9], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps), this._parseAssignmentEvent(bindParts[9], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents)) : isPresent(bindParts[10]) ? this._parseProperty(bindParts[10], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps) : isPresent(bindParts[11]) && this._parseEvent(bindParts[11], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
          else
            hasBinding = this._parsePropertyInterpolation(attrName, attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
          return hasBinding || this._parseLiteralAttr(attrName, attrValue, attr.sourceSpan, targetProps), hasBinding;
        }, TemplateParseVisitor.prototype._normalizeAttributeName = function(attrName) {
          return attrName.toLowerCase().startsWith("data-") ? attrName.substring(5) : attrName;
        }, TemplateParseVisitor.prototype._parseVariable = function(identifier, value, sourceSpan, targetVars) {
          identifier.indexOf("-") > -1 && this._reportError('"-" is not allowed in variable names', sourceSpan), targetVars.push(new VariableAst(identifier, value, sourceSpan));
        }, TemplateParseVisitor.prototype._parseReference = function(identifier, value, sourceSpan, targetRefs) {
          identifier.indexOf("-") > -1 && this._reportError('"-" is not allowed in reference names', sourceSpan), targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
        }, TemplateParseVisitor.prototype._parseProperty = function(name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
          this._parsePropertyAst(name, this._parseBinding(expression, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
        }, TemplateParseVisitor.prototype._parseAnimation = function(name, expression, sourceSpan, targetMatchableAttrs, targetAnimationProps) {
          isPresent(expression) && 0 != expression.length || (expression = "null");
          var ast = this._parseBinding(expression, sourceSpan);
          targetMatchableAttrs.push([name, ast.source]), targetAnimationProps.push(new BoundElementPropertyAst(name, exports.PropertyBindingType.Animation, SecurityContext.NONE, ast, null, sourceSpan));
        }, TemplateParseVisitor.prototype._parsePropertyInterpolation = function(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
          var expr = this._parseInterpolation(value, sourceSpan);
          return !!isPresent(expr) && (this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps), !0);
        }, TemplateParseVisitor.prototype._parsePropertyAst = function(name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
          targetMatchableAttrs.push([name, ast.source]), targetProps.push(new BoundElementOrDirectiveProperty(name, ast, (!1), sourceSpan));
        }, TemplateParseVisitor.prototype._parseAssignmentEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
          this._parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
        }, TemplateParseVisitor.prototype._parseEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
          var parts = splitAtColon(name, [null, name]),
              target = parts[0],
              eventName = parts[1],
              ast = this._parseAction(expression, sourceSpan);
          targetMatchableAttrs.push([name, ast.source]), targetEvents.push(new BoundEventAst(eventName, target, ast, sourceSpan));
        }, TemplateParseVisitor.prototype._parseLiteralAttr = function(name, value, sourceSpan, targetProps) {
          targetProps.push(new BoundElementOrDirectiveProperty(name, this._exprParser.wrapLiteralPrimitive(value, ""), (!0), sourceSpan));
        }, TemplateParseVisitor.prototype._parseDirectives = function(selectorMatcher, elementCssSelector) {
          var _this = this,
              directives = ListWrapper.createFixedSize(this.directivesIndex.size);
          return selectorMatcher.match(elementCssSelector, function(selector, directive) {
            directives[_this.directivesIndex.get(directive)] = directive;
          }), directives.filter(function(dir) {
            return isPresent(dir);
          });
        }, TemplateParseVisitor.prototype._createDirectiveAsts = function(isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, sourceSpan, targetReferences) {
          var _this = this,
              matchedReferences = new Set,
              component = null,
              directiveAsts = directives.map(function(directive) {
                directive.isComponent && (component = directive);
                var hostProperties = [],
                    hostEvents = [],
                    directiveProperties = [];
                return _this._createDirectiveHostPropertyAsts(elementName, directive.hostProperties, sourceSpan, hostProperties), _this._createDirectiveHostEventAsts(directive.hostListeners, sourceSpan, hostEvents), _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties), elementOrDirectiveRefs.forEach(function(elOrDirRef) {
                  (0 === elOrDirRef.value.length && directive.isComponent || directive.exportAs == elOrDirRef.value) && (targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan)), matchedReferences.add(elOrDirRef.name));
                }), new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
              });
          return elementOrDirectiveRefs.forEach(function(elOrDirRef) {
            if (elOrDirRef.value.length > 0)
              SetWrapper.has(matchedReferences, elOrDirRef.name) || _this._reportError('There is no directive with "exportAs" set to "' + elOrDirRef.value + '"', elOrDirRef.sourceSpan);
            else if (isBlank(component)) {
              var refToken = null;
              isTemplateElement && (refToken = identifierToken(Identifiers.TemplateRef)), targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
            }
          }), directiveAsts;
        }, TemplateParseVisitor.prototype._createDirectiveHostPropertyAsts = function(elementName, hostProps, sourceSpan, targetPropertyAsts) {
          var _this = this;
          isPresent(hostProps) && StringMapWrapper.forEach(hostProps, function(expression, propName) {
            var exprAst = _this._parseBinding(expression, sourceSpan);
            targetPropertyAsts.push(_this._createElementPropertyAst(elementName, propName, exprAst, sourceSpan));
          });
        }, TemplateParseVisitor.prototype._createDirectiveHostEventAsts = function(hostListeners, sourceSpan, targetEventAsts) {
          var _this = this;
          isPresent(hostListeners) && StringMapWrapper.forEach(hostListeners, function(expression, propName) {
            _this._parseEvent(propName, expression, sourceSpan, [], targetEventAsts);
          });
        }, TemplateParseVisitor.prototype._createDirectivePropertyAsts = function(directiveProperties, boundProps, targetBoundDirectiveProps) {
          if (isPresent(directiveProperties)) {
            var boundPropsByName = new Map;
            boundProps.forEach(function(boundProp) {
              var prevValue = boundPropsByName.get(boundProp.name);
              (isBlank(prevValue) || prevValue.isLiteral) && boundPropsByName.set(boundProp.name, boundProp);
            }), StringMapWrapper.forEach(directiveProperties, function(elProp, dirProp) {
              var boundProp = boundPropsByName.get(elProp);
              isPresent(boundProp) && targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
            });
          }
        }, TemplateParseVisitor.prototype._createElementPropertyAsts = function(elementName, props, directives) {
          var _this = this,
              boundElementProps = [],
              boundDirectivePropsIndex = new Map;
          return directives.forEach(function(directive) {
            directive.inputs.forEach(function(prop) {
              boundDirectivePropsIndex.set(prop.templateName, prop);
            });
          }), props.forEach(function(prop) {
            !prop.isLiteral && isBlank(boundDirectivePropsIndex.get(prop.name)) && boundElementProps.push(_this._createElementPropertyAst(elementName, prop.name, prop.expression, prop.sourceSpan));
          }), boundElementProps;
        }, TemplateParseVisitor.prototype._createElementPropertyAst = function(elementName, name, ast, sourceSpan) {
          var bindingType,
              boundPropertyName,
              securityContext,
              unit = null,
              parts = name.split(PROPERTY_PARTS_SEPARATOR);
          if (1 === parts.length)
            boundPropertyName = this._schemaRegistry.getMappedPropName(parts[0]), securityContext = this._schemaRegistry.securityContext(elementName, boundPropertyName), bindingType = exports.PropertyBindingType.Property, this._schemaRegistry.hasProperty(elementName, boundPropertyName) || this._reportError("Can't bind to '" + boundPropertyName + "' since it isn't a known native property", sourceSpan);
          else if (parts[0] == ATTRIBUTE_PREFIX) {
            boundPropertyName = parts[1], boundPropertyName.toLowerCase().startsWith("on") && this._reportError("Binding to event attribute '" + boundPropertyName + "' is disallowed " + ("for security reasons, please use (" + boundPropertyName.slice(2) + ")=..."), sourceSpan), securityContext = this._schemaRegistry.securityContext(elementName, this._schemaRegistry.getMappedPropName(boundPropertyName));
            var nsSeparatorIdx = boundPropertyName.indexOf(":");
            if (nsSeparatorIdx > -1) {
              var ns = boundPropertyName.substring(0, nsSeparatorIdx),
                  name_2 = boundPropertyName.substring(nsSeparatorIdx + 1);
              boundPropertyName = mergeNsAndName(ns, name_2);
            }
            bindingType = exports.PropertyBindingType.Attribute;
          } else
            parts[0] == CLASS_PREFIX ? (boundPropertyName = parts[1], bindingType = exports.PropertyBindingType.Class, securityContext = SecurityContext.NONE) : parts[0] == STYLE_PREFIX ? (unit = parts.length > 2 ? parts[2] : null, boundPropertyName = parts[1], bindingType = exports.PropertyBindingType.Style, securityContext = SecurityContext.STYLE) : (this._reportError("Invalid property name '" + name + "'", sourceSpan), bindingType = null, securityContext = null);
          return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContext, ast, unit, sourceSpan);
        }, TemplateParseVisitor.prototype._findComponentDirectiveNames = function(directives) {
          var componentTypeNames = [];
          return directives.forEach(function(directive) {
            var typeName = directive.directive.type.name;
            directive.directive.isComponent && componentTypeNames.push(typeName);
          }), componentTypeNames;
        }, TemplateParseVisitor.prototype._assertOnlyOneComponent = function(directives, sourceSpan) {
          var componentTypeNames = this._findComponentDirectiveNames(directives);
          componentTypeNames.length > 1 && this._reportError("More than one component: " + componentTypeNames.join(","), sourceSpan);
        }, TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function(directives, elementProps, sourceSpan) {
          var _this = this,
              componentTypeNames = this._findComponentDirectiveNames(directives);
          componentTypeNames.length > 0 && this._reportError("Components on an embedded template: " + componentTypeNames.join(","), sourceSpan), elementProps.forEach(function(prop) {
            _this._reportError("Property binding " + prop.name + ' not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the "directives" section.', sourceSpan);
          });
        }, TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function(directives, events) {
          var _this = this,
              allDirectiveEvents = new Set;
          directives.forEach(function(directive) {
            StringMapWrapper.forEach(directive.directive.outputs, function(eventName) {
              allDirectiveEvents.add(eventName);
            });
          }), events.forEach(function(event) {
            !isPresent(event.target) && SetWrapper.has(allDirectiveEvents, event.name) || _this._reportError("Event binding " + event.fullName + ' not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the "directives" section.', event.sourceSpan);
          });
        }, TemplateParseVisitor;
      }(),
      NonBindableVisitor = function() {
        function NonBindableVisitor() {}
        return NonBindableVisitor.prototype.visitElement = function(ast, parent) {
          var preparsedElement = preparseElement(ast);
          if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET)
            return null;
          var attrNameAndValues = ast.attrs.map(function(attrAst) {
            return [attrAst.name, attrAst.value];
          }),
              selector = createElementCssSelector(ast.name, attrNameAndValues),
              ngContentIndex = parent.findNgContentIndex(selector),
              children = htmlVisitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
          return new ElementAst(ast.name, htmlVisitAll(this, ast.attrs), [], [], [], [], [], (!1), children, ngContentIndex, ast.sourceSpan);
        }, NonBindableVisitor.prototype.visitComment = function(ast, context) {
          return null;
        }, NonBindableVisitor.prototype.visitAttr = function(ast, context) {
          return new AttrAst(ast.name, ast.value, ast.sourceSpan);
        }, NonBindableVisitor.prototype.visitText = function(ast, parent) {
          var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
          return new TextAst(ast.value, ngContentIndex, ast.sourceSpan);
        }, NonBindableVisitor.prototype.visitExpansion = function(ast, context) {
          return ast;
        }, NonBindableVisitor.prototype.visitExpansionCase = function(ast, context) {
          return ast;
        }, NonBindableVisitor;
      }(),
      BoundElementOrDirectiveProperty = function() {
        function BoundElementOrDirectiveProperty(name, expression, isLiteral, sourceSpan) {
          this.name = name, this.expression = expression, this.isLiteral = isLiteral, this.sourceSpan = sourceSpan;
        }
        return BoundElementOrDirectiveProperty;
      }(),
      ElementOrDirectiveRef = function() {
        function ElementOrDirectiveRef(name, value, sourceSpan) {
          this.name = name, this.value = value, this.sourceSpan = sourceSpan;
        }
        return ElementOrDirectiveRef;
      }(),
      ElementContext = function() {
        function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
          this.isTemplateElement = isTemplateElement, this._ngContentIndexMatcher = _ngContentIndexMatcher, this._wildcardNgContentIndex = _wildcardNgContentIndex, this.providerContext = providerContext;
        }
        return ElementContext.create = function(isTemplateElement, directives, providerContext) {
          var matcher = new SelectorMatcher,
              wildcardNgContentIndex = null,
              component = directives.find(function(directive) {
                return directive.directive.isComponent;
              });
          if (isPresent(component))
            for (var ngContentSelectors = component.directive.template.ngContentSelectors,
                i = 0; i < ngContentSelectors.length; i++) {
              var selector = ngContentSelectors[i];
              StringWrapper.equals(selector, "*") ? wildcardNgContentIndex = i : matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
            }
          return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
        }, ElementContext.prototype.findNgContentIndex = function(selector) {
          var ngContentIndices = [];
          return this._ngContentIndexMatcher.match(selector, function(selector, ngContentIndex) {
            ngContentIndices.push(ngContentIndex);
          }), ListWrapper.sort(ngContentIndices), isPresent(this._wildcardNgContentIndex) && ngContentIndices.push(this._wildcardNgContentIndex), ngContentIndices.length > 0 ? ngContentIndices[0] : null;
        }, ElementContext;
      }(),
      EMPTY_ELEMENT_CONTEXT = new ElementContext((!0), new SelectorMatcher, null, null),
      NON_BINDABLE_VISITOR = new NonBindableVisitor,
      PipeCollector = function(_super) {
        function PipeCollector() {
          for (var args = [],
              _i = 0; _i < arguments.length; _i++)
            args[_i - 0] = arguments[_i];
          _super.apply(this, args), this.pipes = new Set;
        }
        return __extends(PipeCollector, _super), PipeCollector.prototype.visitPipe = function(ast, context) {
          return this.pipes.add(ast.name), ast.exp.visit(this), this.visitAll(ast.args, context), null;
        }, PipeCollector;
      }(RecursiveAstVisitor),
      CompilerConfig = function() {
        function CompilerConfig(_a) {
          var _b = void 0 === _a ? {} : _a,
              _c = _b.renderTypes,
              renderTypes = void 0 === _c ? new DefaultRenderTypes : _c,
              _d = _b.defaultEncapsulation,
              defaultEncapsulation = void 0 === _d ? _angular_core.ViewEncapsulation.Emulated : _d,
              genDebugInfo = _b.genDebugInfo,
              logBindingUpdate = _b.logBindingUpdate,
              _e = _b.useJit,
              useJit = void 0 === _e || _e,
              _f = _b.platformDirectives,
              platformDirectives = void 0 === _f ? [] : _f,
              _g = _b.platformPipes,
              platformPipes = void 0 === _g ? [] : _g;
          this.renderTypes = renderTypes, this.defaultEncapsulation = defaultEncapsulation, this._genDebugInfo = genDebugInfo, this._logBindingUpdate = logBindingUpdate, this.useJit = useJit, this.platformDirectives = platformDirectives, this.platformPipes = platformPipes;
        }
        return Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", {
          get: function() {
            return void 0 === this._genDebugInfo ? _angular_core.isDevMode() : this._genDebugInfo;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", {
          get: function() {
            return void 0 === this._logBindingUpdate ? _angular_core.isDevMode() : this._logBindingUpdate;
          },
          enumerable: !0,
          configurable: !0
        }), CompilerConfig;
      }(),
      RenderTypes = function() {
        function RenderTypes() {}
        return Object.defineProperty(RenderTypes.prototype, "renderer", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderTypes.prototype, "renderText", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderTypes.prototype, "renderElement", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderTypes.prototype, "renderComment", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderTypes.prototype, "renderNode", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderTypes.prototype, "renderEvent", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), RenderTypes;
      }(),
      DefaultRenderTypes = function() {
        function DefaultRenderTypes() {
          this.renderer = Identifiers.Renderer, this.renderText = null, this.renderElement = null, this.renderComment = null, this.renderNode = null, this.renderEvent = null;
        }
        return DefaultRenderTypes;
      }();
  !function(TypeModifier) {
    TypeModifier[TypeModifier.Const = 0] = "Const";
  }(TypeModifier || (TypeModifier = {}));
  var BuiltinTypeName,
      Type$1 = function() {
        function Type$1(modifiers) {
          void 0 === modifiers && (modifiers = null), this.modifiers = modifiers, isBlank(modifiers) && (this.modifiers = []);
        }
        return Type$1.prototype.hasModifier = function(modifier) {
          return this.modifiers.indexOf(modifier) !== -1;
        }, Type$1;
      }();
  !function(BuiltinTypeName) {
    BuiltinTypeName[BuiltinTypeName.Dynamic = 0] = "Dynamic", BuiltinTypeName[BuiltinTypeName.Bool = 1] = "Bool", BuiltinTypeName[BuiltinTypeName.String = 2] = "String", BuiltinTypeName[BuiltinTypeName.Int = 3] = "Int", BuiltinTypeName[BuiltinTypeName.Number = 4] = "Number", BuiltinTypeName[BuiltinTypeName.Function = 5] = "Function";
  }(BuiltinTypeName || (BuiltinTypeName = {}));
  var BinaryOperator,
      BuiltinType = function(_super) {
        function BuiltinType(name, modifiers) {
          void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.name = name;
        }
        return __extends(BuiltinType, _super), BuiltinType.prototype.visitType = function(visitor, context) {
          return visitor.visitBuiltintType(this, context);
        }, BuiltinType;
      }(Type$1),
      ExternalType = function(_super) {
        function ExternalType(value, typeParams, modifiers) {
          void 0 === typeParams && (typeParams = null), void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.value = value, this.typeParams = typeParams;
        }
        return __extends(ExternalType, _super), ExternalType.prototype.visitType = function(visitor, context) {
          return visitor.visitExternalType(this, context);
        }, ExternalType;
      }(Type$1),
      ArrayType = function(_super) {
        function ArrayType(of, modifiers) {
          void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.of = of;
        }
        return __extends(ArrayType, _super), ArrayType.prototype.visitType = function(visitor, context) {
          return visitor.visitArrayType(this, context);
        }, ArrayType;
      }(Type$1),
      MapType = function(_super) {
        function MapType(valueType, modifiers) {
          void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.valueType = valueType;
        }
        return __extends(MapType, _super), MapType.prototype.visitType = function(visitor, context) {
          return visitor.visitMapType(this, context);
        }, MapType;
      }(Type$1),
      DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic),
      BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool),
      NUMBER_TYPE = (new BuiltinType(BuiltinTypeName.Int), new BuiltinType(BuiltinTypeName.Number)),
      STRING_TYPE = new BuiltinType(BuiltinTypeName.String),
      FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
  !function(BinaryOperator) {
    BinaryOperator[BinaryOperator.Equals = 0] = "Equals", BinaryOperator[BinaryOperator.NotEquals = 1] = "NotEquals", BinaryOperator[BinaryOperator.Identical = 2] = "Identical", BinaryOperator[BinaryOperator.NotIdentical = 3] = "NotIdentical", BinaryOperator[BinaryOperator.Minus = 4] = "Minus", BinaryOperator[BinaryOperator.Plus = 5] = "Plus", BinaryOperator[BinaryOperator.Divide = 6] = "Divide", BinaryOperator[BinaryOperator.Multiply = 7] = "Multiply", BinaryOperator[BinaryOperator.Modulo = 8] = "Modulo", BinaryOperator[BinaryOperator.And = 9] = "And", BinaryOperator[BinaryOperator.Or = 10] = "Or", BinaryOperator[BinaryOperator.Lower = 11] = "Lower", BinaryOperator[BinaryOperator.LowerEquals = 12] = "LowerEquals", BinaryOperator[BinaryOperator.Bigger = 13] = "Bigger", BinaryOperator[BinaryOperator.BiggerEquals = 14] = "BiggerEquals";
  }(BinaryOperator || (BinaryOperator = {}));
  var BuiltinVar,
      Expression = function() {
        function Expression(type) {
          this.type = type;
        }
        return Expression.prototype.prop = function(name) {
          return new ReadPropExpr(this, name);
        }, Expression.prototype.key = function(index, type) {
          return void 0 === type && (type = null), new ReadKeyExpr(this, index, type);
        }, Expression.prototype.callMethod = function(name, params) {
          return new InvokeMethodExpr(this, name, params);
        }, Expression.prototype.callFn = function(params) {
          return new InvokeFunctionExpr(this, params);
        }, Expression.prototype.instantiate = function(params, type) {
          return void 0 === type && (type = null), new InstantiateExpr(this, params, type);
        }, Expression.prototype.conditional = function(trueCase, falseCase) {
          return void 0 === falseCase && (falseCase = null), new ConditionalExpr(this, trueCase, falseCase);
        }, Expression.prototype.equals = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
        }, Expression.prototype.notEquals = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
        }, Expression.prototype.identical = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
        }, Expression.prototype.notIdentical = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
        }, Expression.prototype.minus = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
        }, Expression.prototype.plus = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
        }, Expression.prototype.divide = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
        }, Expression.prototype.multiply = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
        }, Expression.prototype.modulo = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
        }, Expression.prototype.and = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
        }, Expression.prototype.or = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
        }, Expression.prototype.lower = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
        }, Expression.prototype.lowerEquals = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
        }, Expression.prototype.bigger = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
        }, Expression.prototype.biggerEquals = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
        }, Expression.prototype.isBlank = function() {
          return this.equals(NULL_EXPR);
        }, Expression.prototype.cast = function(type) {
          return new CastExpr(this, type);
        }, Expression.prototype.toStmt = function() {
          return new ExpressionStatement(this);
        }, Expression;
      }();
  !function(BuiltinVar) {
    BuiltinVar[BuiltinVar.This = 0] = "This", BuiltinVar[BuiltinVar.Super = 1] = "Super", BuiltinVar[BuiltinVar.CatchError = 2] = "CatchError", BuiltinVar[BuiltinVar.CatchStack = 3] = "CatchStack";
  }(BuiltinVar || (BuiltinVar = {}));
  var BuiltinMethod,
      ReadVarExpr = function(_super) {
        function ReadVarExpr(name, type) {
          void 0 === type && (type = null), _super.call(this, type), isString(name) ? (this.name = name, this.builtin = null) : (this.name = null, this.builtin = name);
        }
        return __extends(ReadVarExpr, _super), ReadVarExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitReadVarExpr(this, context);
        }, ReadVarExpr.prototype.set = function(value) {
          return new WriteVarExpr(this.name, value);
        }, ReadVarExpr;
      }(Expression),
      WriteVarExpr = function(_super) {
        function WriteVarExpr(name, value, type) {
          void 0 === type && (type = null), _super.call(this, isPresent(type) ? type : value.type), this.name = name, this.value = value;
        }
        return __extends(WriteVarExpr, _super), WriteVarExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitWriteVarExpr(this, context);
        }, WriteVarExpr.prototype.toDeclStmt = function(type, modifiers) {
          return void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), new DeclareVarStmt(this.name, this.value, type, modifiers);
        }, WriteVarExpr;
      }(Expression),
      WriteKeyExpr = function(_super) {
        function WriteKeyExpr(receiver, index, value, type) {
          void 0 === type && (type = null), _super.call(this, isPresent(type) ? type : value.type), this.receiver = receiver, this.index = index, this.value = value;
        }
        return __extends(WriteKeyExpr, _super), WriteKeyExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitWriteKeyExpr(this, context);
        }, WriteKeyExpr;
      }(Expression),
      WritePropExpr = function(_super) {
        function WritePropExpr(receiver, name, value, type) {
          void 0 === type && (type = null), _super.call(this, isPresent(type) ? type : value.type), this.receiver = receiver, this.name = name, this.value = value;
        }
        return __extends(WritePropExpr, _super), WritePropExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitWritePropExpr(this, context);
        }, WritePropExpr;
      }(Expression);
  !function(BuiltinMethod) {
    BuiltinMethod[BuiltinMethod.ConcatArray = 0] = "ConcatArray", BuiltinMethod[BuiltinMethod.SubscribeObservable = 1] = "SubscribeObservable", BuiltinMethod[BuiltinMethod.bind = 2] = "bind";
  }(BuiltinMethod || (BuiltinMethod = {}));
  var StmtModifier,
      InvokeMethodExpr = function(_super) {
        function InvokeMethodExpr(receiver, method, args, type) {
          void 0 === type && (type = null), _super.call(this, type), this.receiver = receiver, this.args = args, isString(method) ? (this.name = method, this.builtin = null) : (this.name = null, this.builtin = method);
        }
        return __extends(InvokeMethodExpr, _super), InvokeMethodExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitInvokeMethodExpr(this, context);
        }, InvokeMethodExpr;
      }(Expression),
      InvokeFunctionExpr = function(_super) {
        function InvokeFunctionExpr(fn, args, type) {
          void 0 === type && (type = null), _super.call(this, type), this.fn = fn, this.args = args;
        }
        return __extends(InvokeFunctionExpr, _super), InvokeFunctionExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitInvokeFunctionExpr(this, context);
        }, InvokeFunctionExpr;
      }(Expression),
      InstantiateExpr = function(_super) {
        function InstantiateExpr(classExpr, args, type) {
          _super.call(this, type), this.classExpr = classExpr, this.args = args;
        }
        return __extends(InstantiateExpr, _super), InstantiateExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitInstantiateExpr(this, context);
        }, InstantiateExpr;
      }(Expression),
      LiteralExpr = function(_super) {
        function LiteralExpr(value, type) {
          void 0 === type && (type = null), _super.call(this, type), this.value = value;
        }
        return __extends(LiteralExpr, _super), LiteralExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitLiteralExpr(this, context);
        }, LiteralExpr;
      }(Expression),
      ExternalExpr = function(_super) {
        function ExternalExpr(value, type, typeParams) {
          void 0 === type && (type = null), void 0 === typeParams && (typeParams = null), _super.call(this, type), this.value = value, this.typeParams = typeParams;
        }
        return __extends(ExternalExpr, _super), ExternalExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitExternalExpr(this, context);
        }, ExternalExpr;
      }(Expression),
      ConditionalExpr = function(_super) {
        function ConditionalExpr(condition, trueCase, falseCase, type) {
          void 0 === falseCase && (falseCase = null), void 0 === type && (type = null), _super.call(this, isPresent(type) ? type : trueCase.type), this.condition = condition, this.falseCase = falseCase, this.trueCase = trueCase;
        }
        return __extends(ConditionalExpr, _super), ConditionalExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitConditionalExpr(this, context);
        }, ConditionalExpr;
      }(Expression),
      NotExpr = function(_super) {
        function NotExpr(condition) {
          _super.call(this, BOOL_TYPE), this.condition = condition;
        }
        return __extends(NotExpr, _super), NotExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitNotExpr(this, context);
        }, NotExpr;
      }(Expression),
      CastExpr = function(_super) {
        function CastExpr(value, type) {
          _super.call(this, type), this.value = value;
        }
        return __extends(CastExpr, _super), CastExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitCastExpr(this, context);
        }, CastExpr;
      }(Expression),
      FnParam = function() {
        function FnParam(name, type) {
          void 0 === type && (type = null), this.name = name, this.type = type;
        }
        return FnParam;
      }(),
      FunctionExpr = function(_super) {
        function FunctionExpr(params, statements, type) {
          void 0 === type && (type = null), _super.call(this, type), this.params = params, this.statements = statements;
        }
        return __extends(FunctionExpr, _super), FunctionExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitFunctionExpr(this, context);
        }, FunctionExpr.prototype.toDeclStmt = function(name, modifiers) {
          return void 0 === modifiers && (modifiers = null), new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
        }, FunctionExpr;
      }(Expression),
      BinaryOperatorExpr = function(_super) {
        function BinaryOperatorExpr(operator, lhs, rhs, type) {
          void 0 === type && (type = null), _super.call(this, isPresent(type) ? type : lhs.type), this.operator = operator, this.rhs = rhs, this.lhs = lhs;
        }
        return __extends(BinaryOperatorExpr, _super), BinaryOperatorExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitBinaryOperatorExpr(this, context);
        }, BinaryOperatorExpr;
      }(Expression),
      ReadPropExpr = function(_super) {
        function ReadPropExpr(receiver, name, type) {
          void 0 === type && (type = null), _super.call(this, type), this.receiver = receiver, this.name = name;
        }
        return __extends(ReadPropExpr, _super), ReadPropExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitReadPropExpr(this, context);
        }, ReadPropExpr.prototype.set = function(value) {
          return new WritePropExpr(this.receiver, this.name, value);
        }, ReadPropExpr;
      }(Expression),
      ReadKeyExpr = function(_super) {
        function ReadKeyExpr(receiver, index, type) {
          void 0 === type && (type = null), _super.call(this, type), this.receiver = receiver, this.index = index;
        }
        return __extends(ReadKeyExpr, _super), ReadKeyExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitReadKeyExpr(this, context);
        }, ReadKeyExpr.prototype.set = function(value) {
          return new WriteKeyExpr(this.receiver, this.index, value);
        }, ReadKeyExpr;
      }(Expression),
      LiteralArrayExpr = function(_super) {
        function LiteralArrayExpr(entries, type) {
          void 0 === type && (type = null), _super.call(this, type), this.entries = entries;
        }
        return __extends(LiteralArrayExpr, _super), LiteralArrayExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitLiteralArrayExpr(this, context);
        }, LiteralArrayExpr;
      }(Expression),
      LiteralMapExpr = function(_super) {
        function LiteralMapExpr(entries, type) {
          void 0 === type && (type = null), _super.call(this, type), this.entries = entries, this.valueType = null, isPresent(type) && (this.valueType = type.valueType);
        }
        return __extends(LiteralMapExpr, _super), LiteralMapExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitLiteralMapExpr(this, context);
        }, LiteralMapExpr;
      }(Expression),
      THIS_EXPR = new ReadVarExpr(BuiltinVar.This),
      SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super),
      NULL_EXPR = (new ReadVarExpr(BuiltinVar.CatchError), new ReadVarExpr(BuiltinVar.CatchStack), new LiteralExpr(null, null));
  !function(StmtModifier) {
    StmtModifier[StmtModifier.Final = 0] = "Final", StmtModifier[StmtModifier.Private = 1] = "Private";
  }(StmtModifier || (StmtModifier = {}));
  var Statement = function() {
    function Statement(modifiers) {
      void 0 === modifiers && (modifiers = null), this.modifiers = modifiers, isBlank(modifiers) && (this.modifiers = []);
    }
    return Statement.prototype.hasModifier = function(modifier) {
      return this.modifiers.indexOf(modifier) !== -1;
    }, Statement;
  }(),
      DeclareVarStmt = function(_super) {
        function DeclareVarStmt(name, value, type, modifiers) {
          void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.name = name, this.value = value, this.type = isPresent(type) ? type : value.type;
        }
        return __extends(DeclareVarStmt, _super), DeclareVarStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitDeclareVarStmt(this, context);
        }, DeclareVarStmt;
      }(Statement),
      DeclareFunctionStmt = function(_super) {
        function DeclareFunctionStmt(name, params, statements, type, modifiers) {
          void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.name = name, this.params = params, this.statements = statements, this.type = type;
        }
        return __extends(DeclareFunctionStmt, _super), DeclareFunctionStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitDeclareFunctionStmt(this, context);
        }, DeclareFunctionStmt;
      }(Statement),
      ExpressionStatement = function(_super) {
        function ExpressionStatement(expr) {
          _super.call(this), this.expr = expr;
        }
        return __extends(ExpressionStatement, _super), ExpressionStatement.prototype.visitStatement = function(visitor, context) {
          return visitor.visitExpressionStmt(this, context);
        }, ExpressionStatement;
      }(Statement),
      ReturnStatement = function(_super) {
        function ReturnStatement(value) {
          _super.call(this), this.value = value;
        }
        return __extends(ReturnStatement, _super), ReturnStatement.prototype.visitStatement = function(visitor, context) {
          return visitor.visitReturnStmt(this, context);
        }, ReturnStatement;
      }(Statement),
      AbstractClassPart = function() {
        function AbstractClassPart(type, modifiers) {
          void 0 === type && (type = null), this.type = type, this.modifiers = modifiers, isBlank(modifiers) && (this.modifiers = []);
        }
        return AbstractClassPart.prototype.hasModifier = function(modifier) {
          return this.modifiers.indexOf(modifier) !== -1;
        }, AbstractClassPart;
      }(),
      ClassField = function(_super) {
        function ClassField(name, type, modifiers) {
          void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), _super.call(this, type, modifiers), this.name = name;
        }
        return __extends(ClassField, _super), ClassField;
      }(AbstractClassPart),
      ClassMethod = function(_super) {
        function ClassMethod(name, params, body, type, modifiers) {
          void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), _super.call(this, type, modifiers), this.name = name, this.params = params, this.body = body;
        }
        return __extends(ClassMethod, _super), ClassMethod;
      }(AbstractClassPart),
      ClassGetter = function(_super) {
        function ClassGetter(name, body, type, modifiers) {
          void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), _super.call(this, type, modifiers), this.name = name, this.body = body;
        }
        return __extends(ClassGetter, _super), ClassGetter;
      }(AbstractClassPart),
      ClassStmt = function(_super) {
        function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
          void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.name = name, this.parent = parent, this.fields = fields, this.getters = getters, this.constructorMethod = constructorMethod, this.methods = methods;
        }
        return __extends(ClassStmt, _super), ClassStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitDeclareClassStmt(this, context);
        }, ClassStmt;
      }(Statement),
      IfStmt = function(_super) {
        function IfStmt(condition, trueCase, falseCase) {
          void 0 === falseCase && (falseCase = []), _super.call(this), this.condition = condition, this.trueCase = trueCase, this.falseCase = falseCase;
        }
        return __extends(IfStmt, _super), IfStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitIfStmt(this, context);
        }, IfStmt;
      }(Statement),
      TryCatchStmt = function(_super) {
        function TryCatchStmt(bodyStmts, catchStmts) {
          _super.call(this), this.bodyStmts = bodyStmts, this.catchStmts = catchStmts;
        }
        return __extends(TryCatchStmt, _super), TryCatchStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitTryCatchStmt(this, context);
        }, TryCatchStmt;
      }(Statement),
      ThrowStmt = function(_super) {
        function ThrowStmt(error) {
          _super.call(this), this.error = error;
        }
        return __extends(ThrowStmt, _super), ThrowStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitThrowStmt(this, context);
        }, ThrowStmt;
      }(Statement),
      ExpressionTransformer = function() {
        function ExpressionTransformer() {}
        return ExpressionTransformer.prototype.visitReadVarExpr = function(ast, context) {
          return ast;
        }, ExpressionTransformer.prototype.visitWriteVarExpr = function(expr, context) {
          return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitWriteKeyExpr = function(expr, context) {
          return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitWritePropExpr = function(expr, context) {
          return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitInvokeMethodExpr = function(ast, context) {
          var method = isPresent(ast.builtin) ? ast.builtin : ast.name;
          return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
        }, ExpressionTransformer.prototype.visitInvokeFunctionExpr = function(ast, context) {
          return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
        }, ExpressionTransformer.prototype.visitInstantiateExpr = function(ast, context) {
          return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
        }, ExpressionTransformer.prototype.visitLiteralExpr = function(ast, context) {
          return ast;
        }, ExpressionTransformer.prototype.visitExternalExpr = function(ast, context) {
          return ast;
        }, ExpressionTransformer.prototype.visitConditionalExpr = function(ast, context) {
          return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitNotExpr = function(ast, context) {
          return new NotExpr(ast.condition.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitCastExpr = function(ast, context) {
          return new CastExpr(ast.value.visitExpression(this, context), context);
        }, ExpressionTransformer.prototype.visitFunctionExpr = function(ast, context) {
          return ast;
        }, ExpressionTransformer.prototype.visitBinaryOperatorExpr = function(ast, context) {
          return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
        }, ExpressionTransformer.prototype.visitReadPropExpr = function(ast, context) {
          return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
        }, ExpressionTransformer.prototype.visitReadKeyExpr = function(ast, context) {
          return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
        }, ExpressionTransformer.prototype.visitLiteralArrayExpr = function(ast, context) {
          return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
        }, ExpressionTransformer.prototype.visitLiteralMapExpr = function(ast, context) {
          var _this = this;
          return new LiteralMapExpr(ast.entries.map(function(entry) {
            return [entry[0], entry[1].visitExpression(_this, context)];
          }));
        }, ExpressionTransformer.prototype.visitAllExpressions = function(exprs, context) {
          var _this = this;
          return exprs.map(function(expr) {
            return expr.visitExpression(_this, context);
          });
        }, ExpressionTransformer.prototype.visitDeclareVarStmt = function(stmt, context) {
          return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
        }, ExpressionTransformer.prototype.visitDeclareFunctionStmt = function(stmt, context) {
          return stmt;
        }, ExpressionTransformer.prototype.visitExpressionStmt = function(stmt, context) {
          return new ExpressionStatement(stmt.expr.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitReturnStmt = function(stmt, context) {
          return new ReturnStatement(stmt.value.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitDeclareClassStmt = function(stmt, context) {
          return stmt;
        }, ExpressionTransformer.prototype.visitIfStmt = function(stmt, context) {
          return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
        }, ExpressionTransformer.prototype.visitTryCatchStmt = function(stmt, context) {
          return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
        }, ExpressionTransformer.prototype.visitThrowStmt = function(stmt, context) {
          return new ThrowStmt(stmt.error.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitCommentStmt = function(stmt, context) {
          return stmt;
        }, ExpressionTransformer.prototype.visitAllStatements = function(stmts, context) {
          var _this = this;
          return stmts.map(function(stmt) {
            return stmt.visitStatement(_this, context);
          });
        }, ExpressionTransformer;
      }(),
      RecursiveExpressionVisitor = function() {
        function RecursiveExpressionVisitor() {}
        return RecursiveExpressionVisitor.prototype.visitReadVarExpr = function(ast, context) {
          return ast;
        }, RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function(expr, context) {
          return expr.value.visitExpression(this, context), expr;
        }, RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function(expr, context) {
          return expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr;
        }, RecursiveExpressionVisitor.prototype.visitWritePropExpr = function(expr, context) {
          return expr.receiver.visitExpression(this, context), expr.value.visitExpression(this, context), expr;
        }, RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function(ast, context) {
          return ast.receiver.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function(ast, context) {
          return ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function(ast, context) {
          return ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitLiteralExpr = function(ast, context) {
          return ast;
        }, RecursiveExpressionVisitor.prototype.visitExternalExpr = function(ast, context) {
          return ast;
        }, RecursiveExpressionVisitor.prototype.visitConditionalExpr = function(ast, context) {
          return ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitNotExpr = function(ast, context) {
          return ast.condition.visitExpression(this, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitCastExpr = function(ast, context) {
          return ast.value.visitExpression(this, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitFunctionExpr = function(ast, context) {
          return ast;
        }, RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function(ast, context) {
          return ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitReadPropExpr = function(ast, context) {
          return ast.receiver.visitExpression(this, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function(ast, context) {
          return ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function(ast, context) {
          return this.visitAllExpressions(ast.entries, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function(ast, context) {
          var _this = this;
          return ast.entries.forEach(function(entry) {
            return entry[1].visitExpression(_this, context);
          }), ast;
        }, RecursiveExpressionVisitor.prototype.visitAllExpressions = function(exprs, context) {
          var _this = this;
          exprs.forEach(function(expr) {
            return expr.visitExpression(_this, context);
          });
        }, RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function(stmt, context) {
          return stmt.value.visitExpression(this, context), stmt;
        }, RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function(stmt, context) {
          return stmt;
        }, RecursiveExpressionVisitor.prototype.visitExpressionStmt = function(stmt, context) {
          return stmt.expr.visitExpression(this, context), stmt;
        }, RecursiveExpressionVisitor.prototype.visitReturnStmt = function(stmt, context) {
          return stmt.value.visitExpression(this, context), stmt;
        }, RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function(stmt, context) {
          return stmt;
        }, RecursiveExpressionVisitor.prototype.visitIfStmt = function(stmt, context) {
          return stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt;
        }, RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function(stmt, context) {
          return this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt;
        }, RecursiveExpressionVisitor.prototype.visitThrowStmt = function(stmt, context) {
          return stmt.error.visitExpression(this, context), stmt;
        }, RecursiveExpressionVisitor.prototype.visitCommentStmt = function(stmt, context) {
          return stmt;
        }, RecursiveExpressionVisitor.prototype.visitAllStatements = function(stmts, context) {
          var _this = this;
          stmts.forEach(function(stmt) {
            return stmt.visitStatement(_this, context);
          });
        }, RecursiveExpressionVisitor;
      }(),
      _ReplaceVariableTransformer = function(_super) {
        function _ReplaceVariableTransformer(_varName, _newValue) {
          _super.call(this), this._varName = _varName, this._newValue = _newValue;
        }
        return __extends(_ReplaceVariableTransformer, _super), _ReplaceVariableTransformer.prototype.visitReadVarExpr = function(ast, context) {
          return ast.name == this._varName ? this._newValue : ast;
        }, _ReplaceVariableTransformer;
      }(ExpressionTransformer),
      _VariableFinder = function(_super) {
        function _VariableFinder() {
          for (var args = [],
              _i = 0; _i < arguments.length; _i++)
            args[_i - 0] = arguments[_i];
          _super.apply(this, args), this.varNames = new Set;
        }
        return __extends(_VariableFinder, _super), _VariableFinder.prototype.visitReadVarExpr = function(ast, context) {
          return this.varNames.add(ast.name), null;
        }, _VariableFinder;
      }(RecursiveExpressionVisitor),
      AnimationAst = function() {
        function AnimationAst() {
          this.startTime = 0, this.playTime = 0;
        }
        return AnimationAst;
      }(),
      AnimationStateAst = function(_super) {
        function AnimationStateAst() {
          _super.apply(this, arguments);
        }
        return __extends(AnimationStateAst, _super), AnimationStateAst;
      }(AnimationAst),
      AnimationEntryAst = function(_super) {
        function AnimationEntryAst(name, stateDeclarations, stateTransitions) {
          _super.call(this), this.name = name, this.stateDeclarations = stateDeclarations, this.stateTransitions = stateTransitions;
        }
        return __extends(AnimationEntryAst, _super), AnimationEntryAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationEntry(this, context);
        }, AnimationEntryAst;
      }(AnimationAst),
      AnimationStateDeclarationAst = function(_super) {
        function AnimationStateDeclarationAst(stateName, styles) {
          _super.call(this), this.stateName = stateName, this.styles = styles;
        }
        return __extends(AnimationStateDeclarationAst, _super), AnimationStateDeclarationAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationStateDeclaration(this, context);
        }, AnimationStateDeclarationAst;
      }(AnimationStateAst),
      AnimationStateTransitionExpression = function() {
        function AnimationStateTransitionExpression(fromState, toState) {
          this.fromState = fromState, this.toState = toState;
        }
        return AnimationStateTransitionExpression;
      }(),
      AnimationStateTransitionAst = function(_super) {
        function AnimationStateTransitionAst(stateChanges, animation) {
          _super.call(this), this.stateChanges = stateChanges, this.animation = animation;
        }
        return __extends(AnimationStateTransitionAst, _super), AnimationStateTransitionAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationStateTransition(this, context);
        }, AnimationStateTransitionAst;
      }(AnimationStateAst),
      AnimationStepAst = function(_super) {
        function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {
          _super.call(this), this.startingStyles = startingStyles, this.keyframes = keyframes, this.duration = duration, this.delay = delay, this.easing = easing;
        }
        return __extends(AnimationStepAst, _super), AnimationStepAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationStep(this, context);
        }, AnimationStepAst;
      }(AnimationAst),
      AnimationStylesAst = function(_super) {
        function AnimationStylesAst(styles) {
          _super.call(this), this.styles = styles;
        }
        return __extends(AnimationStylesAst, _super), AnimationStylesAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationStyles(this, context);
        }, AnimationStylesAst;
      }(AnimationAst),
      AnimationKeyframeAst = function(_super) {
        function AnimationKeyframeAst(offset, styles) {
          _super.call(this), this.offset = offset, this.styles = styles;
        }
        return __extends(AnimationKeyframeAst, _super), AnimationKeyframeAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationKeyframe(this, context);
        }, AnimationKeyframeAst;
      }(AnimationAst),
      AnimationWithStepsAst = function(_super) {
        function AnimationWithStepsAst(steps) {
          _super.call(this), this.steps = steps;
        }
        return __extends(AnimationWithStepsAst, _super), AnimationWithStepsAst;
      }(AnimationAst),
      AnimationGroupAst = function(_super) {
        function AnimationGroupAst(steps) {
          _super.call(this, steps);
        }
        return __extends(AnimationGroupAst, _super), AnimationGroupAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationGroup(this, context);
        }, AnimationGroupAst;
      }(AnimationWithStepsAst),
      AnimationSequenceAst = function(_super) {
        function AnimationSequenceAst(steps) {
          _super.call(this, steps);
        }
        return __extends(AnimationSequenceAst, _super), AnimationSequenceAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationSequence(this, context);
        }, AnimationSequenceAst;
      }(AnimationWithStepsAst),
      Math$1 = global$1.Math,
      StylesCollectionEntry = function() {
        function StylesCollectionEntry(time, value) {
          this.time = time, this.value = value;
        }
        return StylesCollectionEntry.prototype.matches = function(time, value) {
          return time == this.time && value == this.value;
        }, StylesCollectionEntry;
      }(),
      StylesCollection = function() {
        function StylesCollection() {
          this.styles = {};
        }
        return StylesCollection.prototype.insertAtTime = function(property, time, value) {
          var tuple = new StylesCollectionEntry(time, value),
              entries = this.styles[property];
          isPresent(entries) || (entries = this.styles[property] = []);
          for (var insertionIndex = 0,
              i = entries.length - 1; i >= 0; i--)
            if (entries[i].time <= time) {
              insertionIndex = i + 1;
              break;
            }
          ListWrapper.insert(entries, insertionIndex, tuple);
        }, StylesCollection.prototype.getByIndex = function(property, index) {
          var items = this.styles[property];
          return isPresent(items) ? index >= items.length ? null : items[index] : null;
        }, StylesCollection.prototype.indexOfAtOrBeforeTime = function(property, time) {
          var entries = this.styles[property];
          if (isPresent(entries))
            for (var i = entries.length - 1; i >= 0; i--)
              if (entries[i].time <= time)
                return i;
          return null;
        }, StylesCollection;
      }(),
      _INITIAL_KEYFRAME = 0,
      _TERMINAL_KEYFRAME = 1,
      _ONE_SECOND = 1e3,
      AnimationParseError = function(_super) {
        function AnimationParseError(message) {
          _super.call(this, null, message);
        }
        return __extends(AnimationParseError, _super), AnimationParseError.prototype.toString = function() {
          return "" + this.msg;
        }, AnimationParseError;
      }(ParseError),
      ParsedAnimationResult = function() {
        function ParsedAnimationResult(ast, errors) {
          this.ast = ast, this.errors = errors;
        }
        return ParsedAnimationResult;
      }(),
      _AnimationTimings = function() {
        function _AnimationTimings(duration, delay, easing) {
          this.duration = duration, this.delay = delay, this.easing = easing;
        }
        return _AnimationTimings;
      }(),
      CompiledAnimation = function() {
        function CompiledAnimation(name, statesMapStatement, statesVariableName, fnStatement, fnVariable) {
          this.name = name, this.statesMapStatement = statesMapStatement, this.statesVariableName = statesVariableName, this.fnStatement = fnStatement, this.fnVariable = fnVariable;
        }
        return CompiledAnimation;
      }(),
      AnimationCompiler = function() {
        function AnimationCompiler() {}
        return AnimationCompiler.prototype.compileComponent = function(component) {
          var compiledAnimations = [],
              index = 0;
          return component.template.animations.forEach(function(entry) {
            var result = parseAnimationEntry(entry);
            if (result.errors.length > 0) {
              var errorMessage = "";
              throw result.errors.forEach(function(error) {
                errorMessage += "\n- " + error.msg;
              }), new BaseException$1('Unable to parse the animation sequence for "' + entry.name + '" due to the following errors: ' + errorMessage);
            }
            var factoryName = component.type.name + "_" + entry.name + "_" + index;
            index++;
            var visitor = new _AnimationBuilder(entry.name, factoryName);
            compiledAnimations.push(visitor.build(result.ast));
          }), compiledAnimations;
        }, AnimationCompiler;
      }(),
      _ANIMATION_FACTORY_ELEMENT_VAR = variable("element"),
      _ANIMATION_DEFAULT_STATE_VAR = variable("defaultStateStyles"),
      _ANIMATION_FACTORY_VIEW_VAR = variable("view"),
      _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop("renderer"),
      _ANIMATION_CURRENT_STATE_VAR = variable("currentState"),
      _ANIMATION_NEXT_STATE_VAR = variable("nextState"),
      _ANIMATION_PLAYER_VAR = variable("player"),
      _ANIMATION_START_STATE_STYLES_VAR = variable("startStateStyles"),
      _ANIMATION_END_STATE_STYLES_VAR = variable("endStateStyles"),
      _ANIMATION_COLLECTED_STYLES = variable("collectedStyles"),
      EMPTY_MAP$1 = literalMap([]),
      _AnimationBuilder = function() {
        function _AnimationBuilder(animationName, factoryName) {
          this.animationName = animationName, this._fnVarName = factoryName + "_factory", this._statesMapVarName = factoryName + "_states", this._statesMapVar = variable(this._statesMapVarName);
        }
        return _AnimationBuilder.prototype.visitAnimationStyles = function(ast, context) {
          var stylesArr = [];
          return context.isExpectingFirstStyleStep && (stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR), context.isExpectingFirstStyleStep = !1), ast.styles.forEach(function(entry) {
            stylesArr.push(literalMap(StringMapWrapper.keys(entry).map(function(key) {
              return [key, literal(entry[key])];
            })));
          }), importExpr(Identifiers.AnimationStyles).instantiate([importExpr(Identifiers.collectAndResolveStyles).callFn([_ANIMATION_COLLECTED_STYLES, literalArr(stylesArr)])]);
        }, _AnimationBuilder.prototype.visitAnimationKeyframe = function(ast, context) {
          return importExpr(Identifiers.AnimationKeyframe).instantiate([literal(ast.offset), ast.styles.visit(this, context)]);
        }, _AnimationBuilder.prototype.visitAnimationStep = function(ast, context) {
          var _this = this;
          if (context.endStateAnimateStep === ast)
            return this._visitEndStateAnimation(ast, context);
          var startingStylesExpr = ast.startingStyles.visit(this, context),
              keyframeExpressions = ast.keyframes.map(function(keyframeEntry) {
                return keyframeEntry.visit(_this, context);
              });
          return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions));
        }, _AnimationBuilder.prototype._visitEndStateAnimation = function(ast, context) {
          var _this = this,
              startingStylesExpr = ast.startingStyles.visit(this, context),
              keyframeExpressions = ast.keyframes.map(function(keyframe) {
                return keyframe.visit(_this, context);
              }),
              keyframesExpr = importExpr(Identifiers.balanceAnimationKeyframes).callFn([_ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR, literalArr(keyframeExpressions)]);
          return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr);
        }, _AnimationBuilder.prototype._callAnimateMethod = function(ast, startingStylesExpr, keyframesExpr) {
          return _ANIMATION_FACTORY_RENDERER_VAR.callMethod("animate", [_ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration), literal(ast.delay), literal(ast.easing)]);
        }, _AnimationBuilder.prototype.visitAnimationSequence = function(ast, context) {
          var _this = this,
              playerExprs = ast.steps.map(function(step) {
                return step.visit(_this, context);
              });
          return importExpr(Identifiers.AnimationSequencePlayer).instantiate([literalArr(playerExprs)]);
        }, _AnimationBuilder.prototype.visitAnimationGroup = function(ast, context) {
          var _this = this,
              playerExprs = ast.steps.map(function(step) {
                return step.visit(_this, context);
              });
          return importExpr(Identifiers.AnimationGroupPlayer).instantiate([literalArr(playerExprs)]);
        }, _AnimationBuilder.prototype.visitAnimationStateDeclaration = function(ast, context) {
          var flatStyles = {};
          _getStylesArray(ast).forEach(function(entry) {
            StringMapWrapper.forEach(entry, function(value, key) {
              flatStyles[key] = value;
            });
          }), context.stateMap.registerState(ast.stateName, flatStyles);
        }, _AnimationBuilder.prototype.visitAnimationStateTransition = function(ast, context) {
          var steps = ast.animation.steps,
              lastStep = steps[steps.length - 1];
          _isEndStateAnimateStep(lastStep) && (context.endStateAnimateStep = lastStep), context.isExpectingFirstStyleStep = !0;
          var stateChangePreconditions = [];
          ast.stateChanges.forEach(function(stateChange) {
            stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState).and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState))), stateChange.fromState != ANY_STATE && context.stateMap.registerState(stateChange.fromState), stateChange.toState != ANY_STATE && context.stateMap.registerState(stateChange.toState);
          });
          var animationPlayerExpr = ast.animation.visit(this, context),
              reducedStateChangesPrecondition = stateChangePreconditions.reduce(function(a, b) {
                return a.or(b);
              }),
              precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);
          return new IfStmt(precondition, [_ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt()]);
        }, _AnimationBuilder.prototype.visitAnimationEntry = function(ast, context) {
          var _this = this;
          ast.stateDeclarations.forEach(function(def) {
            return def.visit(_this, context);
          }), context.stateMap.registerState(DEFAULT_STATE, {});
          var statements = [];
          statements.push(_ANIMATION_FACTORY_VIEW_VAR.callMethod("cancelActiveAnimation", [_ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName), _ANIMATION_NEXT_STATE_VAR.equals(literal(EMPTY_ANIMATION_STATE))]).toStmt()), statements.push(_ANIMATION_COLLECTED_STYLES.set(EMPTY_MAP$1).toDeclStmt()), statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt()), statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(DEFAULT_STATE))).toDeclStmt()), statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR)).toDeclStmt()), statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()])), statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR)).toDeclStmt()), statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
          var RENDER_STYLES_FN = importExpr(Identifiers.renderStyles);
          return statements.push(RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(Identifiers.clearStyles).callFn([_ANIMATION_START_STATE_STYLES_VAR])]).toStmt()), ast.stateTransitions.forEach(function(transAst) {
            return statements.push(transAst.visit(_this, context));
          }), statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [_ANIMATION_PLAYER_VAR.set(importExpr(Identifiers.NoOpAnimationPlayer).instantiate([])).toStmt()])), statements.push(_ANIMATION_PLAYER_VAR.callMethod("onDone", [fn([], [RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(Identifiers.prepareFinalAnimationStyles).callFn([_ANIMATION_START_STATE_STYLES_VAR, _ANIMATION_END_STATE_STYLES_VAR])]).toStmt()])]).toStmt()), statements.push(_ANIMATION_FACTORY_VIEW_VAR.callMethod("registerAndStartAnimation", [_ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName), _ANIMATION_PLAYER_VAR]).toStmt()), fn([new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(Identifiers.AppView, [DYNAMIC_TYPE])), new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE)], statements);
        }, _AnimationBuilder.prototype.build = function(ast) {
          var context = new _AnimationBuilderContext,
              fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName),
              fnVariable = variable(this._fnVarName),
              lookupMap = [];
          StringMapWrapper.forEach(context.stateMap.states, function(value, stateName) {
            var variableValue = EMPTY_MAP$1;
            if (isPresent(value)) {
              var styleMap_1 = [];
              StringMapWrapper.forEach(value, function(value, key) {
                styleMap_1.push([key, literal(value)]);
              }), variableValue = literalMap(styleMap_1);
            }
            lookupMap.push([stateName, variableValue]);
          });
          var compiledStatesMapExpr = this._statesMapVar.set(literalMap(lookupMap)).toDeclStmt();
          return new CompiledAnimation(this.animationName, compiledStatesMapExpr, this._statesMapVarName, fnStatement, fnVariable);
        }, _AnimationBuilder;
      }(),
      _AnimationBuilderContext = function() {
        function _AnimationBuilderContext() {
          this.stateMap = new _AnimationBuilderStateMap, this.endStateAnimateStep = null, this.isExpectingFirstStyleStep = !1;
        }
        return _AnimationBuilderContext;
      }(),
      _AnimationBuilderStateMap = function() {
        function _AnimationBuilderStateMap() {
          this._states = {};
        }
        return Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", {
          get: function() {
            return this._states;
          },
          enumerable: !0,
          configurable: !0
        }), _AnimationBuilderStateMap.prototype.registerState = function(name, value) {
          void 0 === value && (value = null);
          var existingEntry = this._states[name];
          isBlank(existingEntry) && (this._states[name] = value);
        }, _AnimationBuilderStateMap;
      }(),
      ViewTypeEnum = function() {
        function ViewTypeEnum() {}
        return ViewTypeEnum.fromValue = function(value) {
          return _enumExpression(Identifiers.ViewType, value);
        }, ViewTypeEnum;
      }();
  ViewTypeEnum.HOST = ViewTypeEnum.fromValue(ViewType.HOST), ViewTypeEnum.COMPONENT = ViewTypeEnum.fromValue(ViewType.COMPONENT), ViewTypeEnum.EMBEDDED = ViewTypeEnum.fromValue(ViewType.EMBEDDED);
  var ViewEncapsulationEnum = function() {
    function ViewEncapsulationEnum() {}
    return ViewEncapsulationEnum.fromValue = function(value) {
      return _enumExpression(Identifiers.ViewEncapsulation, value);
    }, ViewEncapsulationEnum;
  }();
  ViewEncapsulationEnum.Emulated = ViewEncapsulationEnum.fromValue(_angular_core.ViewEncapsulation.Emulated), ViewEncapsulationEnum.Native = ViewEncapsulationEnum.fromValue(_angular_core.ViewEncapsulation.Native), ViewEncapsulationEnum.None = ViewEncapsulationEnum.fromValue(_angular_core.ViewEncapsulation.None);
  var ChangeDetectionStrategyEnum = function() {
    function ChangeDetectionStrategyEnum() {}
    return ChangeDetectionStrategyEnum.fromValue = function(value) {
      return _enumExpression(Identifiers.ChangeDetectionStrategy, value);
    }, ChangeDetectionStrategyEnum;
  }();
  ChangeDetectionStrategyEnum.OnPush = ChangeDetectionStrategyEnum.fromValue(_angular_core.ChangeDetectionStrategy.OnPush), ChangeDetectionStrategyEnum.Default = ChangeDetectionStrategyEnum.fromValue(_angular_core.ChangeDetectionStrategy.Default);
  var ChangeDetectorStatusEnum = function() {
    function ChangeDetectorStatusEnum() {}
    return ChangeDetectorStatusEnum.fromValue = function(value) {
      return _enumExpression(Identifiers.ChangeDetectorStatus, value);
    }, ChangeDetectorStatusEnum;
  }();
  ChangeDetectorStatusEnum.CheckOnce = ChangeDetectorStatusEnum.fromValue(ChangeDetectorStatus.CheckOnce), ChangeDetectorStatusEnum.Checked = ChangeDetectorStatusEnum.fromValue(ChangeDetectorStatus.Checked), ChangeDetectorStatusEnum.CheckAlways = ChangeDetectorStatusEnum.fromValue(ChangeDetectorStatus.CheckAlways), ChangeDetectorStatusEnum.Detached = ChangeDetectorStatusEnum.fromValue(ChangeDetectorStatus.Detached), ChangeDetectorStatusEnum.Errored = ChangeDetectorStatusEnum.fromValue(ChangeDetectorStatus.Errored), ChangeDetectorStatusEnum.Destroyed = ChangeDetectorStatusEnum.fromValue(ChangeDetectorStatus.Destroyed);
  var ViewConstructorVars = function() {
    function ViewConstructorVars() {}
    return ViewConstructorVars;
  }();
  ViewConstructorVars.viewUtils = variable("viewUtils"), ViewConstructorVars.parentInjector = variable("parentInjector"), ViewConstructorVars.declarationEl = variable("declarationEl");
  var ViewProperties = function() {
    function ViewProperties() {}
    return ViewProperties;
  }();
  ViewProperties.renderer = THIS_EXPR.prop("renderer"), ViewProperties.projectableNodes = THIS_EXPR.prop("projectableNodes"), ViewProperties.viewUtils = THIS_EXPR.prop("viewUtils");
  var EventHandlerVars = function() {
    function EventHandlerVars() {}
    return EventHandlerVars;
  }();
  EventHandlerVars.event = variable("$event");
  var InjectMethodVars = function() {
    function InjectMethodVars() {}
    return InjectMethodVars;
  }();
  InjectMethodVars.token = variable("token"), InjectMethodVars.requestNodeIndex = variable("requestNodeIndex"), InjectMethodVars.notFoundResult = variable("notFoundResult");
  var DetectChangesVars = function() {
    function DetectChangesVars() {}
    return DetectChangesVars;
  }();
  DetectChangesVars.throwOnChange = variable("throwOnChange"), DetectChangesVars.changes = variable("changes"), DetectChangesVars.changed = variable("changed"), DetectChangesVars.valUnwrapper = variable("valUnwrapper");
  var _Mode,
      ViewQueryValues = function() {
        function ViewQueryValues(view, values) {
          this.view = view, this.values = values;
        }
        return ViewQueryValues;
      }(),
      CompileQuery = function() {
        function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
          this.meta = meta, this.queryList = queryList, this.ownerDirectiveExpression = ownerDirectiveExpression, this.view = view, this._values = new ViewQueryValues(view, []);
        }
        return CompileQuery.prototype.addValue = function(value, view) {
          for (var currentView = view,
              elPath = []; isPresent(currentView) && currentView !== this.view; ) {
            var parentEl = currentView.declarationElement;
            elPath.unshift(parentEl), currentView = parentEl.view;
          }
          var queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view),
              viewValues = this._values;
          elPath.forEach(function(el) {
            var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
            if (last instanceof ViewQueryValues && last.view === el.embeddedView)
              viewValues = last;
            else {
              var newViewValues = new ViewQueryValues(el.embeddedView, []);
              viewValues.values.push(newViewValues), viewValues = newViewValues;
            }
          }), viewValues.values.push(value), elPath.length > 0 && view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod("setDirty", []).toStmt());
        }, CompileQuery.prototype._isStatic = function() {
          return !this._values.values.some(function(value) {
            return value instanceof ViewQueryValues;
          });
        }, CompileQuery.prototype.afterChildren = function(targetStaticMethod, targetDynamicMethod) {
          var values = createQueryValues(this._values),
              updateStmts = [this.queryList.callMethod("reset", [literalArr(values)]).toStmt()];
          if (isPresent(this.ownerDirectiveExpression)) {
            var valueExpr = this.meta.first ? this.queryList.prop("first") : this.queryList;
            updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
          }
          this.meta.first || updateStmts.push(this.queryList.callMethod("notifyOnChanges", []).toStmt()), this.meta.first && this._isStatic() ? targetStaticMethod.addStmts(updateStmts) : targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop("dirty"), updateStmts));
        }, CompileQuery;
      }(),
      _DebugState = function() {
        function _DebugState(nodeIndex, sourceAst) {
          this.nodeIndex = nodeIndex, this.sourceAst = sourceAst;
        }
        return _DebugState;
      }(),
      NULL_DEBUG_STATE = new _DebugState(null, null),
      CompileMethod = function() {
        function CompileMethod(_view) {
          this._view = _view, this._newState = NULL_DEBUG_STATE, this._currState = NULL_DEBUG_STATE, this._bodyStatements = [], this._debugEnabled = this._view.genConfig.genDebugInfo;
        }
        return CompileMethod.prototype._updateDebugContextIfNeeded = function() {
          if (this._newState.nodeIndex !== this._currState.nodeIndex || this._newState.sourceAst !== this._currState.sourceAst) {
            var expr = this._updateDebugContext(this._newState);
            isPresent(expr) && this._bodyStatements.push(expr.toStmt());
          }
        }, CompileMethod.prototype._updateDebugContext = function(newState) {
          if (this._currState = this._newState = newState, this._debugEnabled) {
            var sourceLocation = isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;
            return THIS_EXPR.callMethod("debug", [literal(newState.nodeIndex), isPresent(sourceLocation) ? literal(sourceLocation.line) : NULL_EXPR, isPresent(sourceLocation) ? literal(sourceLocation.col) : NULL_EXPR]);
          }
          return null;
        }, CompileMethod.prototype.resetDebugInfoExpr = function(nodeIndex, templateAst) {
          var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
          return isPresent(res) ? res : NULL_EXPR;
        }, CompileMethod.prototype.resetDebugInfo = function(nodeIndex, templateAst) {
          this._newState = new _DebugState(nodeIndex, templateAst);
        }, CompileMethod.prototype.addStmt = function(stmt) {
          this._updateDebugContextIfNeeded(), this._bodyStatements.push(stmt);
        }, CompileMethod.prototype.addStmts = function(stmts) {
          this._updateDebugContextIfNeeded(), ListWrapper.addAll(this._bodyStatements, stmts);
        }, CompileMethod.prototype.finish = function() {
          return this._bodyStatements;
        }, CompileMethod.prototype.isEmpty = function() {
          return 0 === this._bodyStatements.length;
        }, CompileMethod;
      }(),
      CompileNode = function() {
        function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
          this.parent = parent, this.view = view, this.nodeIndex = nodeIndex, this.renderNode = renderNode, this.sourceAst = sourceAst;
        }
        return CompileNode.prototype.isNull = function() {
          return isBlank(this.renderNode);
        }, CompileNode.prototype.isRootElement = function() {
          return this.view != this.parent.view;
        }, CompileNode;
      }(),
      CompileElement = function(_super) {
        function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references) {
          var _this = this;
          _super.call(this, parent, view, nodeIndex, renderNode, sourceAst), this.component = component, this._directives = _directives, this._resolvedProvidersArray = _resolvedProvidersArray, this.hasViewContainer = hasViewContainer, this.hasEmbeddedView = hasEmbeddedView, this._compViewExpr = null, this._instances = new CompileTokenMap, this._queryCount = 0, this._queries = new CompileTokenMap, this._componentConstructorViewQueryLists = [], this.contentNodesByNgContentIndex = null, this.referenceTokens = {}, references.forEach(function(ref) {
            return _this.referenceTokens[ref.name] = ref.value;
          }), this.elementRef = importExpr(Identifiers.ElementRef).instantiate([this.renderNode]), this._instances.add(identifierToken(Identifiers.ElementRef), this.elementRef), this.injector = THIS_EXPR.callMethod("injector", [literal(this.nodeIndex)]), this._instances.add(identifierToken(Identifiers.Injector), this.injector), this._instances.add(identifierToken(Identifiers.Renderer), THIS_EXPR.prop("renderer")), (this.hasViewContainer || this.hasEmbeddedView || isPresent(this.component)) && this._createAppElement();
        }
        return __extends(CompileElement, _super), CompileElement.createNull = function() {
          return new CompileElement(null, null, null, null, null, null, [], [], (!1), (!1), []);
        }, CompileElement.prototype._createAppElement = function() {
          var fieldName = "_appEl_" + this.nodeIndex,
              parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
          this.view.fields.push(new ClassField(fieldName, importType(Identifiers.AppElement), [StmtModifier.Private]));
          var statement = THIS_EXPR.prop(fieldName).set(importExpr(Identifiers.AppElement).instantiate([literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode])).toStmt();
          this.view.createMethod.addStmt(statement), this.appElement = THIS_EXPR.prop(fieldName), this._instances.add(identifierToken(Identifiers.AppElement), this.appElement);
        }, CompileElement.prototype.createComponentFactoryResolver = function(precompileComponent) {
          if (precompileComponent && 0 !== precompileComponent.length) {
            var createComponentFactoryResolverExpr = importExpr(Identifiers.CodegenComponentFactoryResolver).instantiate([literalArr(precompileComponent.map(function(precompiledComponent) {
              return importExpr(precompiledComponent);
            })), injectFromViewParentInjector(identifierToken(Identifiers.ComponentFactoryResolver), !1)]),
                provider = new CompileProviderMetadata({
                  token: identifierToken(Identifiers.ComponentFactoryResolver),
                  useValue: createComponentFactoryResolverExpr
                });
            this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, (!1), (!0), [provider], exports.ProviderAstType.PrivateService, this.sourceAst.sourceSpan));
          }
        }, CompileElement.prototype.setComponentView = function(compViewExpr) {
          this._compViewExpr = compViewExpr, this.contentNodesByNgContentIndex = ListWrapper.createFixedSize(this.component.template.ngContentSelectors.length);
          for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++)
            this.contentNodesByNgContentIndex[i] = [];
        }, CompileElement.prototype.setEmbeddedView = function(embeddedView) {
          if (this.embeddedView = embeddedView, isPresent(embeddedView)) {
            var createTemplateRefExpr = importExpr(Identifiers.TemplateRef_).instantiate([this.appElement, this.embeddedView.viewFactory]),
                provider = new CompileProviderMetadata({
                  token: identifierToken(Identifiers.TemplateRef),
                  useValue: createTemplateRefExpr
                });
            this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, (!1), (!0), [provider], exports.ProviderAstType.Builtin, this.sourceAst.sourceSpan));
          }
        }, CompileElement.prototype.beforeChildren = function() {
          var _this = this;
          this.hasViewContainer && this._instances.add(identifierToken(Identifiers.ViewContainerRef), this.appElement.prop("vcRef")), this._resolvedProviders = new CompileTokenMap, this._resolvedProvidersArray.forEach(function(provider) {
            return _this._resolvedProviders.add(provider.token, provider);
          }), this._resolvedProviders.values().forEach(function(resolvedProvider) {
            var providerValueExpressions = resolvedProvider.providers.map(function(provider) {
              if (isPresent(provider.useExisting))
                return _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({token: provider.useExisting}));
              if (isPresent(provider.useFactory)) {
                var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps,
                    depsExpr = deps.map(function(dep) {
                      return _this._getDependency(resolvedProvider.providerType, dep);
                    });
                return importExpr(provider.useFactory).callFn(depsExpr);
              }
              if (isPresent(provider.useClass)) {
                var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps,
                    depsExpr = deps.map(function(dep) {
                      return _this._getDependency(resolvedProvider.providerType, dep);
                    });
                return importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
              }
              return _convertValueToOutputAst(provider.useValue);
            }),
                propName = "_" + resolvedProvider.token.name + "_" + _this.nodeIndex + "_" + _this._instances.size,
                instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
            _this._instances.add(resolvedProvider.token, instance);
          }), this.directiveInstances = this._directives.map(function(directive) {
            return _this._instances.get(identifierToken(directive.type));
          });
          for (var i = 0; i < this.directiveInstances.length; i++) {
            var directiveInstance = this.directiveInstances[i],
                directive = this._directives[i];
            directive.queries.forEach(function(queryMeta) {
              _this._addQuery(queryMeta, directiveInstance);
            });
          }
          var queriesWithReads = [];
          if (this._resolvedProviders.values().forEach(function(resolvedProvider) {
            var queriesForProvider = _this._getQueriesFor(resolvedProvider.token);
            ListWrapper.addAll(queriesWithReads, queriesForProvider.map(function(query) {
              return new _QueryWithRead(query, resolvedProvider.token);
            }));
          }), StringMapWrapper.forEach(this.referenceTokens, function(_, varName) {
            var varValue,
                token = _this.referenceTokens[varName];
            varValue = isPresent(token) ? _this._instances.get(token) : _this.renderNode, _this.view.locals.set(varName, varValue);
            var varToken = new CompileTokenMetadata({value: varName});
            ListWrapper.addAll(queriesWithReads, _this._getQueriesFor(varToken).map(function(query) {
              return new _QueryWithRead(query, varToken);
            }));
          }), queriesWithReads.forEach(function(queryWithRead) {
            var value;
            if (isPresent(queryWithRead.read.identifier))
              value = _this._instances.get(queryWithRead.read);
            else {
              var token = _this.referenceTokens[queryWithRead.read.value];
              value = isPresent(token) ? _this._instances.get(token) : _this.elementRef;
            }
            isPresent(value) && queryWithRead.query.addValue(value, _this.view);
          }), isPresent(this.component)) {
            var componentConstructorViewQueryList = isPresent(this.component) ? literalArr(this._componentConstructorViewQueryLists) : NULL_EXPR,
                compExpr = isPresent(this.getComponent()) ? this.getComponent() : NULL_EXPR;
            this.view.createMethod.addStmt(this.appElement.callMethod("initComponent", [compExpr, componentConstructorViewQueryList, this._compViewExpr]).toStmt());
          }
        }, CompileElement.prototype.afterChildren = function(childNodeCount) {
          var _this = this;
          this._resolvedProviders.values().forEach(function(resolvedProvider) {
            var providerExpr = _this._instances.get(resolvedProvider.token),
                providerChildNodeCount = resolvedProvider.providerType === exports.ProviderAstType.PrivateService ? 0 : childNodeCount;
            _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
          }), this._queries.values().forEach(function(queries) {
            return queries.forEach(function(query) {
              return query.afterChildren(_this.view.createMethod, _this.view.updateContentQueriesMethod);
            });
          });
        }, CompileElement.prototype.addContentNode = function(ngContentIndex, nodeExpr) {
          this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
        }, CompileElement.prototype.getComponent = function() {
          return isPresent(this.component) ? this._instances.get(identifierToken(this.component.type)) : null;
        }, CompileElement.prototype.getProviderTokens = function() {
          return this._resolvedProviders.values().map(function(resolvedProvider) {
            return createDiTokenExpression(resolvedProvider.token);
          });
        }, CompileElement.prototype._getQueriesFor = function(token) {
          for (var queries,
              result = [],
              currentEl = this,
              distance = 0; !currentEl.isNull(); )
            queries = currentEl._queries.get(token), isPresent(queries) && ListWrapper.addAll(result, queries.filter(function(query) {
              return query.meta.descendants || distance <= 1;
            })), currentEl._directives.length > 0 && distance++, currentEl = currentEl.parent;
          return queries = this.view.componentView.viewQueries.get(token), isPresent(queries) && ListWrapper.addAll(result, queries), result;
        }, CompileElement.prototype._addQuery = function(queryMeta, directiveInstance) {
          var propName = "_query_" + queryMeta.selectors[0].name + "_" + this.nodeIndex + "_" + this._queryCount++,
              queryList = createQueryList(queryMeta, directiveInstance, propName, this.view),
              query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);
          return addQueryToTokenMap(this._queries, query), query;
        }, CompileElement.prototype._getLocalDependency = function(requestingProviderType, dep) {
          var result = null;
          if (isBlank(result) && isPresent(dep.query) && (result = this._addQuery(dep.query, null).queryList), isBlank(result) && isPresent(dep.viewQuery) && (result = createQueryList(dep.viewQuery, null, "_viewQuery_" + dep.viewQuery.selectors[0].name + "_" + this.nodeIndex + "_" + this._componentConstructorViewQueryLists.length, this.view), this._componentConstructorViewQueryLists.push(result)), isPresent(dep.token)) {
            if (isBlank(result) && dep.token.equalsTo(identifierToken(Identifiers.ChangeDetectorRef)))
              return requestingProviderType === exports.ProviderAstType.Component ? this._compViewExpr.prop("ref") : getPropertyInView(THIS_EXPR.prop("ref"), this.view, this.view.componentView);
            if (isBlank(result)) {
              var resolvedProvider = this._resolvedProviders.get(dep.token);
              if (resolvedProvider && (requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.PrivateService)
                return null;
              result = this._instances.get(dep.token);
            }
          }
          return result;
        }, CompileElement.prototype._getDependency = function(requestingProviderType, dep) {
          var currElement = this,
              result = null;
          for (dep.isValue && (result = literal(dep.value)), isBlank(result) && !dep.isSkipSelf && (result = this._getLocalDependency(requestingProviderType, dep)); isBlank(result) && !currElement.parent.isNull(); )
            currElement = currElement.parent, result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, new CompileDiDependencyMetadata({token: dep.token}));
          return isBlank(result) && (result = injectFromViewParentInjector(dep.token, dep.isOptional)), isBlank(result) && (result = NULL_EXPR), getPropertyInView(result, this.view, currElement.view);
        }, CompileElement;
      }(CompileNode),
      _QueryWithRead = function() {
        function _QueryWithRead(query, match) {
          this.query = query, this.read = isPresent(query.meta.read) ? query.meta.read : match;
        }
        return _QueryWithRead;
      }(),
      _ValueOutputAstTransformer = function(_super) {
        function _ValueOutputAstTransformer() {
          _super.apply(this, arguments);
        }
        return __extends(_ValueOutputAstTransformer, _super), _ValueOutputAstTransformer.prototype.visitArray = function(arr, context) {
          var _this = this;
          return literalArr(arr.map(function(value) {
            return visitValue(value, _this, context);
          }));
        }, _ValueOutputAstTransformer.prototype.visitStringMap = function(map, context) {
          var _this = this,
              entries = [];
          return StringMapWrapper.forEach(map, function(value, key) {
            entries.push([key, visitValue(value, _this, context)]);
          }), literalMap(entries);
        }, _ValueOutputAstTransformer.prototype.visitPrimitive = function(value, context) {
          return literal(value);
        }, _ValueOutputAstTransformer.prototype.visitOther = function(value, context) {
          if (value instanceof CompileIdentifierMetadata)
            return importExpr(value);
          if (value instanceof Expression)
            return value;
          throw new _angular_core.BaseException("Illegal state: Don't now how to compile value " + value);
        }, _ValueOutputAstTransformer;
      }(ValueTransformer),
      _PurePipeProxy = function() {
        function _PurePipeProxy(view, instance, argCount) {
          this.view = view, this.instance = instance, this.argCount = argCount;
        }
        return _PurePipeProxy;
      }(),
      CompilePipe = function() {
        function CompilePipe(view, meta) {
          this.view = view, this.meta = meta, this._purePipeProxies = [], this.instance = THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
        }
        return CompilePipe.call = function(view, name, args) {
          var pipe,
              compView = view.componentView,
              meta = _findPipeMeta(compView, name);
          return meta.pure ? (pipe = compView.purePipes.get(name), isBlank(pipe) && (pipe = new CompilePipe(compView, meta), compView.purePipes.set(name, pipe), compView.pipes.push(pipe))) : (pipe = new CompilePipe(view, meta), view.pipes.push(pipe)), pipe._call(view, args);
        }, Object.defineProperty(CompilePipe.prototype, "pure", {
          get: function() {
            return this.meta.pure;
          },
          enumerable: !0,
          configurable: !0
        }), CompilePipe.prototype.create = function() {
          var _this = this,
              deps = this.meta.type.diDeps.map(function(diDep) {
                return diDep.token.equalsTo(identifierToken(Identifiers.ChangeDetectorRef)) ? getPropertyInView(THIS_EXPR.prop("ref"), _this.view, _this.view.componentView) : injectFromViewParentInjector(diDep.token, !1);
              });
          this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type))), this.view.createMethod.resetDebugInfo(null, null), this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name).set(importExpr(this.meta.type).instantiate(deps)).toStmt()), this._purePipeProxies.forEach(function(purePipeProxy) {
            var pipeInstanceSeenFromPureProxy = getPropertyInView(_this.instance, purePipeProxy.view, _this.view);
            createPureProxy(pipeInstanceSeenFromPureProxy.prop("transform").callMethod(BuiltinMethod.bind, [pipeInstanceSeenFromPureProxy]), purePipeProxy.argCount, purePipeProxy.instance, purePipeProxy.view);
          });
        }, CompilePipe.prototype._call = function(callingView, args) {
          if (this.meta.pure) {
            var purePipeProxy = new _PurePipeProxy(callingView, THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxies.length), args.length);
            return this._purePipeProxies.push(purePipeProxy), importExpr(Identifiers.castByValue).callFn([purePipeProxy.instance, getPropertyInView(this.instance.prop("transform"), callingView, this.view)]).callFn(args);
          }
          return getPropertyInView(this.instance, callingView, this.view).callMethod("transform", args);
        }, CompilePipe;
      }(),
      CompileView = function() {
        function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings) {
          var _this = this;
          this.component = component, this.genConfig = genConfig, this.pipeMetas = pipeMetas, this.styles = styles, this.viewIndex = viewIndex, this.declarationElement = declarationElement, this.templateVariableBindings = templateVariableBindings, this.nodes = [], this.rootNodesOrAppElements = [], this.bindings = [], this.classStatements = [], this.eventHandlerMethods = [], this.fields = [], this.getters = [], this.disposables = [], this.subscriptions = [], this.purePipes = new Map, this.pipes = [], this.locals = new Map, this.literalArrayCount = 0, this.literalMapCount = 0, this.pipeCount = 0, this.animations = new Map, animations.forEach(function(entry) {
            return _this.animations.set(entry.name, entry);
          }), this.createMethod = new CompileMethod(this), this.injectorGetMethod = new CompileMethod(this), this.updateContentQueriesMethod = new CompileMethod(this), this.dirtyParentQueriesMethod = new CompileMethod(this), this.updateViewQueriesMethod = new CompileMethod(this), this.detectChangesInInputsMethod = new CompileMethod(this), this.detectChangesRenderPropertiesMethod = new CompileMethod(this), this.afterContentLifecycleCallbacksMethod = new CompileMethod(this), this.afterViewLifecycleCallbacksMethod = new CompileMethod(this), this.destroyMethod = new CompileMethod(this), this.detachMethod = new CompileMethod(this), this.viewType = getViewType(component, viewIndex), this.className = "_View_" + component.type.name + viewIndex, this.classType = importType(new CompileIdentifierMetadata({name: this.className})), this.viewFactory = variable(getViewFactoryName(component, viewIndex)), this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST ? this.componentView = this : this.componentView = this.declarationElement.view.componentView, this.componentContext = getPropertyInView(THIS_EXPR.prop("context"), this, this.componentView);
          var viewQueries = new CompileTokenMap;
          if (this.viewType === ViewType.COMPONENT) {
            var directiveInstance = THIS_EXPR.prop("context");
            ListWrapper.forEachWithIndex(this.component.viewQueries, function(queryMeta, queryIndex) {
              var propName = "_viewQuery_" + queryMeta.selectors[0].name + "_" + queryIndex,
                  queryList = createQueryList(queryMeta, directiveInstance, propName, _this),
                  query = new CompileQuery(queryMeta, queryList, directiveInstance, _this);
              addQueryToTokenMap(viewQueries, query);
            });
            var constructorViewQueryCount = 0;
            this.component.type.diDeps.forEach(function(dep) {
              if (isPresent(dep.viewQuery)) {
                var queryList = THIS_EXPR.prop("declarationAppElement").prop("componentConstructorViewQueries").key(literal(constructorViewQueryCount++)),
                    query = new CompileQuery(dep.viewQuery, queryList, null, _this);
                addQueryToTokenMap(viewQueries, query);
              }
            });
          }
          this.viewQueries = viewQueries, templateVariableBindings.forEach(function(entry) {
            _this.locals.set(entry[1], THIS_EXPR.prop("context").prop(entry[0]));
          }), this.declarationElement.isNull() || this.declarationElement.setEmbeddedView(this);
        }
        return CompileView.prototype.callPipe = function(name, input, args) {
          return CompilePipe.call(this, name, [input].concat(args));
        }, CompileView.prototype.getLocal = function(name) {
          if (name == EventHandlerVars.event.name)
            return EventHandlerVars.event;
          for (var currView = this,
              result = currView.locals.get(name); isBlank(result) && isPresent(currView.declarationElement.view); )
            currView = currView.declarationElement.view, result = currView.locals.get(name);
          return isPresent(result) ? getPropertyInView(result, this, currView) : null;
        }, CompileView.prototype.createLiteralArray = function(values) {
          if (0 === values.length)
            return importExpr(Identifiers.EMPTY_ARRAY);
          for (var proxyExpr = THIS_EXPR.prop("_arr_" + this.literalArrayCount++),
              proxyParams = [],
              proxyReturnEntries = [],
              i = 0; i < values.length; i++) {
            var paramName = "p" + i;
            proxyParams.push(new FnParam(paramName)), proxyReturnEntries.push(variable(paramName));
          }
          return createPureProxy(fn(proxyParams, [new ReturnStatement(literalArr(proxyReturnEntries))], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, this), proxyExpr.callFn(values);
        }, CompileView.prototype.createLiteralMap = function(entries) {
          if (0 === entries.length)
            return importExpr(Identifiers.EMPTY_MAP);
          for (var proxyExpr = THIS_EXPR.prop("_map_" + this.literalMapCount++),
              proxyParams = [],
              proxyReturnEntries = [],
              values = [],
              i = 0; i < entries.length; i++) {
            var paramName = "p" + i;
            proxyParams.push(new FnParam(paramName)), proxyReturnEntries.push([entries[i][0], variable(paramName)]), values.push(entries[i][1]);
          }
          return createPureProxy(fn(proxyParams, [new ReturnStatement(literalMap(proxyReturnEntries))], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, this), proxyExpr.callFn(values);
        }, CompileView.prototype.afterNodes = function() {
          var _this = this;
          this.pipes.forEach(function(pipe) {
            return pipe.create();
          }), this.viewQueries.values().forEach(function(queries) {
            return queries.forEach(function(query) {
              return query.afterChildren(_this.createMethod, _this.updateViewQueriesMethod);
            });
          });
        }, CompileView;
      }(),
      IMPLICIT_RECEIVER = variable("#implicit"),
      ExpressionWithWrappedValueInfo = function() {
        function ExpressionWithWrappedValueInfo(expression, needsValueUnwrapper) {
          this.expression = expression, this.needsValueUnwrapper = needsValueUnwrapper;
        }
        return ExpressionWithWrappedValueInfo;
      }();
  !function(_Mode) {
    _Mode[_Mode.Statement = 0] = "Statement", _Mode[_Mode.Expression = 1] = "Expression";
  }(_Mode || (_Mode = {}));
  var _AstToIrVisitor = function() {
    function _AstToIrVisitor(_nameResolver, _implicitReceiver, _valueUnwrapper) {
      this._nameResolver = _nameResolver, this._implicitReceiver = _implicitReceiver, this._valueUnwrapper = _valueUnwrapper, this.needsValueUnwrapper = !1;
    }
    return _AstToIrVisitor.prototype.visitBinary = function(ast, mode) {
      var op;
      switch (ast.operation) {
        case "+":
          op = BinaryOperator.Plus;
          break;
        case "-":
          op = BinaryOperator.Minus;
          break;
        case "*":
          op = BinaryOperator.Multiply;
          break;
        case "/":
          op = BinaryOperator.Divide;
          break;
        case "%":
          op = BinaryOperator.Modulo;
          break;
        case "&&":
          op = BinaryOperator.And;
          break;
        case "||":
          op = BinaryOperator.Or;
          break;
        case "==":
          op = BinaryOperator.Equals;
          break;
        case "!=":
          op = BinaryOperator.NotEquals;
          break;
        case "===":
          op = BinaryOperator.Identical;
          break;
        case "!==":
          op = BinaryOperator.NotIdentical;
          break;
        case "<":
          op = BinaryOperator.Lower;
          break;
        case ">":
          op = BinaryOperator.Bigger;
          break;
        case "<=":
          op = BinaryOperator.LowerEquals;
          break;
        case ">=":
          op = BinaryOperator.BiggerEquals;
          break;
        default:
          throw new BaseException$1("Unsupported operation " + ast.operation);
      }
      return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, ast.left.visit(this, _Mode.Expression), ast.right.visit(this, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitChain = function(ast, mode) {
      return ensureStatementMode(mode, ast), this.visitAll(ast.expressions, mode);
    }, _AstToIrVisitor.prototype.visitConditional = function(ast, mode) {
      var value = ast.condition.visit(this, _Mode.Expression);
      return convertToStatementIfNeeded(mode, value.conditional(ast.trueExp.visit(this, _Mode.Expression), ast.falseExp.visit(this, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitPipe = function(ast, mode) {
      var input = ast.exp.visit(this, _Mode.Expression),
          args = this.visitAll(ast.args, _Mode.Expression),
          value = this._nameResolver.callPipe(ast.name, input, args);
      return this.needsValueUnwrapper = !0, convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod("unwrap", [value]));
    }, _AstToIrVisitor.prototype.visitFunctionCall = function(ast, mode) {
      return convertToStatementIfNeeded(mode, ast.target.visit(this, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitImplicitReceiver = function(ast, mode) {
      return ensureExpressionMode(mode, ast), IMPLICIT_RECEIVER;
    }, _AstToIrVisitor.prototype.visitInterpolation = function(ast, mode) {
      ensureExpressionMode(mode, ast);
      for (var args = [literal(ast.expressions.length)],
          i = 0; i < ast.strings.length - 1; i++)
        args.push(literal(ast.strings[i])), args.push(ast.expressions[i].visit(this, _Mode.Expression));
      return args.push(literal(ast.strings[ast.strings.length - 1])), importExpr(Identifiers.interpolate).callFn(args);
    }, _AstToIrVisitor.prototype.visitKeyedRead = function(ast, mode) {
      return convertToStatementIfNeeded(mode, ast.obj.visit(this, _Mode.Expression).key(ast.key.visit(this, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitKeyedWrite = function(ast, mode) {
      var obj = ast.obj.visit(this, _Mode.Expression),
          key = ast.key.visit(this, _Mode.Expression),
          value = ast.value.visit(this, _Mode.Expression);
      return convertToStatementIfNeeded(mode, obj.key(key).set(value));
    }, _AstToIrVisitor.prototype.visitLiteralArray = function(ast, mode) {
      return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralArray(this.visitAll(ast.expressions, mode)));
    }, _AstToIrVisitor.prototype.visitLiteralMap = function(ast, mode) {
      for (var parts = [],
          i = 0; i < ast.keys.length; i++)
        parts.push([ast.keys[i], ast.values[i].visit(this, _Mode.Expression)]);
      return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralMap(parts));
    }, _AstToIrVisitor.prototype.visitLiteralPrimitive = function(ast, mode) {
      return convertToStatementIfNeeded(mode, literal(ast.value));
    }, _AstToIrVisitor.prototype.visitMethodCall = function(ast, mode) {
      var args = this.visitAll(ast.args, _Mode.Expression),
          result = null,
          receiver = ast.receiver.visit(this, _Mode.Expression);
      if (receiver === IMPLICIT_RECEIVER) {
        var varExpr = this._nameResolver.getLocal(ast.name);
        isPresent(varExpr) ? result = varExpr.callFn(args) : receiver = this._implicitReceiver;
      }
      return isBlank(result) && (result = receiver.callMethod(ast.name, args)), convertToStatementIfNeeded(mode, result);
    }, _AstToIrVisitor.prototype.visitPrefixNot = function(ast, mode) {
      return convertToStatementIfNeeded(mode, not(ast.expression.visit(this, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitPropertyRead = function(ast, mode) {
      var result = null,
          receiver = ast.receiver.visit(this, _Mode.Expression);
      return receiver === IMPLICIT_RECEIVER && (result = this._nameResolver.getLocal(ast.name), isBlank(result) && (receiver = this._implicitReceiver)), isBlank(result) && (result = receiver.prop(ast.name)), convertToStatementIfNeeded(mode, result);
    }, _AstToIrVisitor.prototype.visitPropertyWrite = function(ast, mode) {
      var receiver = ast.receiver.visit(this, _Mode.Expression);
      if (receiver === IMPLICIT_RECEIVER) {
        var varExpr = this._nameResolver.getLocal(ast.name);
        if (isPresent(varExpr))
          throw new BaseException$1("Cannot assign to a reference or variable!");
        receiver = this._implicitReceiver;
      }
      return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(ast.value.visit(this, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitSafePropertyRead = function(ast, mode) {
      var receiver = ast.receiver.visit(this, _Mode.Expression);
      return convertToStatementIfNeeded(mode, receiver.isBlank().conditional(NULL_EXPR, receiver.prop(ast.name)));
    }, _AstToIrVisitor.prototype.visitSafeMethodCall = function(ast, mode) {
      var receiver = ast.receiver.visit(this, _Mode.Expression),
          args = this.visitAll(ast.args, _Mode.Expression);
      return convertToStatementIfNeeded(mode, receiver.isBlank().conditional(NULL_EXPR, receiver.callMethod(ast.name, args)));
    }, _AstToIrVisitor.prototype.visitAll = function(asts, mode) {
      var _this = this;
      return asts.map(function(ast) {
        return ast.visit(_this, mode);
      });
    }, _AstToIrVisitor.prototype.visitQuote = function(ast, mode) {
      throw new BaseException$1("Quotes are not supported for evaluation!");
    }, _AstToIrVisitor;
  }(),
      CompileBinding = function() {
        function CompileBinding(node, sourceAst) {
          this.node = node, this.sourceAst = sourceAst;
        }
        return CompileBinding;
      }(),
      CompileEventListener = function() {
        function CompileEventListener(compileElement, eventTarget, eventName, listenerIndex) {
          this.compileElement = compileElement, this.eventTarget = eventTarget, this.eventName = eventName, this._hasComponentHostListener = !1, this._actionResultExprs = [], this._method = new CompileMethod(compileElement.view), this._methodName = "_handle_" + santitizeEventName(eventName) + "_" + compileElement.nodeIndex + "_" + listenerIndex, this._eventParam = new FnParam(EventHandlerVars.event.name, importType(this.compileElement.view.genConfig.renderTypes.renderEvent));
        }
        return CompileEventListener.getOrCreate = function(compileElement, eventTarget, eventName, targetEventListeners) {
          var listener = targetEventListeners.find(function(listener) {
            return listener.eventTarget == eventTarget && listener.eventName == eventName;
          });
          return isBlank(listener) && (listener = new CompileEventListener(compileElement, eventTarget, eventName, targetEventListeners.length), targetEventListeners.push(listener)), listener;
        }, CompileEventListener.prototype.addAction = function(hostEvent, directive, directiveInstance) {
          isPresent(directive) && directive.isComponent && (this._hasComponentHostListener = !0), this._method.resetDebugInfo(this.compileElement.nodeIndex, hostEvent);
          var context = isPresent(directiveInstance) ? directiveInstance : this.compileElement.view.componentContext,
              actionStmts = convertCdStatementToIr(this.compileElement.view, context, hostEvent.handler),
              lastIndex = actionStmts.length - 1;
          if (lastIndex >= 0) {
            var lastStatement = actionStmts[lastIndex],
                returnExpr = convertStmtIntoExpression(lastStatement),
                preventDefaultVar = variable("pd_" + this._actionResultExprs.length);
            this._actionResultExprs.push(preventDefaultVar), isPresent(returnExpr) && (actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(!1))).toDeclStmt(null, [StmtModifier.Final]));
          }
          this._method.addStmts(actionStmts);
        }, CompileEventListener.prototype.finishMethod = function() {
          var markPathToRootStart = this._hasComponentHostListener ? this.compileElement.appElement.prop("componentView") : THIS_EXPR,
              resultExpr = literal(!0);
          this._actionResultExprs.forEach(function(expr) {
            resultExpr = resultExpr.and(expr);
          });
          var stmts = [markPathToRootStart.callMethod("markPathToRootAsCheckOnce", []).toStmt()].concat(this._method.finish()).concat([new ReturnStatement(resultExpr)]);
          this.compileElement.view.eventHandlerMethods.push(new ClassMethod(this._methodName, [this._eventParam], stmts, BOOL_TYPE, [StmtModifier.Private]));
        }, CompileEventListener.prototype.listenToRenderer = function() {
          var listenExpr,
              eventListener = THIS_EXPR.callMethod("eventHandler", [THIS_EXPR.prop(this._methodName).callMethod(BuiltinMethod.bind, [THIS_EXPR])]);
          listenExpr = isPresent(this.eventTarget) ? ViewProperties.renderer.callMethod("listenGlobal", [literal(this.eventTarget), literal(this.eventName), eventListener]) : ViewProperties.renderer.callMethod("listen", [this.compileElement.renderNode, literal(this.eventName), eventListener]);
          var disposable = variable("disposable_" + this.compileElement.view.disposables.length);
          this.compileElement.view.disposables.push(disposable), this.compileElement.view.createMethod.addStmt(disposable.set(listenExpr).toDeclStmt(FUNCTION_TYPE, [StmtModifier.Private]));
        }, CompileEventListener.prototype.listenToDirective = function(directiveInstance, observablePropName) {
          var subscription = variable("subscription_" + this.compileElement.view.subscriptions.length);
          this.compileElement.view.subscriptions.push(subscription);
          var eventListener = THIS_EXPR.callMethod("eventHandler", [THIS_EXPR.prop(this._methodName).callMethod(BuiltinMethod.bind, [THIS_EXPR])]);
          this.compileElement.view.createMethod.addStmt(subscription.set(directiveInstance.prop(observablePropName).callMethod(BuiltinMethod.SubscribeObservable, [eventListener])).toDeclStmt(null, [StmtModifier.Final]));
        }, CompileEventListener;
      }(),
      STATE_IS_NEVER_CHECKED = THIS_EXPR.prop("numberOfChecks").identical(new LiteralExpr(0)),
      NOT_THROW_ON_CHANGES = not(DetectChangesVars.throwOnChange),
      ViewBinderVisitor = function() {
        function ViewBinderVisitor(view) {
          this.view = view, this._nodeIndex = 0;
        }
        return ViewBinderVisitor.prototype.visitBoundText = function(ast, parent) {
          var node = this.view.nodes[this._nodeIndex++];
          return bindRenderText(ast, node, this.view), null;
        }, ViewBinderVisitor.prototype.visitText = function(ast, parent) {
          return this._nodeIndex++, null;
        }, ViewBinderVisitor.prototype.visitNgContent = function(ast, parent) {
          return null;
        }, ViewBinderVisitor.prototype.visitElement = function(ast, parent) {
          var compileElement = this.view.nodes[this._nodeIndex++],
              eventListeners = collectEventListeners(ast.outputs, ast.directives, compileElement);
          return bindRenderInputs(ast.inputs, compileElement), bindRenderOutputs(eventListeners), ListWrapper.forEachWithIndex(ast.directives, function(directiveAst, index) {
            var directiveInstance = compileElement.directiveInstances[index];
            bindDirectiveInputs(directiveAst, directiveInstance, compileElement), bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement), bindDirectiveHostProps(directiveAst, directiveInstance, compileElement), bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);
          }), templateVisitAll(this, ast.children, compileElement), ListWrapper.forEachWithIndex(ast.directives, function(directiveAst, index) {
            var directiveInstance = compileElement.directiveInstances[index];
            bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement), bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement), bindDirectiveDestroyLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
          }), null;
        }, ViewBinderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
          var compileElement = this.view.nodes[this._nodeIndex++],
              eventListeners = collectEventListeners(ast.outputs, ast.directives, compileElement);
          return ListWrapper.forEachWithIndex(ast.directives, function(directiveAst, index) {
            var directiveInstance = compileElement.directiveInstances[index];
            bindDirectiveInputs(directiveAst, directiveInstance, compileElement), bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement), bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners), bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement), bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement), bindDirectiveDestroyLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
          }), bindView(compileElement.embeddedView, ast.children), null;
        }, ViewBinderVisitor.prototype.visitAttr = function(ast, ctx) {
          return null;
        }, ViewBinderVisitor.prototype.visitDirective = function(ast, ctx) {
          return null;
        }, ViewBinderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
          return null;
        }, ViewBinderVisitor.prototype.visitReference = function(ast, ctx) {
          return null;
        }, ViewBinderVisitor.prototype.visitVariable = function(ast, ctx) {
          return null;
        }, ViewBinderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
          return null;
        }, ViewBinderVisitor.prototype.visitElementProperty = function(ast, context) {
          return null;
        }, ViewBinderVisitor;
      }(),
      IMPLICIT_TEMPLATE_VAR = "$implicit",
      CLASS_ATTR$1 = "class",
      STYLE_ATTR = "style",
      NG_CONTAINER_TAG = "ng-container",
      parentRenderNodeVar = variable("parentRenderNode"),
      rootSelectorVar = variable("rootSelector"),
      ViewFactoryDependency = function() {
        function ViewFactoryDependency(comp, placeholder) {
          this.comp = comp, this.placeholder = placeholder;
        }
        return ViewFactoryDependency;
      }(),
      ComponentFactoryDependency = function() {
        function ComponentFactoryDependency(comp, placeholder) {
          this.comp = comp, this.placeholder = placeholder;
        }
        return ComponentFactoryDependency;
      }(),
      ViewBuilderVisitor = function() {
        function ViewBuilderVisitor(view, targetDependencies) {
          this.view = view, this.targetDependencies = targetDependencies, this.nestedViewCount = 0, this._animationCompiler = new AnimationCompiler;
        }
        return ViewBuilderVisitor.prototype._isRootNode = function(parent) {
          return parent.view !== this.view;
        }, ViewBuilderVisitor.prototype._addRootNodeAndProject = function(node) {
          var projectedNode = _getOuterContainerOrSelf(node),
              parent = projectedNode.parent,
              ngContentIndex = projectedNode.sourceAst.ngContentIndex,
              vcAppEl = node instanceof CompileElement && node.hasViewContainer ? node.appElement : null;
          this._isRootNode(parent) ? this.view.viewType !== ViewType.COMPONENT && this.view.rootNodesOrAppElements.push(isPresent(vcAppEl) ? vcAppEl : node.renderNode) : isPresent(parent.component) && isPresent(ngContentIndex) && parent.addContentNode(ngContentIndex, isPresent(vcAppEl) ? vcAppEl : node.renderNode);
        }, ViewBuilderVisitor.prototype._getParentRenderNode = function(parent) {
          return parent = _getOuterContainerParentOrSelf(parent), this._isRootNode(parent) ? this.view.viewType === ViewType.COMPONENT ? parentRenderNodeVar : NULL_EXPR : isPresent(parent.component) && parent.component.template.encapsulation !== _angular_core.ViewEncapsulation.Native ? NULL_EXPR : parent.renderNode;
        }, ViewBuilderVisitor.prototype.visitBoundText = function(ast, parent) {
          return this._visitText(ast, "", parent);
        }, ViewBuilderVisitor.prototype.visitText = function(ast, parent) {
          return this._visitText(ast, ast.value, parent);
        }, ViewBuilderVisitor.prototype._visitText = function(ast, value, parent) {
          var fieldName = "_text_" + this.view.nodes.length;
          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText)));
          var renderNode = THIS_EXPR.prop(fieldName),
              compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast),
              createRenderNode = THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod("createText", [this._getParentRenderNode(parent), literal(value), this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)])).toStmt();
          return this.view.nodes.push(compileNode), this.view.createMethod.addStmt(createRenderNode), this._addRootNodeAndProject(compileNode), renderNode;
        }, ViewBuilderVisitor.prototype.visitNgContent = function(ast, parent) {
          this.view.createMethod.resetDebugInfo(null, ast);
          var parentRenderNode = this._getParentRenderNode(parent),
              nodesExpression = ViewProperties.projectableNodes.key(literal(ast.index), new ArrayType(importType(this.view.genConfig.renderTypes.renderNode)));
          return parentRenderNode !== NULL_EXPR ? this.view.createMethod.addStmt(ViewProperties.renderer.callMethod("projectNodes", [parentRenderNode, importExpr(Identifiers.flattenNestedViewRenderNodes).callFn([nodesExpression])]).toStmt()) : this._isRootNode(parent) ? this.view.viewType !== ViewType.COMPONENT && this.view.rootNodesOrAppElements.push(nodesExpression) : isPresent(parent.component) && isPresent(ast.ngContentIndex) && parent.addContentNode(ast.ngContentIndex, nodesExpression), null;
        }, ViewBuilderVisitor.prototype.visitElement = function(ast, parent) {
          var createRenderNodeExpr,
              _this = this,
              nodeIndex = this.view.nodes.length,
              debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
          createRenderNodeExpr = 0 === nodeIndex && this.view.viewType === ViewType.HOST ? THIS_EXPR.callMethod("selectOrCreateHostElement", [literal(ast.name), rootSelectorVar, debugContextExpr]) : ast.name === NG_CONTAINER_TAG ? ViewProperties.renderer.callMethod("createTemplateAnchor", [this._getParentRenderNode(parent), debugContextExpr]) : ViewProperties.renderer.callMethod("createElement", [this._getParentRenderNode(parent), literal(ast.name), debugContextExpr]);
          var fieldName = "_el_" + nodeIndex;
          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement))), this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
          for (var renderNode = THIS_EXPR.prop(fieldName),
              directives = ast.directives.map(function(directiveAst) {
                return directiveAst.directive;
              }),
              component = directives.find(function(directive) {
                return directive.isComponent;
              }),
              htmlAttrs = _readHtmlAttrs(ast.attrs),
              attrNameAndValues = _mergeHtmlAndDirectiveAttrs(htmlAttrs, directives),
              i = 0; i < attrNameAndValues.length; i++) {
            var attrName = attrNameAndValues[i][0],
                attrValue = attrNameAndValues[i][1];
            this.view.createMethod.addStmt(ViewProperties.renderer.callMethod("setElementAttribute", [renderNode, literal(attrName), literal(attrValue)]).toStmt());
          }
          var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, (!1), ast.references);
          this.view.nodes.push(compileElement);
          var compViewExpr = null;
          if (isPresent(component)) {
            var nestedComponentIdentifier = new CompileIdentifierMetadata({name: getViewFactoryName(component, 0)});
            this.targetDependencies.push(new ViewFactoryDependency(component.type, nestedComponentIdentifier));
            var precompileComponentIdentifiers = component.precompile.map(function(precompileComp) {
              var id = new CompileIdentifierMetadata({name: precompileComp.name});
              return _this.targetDependencies.push(new ComponentFactoryDependency(precompileComp, id)), id;
            });
            compileElement.createComponentFactoryResolver(precompileComponentIdentifiers), compViewExpr = variable("compView_" + nodeIndex), compileElement.setComponentView(compViewExpr), this.view.createMethod.addStmt(compViewExpr.set(importExpr(nestedComponentIdentifier).callFn([ViewProperties.viewUtils, compileElement.injector, compileElement.appElement])).toDeclStmt());
          }
          if (compileElement.beforeChildren(), this._addRootNodeAndProject(compileElement), templateVisitAll(this, ast.children, compileElement), compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1), isPresent(compViewExpr)) {
            var codeGenContentNodes;
            codeGenContentNodes = this.view.component.type.isHost ? ViewProperties.projectableNodes : literalArr(compileElement.contentNodesByNgContentIndex.map(function(nodes) {
              return createFlatArray(nodes);
            })), this.view.createMethod.addStmt(compViewExpr.callMethod("create", [compileElement.getComponent(), codeGenContentNodes, NULL_EXPR]).toStmt());
          }
          return null;
        }, ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
          var nodeIndex = this.view.nodes.length,
              fieldName = "_anchor_" + nodeIndex;
          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment))), this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod("createTemplateAnchor", [this._getParentRenderNode(parent), this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)])).toStmt());
          var renderNode = THIS_EXPR.prop(fieldName),
              templateVariableBindings = ast.variables.map(function(varAst) {
                return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name];
              }),
              directives = ast.directives.map(function(directiveAst) {
                return directiveAst.directive;
              }),
              compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, (!0), ast.references);
          this.view.nodes.push(compileElement);
          var compiledAnimations = this._animationCompiler.compileComponent(this.view.component);
          this.nestedViewCount++;
          var embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, compiledAnimations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings);
          return this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies), compileElement.beforeChildren(), this._addRootNodeAndProject(compileElement), compileElement.afterChildren(0), null;
        }, ViewBuilderVisitor.prototype.visitAttr = function(ast, ctx) {
          return null;
        }, ViewBuilderVisitor.prototype.visitDirective = function(ast, ctx) {
          return null;
        }, ViewBuilderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
          return null;
        }, ViewBuilderVisitor.prototype.visitReference = function(ast, ctx) {
          return null;
        }, ViewBuilderVisitor.prototype.visitVariable = function(ast, ctx) {
          return null;
        }, ViewBuilderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
          return null;
        }, ViewBuilderVisitor.prototype.visitElementProperty = function(ast, context) {
          return null;
        }, ViewBuilderVisitor;
      }(),
      ViewCompileResult = function() {
        function ViewCompileResult(statements, viewFactoryVar, dependencies) {
          this.statements = statements, this.viewFactoryVar = viewFactoryVar, this.dependencies = dependencies;
        }
        return ViewCompileResult;
      }(),
      ViewCompiler = function() {
        function ViewCompiler(_genConfig) {
          this._genConfig = _genConfig, this._animationCompiler = new AnimationCompiler;
        }
        return ViewCompiler.prototype.compileComponent = function(component, template, styles, pipes) {
          var dependencies = [],
              compiledAnimations = this._animationCompiler.compileComponent(component),
              statements = [];
          compiledAnimations.map(function(entry) {
            statements.push(entry.statesMapStatement), statements.push(entry.fnStatement);
          });
          var view = new CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, CompileElement.createNull(), []);
          return buildView(view, template, dependencies), bindView(view, template), finishView(view, statements), new ViewCompileResult(statements, view.viewFactory.name, dependencies);
        }, ViewCompiler;
      }();
  ViewCompiler.decorators = [{type: _angular_core.Injectable}], ViewCompiler.ctorParameters = [{type: CompilerConfig}];
  var _COMPONENT_FACTORY_IDENTIFIER = new CompileIdentifierMetadata({
    name: "ComponentFactory",
    runtime: _angular_core.ComponentFactory,
    moduleUrl: assetUrl("core", "linker/component_factory")
  }),
      SourceModule = function() {
        function SourceModule(moduleUrl, source) {
          this.moduleUrl = moduleUrl, this.source = source;
        }
        return SourceModule;
      }(),
      NormalizedComponentWithViewDirectives = function() {
        function NormalizedComponentWithViewDirectives(component, directives, pipes) {
          this.component = component, this.directives = directives, this.pipes = pipes;
        }
        return NormalizedComponentWithViewDirectives;
      }(),
      OfflineCompiler = function() {
        function OfflineCompiler(_directiveNormalizer, _templateParser, _styleCompiler, _viewCompiler, _outputEmitter) {
          this._directiveNormalizer = _directiveNormalizer, this._templateParser = _templateParser, this._styleCompiler = _styleCompiler, this._viewCompiler = _viewCompiler, this._outputEmitter = _outputEmitter;
        }
        return OfflineCompiler.prototype.normalizeDirectiveMetadata = function(directive) {
          return this._directiveNormalizer.normalizeDirective(directive).asyncResult;
        }, OfflineCompiler.prototype.compileTemplates = function(components) {
          var _this = this;
          if (0 === components.length)
            throw new BaseException$1("No components given");
          var statements = [],
              exportedVars = [],
              moduleUrl = _ngfactoryModuleUrl(components[0].component.type),
              outputSourceModules = [];
          return components.forEach(function(componentWithDirs) {
            var compMeta = componentWithDirs.component;
            _assertComponent(compMeta);
            var fileSuffix = _splitLastSuffix(compMeta.type.moduleUrl)[1],
                stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
            stylesCompileResults.externalStylesheets.forEach(function(compiledStyleSheet) {
              outputSourceModules.push(_this._codgenStyles(compiledStyleSheet, fileSuffix));
            });
            var compViewFactoryVar = _this._compileComponent(compMeta, componentWithDirs.directives, componentWithDirs.pipes, stylesCompileResults.componentStylesheet, fileSuffix, statements);
            exportedVars.push(compViewFactoryVar);
            var hostMeta = createHostComponentMeta(compMeta.type, compMeta.selector),
                hostViewFactoryVar = _this._compileComponent(hostMeta, [compMeta], [], null, fileSuffix, statements),
                compFactoryVar = _componentFactoryName(compMeta.type);
            statements.push(variable(compFactoryVar).set(importExpr(_COMPONENT_FACTORY_IDENTIFIER, [importType(compMeta.type)]).instantiate([literal(compMeta.selector), variable(hostViewFactoryVar), importExpr(compMeta.type)], importType(_COMPONENT_FACTORY_IDENTIFIER, [importType(compMeta.type)], [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final])), exportedVars.push(compFactoryVar);
          }), outputSourceModules.unshift(this._codegenSourceModule(moduleUrl, statements, exportedVars)), outputSourceModules;
        }, OfflineCompiler.prototype._compileComponent = function(compMeta, directives, pipes, componentStyles, fileSuffix, targetStatements) {
          var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, compMeta.type.name),
              stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]),
              viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes);
          return componentStyles && ListWrapper.addAll(targetStatements, _resolveStyleStatements(componentStyles, fileSuffix)), ListWrapper.addAll(targetStatements, _resolveViewStatements(viewResult)), viewResult.viewFactoryVar;
        }, OfflineCompiler.prototype._codgenStyles = function(stylesCompileResult, fileSuffix) {
          return _resolveStyleStatements(stylesCompileResult, fileSuffix), this._codegenSourceModule(_stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
        }, OfflineCompiler.prototype._codegenSourceModule = function(moduleUrl, statements, exportedVars) {
          return new SourceModule(moduleUrl, this._outputEmitter.emitStatements(moduleUrl, statements, exportedVars));
        }, OfflineCompiler;
      }(),
      PromiseCompleter = function() {
        function PromiseCompleter() {
          var _this = this;
          this.promise = new Promise(function(res, rej) {
            _this.resolve = res, _this.reject = rej;
          });
        }
        return PromiseCompleter;
      }(),
      PromiseWrapper = function() {
        function PromiseWrapper() {}
        return PromiseWrapper.resolve = function(obj) {
          return Promise.resolve(obj);
        }, PromiseWrapper.reject = function(obj, _) {
          return Promise.reject(obj);
        }, PromiseWrapper.catchError = function(promise, onError) {
          return promise.catch(onError);
        }, PromiseWrapper.all = function(promises) {
          return 0 == promises.length ? Promise.resolve([]) : Promise.all(promises);
        }, PromiseWrapper.then = function(promise, success, rejection) {
          return promise.then(success, rejection);
        }, PromiseWrapper.wrap = function(computation) {
          return new Promise(function(res, rej) {
            try {
              res(computation());
            } catch (e) {
              rej(e);
            }
          });
        }, PromiseWrapper.scheduleMicrotask = function(computation) {
          PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function(_) {});
        }, PromiseWrapper.completer = function() {
          return new PromiseCompleter;
        }, PromiseWrapper;
      }(),
      ObservableWrapper = function() {
        function ObservableWrapper() {}
        return ObservableWrapper.subscribe = function(emitter, onNext, onError, onComplete) {
          return void 0 === onComplete && (onComplete = function() {}), onError = "function" == typeof onError && onError || noop, onComplete = "function" == typeof onComplete && onComplete || noop, emitter.subscribe({
            next: onNext,
            error: onError,
            complete: onComplete
          });
        }, ObservableWrapper.isObservable = function(obs) {
          return !!obs.subscribe;
        }, ObservableWrapper.hasSubscribers = function(obs) {
          return obs.observers.length > 0;
        }, ObservableWrapper.dispose = function(subscription) {
          subscription.unsubscribe();
        }, ObservableWrapper.callNext = function(emitter, value) {
          emitter.emit(value);
        }, ObservableWrapper.callEmit = function(emitter, value) {
          emitter.emit(value);
        }, ObservableWrapper.callError = function(emitter, error) {
          emitter.error(error);
        }, ObservableWrapper.callComplete = function(emitter) {
          emitter.complete();
        }, ObservableWrapper.fromPromise = function(promise) {
          return rxjs_observable_PromiseObservable.PromiseObservable.create(promise);
        }, ObservableWrapper.toPromise = function(obj) {
          return rxjs_operator_toPromise.toPromise.call(obj);
        }, ObservableWrapper;
      }(),
      ShadowCss = function() {
        function ShadowCss() {
          this.strictStyling = !0;
        }
        return ShadowCss.prototype.shimCssText = function(cssText, selector, hostSelector) {
          return void 0 === hostSelector && (hostSelector = ""), cssText = stripComments(cssText), cssText = this._insertDirectives(cssText), this._scopeCssText(cssText, selector, hostSelector);
        }, ShadowCss.prototype._insertDirectives = function(cssText) {
          return cssText = this._insertPolyfillDirectivesInCssText(cssText), this._insertPolyfillRulesInCssText(cssText);
        }, ShadowCss.prototype._insertPolyfillDirectivesInCssText = function(cssText) {
          return StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function(m) {
            return m[1] + "{";
          });
        }, ShadowCss.prototype._insertPolyfillRulesInCssText = function(cssText) {
          return StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function(m) {
            var rule = m[0];
            return rule = StringWrapper.replace(rule, m[1], ""), rule = StringWrapper.replace(rule, m[2], ""), m[3] + rule;
          });
        }, ShadowCss.prototype._scopeCssText = function(cssText, scopeSelector, hostSelector) {
          var unscoped = this._extractUnscopedRulesFromCssText(cssText);
          return cssText = this._insertPolyfillHostInCssText(cssText), cssText = this._convertColonHost(cssText), cssText = this._convertColonHostContext(cssText), cssText = this._convertShadowDOMSelectors(cssText), isPresent(scopeSelector) && (cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector)), cssText = cssText + "\n" + unscoped, cssText.trim();
        }, ShadowCss.prototype._extractUnscopedRulesFromCssText = function(cssText) {
          for (var m,
              r = "",
              matcher = RegExpWrapper.matcher(_cssContentUnscopedRuleRe, cssText); isPresent(m = RegExpMatcherWrapper.next(matcher)); ) {
            var rule = m[0];
            rule = StringWrapper.replace(rule, m[2], ""), rule = StringWrapper.replace(rule, m[1], m[3]), r += rule + "\n\n";
          }
          return r;
        }, ShadowCss.prototype._convertColonHost = function(cssText) {
          return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
        }, ShadowCss.prototype._convertColonHostContext = function(cssText) {
          return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
        }, ShadowCss.prototype._convertColonRule = function(cssText, regExp, partReplacer) {
          return StringWrapper.replaceAllMapped(cssText, regExp, function(m) {
            if (isPresent(m[2])) {
              for (var parts = m[2].split(","),
                  r = [],
                  i = 0; i < parts.length; i++) {
                var p = parts[i];
                if (isBlank(p))
                  break;
                p = p.trim(), r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
              }
              return r.join(",");
            }
            return _polyfillHostNoCombinator + m[3];
          });
        }, ShadowCss.prototype._colonHostContextPartReplacer = function(host, part, suffix) {
          return StringWrapper.contains(part, _polyfillHost) ? this._colonHostPartReplacer(host, part, suffix) : host + part + suffix + ", " + part + " " + host + suffix;
        }, ShadowCss.prototype._colonHostPartReplacer = function(host, part, suffix) {
          return host + StringWrapper.replace(part, _polyfillHost, "") + suffix;
        }, ShadowCss.prototype._convertShadowDOMSelectors = function(cssText) {
          for (var i = 0; i < _shadowDOMSelectorsRe.length; i++)
            cssText = StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], " ");
          return cssText;
        }, ShadowCss.prototype._scopeSelectors = function(cssText, scopeSelector, hostSelector) {
          var _this = this;
          return processRules(cssText, function(rule) {
            var selector = rule.selector,
                content = rule.content;
            return "@" != rule.selector[0] || rule.selector.startsWith("@page") ? selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling) : (rule.selector.startsWith("@media") || rule.selector.startsWith("@supports")) && (content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector)), new CssRule(selector, content);
          });
        }, ShadowCss.prototype._scopeSelector = function(selector, scopeSelector, hostSelector, strict) {
          for (var r = [],
              parts = selector.split(","),
              i = 0; i < parts.length; i++) {
            var p = parts[i].trim(),
                deepParts = StringWrapper.split(p, _shadowDeepSelectors),
                shallowPart = deepParts[0];
            this._selectorNeedsScoping(shallowPart, scopeSelector) && (deepParts[0] = strict && !StringWrapper.contains(shallowPart, _polyfillHostNoCombinator) ? this._applyStrictSelectorScope(shallowPart, scopeSelector) : this._applySelectorScope(shallowPart, scopeSelector, hostSelector)), r.push(deepParts.join(" "));
          }
          return r.join(", ");
        }, ShadowCss.prototype._selectorNeedsScoping = function(selector, scopeSelector) {
          var re = this._makeScopeMatcher(scopeSelector);
          return !isPresent(RegExpWrapper.firstMatch(re, selector));
        }, ShadowCss.prototype._makeScopeMatcher = function(scopeSelector) {
          var lre = /\[/g,
              rre = /\]/g;
          return scopeSelector = StringWrapper.replaceAll(scopeSelector, lre, "\\["), scopeSelector = StringWrapper.replaceAll(scopeSelector, rre, "\\]"), RegExpWrapper.create("^(" + scopeSelector + ")" + _selectorReSuffix, "m");
        }, ShadowCss.prototype._applySelectorScope = function(selector, scopeSelector, hostSelector) {
          return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
        }, ShadowCss.prototype._applySimpleSelectorScope = function(selector, scopeSelector, hostSelector) {
          if (isPresent(RegExpWrapper.firstMatch(_polyfillHostRe, selector))) {
            var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
            return selector = StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy), StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + " ");
          }
          return scopeSelector + " " + selector;
        }, ShadowCss.prototype._applyStrictSelectorScope = function(selector, scopeSelector) {
          var isRe = /\[is=([^\]]*)\]/g;
          scopeSelector = StringWrapper.replaceAllMapped(scopeSelector, isRe, function(m) {
            return m[1];
          });
          for (var splits = [" ", ">", "+", "~"],
              scoped = selector,
              attrName = "[" + scopeSelector + "]",
              i = 0; i < splits.length; i++) {
            var sep = splits[i],
                parts = scoped.split(sep);
            scoped = parts.map(function(p) {
              var t = StringWrapper.replaceAll(p.trim(), _polyfillHostRe, "");
              if (t.length > 0 && !ListWrapper.contains(splits, t) && !StringWrapper.contains(t, attrName)) {
                var re = /([^:]*)(:*)(.*)/g,
                    m = RegExpWrapper.firstMatch(re, t);
                isPresent(m) && (p = m[1] + attrName + m[2] + m[3]);
              }
              return p;
            }).join(sep);
          }
          return scoped;
        }, ShadowCss.prototype._insertPolyfillHostInCssText = function(selector) {
          return selector = StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext), selector = StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
        }, ShadowCss;
      }(),
      _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim,
      _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim,
      _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim,
      _polyfillHost = "-shadowcsshost",
      _polyfillHostContext = "-shadowcsscontext",
      _parenSuffix = ")(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))?([^,{]*)",
      _cssColonHostRe = RegExpWrapper.create("(" + _polyfillHost + _parenSuffix, "im"),
      _cssColonHostContextRe = RegExpWrapper.create("(" + _polyfillHostContext + _parenSuffix, "im"),
      _polyfillHostNoCombinator = _polyfillHost + "-no-combinator",
      _shadowDOMSelectorsRe = [/::shadow/g, /::content/g, /\/shadow-deep\//g, /\/shadow\//g],
      _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g,
      _selectorReSuffix = "([>\\s~+[.,{:][\\s\\S]*)?$",
      _polyfillHostRe = RegExpWrapper.create(_polyfillHost, "im"),
      _colonHostRe = /:host/gim,
      _colonHostContextRe = /:host-context/gim,
      _commentRe = /\/\*[\s\S]*?\*\//g,
      _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g,
      _curlyRe = /([{}])/g,
      OPEN_CURLY = "{",
      CLOSE_CURLY = "}",
      BLOCK_PLACEHOLDER = "%BLOCK%",
      CssRule = function() {
        function CssRule(selector, content) {
          this.selector = selector, this.content = content;
        }
        return CssRule;
      }(),
      StringWithEscapedBlocks = function() {
        function StringWithEscapedBlocks(escapedString, blocks) {
          this.escapedString = escapedString, this.blocks = blocks;
        }
        return StringWithEscapedBlocks;
      }(),
      COMPONENT_VARIABLE = "%COMP%",
      HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE,
      CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE,
      StylesCompileDependency = function() {
        function StylesCompileDependency(moduleUrl, isShimmed, valuePlaceholder) {
          this.moduleUrl = moduleUrl, this.isShimmed = isShimmed, this.valuePlaceholder = valuePlaceholder;
        }
        return StylesCompileDependency;
      }(),
      StylesCompileResult = function() {
        function StylesCompileResult(componentStylesheet, externalStylesheets) {
          this.componentStylesheet = componentStylesheet, this.externalStylesheets = externalStylesheets;
        }
        return StylesCompileResult;
      }(),
      CompiledStylesheet = function() {
        function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
          this.statements = statements, this.stylesVar = stylesVar, this.dependencies = dependencies, this.isShimmed = isShimmed, this.meta = meta;
        }
        return CompiledStylesheet;
      }(),
      StyleCompiler = function() {
        function StyleCompiler(_urlResolver) {
          this._urlResolver = _urlResolver, this._shadowCss = new ShadowCss;
        }
        return StyleCompiler.prototype.compileComponent = function(comp) {
          var _this = this,
              externalStylesheets = (comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated, []),
              componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
                styles: comp.template.styles,
                styleUrls: comp.template.styleUrls,
                moduleUrl: comp.type.moduleUrl
              }), !0);
          return comp.template.externalStylesheets.forEach(function(stylesheetMeta) {
            var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, !1);
            externalStylesheets.push(compiledStylesheet);
          }), new StylesCompileResult(componentStylesheet, externalStylesheets);
        }, StyleCompiler.prototype._compileStyles = function(comp, stylesheet, isComponentStylesheet) {
          for (var _this = this,
              shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated,
              styleExpressions = stylesheet.styles.map(function(plainStyle) {
                return literal(_this._shimIfNeeded(plainStyle, shim));
              }),
              dependencies = [],
              i = 0; i < stylesheet.styleUrls.length; i++) {
            var identifier = new CompileIdentifierMetadata({name: getStylesVarName(null)});
            dependencies.push(new StylesCompileDependency(stylesheet.styleUrls[i], shim, identifier)), styleExpressions.push(new ExternalExpr(identifier));
          }
          var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null),
              stmt = variable(stylesVar).set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]);
          return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
        }, StyleCompiler.prototype._shimIfNeeded = function(style, shim) {
          return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
        }, StyleCompiler;
      }();
  StyleCompiler.decorators = [{type: _angular_core.Injectable}], StyleCompiler.ctorParameters = [{type: UrlResolver}];
  var XHR = function() {
    function XHR() {}
    return XHR.prototype.get = function(url) {
      return null;
    }, XHR;
  }(),
      NormalizeDirectiveResult = function() {
        function NormalizeDirectiveResult(syncResult, asyncResult) {
          this.syncResult = syncResult, this.asyncResult = asyncResult;
        }
        return NormalizeDirectiveResult;
      }(),
      DirectiveNormalizer = function() {
        function DirectiveNormalizer(_xhr, _urlResolver, _htmlParser, _config) {
          this._xhr = _xhr, this._urlResolver = _urlResolver, this._htmlParser = _htmlParser, this._config = _config, this._xhrCache = new Map;
        }
        return DirectiveNormalizer.prototype.clearCache = function() {
          this._xhrCache.clear();
        }, DirectiveNormalizer.prototype.clearCacheFor = function(normalizedDirective) {
          var _this = this;
          normalizedDirective.isComponent && (this._xhrCache.delete(normalizedDirective.template.templateUrl), normalizedDirective.template.externalStylesheets.forEach(function(stylesheet) {
            _this._xhrCache.delete(stylesheet.moduleUrl);
          }));
        }, DirectiveNormalizer.prototype._fetch = function(url) {
          var result = this._xhrCache.get(url);
          return result || (result = this._xhr.get(url), this._xhrCache.set(url, result)), result;
        }, DirectiveNormalizer.prototype.normalizeDirective = function(directive) {
          var _this = this;
          if (!directive.isComponent)
            return new NormalizeDirectiveResult(directive, Promise.resolve(directive));
          var normalizedTemplateAsync,
              normalizedTemplateSync = null;
          if (isPresent(directive.template.template))
            normalizedTemplateSync = this.normalizeTemplateSync(directive.type, directive.template), normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
          else {
            if (!directive.template.templateUrl)
              throw new BaseException$1("No template specified for component " + directive.type.name);
            normalizedTemplateAsync = this.normalizeTemplateAsync(directive.type, directive.template);
          }
          if (normalizedTemplateSync && 0 === normalizedTemplateSync.styleUrls.length) {
            var normalizedDirective = _cloneDirectiveWithTemplate(directive, normalizedTemplateSync);
            return new NormalizeDirectiveResult(normalizedDirective, Promise.resolve(normalizedDirective));
          }
          return new NormalizeDirectiveResult(null, normalizedTemplateAsync.then(function(normalizedTemplate) {
            return _this.normalizeExternalStylesheets(normalizedTemplate);
          }).then(function(normalizedTemplate) {
            return _cloneDirectiveWithTemplate(directive, normalizedTemplate);
          }));
        }, DirectiveNormalizer.prototype.normalizeTemplateSync = function(directiveType, template) {
          return this.normalizeLoadedTemplate(directiveType, template, template.template, directiveType.moduleUrl);
        }, DirectiveNormalizer.prototype.normalizeTemplateAsync = function(directiveType, template) {
          var _this = this,
              templateUrl = this._urlResolver.resolve(directiveType.moduleUrl, template.templateUrl);
          return this._fetch(templateUrl).then(function(value) {
            return _this.normalizeLoadedTemplate(directiveType, template, value, templateUrl);
          });
        }, DirectiveNormalizer.prototype.normalizeLoadedTemplate = function(directiveType, templateMeta, template, templateAbsUrl) {
          var rootNodesAndErrors = this._htmlParser.parse(template, directiveType.name);
          if (rootNodesAndErrors.errors.length > 0) {
            var errorString = rootNodesAndErrors.errors.join("\n");
            throw new BaseException$1("Template parse errors:\n" + errorString);
          }
          var templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
            styles: templateMeta.styles,
            styleUrls: templateMeta.styleUrls,
            moduleUrl: directiveType.moduleUrl
          })),
              visitor = new TemplatePreparseVisitor;
          htmlVisitAll(visitor, rootNodesAndErrors.rootNodes);
          var templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
            styles: visitor.styles,
            styleUrls: visitor.styleUrls,
            moduleUrl: templateAbsUrl
          })),
              allStyles = templateMetadataStyles.styles.concat(templateStyles.styles),
              allStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls),
              encapsulation = templateMeta.encapsulation;
          return isBlank(encapsulation) && (encapsulation = this._config.defaultEncapsulation), encapsulation === _angular_core.ViewEncapsulation.Emulated && 0 === allStyles.length && 0 === allStyleUrls.length && (encapsulation = _angular_core.ViewEncapsulation.None), new CompileTemplateMetadata({
            encapsulation: encapsulation,
            template: template,
            templateUrl: templateAbsUrl,
            styles: allStyles,
            styleUrls: allStyleUrls,
            externalStylesheets: templateMeta.externalStylesheets,
            ngContentSelectors: visitor.ngContentSelectors,
            animations: templateMeta.animations,
            interpolation: templateMeta.interpolation
          });
        }, DirectiveNormalizer.prototype.normalizeExternalStylesheets = function(templateMeta) {
          return this._loadMissingExternalStylesheets(templateMeta.styleUrls).then(function(externalStylesheets) {
            return new CompileTemplateMetadata({
              encapsulation: templateMeta.encapsulation,
              template: templateMeta.template,
              templateUrl: templateMeta.templateUrl,
              styles: templateMeta.styles,
              styleUrls: templateMeta.styleUrls,
              externalStylesheets: externalStylesheets,
              ngContentSelectors: templateMeta.ngContentSelectors,
              animations: templateMeta.animations,
              interpolation: templateMeta.interpolation
            });
          });
        }, DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function(styleUrls, loadedStylesheets) {
          var _this = this;
          return void 0 === loadedStylesheets && (loadedStylesheets = new Map), Promise.all(styleUrls.filter(function(styleUrl) {
            return !loadedStylesheets.has(styleUrl);
          }).map(function(styleUrl) {
            return _this._fetch(styleUrl).then(function(loadedStyle) {
              var stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({
                styles: [loadedStyle],
                moduleUrl: styleUrl
              }));
              return loadedStylesheets.set(styleUrl, stylesheet), _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
            });
          })).then(function(_) {
            return MapWrapper.values(loadedStylesheets);
          });
        }, DirectiveNormalizer.prototype.normalizeStylesheet = function(stylesheet) {
          var _this = this,
              allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable).map(function(url) {
                return _this._urlResolver.resolve(stylesheet.moduleUrl, url);
              }),
              allStyles = stylesheet.styles.map(function(style) {
                var styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);
                return allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls), styleWithImports.style;
              });
          return new CompileStylesheetMetadata({
            styles: allStyles,
            styleUrls: allStyleUrls,
            moduleUrl: stylesheet.moduleUrl
          });
        }, DirectiveNormalizer;
      }();
  DirectiveNormalizer.decorators = [{type: _angular_core.Injectable}], DirectiveNormalizer.ctorParameters = [{type: XHR}, {type: UrlResolver}, {type: HtmlParser}, {type: CompilerConfig}];
  var TemplatePreparseVisitor = function() {
    function TemplatePreparseVisitor() {
      this.ngContentSelectors = [], this.styles = [], this.styleUrls = [], this.ngNonBindableStackCount = 0;
    }
    return TemplatePreparseVisitor.prototype.visitElement = function(ast, context) {
      var preparsedElement = preparseElement(ast);
      switch (preparsedElement.type) {
        case PreparsedElementType.NG_CONTENT:
          0 === this.ngNonBindableStackCount && this.ngContentSelectors.push(preparsedElement.selectAttr);
          break;
        case PreparsedElementType.STYLE:
          var textContent = "";
          ast.children.forEach(function(child) {
            child instanceof HtmlTextAst && (textContent += child.value);
          }), this.styles.push(textContent);
          break;
        case PreparsedElementType.STYLESHEET:
          this.styleUrls.push(preparsedElement.hrefAttr);
      }
      return preparsedElement.nonBindable && this.ngNonBindableStackCount++, htmlVisitAll(this, ast.children), preparsedElement.nonBindable && this.ngNonBindableStackCount--, null;
    }, TemplatePreparseVisitor.prototype.visitComment = function(ast, context) {
      return null;
    }, TemplatePreparseVisitor.prototype.visitAttr = function(ast, context) {
      return null;
    }, TemplatePreparseVisitor.prototype.visitText = function(ast, context) {
      return null;
    }, TemplatePreparseVisitor.prototype.visitExpansion = function(ast, context) {
      return null;
    }, TemplatePreparseVisitor.prototype.visitExpansionCase = function(ast, context) {
      return null;
    }, TemplatePreparseVisitor;
  }(),
      INTERPOLATION_BLACKLIST_REGEXPS = [/^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i],
      LIFECYCLE_INTERFACES = MapWrapper.createFromPairs([[LifecycleHooks.OnInit, _angular_core.OnInit], [LifecycleHooks.OnDestroy, _angular_core.OnDestroy], [LifecycleHooks.DoCheck, _angular_core.DoCheck], [LifecycleHooks.OnChanges, _angular_core.OnChanges], [LifecycleHooks.AfterContentInit, _angular_core.AfterContentInit], [LifecycleHooks.AfterContentChecked, _angular_core.AfterContentChecked], [LifecycleHooks.AfterViewInit, _angular_core.AfterViewInit], [LifecycleHooks.AfterViewChecked, _angular_core.AfterViewChecked]]),
      LIFECYCLE_PROPS = MapWrapper.createFromPairs([[LifecycleHooks.OnInit, "ngOnInit"], [LifecycleHooks.OnDestroy, "ngOnDestroy"], [LifecycleHooks.DoCheck, "ngDoCheck"], [LifecycleHooks.OnChanges, "ngOnChanges"], [LifecycleHooks.AfterContentInit, "ngAfterContentInit"], [LifecycleHooks.AfterContentChecked, "ngAfterContentChecked"], [LifecycleHooks.AfterViewInit, "ngAfterViewInit"], [LifecycleHooks.AfterViewChecked, "ngAfterViewChecked"]]),
      DirectiveResolver = function() {
        function DirectiveResolver(_reflector) {
          void 0 === _reflector && (_reflector = reflector), this._reflector = _reflector;
        }
        return DirectiveResolver.prototype.resolve = function(type) {
          var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
          if (isPresent(typeMetadata)) {
            var metadata = typeMetadata.find(_isDirectiveMetadata);
            if (isPresent(metadata)) {
              var propertyMetadata = this._reflector.propMetadata(type);
              return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
            }
          }
          throw new BaseException$1("No Directive annotation found on " + stringify(type));
        }, DirectiveResolver.prototype._mergeWithPropertyMetadata = function(dm, propertyMetadata, directiveType) {
          var inputs = [],
              outputs = [],
              host = {},
              queries = {};
          return StringMapWrapper.forEach(propertyMetadata, function(metadata, propName) {
            metadata.forEach(function(a) {
              if (a instanceof _angular_core.InputMetadata && (isPresent(a.bindingPropertyName) ? inputs.push(propName + ": " + a.bindingPropertyName) : inputs.push(propName)), a instanceof _angular_core.OutputMetadata && (isPresent(a.bindingPropertyName) ? outputs.push(propName + ": " + a.bindingPropertyName) : outputs.push(propName)), a instanceof _angular_core.HostBindingMetadata && (isPresent(a.hostPropertyName) ? host["[" + a.hostPropertyName + "]"] = propName : host["[" + propName + "]"] = propName), a instanceof _angular_core.HostListenerMetadata) {
                var args = isPresent(a.args) ? a.args.join(", ") : "";
                host["(" + a.eventName + ")"] = propName + "(" + args + ")";
              }
              a instanceof _angular_core.QueryMetadata && (queries[propName] = a);
            });
          }), this._merge(dm, inputs, outputs, host, queries, directiveType);
        }, DirectiveResolver.prototype._merge = function(dm, inputs, outputs, host, queries, directiveType) {
          var mergedOutputs,
              mergedInputs = isPresent(dm.inputs) ? ListWrapper.concat(dm.inputs, inputs) : inputs;
          isPresent(dm.outputs) ? (dm.outputs.forEach(function(propName) {
            if (ListWrapper.contains(outputs, propName))
              throw new BaseException$1("Output event '" + propName + "' defined multiple times in '" + stringify(directiveType) + "'");
          }), mergedOutputs = ListWrapper.concat(dm.outputs, outputs)) : mergedOutputs = outputs;
          var mergedHost = isPresent(dm.host) ? StringMapWrapper.merge(dm.host, host) : host,
              mergedQueries = isPresent(dm.queries) ? StringMapWrapper.merge(dm.queries, queries) : queries;
          return dm instanceof _angular_core.ComponentMetadata ? new _angular_core.ComponentMetadata({
            selector: dm.selector,
            inputs: mergedInputs,
            outputs: mergedOutputs,
            host: mergedHost,
            exportAs: dm.exportAs,
            moduleId: dm.moduleId,
            queries: mergedQueries,
            changeDetection: dm.changeDetection,
            providers: dm.providers,
            viewProviders: dm.viewProviders,
            precompile: dm.precompile
          }) : new _angular_core.DirectiveMetadata({
            selector: dm.selector,
            inputs: mergedInputs,
            outputs: mergedOutputs,
            host: mergedHost,
            exportAs: dm.exportAs,
            queries: mergedQueries,
            providers: dm.providers
          });
        }, DirectiveResolver;
      }();
  DirectiveResolver.decorators = [{type: _angular_core.Injectable}], DirectiveResolver.ctorParameters = [{type: ReflectorReader}];
  var PipeResolver = (new DirectiveResolver(reflector), function() {
    function PipeResolver(_reflector) {
      void 0 === _reflector && (_reflector = reflector), this._reflector = _reflector;
    }
    return PipeResolver.prototype.resolve = function(type) {
      var metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));
      if (isPresent(metas)) {
        var annotation = metas.find(_isPipeMetadata);
        if (isPresent(annotation))
          return annotation;
      }
      throw new BaseException$1("No Pipe decorator found on " + stringify(type));
    }, PipeResolver;
  }());
  PipeResolver.decorators = [{type: _angular_core.Injectable}], PipeResolver.ctorParameters = [{type: ReflectorReader}];
  var ViewResolver = function() {
    function ViewResolver(_reflector) {
      void 0 === _reflector && (_reflector = reflector), this._reflector = _reflector;
    }
    return ViewResolver.prototype.resolve = function(component) {
      var compMeta;
      if (this._reflector.annotations(component).forEach(function(m) {
        m instanceof _angular_core.ComponentMetadata && (compMeta = m);
      }), isPresent(compMeta)) {
        if (isBlank(compMeta.template) && isBlank(compMeta.templateUrl))
          throw new BaseException$1("Component '" + stringify(component) + "' must have either 'template' or 'templateUrl' set.");
        return new _angular_core.ViewMetadata({
          templateUrl: compMeta.templateUrl,
          template: compMeta.template,
          directives: compMeta.directives,
          pipes: compMeta.pipes,
          encapsulation: compMeta.encapsulation,
          styles: compMeta.styles,
          styleUrls: compMeta.styleUrls,
          animations: compMeta.animations,
          interpolation: compMeta.interpolation
        });
      }
      throw new BaseException$1("Could not compile '" + stringify(component) + "' because it is not a component.");
    }, ViewResolver;
  }();
  ViewResolver.decorators = [{type: _angular_core.Injectable}], ViewResolver.ctorParameters = [{type: ReflectorReader}];
  var CompileMetadataResolver = function() {
    function CompileMetadataResolver(_directiveResolver, _pipeResolver, _viewResolver, _config, _reflector) {
      void 0 === _reflector && (_reflector = reflector), this._directiveResolver = _directiveResolver, this._pipeResolver = _pipeResolver, this._viewResolver = _viewResolver, this._config = _config, this._reflector = _reflector, this._directiveCache = new Map, this._pipeCache = new Map, this._anonymousTypes = new Map, this._anonymousTypeIndex = 0;
    }
    return CompileMetadataResolver.prototype.sanitizeTokenName = function(token) {
      var identifier = stringify(token);
      if (identifier.indexOf("(") >= 0) {
        var found = this._anonymousTypes.get(token);
        isBlank(found) && (this._anonymousTypes.set(token, this._anonymousTypeIndex++), found = this._anonymousTypes.get(token)), identifier = "anonymous_token_" + found + "_";
      }
      return sanitizeIdentifier(identifier);
    }, CompileMetadataResolver.prototype.clearCacheFor = function(compType) {
      this._directiveCache.delete(compType), this._pipeCache.delete(compType);
    }, CompileMetadataResolver.prototype.clearCache = function() {
      this._directiveCache.clear(), this._pipeCache.clear();
    }, CompileMetadataResolver.prototype.getAnimationEntryMetadata = function(entry) {
      var _this = this,
          defs = entry.definitions.map(function(def) {
            return _this.getAnimationStateMetadata(def);
          });
      return new CompileAnimationEntryMetadata(entry.name, defs);
    }, CompileMetadataResolver.prototype.getAnimationStateMetadata = function(value) {
      if (value instanceof _angular_core.AnimationStateDeclarationMetadata) {
        var styles = this.getAnimationStyleMetadata(value.styles);
        return new CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
      }
      return value instanceof _angular_core.AnimationStateTransitionMetadata ? new CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this.getAnimationMetadata(value.steps)) : null;
    }, CompileMetadataResolver.prototype.getAnimationStyleMetadata = function(value) {
      return new CompileAnimationStyleMetadata(value.offset, value.styles);
    }, CompileMetadataResolver.prototype.getAnimationMetadata = function(value) {
      var _this = this;
      if (value instanceof _angular_core.AnimationStyleMetadata)
        return this.getAnimationStyleMetadata(value);
      if (value instanceof _angular_core.AnimationKeyframesSequenceMetadata)
        return new CompileAnimationKeyframesSequenceMetadata(value.steps.map(function(entry) {
          return _this.getAnimationStyleMetadata(entry);
        }));
      if (value instanceof _angular_core.AnimationAnimateMetadata) {
        var animateData = this.getAnimationMetadata(value.styles);
        return new CompileAnimationAnimateMetadata(value.timings, animateData);
      }
      if (value instanceof _angular_core.AnimationWithStepsMetadata) {
        var steps = value.steps.map(function(step) {
          return _this.getAnimationMetadata(step);
        });
        return value instanceof _angular_core.AnimationGroupMetadata ? new CompileAnimationGroupMetadata(steps) : new CompileAnimationSequenceMetadata(steps);
      }
      return null;
    }, CompileMetadataResolver.prototype.getDirectiveMetadata = function(directiveType) {
      var _this = this,
          meta = this._directiveCache.get(directiveType);
      if (isBlank(meta)) {
        var dirMeta = this._directiveResolver.resolve(directiveType),
            templateMeta = null,
            changeDetectionStrategy = null,
            viewProviders = [],
            moduleUrl = staticTypeModuleUrl(directiveType),
            precompileTypes = [];
        if (dirMeta instanceof _angular_core.ComponentMetadata) {
          var cmpMeta = dirMeta,
              viewMeta = this._viewResolver.resolve(directiveType);
          assertArrayOfStrings("styles", viewMeta.styles), assertInterpolationSymbols("interpolation", viewMeta.interpolation);
          var animations = isPresent(viewMeta.animations) ? viewMeta.animations.map(function(e) {
            return _this.getAnimationEntryMetadata(e);
          }) : null;
          assertArrayOfStrings("styles", viewMeta.styles), assertArrayOfStrings("styleUrls", viewMeta.styleUrls), templateMeta = new CompileTemplateMetadata({
            encapsulation: viewMeta.encapsulation,
            template: viewMeta.template,
            templateUrl: viewMeta.templateUrl,
            styles: viewMeta.styles,
            styleUrls: viewMeta.styleUrls,
            animations: animations,
            interpolation: viewMeta.interpolation
          }), changeDetectionStrategy = cmpMeta.changeDetection, isPresent(dirMeta.viewProviders) && (viewProviders = this.getProvidersMetadata(verifyNonBlankProviders(directiveType, dirMeta.viewProviders, "viewProviders"))), moduleUrl = componentModuleUrl(this._reflector, directiveType, cmpMeta), cmpMeta.precompile && (precompileTypes = flattenArray(cmpMeta.precompile).map(function(cmp) {
            return _this.getTypeMetadata(cmp, staticTypeModuleUrl(cmp));
          }));
        }
        var providers = [];
        isPresent(dirMeta.providers) && (providers = this.getProvidersMetadata(verifyNonBlankProviders(directiveType, dirMeta.providers, "providers")));
        var queries = [],
            viewQueries = [];
        isPresent(dirMeta.queries) && (queries = this.getQueriesMetadata(dirMeta.queries, !1, directiveType), viewQueries = this.getQueriesMetadata(dirMeta.queries, !0, directiveType)), meta = CompileDirectiveMetadata.create({
          selector: dirMeta.selector,
          exportAs: dirMeta.exportAs,
          isComponent: isPresent(templateMeta),
          type: this.getTypeMetadata(directiveType, moduleUrl),
          template: templateMeta,
          changeDetection: changeDetectionStrategy,
          inputs: dirMeta.inputs,
          outputs: dirMeta.outputs,
          host: dirMeta.host,
          lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function(hook) {
            return hasLifecycleHook(hook, directiveType);
          }),
          providers: providers,
          viewProviders: viewProviders,
          queries: queries,
          viewQueries: viewQueries,
          precompile: precompileTypes
        }), this._directiveCache.set(directiveType, meta);
      }
      return meta;
    }, CompileMetadataResolver.prototype.maybeGetDirectiveMetadata = function(someType) {
      try {
        return this.getDirectiveMetadata(someType);
      } catch (e) {
        if (e.message.indexOf("No Directive annotation") !== -1)
          return null;
        throw e;
      }
    }, CompileMetadataResolver.prototype.getTypeMetadata = function(type, moduleUrl, dependencies) {
      return void 0 === dependencies && (dependencies = null), new CompileTypeMetadata({
        name: this.sanitizeTokenName(type),
        moduleUrl: moduleUrl,
        runtime: type,
        diDeps: this.getDependenciesMetadata(type, dependencies)
      });
    }, CompileMetadataResolver.prototype.getFactoryMetadata = function(factory, moduleUrl, dependencies) {
      return void 0 === dependencies && (dependencies = null), new CompileFactoryMetadata({
        name: this.sanitizeTokenName(factory),
        moduleUrl: moduleUrl,
        runtime: factory,
        diDeps: this.getDependenciesMetadata(factory, dependencies)
      });
    }, CompileMetadataResolver.prototype.getPipeMetadata = function(pipeType) {
      var meta = this._pipeCache.get(pipeType);
      if (isBlank(meta)) {
        var pipeMeta = this._pipeResolver.resolve(pipeType);
        meta = new CompilePipeMetadata({
          type: this.getTypeMetadata(pipeType, staticTypeModuleUrl(pipeType)),
          name: pipeMeta.name,
          pure: pipeMeta.pure,
          lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function(hook) {
            return hasLifecycleHook(hook, pipeType);
          })
        }), this._pipeCache.set(pipeType, meta);
      }
      return meta;
    }, CompileMetadataResolver.prototype.getViewDirectivesMetadata = function(component) {
      for (var _this = this,
          view = this._viewResolver.resolve(component),
          directives = flattenDirectives(view, this._config.platformDirectives),
          i = 0; i < directives.length; i++)
        if (!isValidType(directives[i]))
          throw new BaseException$1("Unexpected directive value '" + stringify(directives[i]) + "' on the View of component '" + stringify(component) + "'");
      return directives.map(function(type) {
        return _this.getDirectiveMetadata(type);
      });
    }, CompileMetadataResolver.prototype.getViewPipesMetadata = function(component) {
      for (var _this = this,
          view = this._viewResolver.resolve(component),
          pipes = flattenPipes(view, this._config.platformPipes),
          i = 0; i < pipes.length; i++)
        if (!isValidType(pipes[i]))
          throw new BaseException$1("Unexpected piped value '" + stringify(pipes[i]) + "' on the View of component '" + stringify(component) + "'");
      return pipes.map(function(type) {
        return _this.getPipeMetadata(type);
      });
    }, CompileMetadataResolver.prototype.getDependenciesMetadata = function(typeOrFunc, dependencies) {
      var _this = this,
          hasUnknownDeps = !1,
          params = isPresent(dependencies) ? dependencies : this._reflector.parameters(typeOrFunc);
      isBlank(params) && (params = []);
      var dependenciesMetadata = params.map(function(param) {
        var isAttribute = !1,
            isHost = !1,
            isSelf = !1,
            isSkipSelf = !1,
            isOptional = !1,
            query = null,
            viewQuery = null,
            token = null;
        return isArray(param) ? param.forEach(function(paramEntry) {
          paramEntry instanceof _angular_core.HostMetadata ? isHost = !0 : paramEntry instanceof _angular_core.SelfMetadata ? isSelf = !0 : paramEntry instanceof _angular_core.SkipSelfMetadata ? isSkipSelf = !0 : paramEntry instanceof _angular_core.OptionalMetadata ? isOptional = !0 : paramEntry instanceof _angular_core.AttributeMetadata ? (isAttribute = !0, token = paramEntry.attributeName) : paramEntry instanceof _angular_core.QueryMetadata ? paramEntry.isViewQuery ? viewQuery = paramEntry : query = paramEntry : paramEntry instanceof _angular_core.InjectMetadata ? token = paramEntry.token : isValidType(paramEntry) && isBlank(token) && (token = paramEntry);
        }) : token = param, isBlank(token) ? (hasUnknownDeps = !0, null) : new CompileDiDependencyMetadata({
          isAttribute: isAttribute,
          isHost: isHost,
          isSelf: isSelf,
          isSkipSelf: isSkipSelf,
          isOptional: isOptional,
          query: isPresent(query) ? _this.getQueryMetadata(query, null, typeOrFunc) : null,
          viewQuery: isPresent(viewQuery) ? _this.getQueryMetadata(viewQuery, null, typeOrFunc) : null,
          token: _this.getTokenMetadata(token)
        });
      });
      if (hasUnknownDeps) {
        var depsTokens = dependenciesMetadata.map(function(dep) {
          return dep ? stringify(dep.token) : "?";
        }).join(", ");
        throw new BaseException$1("Can't resolve all parameters for " + stringify(typeOrFunc) + ": (" + depsTokens + ").");
      }
      return dependenciesMetadata;
    }, CompileMetadataResolver.prototype.getTokenMetadata = function(token) {
      token = _angular_core.resolveForwardRef(token);
      var compileToken;
      return compileToken = new CompileTokenMetadata(isString(token) ? {value: token} : {identifier: new CompileIdentifierMetadata({
          runtime: token,
          name: this.sanitizeTokenName(token),
          moduleUrl: staticTypeModuleUrl(token)
        })});
    }, CompileMetadataResolver.prototype.getProvidersMetadata = function(providers) {
      var _this = this;
      return providers.map(function(provider) {
        return provider = _angular_core.resolveForwardRef(provider), isArray(provider) ? _this.getProvidersMetadata(provider) : provider instanceof _angular_core.Provider ? _this.getProviderMetadata(provider) : isProviderLiteral(provider) ? _this.getProviderMetadata(createProvider(provider)) : _this.getTypeMetadata(provider, staticTypeModuleUrl(provider));
      });
    }, CompileMetadataResolver.prototype.getProviderMetadata = function(provider) {
      var compileDeps,
          compileTypeMetadata = null,
          compileFactoryMetadata = null;
      return isPresent(provider.useClass) ? (compileTypeMetadata = this.getTypeMetadata(provider.useClass, staticTypeModuleUrl(provider.useClass), provider.dependencies), compileDeps = compileTypeMetadata.diDeps) : isPresent(provider.useFactory) && (compileFactoryMetadata = this.getFactoryMetadata(provider.useFactory, staticTypeModuleUrl(provider.useFactory), provider.dependencies), compileDeps = compileFactoryMetadata.diDeps), new CompileProviderMetadata({
        token: this.getTokenMetadata(provider.token),
        useClass: compileTypeMetadata,
        useValue: convertToCompileValue(provider.useValue),
        useFactory: compileFactoryMetadata,
        useExisting: isPresent(provider.useExisting) ? this.getTokenMetadata(provider.useExisting) : null,
        deps: compileDeps,
        multi: provider.multi
      });
    }, CompileMetadataResolver.prototype.getQueriesMetadata = function(queries, isViewQuery, directiveType) {
      var _this = this,
          compileQueries = [];
      return StringMapWrapper.forEach(queries, function(query, propertyName) {
        query.isViewQuery === isViewQuery && compileQueries.push(_this.getQueryMetadata(query, propertyName, directiveType));
      }), compileQueries;
    }, CompileMetadataResolver.prototype.getQueryMetadata = function(q, propertyName, typeOrFunc) {
      var selectors,
          _this = this;
      if (q.isVarBindingQuery)
        selectors = q.varBindings.map(function(varName) {
          return _this.getTokenMetadata(varName);
        });
      else {
        if (!isPresent(q.selector))
          throw new BaseException$1("Can't construct a query for the property \"" + propertyName + '" of "' + stringify(typeOrFunc) + "\" since the query selector wasn't defined.");
        selectors = [this.getTokenMetadata(q.selector)];
      }
      return new CompileQueryMetadata({
        selectors: selectors,
        first: q.first,
        descendants: q.descendants,
        propertyName: propertyName,
        read: isPresent(q.read) ? this.getTokenMetadata(q.read) : null
      });
    }, CompileMetadataResolver;
  }();
  CompileMetadataResolver.decorators = [{type: _angular_core.Injectable}], CompileMetadataResolver.ctorParameters = [{type: DirectiveResolver}, {type: PipeResolver}, {type: ViewResolver}, {type: CompilerConfig}, {type: ReflectorReader}];
  var _CompileValueConverter = function(_super) {
    function _CompileValueConverter() {
      _super.apply(this, arguments);
    }
    return __extends(_CompileValueConverter, _super), _CompileValueConverter.prototype.visitOther = function(value, context) {
      return new CompileIdentifierMetadata(isStaticType(value) ? {
        name: value.name,
        moduleUrl: staticTypeModuleUrl(value)
      } : {runtime: value});
    }, _CompileValueConverter;
  }(ValueTransformer),
      _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g,
      CATCH_ERROR_VAR$1 = variable("error"),
      CATCH_STACK_VAR$1 = variable("stack"),
      _EmittedLine = function() {
        function _EmittedLine(indent) {
          this.indent = indent, this.parts = [];
        }
        return _EmittedLine;
      }(),
      EmitterVisitorContext = function() {
        function EmitterVisitorContext(_exportedVars, _indent) {
          this._exportedVars = _exportedVars, this._indent = _indent, this._classes = [], this._lines = [new _EmittedLine(_indent)];
        }
        return EmitterVisitorContext.createRoot = function(exportedVars) {
          return new EmitterVisitorContext(exportedVars, 0);
        }, Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
          get: function() {
            return this._lines[this._lines.length - 1];
          },
          enumerable: !0,
          configurable: !0
        }), EmitterVisitorContext.prototype.isExportedVar = function(varName) {
          return this._exportedVars.indexOf(varName) !== -1;
        }, EmitterVisitorContext.prototype.println = function(lastPart) {
          void 0 === lastPart && (lastPart = ""), this.print(lastPart, !0);
        }, EmitterVisitorContext.prototype.lineIsEmpty = function() {
          return 0 === this._currentLine.parts.length;
        }, EmitterVisitorContext.prototype.print = function(part, newLine) {
          void 0 === newLine && (newLine = !1), part.length > 0 && this._currentLine.parts.push(part), newLine && this._lines.push(new _EmittedLine(this._indent));
        }, EmitterVisitorContext.prototype.removeEmptyLastLine = function() {
          this.lineIsEmpty() && this._lines.pop();
        }, EmitterVisitorContext.prototype.incIndent = function() {
          this._indent++, this._currentLine.indent = this._indent;
        }, EmitterVisitorContext.prototype.decIndent = function() {
          this._indent--, this._currentLine.indent = this._indent;
        }, EmitterVisitorContext.prototype.pushClass = function(clazz) {
          this._classes.push(clazz);
        }, EmitterVisitorContext.prototype.popClass = function() {
          return this._classes.pop();
        }, Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
          get: function() {
            return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
          },
          enumerable: !0,
          configurable: !0
        }), EmitterVisitorContext.prototype.toSource = function() {
          var lines = this._lines;
          return 0 === lines[lines.length - 1].parts.length && (lines = lines.slice(0, lines.length - 1)), lines.map(function(line) {
            return line.parts.length > 0 ? _createIndent(line.indent) + line.parts.join("") : "";
          }).join("\n");
        }, EmitterVisitorContext;
      }(),
      AbstractEmitterVisitor = function() {
        function AbstractEmitterVisitor(_escapeDollarInStrings) {
          this._escapeDollarInStrings = _escapeDollarInStrings;
        }
        return AbstractEmitterVisitor.prototype.visitExpressionStmt = function(stmt, ctx) {
          return stmt.expr.visitExpression(this, ctx), ctx.println(";"), null;
        }, AbstractEmitterVisitor.prototype.visitReturnStmt = function(stmt, ctx) {
          return ctx.print("return "), stmt.value.visitExpression(this, ctx), ctx.println(";"), null;
        }, AbstractEmitterVisitor.prototype.visitIfStmt = function(stmt, ctx) {
          ctx.print("if ("), stmt.condition.visitExpression(this, ctx), ctx.print(") {");
          var hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
          return stmt.trueCase.length <= 1 && !hasElseCase ? (ctx.print(" "), this.visitAllStatements(stmt.trueCase, ctx), ctx.removeEmptyLastLine(), ctx.print(" ")) : (ctx.println(), ctx.incIndent(), this.visitAllStatements(stmt.trueCase, ctx), ctx.decIndent(), hasElseCase && (ctx.println("} else {"), ctx.incIndent(), this.visitAllStatements(stmt.falseCase, ctx), ctx.decIndent())), ctx.println("}"), null;
        }, AbstractEmitterVisitor.prototype.visitThrowStmt = function(stmt, ctx) {
          return ctx.print("throw "), stmt.error.visitExpression(this, ctx), ctx.println(";"), null;
        }, AbstractEmitterVisitor.prototype.visitCommentStmt = function(stmt, ctx) {
          var lines = stmt.comment.split("\n");
          return lines.forEach(function(line) {
            ctx.println("// " + line);
          }), null;
        }, AbstractEmitterVisitor.prototype.visitWriteVarExpr = function(expr, ctx) {
          var lineWasEmpty = ctx.lineIsEmpty();
          return lineWasEmpty || ctx.print("("), ctx.print(expr.name + " = "), expr.value.visitExpression(this, ctx), lineWasEmpty || ctx.print(")"), null;
        }, AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function(expr, ctx) {
          var lineWasEmpty = ctx.lineIsEmpty();
          return lineWasEmpty || ctx.print("("), expr.receiver.visitExpression(this, ctx), ctx.print("["), expr.index.visitExpression(this, ctx), ctx.print("] = "), expr.value.visitExpression(this, ctx), lineWasEmpty || ctx.print(")"), null;
        }, AbstractEmitterVisitor.prototype.visitWritePropExpr = function(expr, ctx) {
          var lineWasEmpty = ctx.lineIsEmpty();
          return lineWasEmpty || ctx.print("("), expr.receiver.visitExpression(this, ctx), ctx.print("." + expr.name + " = "), expr.value.visitExpression(this, ctx), lineWasEmpty || ctx.print(")"), null;
        }, AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function(expr, ctx) {
          expr.receiver.visitExpression(this, ctx);
          var name = expr.name;
          return isPresent(expr.builtin) && (name = this.getBuiltinMethodName(expr.builtin), isBlank(name)) ? null : (ctx.print("." + name + "("), this.visitAllExpressions(expr.args, ctx, ","), ctx.print(")"), null);
        }, AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
          return expr.fn.visitExpression(this, ctx), ctx.print("("), this.visitAllExpressions(expr.args, ctx, ","), ctx.print(")"), null;
        }, AbstractEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
          var varName = ast.name;
          if (isPresent(ast.builtin))
            switch (ast.builtin) {
              case BuiltinVar.Super:
                varName = "super";
                break;
              case BuiltinVar.This:
                varName = "this";
                break;
              case BuiltinVar.CatchError:
                varName = CATCH_ERROR_VAR$1.name;
                break;
              case BuiltinVar.CatchStack:
                varName = CATCH_STACK_VAR$1.name;
                break;
              default:
                throw new BaseException$1("Unknown builtin variable " + ast.builtin);
            }
          return ctx.print(varName), null;
        }, AbstractEmitterVisitor.prototype.visitInstantiateExpr = function(ast, ctx) {
          return ctx.print("new "), ast.classExpr.visitExpression(this, ctx), ctx.print("("), this.visitAllExpressions(ast.args, ctx, ","), ctx.print(")"), null;
        }, AbstractEmitterVisitor.prototype.visitLiteralExpr = function(ast, ctx) {
          var value = ast.value;
          return isString(value) ? ctx.print(escapeSingleQuoteString(value, this._escapeDollarInStrings)) : isBlank(value) ? ctx.print("null") : ctx.print("" + value), null;
        }, AbstractEmitterVisitor.prototype.visitConditionalExpr = function(ast, ctx) {
          return ctx.print("("), ast.condition.visitExpression(this, ctx), ctx.print("? "), ast.trueCase.visitExpression(this, ctx), ctx.print(": "), ast.falseCase.visitExpression(this, ctx), ctx.print(")"), null;
        }, AbstractEmitterVisitor.prototype.visitNotExpr = function(ast, ctx) {
          return ctx.print("!"), ast.condition.visitExpression(this, ctx), null;
        }, AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
          var opStr;
          switch (ast.operator) {
            case BinaryOperator.Equals:
              opStr = "==";
              break;
            case BinaryOperator.Identical:
              opStr = "===";
              break;
            case BinaryOperator.NotEquals:
              opStr = "!=";
              break;
            case BinaryOperator.NotIdentical:
              opStr = "!==";
              break;
            case BinaryOperator.And:
              opStr = "&&";
              break;
            case BinaryOperator.Or:
              opStr = "||";
              break;
            case BinaryOperator.Plus:
              opStr = "+";
              break;
            case BinaryOperator.Minus:
              opStr = "-";
              break;
            case BinaryOperator.Divide:
              opStr = "/";
              break;
            case BinaryOperator.Multiply:
              opStr = "*";
              break;
            case BinaryOperator.Modulo:
              opStr = "%";
              break;
            case BinaryOperator.Lower:
              opStr = "<";
              break;
            case BinaryOperator.LowerEquals:
              opStr = "<=";
              break;
            case BinaryOperator.Bigger:
              opStr = ">";
              break;
            case BinaryOperator.BiggerEquals:
              opStr = ">=";
              break;
            default:
              throw new BaseException$1("Unknown operator " + ast.operator);
          }
          return ctx.print("("), ast.lhs.visitExpression(this, ctx), ctx.print(" " + opStr + " "), ast.rhs.visitExpression(this, ctx), ctx.print(")"), null;
        }, AbstractEmitterVisitor.prototype.visitReadPropExpr = function(ast, ctx) {
          return ast.receiver.visitExpression(this, ctx), ctx.print("."), ctx.print(ast.name), null;
        }, AbstractEmitterVisitor.prototype.visitReadKeyExpr = function(ast, ctx) {
          return ast.receiver.visitExpression(this, ctx), ctx.print("["), ast.index.visitExpression(this, ctx), ctx.print("]"), null;
        }, AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
          var useNewLine = ast.entries.length > 1;
          return ctx.print("[", useNewLine), ctx.incIndent(), this.visitAllExpressions(ast.entries, ctx, ",", useNewLine), ctx.decIndent(), ctx.print("]", useNewLine), null;
        }, AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function(ast, ctx) {
          var _this = this,
              useNewLine = ast.entries.length > 1;
          return ctx.print("{", useNewLine), ctx.incIndent(), this.visitAllObjects(function(entry) {
            ctx.print(escapeSingleQuoteString(entry[0], _this._escapeDollarInStrings) + ": "), entry[1].visitExpression(_this, ctx);
          }, ast.entries, ctx, ",", useNewLine), ctx.decIndent(), ctx.print("}", useNewLine), null;
        }, AbstractEmitterVisitor.prototype.visitAllExpressions = function(expressions, ctx, separator, newLine) {
          var _this = this;
          void 0 === newLine && (newLine = !1), this.visitAllObjects(function(expr) {
            return expr.visitExpression(_this, ctx);
          }, expressions, ctx, separator, newLine);
        }, AbstractEmitterVisitor.prototype.visitAllObjects = function(handler, expressions, ctx, separator, newLine) {
          void 0 === newLine && (newLine = !1);
          for (var i = 0; i < expressions.length; i++)
            i > 0 && ctx.print(separator, newLine), handler(expressions[i]);
          newLine && ctx.println();
        }, AbstractEmitterVisitor.prototype.visitAllStatements = function(statements, ctx) {
          var _this = this;
          statements.forEach(function(stmt) {
            return stmt.visitStatement(_this, ctx);
          });
        }, AbstractEmitterVisitor;
      }(),
      AbstractJsEmitterVisitor = function(_super) {
        function AbstractJsEmitterVisitor() {
          _super.call(this, !1);
        }
        return __extends(AbstractJsEmitterVisitor, _super), AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
          var _this = this;
          return ctx.pushClass(stmt), this._visitClassConstructor(stmt, ctx), isPresent(stmt.parent) && (ctx.print(stmt.name + ".prototype = Object.create("), stmt.parent.visitExpression(this, ctx), ctx.println(".prototype);")), stmt.getters.forEach(function(getter) {
            return _this._visitClassGetter(stmt, getter, ctx);
          }), stmt.methods.forEach(function(method) {
            return _this._visitClassMethod(stmt, method, ctx);
          }), ctx.popClass(), null;
        }, AbstractJsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
          ctx.print("function " + stmt.name + "("), isPresent(stmt.constructorMethod) && this._visitParams(stmt.constructorMethod.params, ctx), ctx.println(") {"), ctx.incIndent(), isPresent(stmt.constructorMethod) && stmt.constructorMethod.body.length > 0 && (ctx.println("var self = this;"), this.visitAllStatements(stmt.constructorMethod.body, ctx)), ctx.decIndent(), ctx.println("}");
        }, AbstractJsEmitterVisitor.prototype._visitClassGetter = function(stmt, getter, ctx) {
          ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {"), ctx.incIndent(), getter.body.length > 0 && (ctx.println("var self = this;"), this.visitAllStatements(getter.body, ctx)), ctx.decIndent(), ctx.println("}});");
        }, AbstractJsEmitterVisitor.prototype._visitClassMethod = function(stmt, method, ctx) {
          ctx.print(stmt.name + ".prototype." + method.name + " = function("), this._visitParams(method.params, ctx), ctx.println(") {"), ctx.incIndent(), method.body.length > 0 && (ctx.println("var self = this;"), this.visitAllStatements(method.body, ctx)), ctx.decIndent(), ctx.println("};");
        }, AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
          if (ast.builtin === BuiltinVar.This)
            ctx.print("self");
          else {
            if (ast.builtin === BuiltinVar.Super)
              throw new BaseException$1("'super' needs to be handled at a parent ast node, not at the variable level!");
            _super.prototype.visitReadVarExpr.call(this, ast, ctx);
          }
          return null;
        }, AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
          return ctx.print("var " + stmt.name + " = "), stmt.value.visitExpression(this, ctx), ctx.println(";"), null;
        }, AbstractJsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
          return ast.value.visitExpression(this, ctx), null;
        }, AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
          var fnExpr = expr.fn;
          return fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super ? (ctx.currentClass.parent.visitExpression(this, ctx), ctx.print(".call(this"), expr.args.length > 0 && (ctx.print(", "), this.visitAllExpressions(expr.args, ctx, ",")), ctx.print(")")) : _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx), null;
        }, AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
          return ctx.print("function("), this._visitParams(ast.params, ctx), ctx.println(") {"), ctx.incIndent(), this.visitAllStatements(ast.statements, ctx), ctx.decIndent(), ctx.print("}"), null;
        }, AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
          return ctx.print("function " + stmt.name + "("), this._visitParams(stmt.params, ctx), ctx.println(") {"), ctx.incIndent(), this.visitAllStatements(stmt.statements, ctx), ctx.decIndent(), ctx.println("}"), null;
        }, AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
          ctx.println("try {"), ctx.incIndent(), this.visitAllStatements(stmt.bodyStmts, ctx), ctx.decIndent(), ctx.println("} catch (" + CATCH_ERROR_VAR$1.name + ") {"), ctx.incIndent();
          var catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop("stack")).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);
          return this.visitAllStatements(catchStmts, ctx), ctx.decIndent(), ctx.println("}"), null;
        }, AbstractJsEmitterVisitor.prototype._visitParams = function(params, ctx) {
          this.visitAllObjects(function(param) {
            return ctx.print(param.name);
          }, params, ctx, ",");
        }, AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
          var name;
          switch (method) {
            case BuiltinMethod.ConcatArray:
              name = "concat";
              break;
            case BuiltinMethod.SubscribeObservable:
              name = "subscribe";
              break;
            case BuiltinMethod.bind:
              name = "bind";
              break;
            default:
              throw new BaseException$1("Unknown builtin method: " + method);
          }
          return name;
        }, AbstractJsEmitterVisitor;
      }(AbstractEmitterVisitor),
      JitEmitterVisitor = function(_super) {
        function JitEmitterVisitor() {
          for (var args = [],
              _i = 0; _i < arguments.length; _i++)
            args[_i - 0] = arguments[_i];
          _super.apply(this, args), this._evalArgNames = [], this._evalArgValues = [];
        }
        return __extends(JitEmitterVisitor, _super), JitEmitterVisitor.prototype.getArgs = function() {
          for (var result = {},
              i = 0; i < this._evalArgNames.length; i++)
            result[this._evalArgNames[i]] = this._evalArgValues[i];
          return result;
        }, JitEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
          var value = ast.value.runtime,
              id = this._evalArgValues.indexOf(value);
          if (id === -1) {
            id = this._evalArgValues.length, this._evalArgValues.push(value);
            var name = isPresent(ast.value.name) ? sanitizeIdentifier(ast.value.name) : "val";
            this._evalArgNames.push(sanitizeIdentifier("jit_" + name + id));
          }
          return ctx.print(this._evalArgNames[id]), null;
        }, JitEmitterVisitor;
      }(AbstractJsEmitterVisitor),
      _debugModuleUrl = "asset://debug/lib",
      _DartEmitterVisitor = function(_super) {
        function _DartEmitterVisitor(_moduleUrl) {
          _super.call(this, !0), this._moduleUrl = _moduleUrl, this.importsWithPrefixes = new Map;
        }
        return __extends(_DartEmitterVisitor, _super), _DartEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
          return this._visitIdentifier(ast.value, ast.typeParams, ctx), null;
        }, _DartEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
          return stmt.hasModifier(StmtModifier.Final) ? isConstType(stmt.type) ? ctx.print("const ") : ctx.print("final ") : isBlank(stmt.type) && ctx.print("var "), isPresent(stmt.type) && (stmt.type.visitType(this, ctx), ctx.print(" ")), ctx.print(stmt.name + " = "), stmt.value.visitExpression(this, ctx), ctx.println(";"), null;
        }, _DartEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
          return ctx.print("("), ast.value.visitExpression(this, ctx), ctx.print(" as "), ast.type.visitType(this, ctx), ctx.print(")"), null;
        }, _DartEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
          var _this = this;
          return ctx.pushClass(stmt), ctx.print("class " + stmt.name), isPresent(stmt.parent) && (ctx.print(" extends "), stmt.parent.visitExpression(this, ctx)), ctx.println(" {"), ctx.incIndent(), stmt.fields.forEach(function(field) {
            return _this._visitClassField(field, ctx);
          }), isPresent(stmt.constructorMethod) && this._visitClassConstructor(stmt, ctx), stmt.getters.forEach(function(getter) {
            return _this._visitClassGetter(getter, ctx);
          }), stmt.methods.forEach(function(method) {
            return _this._visitClassMethod(method, ctx);
          }), ctx.decIndent(), ctx.println("}"), ctx.popClass(), null;
        }, _DartEmitterVisitor.prototype._visitClassField = function(field, ctx) {
          field.hasModifier(StmtModifier.Final) ? ctx.print("final ") : isBlank(field.type) && ctx.print("var "), isPresent(field.type) && (field.type.visitType(this, ctx), ctx.print(" ")), ctx.println(field.name + ";");
        }, _DartEmitterVisitor.prototype._visitClassGetter = function(getter, ctx) {
          isPresent(getter.type) && (getter.type.visitType(this, ctx), ctx.print(" ")), ctx.println("get " + getter.name + " {"), ctx.incIndent(), this.visitAllStatements(getter.body, ctx), ctx.decIndent(), ctx.println("}");
        }, _DartEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
          ctx.print(stmt.name + "("), this._visitParams(stmt.constructorMethod.params, ctx), ctx.print(")");
          var ctorStmts = stmt.constructorMethod.body,
              superCtorExpr = ctorStmts.length > 0 ? getSuperConstructorCallExpr(ctorStmts[0]) : null;
          isPresent(superCtorExpr) && (ctx.print(": "), superCtorExpr.visitExpression(this, ctx), ctorStmts = ctorStmts.slice(1)), ctx.println(" {"), ctx.incIndent(), this.visitAllStatements(ctorStmts, ctx), ctx.decIndent(), ctx.println("}");
        }, _DartEmitterVisitor.prototype._visitClassMethod = function(method, ctx) {
          isPresent(method.type) ? method.type.visitType(this, ctx) : ctx.print("void"), ctx.print(" " + method.name + "("), this._visitParams(method.params, ctx), ctx.println(") {"), ctx.incIndent(), this.visitAllStatements(method.body, ctx), ctx.decIndent(), ctx.println("}");
        }, _DartEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
          return ctx.print("("), this._visitParams(ast.params, ctx), ctx.println(") {"), ctx.incIndent(), this.visitAllStatements(ast.statements, ctx), ctx.decIndent(), ctx.print("}"), null;
        }, _DartEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
          return isPresent(stmt.type) ? stmt.type.visitType(this, ctx) : ctx.print("void"), ctx.print(" " + stmt.name + "("), this._visitParams(stmt.params, ctx), ctx.println(") {"), ctx.incIndent(), this.visitAllStatements(stmt.statements, ctx), ctx.decIndent(), ctx.println("}"), null;
        }, _DartEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
          var name;
          switch (method) {
            case BuiltinMethod.ConcatArray:
              name = ".addAll";
              break;
            case BuiltinMethod.SubscribeObservable:
              name = "listen";
              break;
            case BuiltinMethod.bind:
              name = null;
              break;
            default:
              throw new BaseException$1("Unknown builtin method: " + method);
          }
          return name;
        }, _DartEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
          return ctx.println("try {"), ctx.incIndent(), this.visitAllStatements(stmt.bodyStmts, ctx), ctx.decIndent(), ctx.println("} catch (" + CATCH_ERROR_VAR$1.name + ", " + CATCH_STACK_VAR$1.name + ") {"), ctx.incIndent(), this.visitAllStatements(stmt.catchStmts, ctx), ctx.decIndent(), ctx.println("}"), null;
        }, _DartEmitterVisitor.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
          switch (ast.operator) {
            case BinaryOperator.Identical:
              ctx.print("identical("), ast.lhs.visitExpression(this, ctx), ctx.print(", "), ast.rhs.visitExpression(this, ctx), ctx.print(")");
              break;
            case BinaryOperator.NotIdentical:
              ctx.print("!identical("), ast.lhs.visitExpression(this, ctx), ctx.print(", "), ast.rhs.visitExpression(this, ctx), ctx.print(")");
              break;
            default:
              _super.prototype.visitBinaryOperatorExpr.call(this, ast, ctx);
          }
          return null;
        }, _DartEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
          return isConstType(ast.type) && ctx.print("const "), _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
        }, _DartEmitterVisitor.prototype.visitLiteralMapExpr = function(ast, ctx) {
          return isConstType(ast.type) && ctx.print("const "), isPresent(ast.valueType) && (ctx.print("<String, "), ast.valueType.visitType(this, ctx), ctx.print(">")), _super.prototype.visitLiteralMapExpr.call(this, ast, ctx);
        }, _DartEmitterVisitor.prototype.visitInstantiateExpr = function(ast, ctx) {
          return ctx.print(isConstType(ast.type) ? "const" : "new"), ctx.print(" "), ast.classExpr.visitExpression(this, ctx), ctx.print("("), this.visitAllExpressions(ast.args, ctx, ","), ctx.print(")"), null;
        }, _DartEmitterVisitor.prototype.visitBuiltintType = function(type, ctx) {
          var typeStr;
          switch (type.name) {
            case BuiltinTypeName.Bool:
              typeStr = "bool";
              break;
            case BuiltinTypeName.Dynamic:
              typeStr = "dynamic";
              break;
            case BuiltinTypeName.Function:
              typeStr = "Function";
              break;
            case BuiltinTypeName.Number:
              typeStr = "num";
              break;
            case BuiltinTypeName.Int:
              typeStr = "int";
              break;
            case BuiltinTypeName.String:
              typeStr = "String";
              break;
            default:
              throw new BaseException$1("Unsupported builtin type " + type.name);
          }
          return ctx.print(typeStr), null;
        }, _DartEmitterVisitor.prototype.visitExternalType = function(ast, ctx) {
          return this._visitIdentifier(ast.value, ast.typeParams, ctx), null;
        }, _DartEmitterVisitor.prototype.visitArrayType = function(type, ctx) {
          return ctx.print("List<"), isPresent(type.of) ? type.of.visitType(this, ctx) : ctx.print("dynamic"), ctx.print(">"), null;
        }, _DartEmitterVisitor.prototype.visitMapType = function(type, ctx) {
          return ctx.print("Map<String, "), isPresent(type.valueType) ? type.valueType.visitType(this, ctx) : ctx.print("dynamic"), ctx.print(">"), null;
        }, _DartEmitterVisitor.prototype._visitParams = function(params, ctx) {
          var _this = this;
          this.visitAllObjects(function(param) {
            isPresent(param.type) && (param.type.visitType(_this, ctx), ctx.print(" ")), ctx.print(param.name);
          }, params, ctx, ",");
        }, _DartEmitterVisitor.prototype._visitIdentifier = function(value, typeParams, ctx) {
          var _this = this;
          if (isBlank(value.name))
            throw new BaseException$1("Internal error: unknown identifier " + value);
          if (isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {
            var prefix = this.importsWithPrefixes.get(value.moduleUrl);
            isBlank(prefix) && (prefix = "import" + this.importsWithPrefixes.size, this.importsWithPrefixes.set(value.moduleUrl, prefix)), ctx.print(prefix + ".");
          }
          ctx.print(value.name), isPresent(typeParams) && typeParams.length > 0 && (ctx.print("<"), this.visitAllObjects(function(type) {
            return type.visitType(_this, ctx);
          }, typeParams, ctx, ","), ctx.print(">"));
        }, _DartEmitterVisitor;
      }(AbstractEmitterVisitor),
      _debugModuleUrl$1 = "asset://debug/lib",
      TypeScriptEmitter = function() {
        function TypeScriptEmitter(_importGenerator) {
          this._importGenerator = _importGenerator;
        }
        return TypeScriptEmitter.prototype.emitStatements = function(moduleUrl, stmts, exportedVars) {
          var _this = this,
              converter = new _TsEmitterVisitor(moduleUrl),
              ctx = EmitterVisitorContext.createRoot(exportedVars);
          converter.visitAllStatements(stmts, ctx);
          var srcParts = [];
          return converter.importsWithPrefixes.forEach(function(prefix, importedModuleUrl) {
            srcParts.push("imp" + ("ort * as " + prefix + " from '" + _this._importGenerator.getImportPath(moduleUrl, importedModuleUrl) + "';"));
          }), srcParts.push(ctx.toSource()), srcParts.join("\n");
        }, TypeScriptEmitter;
      }(),
      _TsEmitterVisitor = function(_super) {
        function _TsEmitterVisitor(_moduleUrl) {
          _super.call(this, !1), this._moduleUrl = _moduleUrl, this.importsWithPrefixes = new Map;
        }
        return __extends(_TsEmitterVisitor, _super), _TsEmitterVisitor.prototype.visitType = function(t, ctx, defaultType) {
          void 0 === defaultType && (defaultType = "any"), isPresent(t) ? t.visitType(this, ctx) : ctx.print(defaultType);
        }, _TsEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
          return this._visitIdentifier(ast.value, ast.typeParams, ctx), null;
        }, _TsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
          return ctx.isExportedVar(stmt.name) && ctx.print("export "), stmt.hasModifier(StmtModifier.Final) ? ctx.print("const") : ctx.print("var"), ctx.print(" " + stmt.name + ":"), this.visitType(stmt.type, ctx), ctx.print(" = "), stmt.value.visitExpression(this, ctx), ctx.println(";"), null;
        }, _TsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
          return ctx.print("(<"), ast.type.visitType(this, ctx), ctx.print(">"), ast.value.visitExpression(this, ctx), ctx.print(")"), null;
        }, _TsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
          var _this = this;
          return ctx.pushClass(stmt), ctx.isExportedVar(stmt.name) && ctx.print("export "), ctx.print("class " + stmt.name), isPresent(stmt.parent) && (ctx.print(" extends "), stmt.parent.visitExpression(this, ctx)), ctx.println(" {"), ctx.incIndent(), stmt.fields.forEach(function(field) {
            return _this._visitClassField(field, ctx);
          }), isPresent(stmt.constructorMethod) && this._visitClassConstructor(stmt, ctx), stmt.getters.forEach(function(getter) {
            return _this._visitClassGetter(getter, ctx);
          }), stmt.methods.forEach(function(method) {
            return _this._visitClassMethod(method, ctx);
          }), ctx.decIndent(), ctx.println("}"), ctx.popClass(), null;
        }, _TsEmitterVisitor.prototype._visitClassField = function(field, ctx) {
          field.hasModifier(StmtModifier.Private) && ctx.print("private "), ctx.print(field.name), ctx.print(":"), this.visitType(field.type, ctx), ctx.println(";");
        }, _TsEmitterVisitor.prototype._visitClassGetter = function(getter, ctx) {
          getter.hasModifier(StmtModifier.Private) && ctx.print("private "), ctx.print("get " + getter.name + "()"), ctx.print(":"), this.visitType(getter.type, ctx), ctx.println(" {"), ctx.incIndent(), this.visitAllStatements(getter.body, ctx), ctx.decIndent(), ctx.println("}");
        }, _TsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
          ctx.print("constructor("), this._visitParams(stmt.constructorMethod.params, ctx), ctx.println(") {"), ctx.incIndent(), this.visitAllStatements(stmt.constructorMethod.body, ctx), ctx.decIndent(), ctx.println("}");
        }, _TsEmitterVisitor.prototype._visitClassMethod = function(method, ctx) {
          method.hasModifier(StmtModifier.Private) && ctx.print("private "), ctx.print(method.name + "("), this._visitParams(method.params, ctx), ctx.print("):"), this.visitType(method.type, ctx, "void"), ctx.println(" {"), ctx.incIndent(), this.visitAllStatements(method.body, ctx), ctx.decIndent(), ctx.println("}");
        }, _TsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
          return ctx.print("("), this._visitParams(ast.params, ctx), ctx.print("):"), this.visitType(ast.type, ctx, "void"), ctx.println(" => {"), ctx.incIndent(), this.visitAllStatements(ast.statements, ctx), ctx.decIndent(), ctx.print("}"), null;
        }, _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
          return ctx.isExportedVar(stmt.name) && ctx.print("export "), ctx.print("function " + stmt.name + "("), this._visitParams(stmt.params, ctx), ctx.print("):"), this.visitType(stmt.type, ctx, "void"), ctx.println(" {"), ctx.incIndent(), this.visitAllStatements(stmt.statements, ctx), ctx.decIndent(), ctx.println("}"), null;
        }, _TsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
          ctx.println("try {"), ctx.incIndent(), this.visitAllStatements(stmt.bodyStmts, ctx), ctx.decIndent(), ctx.println("} catch (" + CATCH_ERROR_VAR$1.name + ") {"), ctx.incIndent();
          var catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop("stack")).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);
          return this.visitAllStatements(catchStmts, ctx), ctx.decIndent(), ctx.println("}"), null;
        }, _TsEmitterVisitor.prototype.visitBuiltintType = function(type, ctx) {
          var typeStr;
          switch (type.name) {
            case BuiltinTypeName.Bool:
              typeStr = "boolean";
              break;
            case BuiltinTypeName.Dynamic:
              typeStr = "any";
              break;
            case BuiltinTypeName.Function:
              typeStr = "Function";
              break;
            case BuiltinTypeName.Number:
              typeStr = "number";
              break;
            case BuiltinTypeName.Int:
              typeStr = "number";
              break;
            case BuiltinTypeName.String:
              typeStr = "string";
              break;
            default:
              throw new BaseException$1("Unsupported builtin type " + type.name);
          }
          return ctx.print(typeStr), null;
        }, _TsEmitterVisitor.prototype.visitExternalType = function(ast, ctx) {
          return this._visitIdentifier(ast.value, ast.typeParams, ctx), null;
        }, _TsEmitterVisitor.prototype.visitArrayType = function(type, ctx) {
          return this.visitType(type.of, ctx), ctx.print("[]"), null;
        }, _TsEmitterVisitor.prototype.visitMapType = function(type, ctx) {
          return ctx.print("{[key: string]:"), this.visitType(type.valueType, ctx), ctx.print("}"), null;
        }, _TsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
          var name;
          switch (method) {
            case BuiltinMethod.ConcatArray:
              name = "concat";
              break;
            case BuiltinMethod.SubscribeObservable:
              name = "subscribe";
              break;
            case BuiltinMethod.bind:
              name = "bind";
              break;
            default:
              throw new BaseException$1("Unknown builtin method: " + method);
          }
          return name;
        }, _TsEmitterVisitor.prototype._visitParams = function(params, ctx) {
          var _this = this;
          this.visitAllObjects(function(param) {
            ctx.print(param.name), ctx.print(":"), _this.visitType(param.type, ctx);
          }, params, ctx, ",");
        }, _TsEmitterVisitor.prototype._visitIdentifier = function(value, typeParams, ctx) {
          var _this = this;
          if (isBlank(value.name))
            throw new BaseException$1("Internal error: unknown identifier " + value);
          if (isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {
            var prefix = this.importsWithPrefixes.get(value.moduleUrl);
            isBlank(prefix) && (prefix = "import" + this.importsWithPrefixes.size, this.importsWithPrefixes.set(value.moduleUrl, prefix)), ctx.print(prefix + ".");
          }
          ctx.print(value.name), isPresent(typeParams) && typeParams.length > 0 && (ctx.print("<"), this.visitAllObjects(function(type) {
            return type.visitType(_this, ctx);
          }, typeParams, ctx, ","), ctx.print(">"));
        }, _TsEmitterVisitor;
      }(AbstractEmitterVisitor),
      DynamicInstance = function() {
        function DynamicInstance() {}
        return Object.defineProperty(DynamicInstance.prototype, "props", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DynamicInstance.prototype, "getters", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DynamicInstance.prototype, "methods", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DynamicInstance.prototype, "clazz", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), DynamicInstance;
      }(),
      _ExecutionContext = function() {
        function _ExecutionContext(parent, superClass, superInstance, className, vars, props, getters, methods, instanceFactory) {
          this.parent = parent, this.superClass = superClass, this.superInstance = superInstance, this.className = className, this.vars = vars, this.props = props, this.getters = getters, this.methods = methods, this.instanceFactory = instanceFactory;
        }
        return _ExecutionContext.prototype.createChildWihtLocalVars = function() {
          return new _ExecutionContext(this, this.superClass, this.superInstance, this.className, new Map, this.props, this.getters, this.methods, this.instanceFactory);
        }, _ExecutionContext;
      }(),
      ReturnValue = function() {
        function ReturnValue(value) {
          this.value = value;
        }
        return ReturnValue;
      }(),
      _DynamicClass = function() {
        function _DynamicClass(_classStmt, _ctx, _visitor) {
          this._classStmt = _classStmt, this._ctx = _ctx, this._visitor = _visitor;
        }
        return _DynamicClass.prototype.instantiate = function(args) {
          var _this = this,
              props = new Map,
              getters = new Map,
              methods = new Map,
              superClass = this._classStmt.parent.visitExpression(this._visitor, this._ctx),
              instanceCtx = new _ExecutionContext(this._ctx, superClass, null, this._classStmt.name, this._ctx.vars, props, getters, methods, this._ctx.instanceFactory);
          this._classStmt.fields.forEach(function(field) {
            props.set(field.name, null);
          }), this._classStmt.getters.forEach(function(getter) {
            getters.set(getter.name, function() {
              return _executeFunctionStatements([], [], getter.body, instanceCtx, _this._visitor);
            });
          }), this._classStmt.methods.forEach(function(method) {
            var paramNames = method.params.map(function(param) {
              return param.name;
            });
            methods.set(method.name, _declareFn(paramNames, method.body, instanceCtx, _this._visitor));
          });
          var ctorParamNames = this._classStmt.constructorMethod.params.map(function(param) {
            return param.name;
          });
          return _executeFunctionStatements(ctorParamNames, args, this._classStmt.constructorMethod.body, instanceCtx, this._visitor), instanceCtx.superInstance;
        }, _DynamicClass.prototype.debugAst = function() {
          return this._visitor.debugAst(this._classStmt);
        }, _DynamicClass;
      }(),
      StatementInterpreter = function() {
        function StatementInterpreter() {}
        return StatementInterpreter.prototype.debugAst = function(ast) {
          return IS_DART ? debugOutputAstAsDart(ast) : debugOutputAstAsTypeScript(ast);
        }, StatementInterpreter.prototype.visitDeclareVarStmt = function(stmt, ctx) {
          return ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx)), null;
        }, StatementInterpreter.prototype.visitWriteVarExpr = function(expr, ctx) {
          for (var value = expr.value.visitExpression(this, ctx),
              currCtx = ctx; null != currCtx; ) {
            if (currCtx.vars.has(expr.name))
              return currCtx.vars.set(expr.name, value), value;
            currCtx = currCtx.parent;
          }
          throw new BaseException$1("Not declared variable " + expr.name);
        }, StatementInterpreter.prototype.visitReadVarExpr = function(ast, ctx) {
          var varName = ast.name;
          if (isPresent(ast.builtin))
            switch (ast.builtin) {
              case BuiltinVar.Super:
              case BuiltinVar.This:
                return ctx.superInstance;
              case BuiltinVar.CatchError:
                varName = CATCH_ERROR_VAR$2;
                break;
              case BuiltinVar.CatchStack:
                varName = CATCH_STACK_VAR$2;
                break;
              default:
                throw new BaseException$1("Unknown builtin variable " + ast.builtin);
            }
          for (var currCtx = ctx; null != currCtx; ) {
            if (currCtx.vars.has(varName))
              return currCtx.vars.get(varName);
            currCtx = currCtx.parent;
          }
          throw new BaseException$1("Not declared variable " + varName);
        }, StatementInterpreter.prototype.visitWriteKeyExpr = function(expr, ctx) {
          var receiver = expr.receiver.visitExpression(this, ctx),
              index = expr.index.visitExpression(this, ctx),
              value = expr.value.visitExpression(this, ctx);
          return receiver[index] = value, value;
        }, StatementInterpreter.prototype.visitWritePropExpr = function(expr, ctx) {
          var receiver = expr.receiver.visitExpression(this, ctx),
              value = expr.value.visitExpression(this, ctx);
          if (isDynamicInstance(receiver)) {
            var di = receiver;
            di.props.has(expr.name) ? di.props.set(expr.name, value) : reflector.setter(expr.name)(receiver, value);
          } else
            reflector.setter(expr.name)(receiver, value);
          return value;
        }, StatementInterpreter.prototype.visitInvokeMethodExpr = function(expr, ctx) {
          var result,
              receiver = expr.receiver.visitExpression(this, ctx),
              args = this.visitAllExpressions(expr.args, ctx);
          if (isPresent(expr.builtin))
            switch (expr.builtin) {
              case BuiltinMethod.ConcatArray:
                result = ListWrapper.concat(receiver, args[0]);
                break;
              case BuiltinMethod.SubscribeObservable:
                result = ObservableWrapper.subscribe(receiver, args[0]);
                break;
              case BuiltinMethod.bind:
                result = IS_DART ? receiver : receiver.bind(args[0]);
                break;
              default:
                throw new BaseException$1("Unknown builtin method " + expr.builtin);
            }
          else if (isDynamicInstance(receiver)) {
            var di = receiver;
            result = di.methods.has(expr.name) ? FunctionWrapper.apply(di.methods.get(expr.name), args) : reflector.method(expr.name)(receiver, args);
          } else
            result = reflector.method(expr.name)(receiver, args);
          return result;
        }, StatementInterpreter.prototype.visitInvokeFunctionExpr = function(stmt, ctx) {
          var args = this.visitAllExpressions(stmt.args, ctx),
              fnExpr = stmt.fn;
          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super)
            return ctx.superInstance = ctx.instanceFactory.createInstance(ctx.superClass, ctx.className, args, ctx.props, ctx.getters, ctx.methods), ctx.parent.superInstance = ctx.superInstance, null;
          var fn = stmt.fn.visitExpression(this, ctx);
          return FunctionWrapper.apply(fn, args);
        }, StatementInterpreter.prototype.visitReturnStmt = function(stmt, ctx) {
          return new ReturnValue(stmt.value.visitExpression(this, ctx));
        }, StatementInterpreter.prototype.visitDeclareClassStmt = function(stmt, ctx) {
          var clazz = new _DynamicClass(stmt, ctx, this);
          return ctx.vars.set(stmt.name, clazz), null;
        }, StatementInterpreter.prototype.visitExpressionStmt = function(stmt, ctx) {
          return stmt.expr.visitExpression(this, ctx);
        }, StatementInterpreter.prototype.visitIfStmt = function(stmt, ctx) {
          var condition = stmt.condition.visitExpression(this, ctx);
          return condition ? this.visitAllStatements(stmt.trueCase, ctx) : isPresent(stmt.falseCase) ? this.visitAllStatements(stmt.falseCase, ctx) : null;
        }, StatementInterpreter.prototype.visitTryCatchStmt = function(stmt, ctx) {
          try {
            return this.visitAllStatements(stmt.bodyStmts, ctx);
          } catch (e) {
            var childCtx = ctx.createChildWihtLocalVars();
            return childCtx.vars.set(CATCH_ERROR_VAR$2, e), childCtx.vars.set(CATCH_STACK_VAR$2, e.stack), this.visitAllStatements(stmt.catchStmts, childCtx);
          }
        }, StatementInterpreter.prototype.visitThrowStmt = function(stmt, ctx) {
          throw stmt.error.visitExpression(this, ctx);
        }, StatementInterpreter.prototype.visitCommentStmt = function(stmt, context) {
          return null;
        }, StatementInterpreter.prototype.visitInstantiateExpr = function(ast, ctx) {
          var args = this.visitAllExpressions(ast.args, ctx),
              clazz = ast.classExpr.visitExpression(this, ctx);
          return clazz instanceof _DynamicClass ? clazz.instantiate(args) : FunctionWrapper.apply(reflector.factory(clazz), args);
        }, StatementInterpreter.prototype.visitLiteralExpr = function(ast, ctx) {
          return ast.value;
        }, StatementInterpreter.prototype.visitExternalExpr = function(ast, ctx) {
          return ast.value.runtime;
        }, StatementInterpreter.prototype.visitConditionalExpr = function(ast, ctx) {
          return ast.condition.visitExpression(this, ctx) ? ast.trueCase.visitExpression(this, ctx) : isPresent(ast.falseCase) ? ast.falseCase.visitExpression(this, ctx) : null;
        }, StatementInterpreter.prototype.visitNotExpr = function(ast, ctx) {
          return !ast.condition.visitExpression(this, ctx);
        }, StatementInterpreter.prototype.visitCastExpr = function(ast, ctx) {
          return ast.value.visitExpression(this, ctx);
        }, StatementInterpreter.prototype.visitFunctionExpr = function(ast, ctx) {
          var paramNames = ast.params.map(function(param) {
            return param.name;
          });
          return _declareFn(paramNames, ast.statements, ctx, this);
        }, StatementInterpreter.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
          var paramNames = stmt.params.map(function(param) {
            return param.name;
          });
          return ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this)), null;
        }, StatementInterpreter.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
          var _this = this,
              lhs = function() {
                return ast.lhs.visitExpression(_this, ctx);
              },
              rhs = function() {
                return ast.rhs.visitExpression(_this, ctx);
              };
          switch (ast.operator) {
            case BinaryOperator.Equals:
              return lhs() == rhs();
            case BinaryOperator.Identical:
              return lhs() === rhs();
            case BinaryOperator.NotEquals:
              return lhs() != rhs();
            case BinaryOperator.NotIdentical:
              return lhs() !== rhs();
            case BinaryOperator.And:
              return lhs() && rhs();
            case BinaryOperator.Or:
              return lhs() || rhs();
            case BinaryOperator.Plus:
              return lhs() + rhs();
            case BinaryOperator.Minus:
              return lhs() - rhs();
            case BinaryOperator.Divide:
              return lhs() / rhs();
            case BinaryOperator.Multiply:
              return lhs() * rhs();
            case BinaryOperator.Modulo:
              return lhs() % rhs();
            case BinaryOperator.Lower:
              return lhs() < rhs();
            case BinaryOperator.LowerEquals:
              return lhs() <= rhs();
            case BinaryOperator.Bigger:
              return lhs() > rhs();
            case BinaryOperator.BiggerEquals:
              return lhs() >= rhs();
            default:
              throw new BaseException$1("Unknown operator " + ast.operator);
          }
        }, StatementInterpreter.prototype.visitReadPropExpr = function(ast, ctx) {
          var result,
              receiver = ast.receiver.visitExpression(this, ctx);
          if (isDynamicInstance(receiver)) {
            var di = receiver;
            result = di.props.has(ast.name) ? di.props.get(ast.name) : di.getters.has(ast.name) ? di.getters.get(ast.name)() : di.methods.has(ast.name) ? di.methods.get(ast.name) : reflector.getter(ast.name)(receiver);
          } else
            result = reflector.getter(ast.name)(receiver);
          return result;
        }, StatementInterpreter.prototype.visitReadKeyExpr = function(ast, ctx) {
          var receiver = ast.receiver.visitExpression(this, ctx),
              prop = ast.index.visitExpression(this, ctx);
          return receiver[prop];
        }, StatementInterpreter.prototype.visitLiteralArrayExpr = function(ast, ctx) {
          return this.visitAllExpressions(ast.entries, ctx);
        }, StatementInterpreter.prototype.visitLiteralMapExpr = function(ast, ctx) {
          var _this = this,
              result = {};
          return ast.entries.forEach(function(entry) {
            return result[entry[0]] = entry[1].visitExpression(_this, ctx);
          }), result;
        }, StatementInterpreter.prototype.visitAllExpressions = function(expressions, ctx) {
          var _this = this;
          return expressions.map(function(expr) {
            return expr.visitExpression(_this, ctx);
          });
        }, StatementInterpreter.prototype.visitAllStatements = function(statements, ctx) {
          for (var i = 0; i < statements.length; i++) {
            var stmt = statements[i],
                val = stmt.visitStatement(this, ctx);
            if (val instanceof ReturnValue)
              return val;
          }
          return null;
        }, StatementInterpreter;
      }(),
      CATCH_ERROR_VAR$2 = "error",
      CATCH_STACK_VAR$2 = "stack",
      InterpretiveAppViewInstanceFactory = function() {
        function InterpretiveAppViewInstanceFactory() {}
        return InterpretiveAppViewInstanceFactory.prototype.createInstance = function(superClass, clazz, args, props, getters, methods) {
          if (superClass === AppView)
            return args = args.concat([null]), new _InterpretiveAppView(args, props, getters, methods);
          if (superClass === DebugAppView)
            return new _InterpretiveAppView(args, props, getters, methods);
          throw new BaseException$1("Can't instantiate class " + superClass + " in interpretative mode");
        }, InterpretiveAppViewInstanceFactory;
      }(),
      _InterpretiveAppView = function(_super) {
        function _InterpretiveAppView(args, props, getters, methods) {
          _super.call(this, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]), this.props = props, this.getters = getters, this.methods = methods;
        }
        return __extends(_InterpretiveAppView, _super), _InterpretiveAppView.prototype.createInternal = function(rootSelector) {
          var m = this.methods.get("createInternal");
          return isPresent(m) ? m(rootSelector) : _super.prototype.createInternal.call(this, rootSelector);
        }, _InterpretiveAppView.prototype.injectorGetInternal = function(token, nodeIndex, notFoundResult) {
          var m = this.methods.get("injectorGetInternal");
          return isPresent(m) ? m(token, nodeIndex, notFoundResult) : _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
        }, _InterpretiveAppView.prototype.detachInternal = function() {
          var m = this.methods.get("detachInternal");
          return isPresent(m) ? m() : _super.prototype.detachInternal.call(this);
        }, _InterpretiveAppView.prototype.destroyInternal = function() {
          var m = this.methods.get("destroyInternal");
          return isPresent(m) ? m() : _super.prototype.destroyInternal.call(this);
        }, _InterpretiveAppView.prototype.dirtyParentQueriesInternal = function() {
          var m = this.methods.get("dirtyParentQueriesInternal");
          return isPresent(m) ? m() : _super.prototype.dirtyParentQueriesInternal.call(this);
        }, _InterpretiveAppView.prototype.detectChangesInternal = function(throwOnChange) {
          var m = this.methods.get("detectChangesInternal");
          return isPresent(m) ? m(throwOnChange) : _super.prototype.detectChangesInternal.call(this, throwOnChange);
        }, _InterpretiveAppView;
      }(DebugAppView),
      RuntimeCompiler = function() {
        function RuntimeCompiler(_metadataResolver, _templateNormalizer, _templateParser, _styleCompiler, _viewCompiler, _genConfig) {
          this._metadataResolver = _metadataResolver, this._templateNormalizer = _templateNormalizer, this._templateParser = _templateParser, this._styleCompiler = _styleCompiler, this._viewCompiler = _viewCompiler, this._genConfig = _genConfig, this._compiledTemplateCache = new Map, this._compiledHostTemplateCache = new Map;
        }
        return RuntimeCompiler.prototype.resolveComponent = function(component) {
          return isString(component) ? PromiseWrapper.reject(new BaseException$1("Cannot resolve component using '" + component + "'."), null) : this.compileComponentAsync(component);
        }, RuntimeCompiler.prototype.compileComponentAsync = function(compType) {
          var _this = this,
              templates = this._getTransitiveCompiledTemplates(compType, !0),
              loadingPromises = [];
          return templates.forEach(function(template) {
            template.loading && loadingPromises.push(template.loading);
          }), Promise.all(loadingPromises).then(function() {
            return templates.forEach(function(template) {
              _this._compileTemplate(template);
            }), _this._getCompiledHostTemplate(compType).proxyComponentFactory;
          });
        }, RuntimeCompiler.prototype.compileComponentSync = function(compType) {
          var _this = this,
              templates = this._getTransitiveCompiledTemplates(compType, !0);
          return templates.forEach(function(template) {
            if (template.loading)
              throw new BaseException$1("Can't compile synchronously as " + template.compType.name + " is still being loaded!");
          }), templates.forEach(function(template) {
            _this._compileTemplate(template);
          }), this._getCompiledHostTemplate(compType).proxyComponentFactory;
        }, RuntimeCompiler.prototype.clearCacheFor = function(compType) {
          this._metadataResolver.clearCacheFor(compType), this._compiledHostTemplateCache.delete(compType);
          var compiledTemplate = this._compiledTemplateCache.get(compType);
          compiledTemplate && (this._templateNormalizer.clearCacheFor(compiledTemplate.normalizedCompMeta), this._compiledTemplateCache.delete(compType));
        }, RuntimeCompiler.prototype.clearCache = function() {
          this._metadataResolver.clearCache(), this._compiledTemplateCache.clear(), this._compiledHostTemplateCache.clear(), this._templateNormalizer.clearCache();
        }, RuntimeCompiler.prototype._getCompiledHostTemplate = function(type) {
          var compiledTemplate = this._compiledHostTemplateCache.get(type);
          if (isBlank(compiledTemplate)) {
            var compMeta = this._metadataResolver.getDirectiveMetadata(type);
            assertComponent(compMeta);
            var hostMeta = createHostComponentMeta(compMeta.type, compMeta.selector);
            compiledTemplate = new CompiledTemplate((!0), compMeta.selector, compMeta.type, [], [type], [], [], this._templateNormalizer.normalizeDirective(hostMeta)), this._compiledHostTemplateCache.set(type, compiledTemplate);
          }
          return compiledTemplate;
        }, RuntimeCompiler.prototype._getCompiledTemplate = function(type) {
          var compiledTemplate = this._compiledTemplateCache.get(type);
          if (isBlank(compiledTemplate)) {
            var compMeta = this._metadataResolver.getDirectiveMetadata(type);
            assertComponent(compMeta);
            var viewDirectives = [],
                viewComponentTypes = [];
            this._metadataResolver.getViewDirectivesMetadata(type).forEach(function(dirOrComp) {
              dirOrComp.isComponent ? viewComponentTypes.push(dirOrComp.type.runtime) : viewDirectives.push(dirOrComp);
            });
            var precompileComponentTypes = compMeta.precompile.map(function(typeMeta) {
              return typeMeta.runtime;
            }),
                pipes = this._metadataResolver.getViewPipesMetadata(type);
            compiledTemplate = new CompiledTemplate((!1), compMeta.selector, compMeta.type, viewDirectives, viewComponentTypes, precompileComponentTypes, pipes, this._templateNormalizer.normalizeDirective(compMeta)), this._compiledTemplateCache.set(type, compiledTemplate);
          }
          return compiledTemplate;
        }, RuntimeCompiler.prototype._getTransitiveCompiledTemplates = function(compType, isHost, target) {
          var _this = this;
          void 0 === target && (target = new Set);
          var template = isHost ? this._getCompiledHostTemplate(compType) : this._getCompiledTemplate(compType);
          return target.has(template) || (target.add(template), template.viewComponentTypes.forEach(function(compType) {
            _this._getTransitiveCompiledTemplates(compType, !1, target);
          }), template.precompileHostComponentTypes.forEach(function(compType) {
            _this._getTransitiveCompiledTemplates(compType, !0, target);
          })), target;
        }, RuntimeCompiler.prototype._compileTemplate = function(template) {
          var _this = this;
          if (!template.isCompiled) {
            var compMeta = template.normalizedCompMeta,
                externalStylesheetsByModuleUrl = new Map,
                stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
            stylesCompileResult.externalStylesheets.forEach(function(r) {
              externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r);
            }), this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
            var factory,
                viewCompMetas = template.viewComponentTypes.map(function(compType) {
                  return _this._getCompiledTemplate(compType).normalizedCompMeta;
                }),
                parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, template.viewDirectives.concat(viewCompMetas), template.viewPipes, compMeta.type.name),
                compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), template.viewPipes),
                statements = (compileResult.dependencies.map(function(dep) {
                  var depTemplate;
                  if (dep instanceof ViewFactoryDependency) {
                    var vfd = dep;
                    depTemplate = _this._getCompiledTemplate(vfd.comp.runtime), vfd.placeholder.runtime = depTemplate.proxyViewFactory, vfd.placeholder.name = "viewFactory_" + vfd.comp.name;
                  } else if (dep instanceof ComponentFactoryDependency) {
                    var cfd = dep;
                    depTemplate = _this._getCompiledHostTemplate(cfd.comp.runtime), cfd.placeholder.runtime = depTemplate.proxyComponentFactory, cfd.placeholder.name = "compFactory_" + cfd.comp.name;
                  }
                  return depTemplate;
                }), stylesCompileResult.componentStylesheet.statements.concat(compileResult.statements));
            factory = IS_DART || !this._genConfig.useJit ? interpretStatements(statements, compileResult.viewFactoryVar, new InterpretiveAppViewInstanceFactory) : jitStatements(template.compType.name + ".template.js", statements, compileResult.viewFactoryVar), template.compiled(factory);
          }
        }, RuntimeCompiler.prototype._resolveStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
          var _this = this;
          result.dependencies.forEach(function(dep, i) {
            var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl),
                nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
            dep.valuePlaceholder.runtime = nestedStylesArr, dep.valuePlaceholder.name = "importedStyles" + i;
          });
        }, RuntimeCompiler.prototype._resolveAndEvalStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
          return this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl), IS_DART || !this._genConfig.useJit ? interpretStatements(result.statements, result.stylesVar, new InterpretiveAppViewInstanceFactory) : jitStatements(result.meta.moduleUrl + ".css.js", result.statements, result.stylesVar);
        }, RuntimeCompiler;
      }();
  RuntimeCompiler.decorators = [{type: _angular_core.Injectable}], RuntimeCompiler.ctorParameters = [{type: CompileMetadataResolver}, {type: DirectiveNormalizer}, {type: TemplateParser}, {type: StyleCompiler}, {type: ViewCompiler}, {type: CompilerConfig}];
  var CompiledTemplate = function() {
    function CompiledTemplate(isHost, selector, compType, viewDirectives, viewComponentTypes, precompileHostComponentTypes, viewPipes, _normalizeResult) {
      var _this = this;
      this.isHost = isHost, this.compType = compType, this.viewDirectives = viewDirectives, this.viewComponentTypes = viewComponentTypes, this.precompileHostComponentTypes = precompileHostComponentTypes, this.viewPipes = viewPipes, this._normalizeResult = _normalizeResult, this._viewFactory = null, this.loading = null, this._normalizedCompMeta = null, this.isCompiled = !1, this.isCompiledWithDeps = !1, this.proxyViewFactory = function() {
        for (var args = [],
            _i = 0; _i < arguments.length; _i++)
          args[_i - 0] = arguments[_i];
        return _this._viewFactory.apply(null, args);
      }, this.proxyComponentFactory = isHost ? new _angular_core.ComponentFactory(selector, this.proxyViewFactory, compType.runtime) : null, _normalizeResult.syncResult ? this._normalizedCompMeta = _normalizeResult.syncResult : this.loading = _normalizeResult.asyncResult.then(function(normalizedCompMeta) {
        _this._normalizedCompMeta = normalizedCompMeta, _this.loading = null;
      });
    }
    return Object.defineProperty(CompiledTemplate.prototype, "normalizedCompMeta", {
      get: function() {
        if (this.loading)
          throw new BaseException$1("Template is still loading for " + this.compType.name + "!");
        return this._normalizedCompMeta;
      },
      enumerable: !0,
      configurable: !0
    }), CompiledTemplate.prototype.compiled = function(viewFactory) {
      this._viewFactory = viewFactory, this.isCompiled = !0;
    }, CompiledTemplate.prototype.depsCompiled = function() {
      this.isCompiledWithDeps = !0;
    }, CompiledTemplate;
  }(),
      SECURITY_SCHEMA = {};
  registerContext(SecurityContext.HTML, ["iframe|srcdoc", "*|innerHTML", "*|outerHTML"]), registerContext(SecurityContext.STYLE, ["*|style"]), registerContext(SecurityContext.URL, ["*|formAction", "area|href", "area|ping", "audio|src", "a|href", "a|ping", "blockquote|cite", "body|background", "del|cite", "form|action", "img|src", "img|srcset", "input|src", "ins|cite", "q|cite", "source|src", "source|srcset", "video|poster", "video|src"]), registerContext(SecurityContext.RESOURCE_URL, ["applet|code", "applet|codebase", "base|href", "embed|src", "frame|src", "head|profile", "html|manifest", "iframe|src", "link|href", "media|src", "object|codebase", "object|data", "script|src", "track|src"]);
  var BOOLEAN = "boolean",
      NUMBER = "number",
      STRING = "string",
      OBJECT = "object",
      SCHEMA = ["*|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop", "^*|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*autocomplete,*autocompleteerror,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate", "media|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,#volume", ":svg:^*|*abort,*autocomplete,*autocompleteerror,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex", ":svg:graphics^:svg:|", ":svg:animation^:svg:|*begin,*end,*repeat", ":svg:geometry^:svg:|", ":svg:componentTransferFunction^:svg:|", ":svg:gradient^:svg:|", ":svg:textContent^:svg:graphics|", ":svg:textPositioning^:svg:textContent|", "a|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerpolicy,rel,rev,search,shape,target,text,type,username", "area|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerpolicy,search,shape,target,username", "audio^media|", "br|clear", "base|href,target", "body|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink", "button|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value", "canvas|#height,#width", "content|select", "dl|!compact", "datalist|", "details|!open", "dialog|!open,returnValue", "dir|!compact", "div|align", "embed|align,height,name,src,type,width", "fieldset|!disabled,name", "font|color,face,size", "form|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target", "frame|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src", "frameset|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows", "hr|align,color,!noShade,size,width", "head|", "h1,h2,h3,h4,h5,h6|align", "html|version", "iframe|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerpolicy,%sandbox,scrolling,src,srcdoc,width", "img|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerpolicy,sizes,src,srcset,useMap,#vspace,#width", "input|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width", "keygen|!autofocus,challenge,!disabled,keytype,name", "li|type,#value", "label|htmlFor", "legend|align", "link|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type", "map|name", "marquee|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width", "menu|!compact", "meta|content,httpEquiv,name,scheme", "meter|#high,#low,#max,#min,#optimum,#value", "ins,del|cite,dateTime", "ol|!compact,!reversed,#start,type", "object|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width", "optgroup|!disabled,label", "option|!defaultSelected,!disabled,label,!selected,text,value", "output|defaultValue,%htmlFor,name,value", "p|align", "param|name,type,value,valueType", "picture|", "pre|#width", "progress|#max,#value", "q,blockquote,cite|", "script|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type", "select|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value", "shadow|", "source|media,sizes,src,srcset,type", "span|", "style|!disabled,media,type", "caption|align", "th,td|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width", "col,colgroup|align,ch,chOff,#span,vAlign,width", "table|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width", "tr|align,bgColor,ch,chOff,vAlign", "tfoot,thead,tbody|align,ch,chOff,vAlign", "template|", "textarea|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap", "title|text", "track|!default,kind,label,src,srclang", "ul|!compact,type", "unknown|", "video^media|#height,poster,#width", ":svg:a^:svg:graphics|", ":svg:animate^:svg:animation|", ":svg:animateMotion^:svg:animation|", ":svg:animateTransform^:svg:animation|", ":svg:circle^:svg:geometry|", ":svg:clipPath^:svg:graphics|", ":svg:cursor^:svg:|", ":svg:defs^:svg:graphics|", ":svg:desc^:svg:|", ":svg:discard^:svg:|", ":svg:ellipse^:svg:geometry|", ":svg:feBlend^:svg:|", ":svg:feColorMatrix^:svg:|", ":svg:feComponentTransfer^:svg:|", ":svg:feComposite^:svg:|", ":svg:feConvolveMatrix^:svg:|", ":svg:feDiffuseLighting^:svg:|", ":svg:feDisplacementMap^:svg:|", ":svg:feDistantLight^:svg:|", ":svg:feDropShadow^:svg:|", ":svg:feFlood^:svg:|", ":svg:feFuncA^:svg:componentTransferFunction|", ":svg:feFuncB^:svg:componentTransferFunction|", ":svg:feFuncG^:svg:componentTransferFunction|", ":svg:feFuncR^:svg:componentTransferFunction|", ":svg:feGaussianBlur^:svg:|", ":svg:feImage^:svg:|", ":svg:feMerge^:svg:|", ":svg:feMergeNode^:svg:|", ":svg:feMorphology^:svg:|", ":svg:feOffset^:svg:|", ":svg:fePointLight^:svg:|", ":svg:feSpecularLighting^:svg:|", ":svg:feSpotLight^:svg:|", ":svg:feTile^:svg:|", ":svg:feTurbulence^:svg:|", ":svg:filter^:svg:|", ":svg:foreignObject^:svg:graphics|", ":svg:g^:svg:graphics|", ":svg:image^:svg:graphics|", ":svg:line^:svg:geometry|", ":svg:linearGradient^:svg:gradient|", ":svg:mpath^:svg:|", ":svg:marker^:svg:|", ":svg:mask^:svg:|", ":svg:metadata^:svg:|", ":svg:path^:svg:geometry|", ":svg:pattern^:svg:|", ":svg:polygon^:svg:geometry|", ":svg:polyline^:svg:geometry|", ":svg:radialGradient^:svg:gradient|", ":svg:rect^:svg:geometry|", ":svg:svg^:svg:graphics|#currentScale,#zoomAndPan", ":svg:script^:svg:|type", ":svg:set^:svg:animation|", ":svg:stop^:svg:|", ":svg:style^:svg:|!disabled,media,title,type", ":svg:switch^:svg:graphics|", ":svg:symbol^:svg:|", ":svg:tspan^:svg:textPositioning|", ":svg:text^:svg:textPositioning|", ":svg:textPath^:svg:textContent|", ":svg:title^:svg:|", ":svg:use^:svg:graphics|", ":svg:view^:svg:|#zoomAndPan"],
      attrToPropMap = {
        class: "className",
        formaction: "formAction",
        innerHtml: "innerHTML",
        readonly: "readOnly",
        tabindex: "tabIndex"
      },
      DomElementSchemaRegistry = function(_super) {
        function DomElementSchemaRegistry() {
          var _this = this;
          _super.call(this), this.schema = {}, SCHEMA.forEach(function(encodedType) {
            var parts = encodedType.split("|"),
                properties = parts[1].split(","),
                typeParts = (parts[0] + "^").split("^"),
                typeName = typeParts[0],
                type = {};
            typeName.split(",").forEach(function(tag) {
              return _this.schema[tag] = type;
            });
            var superType = _this.schema[typeParts[1]];
            isPresent(superType) && StringMapWrapper.forEach(superType, function(v, k) {
              return type[k] = v;
            }), properties.forEach(function(property) {
              "" == property || property.startsWith("*") || (property.startsWith("!") ? type[property.substring(1)] = BOOLEAN : property.startsWith("#") ? type[property.substring(1)] = NUMBER : property.startsWith("%") ? type[property.substring(1)] = OBJECT : type[property] = STRING);
            });
          });
        }
        return __extends(DomElementSchemaRegistry, _super), DomElementSchemaRegistry.prototype.hasProperty = function(tagName, propName) {
          if (tagName.indexOf("-") !== -1)
            return "ng-container" !== tagName && "ng-content" !== tagName;
          var elementProperties = this.schema[tagName.toLowerCase()];
          return isPresent(elementProperties) || (elementProperties = this.schema.unknown), isPresent(elementProperties[propName]);
        }, DomElementSchemaRegistry.prototype.securityContext = function(tagName, propName) {
          tagName = tagName.toLowerCase(), propName = propName.toLowerCase();
          var ctx = SECURITY_SCHEMA[tagName + "|" + propName];
          return void 0 !== ctx ? ctx : (ctx = SECURITY_SCHEMA["*|" + propName], void 0 !== ctx ? ctx : SecurityContext.NONE);
        }, DomElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
          var mappedPropName = StringMapWrapper.get(attrToPropMap, propName);
          return isPresent(mappedPropName) ? mappedPropName : propName;
        }, DomElementSchemaRegistry;
      }(ElementSchemaRegistry);
  DomElementSchemaRegistry.decorators = [{type: _angular_core.Injectable}], DomElementSchemaRegistry.ctorParameters = [];
  var COMPILER_PROVIDERS = [Lexer, Parser, HtmlParser, TemplateParser, DirectiveNormalizer, CompileMetadataResolver, DEFAULT_PACKAGE_URL_PROVIDER, StyleCompiler, ViewCompiler, {
    provide: CompilerConfig,
    useValue: new CompilerConfig
  }, RuntimeCompiler, {
    provide: _angular_core.ComponentResolver,
    useExisting: RuntimeCompiler
  }, {
    provide: _angular_core.Compiler,
    useExisting: RuntimeCompiler
  }, DomElementSchemaRegistry, {
    provide: ElementSchemaRegistry,
    useExisting: DomElementSchemaRegistry
  }, UrlResolver, ViewResolver, DirectiveResolver, PipeResolver],
      Message = function() {
        function Message(content, meaning, description) {
          void 0 === description && (description = null), this.content = content, this.meaning = meaning, this.description = description;
        }
        return Message;
      }(),
      I18N_ATTR = "i18n",
      I18N_ATTR_PREFIX = "i18n-",
      CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g,
      I18nError = function(_super) {
        function I18nError(span, msg) {
          _super.call(this, span, msg);
        }
        return __extends(I18nError, _super), I18nError;
      }(ParseError),
      Part = function() {
        function Part(rootElement, rootTextNode, children, i18n, hasI18n) {
          this.rootElement = rootElement, this.rootTextNode = rootTextNode, this.children = children, this.i18n = i18n, this.hasI18n = hasI18n;
        }
        return Object.defineProperty(Part.prototype, "sourceSpan", {
          get: function() {
            return isPresent(this.rootElement) ? this.rootElement.sourceSpan : isPresent(this.rootTextNode) ? this.rootTextNode.sourceSpan : this.children[0].sourceSpan;
          },
          enumerable: !0,
          configurable: !0
        }), Part.prototype.createMessage = function(parser, interpolationConfig) {
          return new Message(stringifyNodes(this.children, parser, interpolationConfig), meaning(this.i18n), description(this.i18n));
        }, Part;
      }(),
      _StringifyVisitor = function() {
        function _StringifyVisitor(_parser, _interpolationConfig) {
          this._parser = _parser, this._interpolationConfig = _interpolationConfig, this._index = 0;
        }
        return _StringifyVisitor.prototype.visitElement = function(ast, context) {
          var name = this._index++,
              children = this._join(htmlVisitAll(this, ast.children), "");
          return '<ph name="e' + name + '">' + children + "</ph>";
        }, _StringifyVisitor.prototype.visitAttr = function(ast, context) {
          return null;
        }, _StringifyVisitor.prototype.visitText = function(ast, context) {
          var index = this._index++,
              noInterpolation = removeInterpolation(ast.value, ast.sourceSpan, this._parser, this._interpolationConfig);
          return noInterpolation != ast.value ? '<ph name="t' + index + '">' + noInterpolation + "</ph>" : ast.value;
        }, _StringifyVisitor.prototype.visitComment = function(ast, context) {
          return "";
        }, _StringifyVisitor.prototype.visitExpansion = function(ast, context) {
          return null;
        }, _StringifyVisitor.prototype.visitExpansionCase = function(ast, context) {
          return null;
        }, _StringifyVisitor.prototype._join = function(strs, str) {
          return strs.filter(function(s) {
            return s.length > 0;
          }).join(str);
        }, _StringifyVisitor;
      }(),
      PLURAL_CASES = ["zero", "one", "two", "few", "many", "other"],
      ExpansionResult = function() {
        function ExpansionResult(nodes, expanded, errors) {
          this.nodes = nodes, this.expanded = expanded, this.errors = errors;
        }
        return ExpansionResult;
      }(),
      _Expander = function() {
        function _Expander() {
          this.isExpanded = !1, this.errors = [];
        }
        return _Expander.prototype.visitElement = function(ast, context) {
          return new HtmlElementAst(ast.name, ast.attrs, htmlVisitAll(this, ast.children), ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);
        }, _Expander.prototype.visitAttr = function(ast, context) {
          return ast;
        }, _Expander.prototype.visitText = function(ast, context) {
          return ast;
        }, _Expander.prototype.visitComment = function(ast, context) {
          return ast;
        }, _Expander.prototype.visitExpansion = function(ast, context) {
          return this.isExpanded = !0, "plural" == ast.type ? _expandPluralForm(ast, this.errors) : _expandDefaultForm(ast, this.errors);
        }, _Expander.prototype.visitExpansionCase = function(ast, context) {
          throw new BaseException$1("Should not be reached");
        }, _Expander;
      }(),
      _PLACEHOLDER_ELEMENT = "ph",
      _NAME_ATTR = "name",
      _PLACEHOLDER_EXPANDED_REGEXP = /<ph(\s)+name=("(\w)+")><\/ph>/gi,
      I18nHtmlParser = function() {
        function I18nHtmlParser(_htmlParser, _parser, _messagesContent, _messages, _implicitTags, _implicitAttrs) {
          this._htmlParser = _htmlParser, this._parser = _parser, this._messagesContent = _messagesContent, this._messages = _messages, this._implicitTags = _implicitTags, this._implicitAttrs = _implicitAttrs;
        }
        return I18nHtmlParser.prototype.parse = function(sourceContent, sourceUrl, parseExpansionForms, interpolationConfig) {
          void 0 === parseExpansionForms && (parseExpansionForms = !1), void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), this.errors = [], this._interpolationConfig = interpolationConfig;
          var res = this._htmlParser.parse(sourceContent, sourceUrl, !0);
          if (res.errors.length > 0)
            return res;
          var expanded = expandNodes(res.rootNodes),
              nodes = this._recurse(expanded.nodes);
          return (_a = this.errors).push.apply(_a, expanded.errors), this.errors.length > 0 ? new HtmlParseTreeResult([], this.errors) : new HtmlParseTreeResult(nodes, []);
          var _a;
        }, I18nHtmlParser.prototype._processI18nPart = function(part) {
          try {
            return part.hasI18n ? this._mergeI18Part(part) : this._recurseIntoI18nPart(part);
          } catch (e) {
            if (e instanceof I18nError)
              return this.errors.push(e), [];
            throw e;
          }
        }, I18nHtmlParser.prototype._mergeI18Part = function(part) {
          var message = part.createMessage(this._parser, this._interpolationConfig),
              messageId = id(message);
          if (!StringMapWrapper.contains(this._messages, messageId))
            throw new I18nError(part.sourceSpan, "Cannot find message for id '" + messageId + "', content '" + message.content + "'.");
          var parsedMessage = this._messages[messageId];
          return this._mergeTrees(part, parsedMessage, part.children);
        }, I18nHtmlParser.prototype._recurseIntoI18nPart = function(p) {
          if (isPresent(p.rootElement)) {
            var root = p.rootElement,
                children = this._recurse(p.children),
                attrs = this._i18nAttributes(root);
            return [new HtmlElementAst(root.name, attrs, children, root.sourceSpan, root.startSourceSpan, root.endSourceSpan)];
          }
          return isPresent(p.rootTextNode) ? [p.rootTextNode] : this._recurse(p.children);
        }, I18nHtmlParser.prototype._recurse = function(nodes) {
          var _this = this,
              parts = partition(nodes, this.errors, this._implicitTags);
          return ListWrapper.flatten(parts.map(function(p) {
            return _this._processI18nPart(p);
          }));
        }, I18nHtmlParser.prototype._mergeTrees = function(p, translated, original) {
          var l = new _CreateNodeMapping;
          htmlVisitAll(l, original);
          var merged = this._mergeTreesHelper(translated, l.mapping);
          if (isPresent(p.rootElement)) {
            var root = p.rootElement,
                attrs = this._i18nAttributes(root);
            return [new HtmlElementAst(root.name, attrs, merged, root.sourceSpan, root.startSourceSpan, root.endSourceSpan)];
          }
          if (isPresent(p.rootTextNode))
            throw new BaseException$1("should not be reached");
          return merged;
        }, I18nHtmlParser.prototype._mergeTreesHelper = function(translated, mapping) {
          var _this = this;
          return translated.map(function(t) {
            if (t instanceof HtmlElementAst)
              return _this._mergeElementOrInterpolation(t, translated, mapping);
            if (t instanceof HtmlTextAst)
              return t;
            throw new BaseException$1("should not be reached");
          });
        }, I18nHtmlParser.prototype._mergeElementOrInterpolation = function(t, translated, mapping) {
          var name = this._getName(t),
              type = name[0],
              index = NumberWrapper.parseInt(name.substring(1), 10),
              originalNode = mapping[index];
          if ("t" == type)
            return this._mergeTextInterpolation(t, originalNode);
          if ("e" == type)
            return this._mergeElement(t, originalNode, mapping);
          throw new BaseException$1("should not be reached");
        }, I18nHtmlParser.prototype._getName = function(t) {
          if (t.name != _PLACEHOLDER_ELEMENT)
            throw new I18nError(t.sourceSpan, 'Unexpected tag "' + t.name + '". Only "' + _PLACEHOLDER_ELEMENT + '" tags are allowed.');
          var names = t.attrs.filter(function(a) {
            return a.name == _NAME_ATTR;
          });
          if (0 == names.length)
            throw new I18nError(t.sourceSpan, 'Missing "' + _NAME_ATTR + '" attribute.');
          return names[0].value;
        }, I18nHtmlParser.prototype._mergeTextInterpolation = function(t, originalNode) {
          var split = this._parser.splitInterpolation(originalNode.value, originalNode.sourceSpan.toString(), this._interpolationConfig),
              exps = isPresent(split) ? split.expressions : [],
              messageSubstring = this._messagesContent.substring(t.startSourceSpan.end.offset, t.endSourceSpan.start.offset),
              translated = this._replacePlaceholdersWithExpressions(messageSubstring, exps, originalNode.sourceSpan);
          return new HtmlTextAst(translated, originalNode.sourceSpan);
        }, I18nHtmlParser.prototype._mergeElement = function(t, originalNode, mapping) {
          var children = this._mergeTreesHelper(t.children, mapping);
          return new HtmlElementAst(originalNode.name, this._i18nAttributes(originalNode), children, originalNode.sourceSpan, originalNode.startSourceSpan, originalNode.endSourceSpan);
        }, I18nHtmlParser.prototype._i18nAttributes = function(el) {
          var _this = this,
              res = [],
              implicitAttrs = isPresent(this._implicitAttrs[el.name]) ? this._implicitAttrs[el.name] : [];
          return el.attrs.forEach(function(attr) {
            if (!attr.name.startsWith(I18N_ATTR_PREFIX) && attr.name != I18N_ATTR) {
              var message,
                  i18ns = el.attrs.filter(function(a) {
                    return a.name == "" + I18N_ATTR_PREFIX + attr.name;
                  });
              if (0 == i18ns.length) {
                if (implicitAttrs.indexOf(attr.name) == -1)
                  return void res.push(attr);
                message = messageFromAttribute(_this._parser, _this._interpolationConfig, attr);
              } else
                message = messageFromI18nAttribute(_this._parser, _this._interpolationConfig, el, i18ns[0]);
              var messageId = id(message);
              if (!StringMapWrapper.contains(_this._messages, messageId))
                throw new I18nError(attr.sourceSpan, "Cannot find message for id '" + messageId + "', content '" + message.content + "'.");
              var updatedMessage = _this._replaceInterpolationInAttr(attr, _this._messages[messageId]);
              res.push(new HtmlAttrAst(attr.name, updatedMessage, attr.sourceSpan));
            }
          }), res;
        }, I18nHtmlParser.prototype._replaceInterpolationInAttr = function(attr, msg) {
          var split = this._parser.splitInterpolation(attr.value, attr.sourceSpan.toString(), this._interpolationConfig),
              exps = isPresent(split) ? split.expressions : [],
              first = msg[0],
              last = msg[msg.length - 1],
              start = first.sourceSpan.start.offset,
              end = last instanceof HtmlElementAst ? last.endSourceSpan.end.offset : last.sourceSpan.end.offset,
              messageSubstring = this._messagesContent.substring(start, end);
          return this._replacePlaceholdersWithExpressions(messageSubstring, exps, attr.sourceSpan);
        }, I18nHtmlParser.prototype._replacePlaceholdersWithExpressions = function(message, exps, sourceSpan) {
          var _this = this,
              expMap = this._buildExprMap(exps);
          return RegExpWrapper.replaceAll(_PLACEHOLDER_EXPANDED_REGEXP, message, function(match) {
            var nameWithQuotes = match[2],
                name = nameWithQuotes.substring(1, nameWithQuotes.length - 1);
            return _this._convertIntoExpression(name, expMap, sourceSpan);
          });
        }, I18nHtmlParser.prototype._buildExprMap = function(exps) {
          for (var expMap = new Map,
              usedNames = new Map,
              i = 0; i < exps.length; i++) {
            var phName = getPhNameFromBinding(exps[i], i);
            expMap.set(dedupePhName(usedNames, phName), exps[i]);
          }
          return expMap;
        }, I18nHtmlParser.prototype._convertIntoExpression = function(name, expMap, sourceSpan) {
          if (expMap.has(name))
            return "" + this._interpolationConfig.start + expMap.get(name) + this._interpolationConfig.end;
          throw new I18nError(sourceSpan, "Invalid interpolation name '" + name + "'");
        }, I18nHtmlParser;
      }(),
      _CreateNodeMapping = function() {
        function _CreateNodeMapping() {
          this.mapping = [];
        }
        return _CreateNodeMapping.prototype.visitElement = function(ast, context) {
          return this.mapping.push(ast), htmlVisitAll(this, ast.children), null;
        }, _CreateNodeMapping.prototype.visitAttr = function(ast, context) {
          return null;
        }, _CreateNodeMapping.prototype.visitText = function(ast, context) {
          return this.mapping.push(ast), null;
        }, _CreateNodeMapping.prototype.visitExpansion = function(ast, context) {
          return null;
        }, _CreateNodeMapping.prototype.visitExpansionCase = function(ast, context) {
          return null;
        }, _CreateNodeMapping.prototype.visitComment = function(ast, context) {
          return "";
        }, _CreateNodeMapping;
      }(),
      ExtractionResult = function() {
        function ExtractionResult(messages, errors) {
          this.messages = messages, this.errors = errors;
        }
        return ExtractionResult;
      }(),
      MessageExtractor = function() {
        function MessageExtractor(_htmlParser, _parser, _implicitTags, _implicitAttrs) {
          this._htmlParser = _htmlParser, this._parser = _parser, this._implicitTags = _implicitTags, this._implicitAttrs = _implicitAttrs;
        }
        return MessageExtractor.prototype.extract = function(template, sourceUrl, interpolationConfig) {
          void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), this._messages = [], this._errors = [];
          var res = this._htmlParser.parse(template, sourceUrl, !0);
          return 0 == res.errors.length && this._recurse(res.rootNodes, interpolationConfig), new ExtractionResult(this._messages, this._errors.concat(res.errors));
        }, MessageExtractor.prototype._extractMessagesFromPart = function(part, interpolationConfig) {
          part.hasI18n ? (this._messages.push(part.createMessage(this._parser, interpolationConfig)), this._recurseToExtractMessagesFromAttributes(part.children, interpolationConfig)) : this._recurse(part.children, interpolationConfig), isPresent(part.rootElement) && this._extractMessagesFromAttributes(part.rootElement, interpolationConfig);
        }, MessageExtractor.prototype._recurse = function(nodes, interpolationConfig) {
          var _this = this;
          if (isPresent(nodes)) {
            var parts = partition(nodes, this._errors, this._implicitTags);
            parts.forEach(function(part) {
              return _this._extractMessagesFromPart(part, interpolationConfig);
            });
          }
        }, MessageExtractor.prototype._recurseToExtractMessagesFromAttributes = function(nodes, interpolationConfig) {
          var _this = this;
          nodes.forEach(function(n) {
            n instanceof HtmlElementAst && (_this._extractMessagesFromAttributes(n, interpolationConfig), _this._recurseToExtractMessagesFromAttributes(n.children, interpolationConfig));
          });
        }, MessageExtractor.prototype._extractMessagesFromAttributes = function(p, interpolationConfig) {
          var _this = this,
              transAttrs = isPresent(this._implicitAttrs[p.name]) ? this._implicitAttrs[p.name] : [],
              explicitAttrs = [];
          p.attrs.filter(function(attr) {
            return attr.name.startsWith(I18N_ATTR_PREFIX);
          }).forEach(function(attr) {
            try {
              explicitAttrs.push(attr.name.substring(I18N_ATTR_PREFIX.length)), _this._messages.push(messageFromI18nAttribute(_this._parser, interpolationConfig, p, attr));
            } catch (e) {
              if (!(e instanceof I18nError))
                throw e;
              _this._errors.push(e);
            }
          }), p.attrs.filter(function(attr) {
            return !attr.name.startsWith(I18N_ATTR_PREFIX);
          }).filter(function(attr) {
            return explicitAttrs.indexOf(attr.name) == -1;
          }).filter(function(attr) {
            return transAttrs.indexOf(attr.name) > -1;
          }).forEach(function(attr) {
            return _this._messages.push(messageFromAttribute(_this._parser, interpolationConfig, attr));
          });
        }, MessageExtractor;
      }(),
      _PLACEHOLDER_REGEXP = RegExpWrapper.create('\\<ph(\\s)+name=("(\\w)+")\\/\\>'),
      _ID_ATTR = "id",
      _MSG_ELEMENT = "msg",
      _BUNDLE_ELEMENT = "message-bundle",
      XmbDeserializationResult = function() {
        function XmbDeserializationResult(content, messages, errors) {
          this.content = content, this.messages = messages, this.errors = errors;
        }
        return XmbDeserializationResult;
      }(),
      XmbDeserializationError = function(_super) {
        function XmbDeserializationError(span, msg) {
          _super.call(this, span, msg);
        }
        return __extends(XmbDeserializationError, _super), XmbDeserializationError;
      }(ParseError),
      _XML_ESCAPED_CHARS = [[/&/g, "&amp;"], [/"/g, "&quot;"], [/'/g, "&apos;"], [/</g, "&lt;"], [/>/g, "&gt;"]],
      _ASSET_URL_RE = /asset:([^\/]+)\/([^\/]+)\/(.+)/g,
      ImportGenerator = function() {
        function ImportGenerator() {}
        return ImportGenerator.parseAssetUrl = function(url) {
          return AssetUrl.parse(url);
        }, ImportGenerator;
      }(),
      AssetUrl = function() {
        function AssetUrl(packageName, firstLevelDir, modulePath) {
          this.packageName = packageName, this.firstLevelDir = firstLevelDir, this.modulePath = modulePath;
        }
        return AssetUrl.parse = function(url, allowNonMatching) {
          void 0 === allowNonMatching && (allowNonMatching = !0);
          var match = RegExpWrapper.firstMatch(_ASSET_URL_RE, url);
          if (isPresent(match))
            return new AssetUrl(match[1], match[2], match[3]);
          if (allowNonMatching)
            return null;
          throw new BaseException$1("Url " + url + " is not a valid asset: url");
        }, AssetUrl;
      }();
  exports.__compiler_private__, function(__compiler_private__) {
    __compiler_private__.SelectorMatcher = SelectorMatcher, __compiler_private__.CssSelector = CssSelector, __compiler_private__.AssetUrl = AssetUrl, __compiler_private__.ImportGenerator = ImportGenerator, __compiler_private__.CompileMetadataResolver = CompileMetadataResolver, __compiler_private__.HtmlParser = HtmlParser, __compiler_private__.I18nHtmlParser = I18nHtmlParser, __compiler_private__.ExtractionResult = ExtractionResult, __compiler_private__.Message = Message, __compiler_private__.MessageExtractor = MessageExtractor, __compiler_private__.removeDuplicates = removeDuplicates$1, __compiler_private__.serializeXmb = serializeXmb, __compiler_private__.deserializeXmb = deserializeXmb, __compiler_private__.DirectiveNormalizer = DirectiveNormalizer, __compiler_private__.Lexer = Lexer, __compiler_private__.Parser = Parser, __compiler_private__.ParseLocation = ParseLocation, __compiler_private__.ParseError = ParseError, __compiler_private__.ParseErrorLevel = ParseErrorLevel, __compiler_private__.ParseSourceFile = ParseSourceFile, __compiler_private__.ParseSourceSpan = ParseSourceSpan, __compiler_private__.TemplateParser = TemplateParser, __compiler_private__.DomElementSchemaRegistry = DomElementSchemaRegistry, __compiler_private__.StyleCompiler = StyleCompiler, __compiler_private__.ViewCompiler = ViewCompiler, __compiler_private__.TypeScriptEmitter = TypeScriptEmitter;
  }(exports.__compiler_private__ || (exports.__compiler_private__ = {})), exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS, exports.CompileDiDependencyMetadata = CompileDiDependencyMetadata, exports.CompileDirectiveMetadata = CompileDirectiveMetadata, exports.CompileFactoryMetadata = CompileFactoryMetadata, exports.CompileIdentifierMetadata = CompileIdentifierMetadata, exports.CompileMetadataWithIdentifier = CompileMetadataWithIdentifier, exports.CompileMetadataWithType = CompileMetadataWithType, exports.CompilePipeMetadata = CompilePipeMetadata, exports.CompileProviderMetadata = CompileProviderMetadata, exports.CompileQueryMetadata = CompileQueryMetadata, exports.CompileTemplateMetadata = CompileTemplateMetadata, exports.CompileTokenMetadata = CompileTokenMetadata, exports.CompileTypeMetadata = CompileTypeMetadata, exports.CompilerConfig = CompilerConfig, exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER, exports.DirectiveResolver = DirectiveResolver, exports.NormalizedComponentWithViewDirectives = NormalizedComponentWithViewDirectives, exports.OfflineCompiler = OfflineCompiler, exports.PipeResolver = PipeResolver, exports.RenderTypes = RenderTypes, exports.RuntimeCompiler = RuntimeCompiler, exports.SourceModule = SourceModule, exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS, exports.UrlResolver = UrlResolver, exports.ViewResolver = ViewResolver, exports.XHR = XHR, exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver, exports.ElementSchemaRegistry = ElementSchemaRegistry, exports.TextAst = TextAst, exports.BoundTextAst = BoundTextAst, exports.AttrAst = AttrAst, exports.BoundElementPropertyAst = BoundElementPropertyAst, exports.BoundEventAst = BoundEventAst, exports.ReferenceAst = ReferenceAst, exports.VariableAst = VariableAst, exports.ElementAst = ElementAst, exports.EmbeddedTemplateAst = EmbeddedTemplateAst, exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst, exports.DirectiveAst = DirectiveAst, exports.ProviderAst = ProviderAst, exports.NgContentAst = NgContentAst, exports.templateVisitAll = templateVisitAll;
});

})();
(function() {
var define = $__System.amdDefine;
var __extends = this && this.__extends || function(d, b) {
  function __() {
    this.constructor = d;
  }
  for (var p in b)
    b.hasOwnProperty(p) && (d[p] = b[p]);
  d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __);
};
!function(global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/common"), require("@angular/compiler"), require("@angular/core"), require("@angular/platform-browser"), require("rxjs/Subject"), require("rxjs/observable/PromiseObservable"), require("rxjs/operator/toPromise"), require("rxjs/Observable")) : "function" == typeof define && define.amd ? define("8", ["exports", "9", "2", "3", "a", "4", "5", "6", "7"], factory) : factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}), global.ng.common, global.ng.compiler, global.ng.core, global.ng.platformBrowser, global.Rx, global.Rx, global.Rx.Observable.prototype, global.Rx);
}(this, function(exports, _angular_common, _angular_compiler, _angular_core, _angular_platformBrowser, rxjs_Subject, rxjs_observable_PromiseObservable, rxjs_operator_toPromise, rxjs_Observable) {
  "use strict";
  function isPresent(obj) {
    return void 0 !== obj && null !== obj;
  }
  function isBlank(obj) {
    return void 0 === obj || null === obj;
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function _flattenArray(source, target) {
    if (isPresent(source))
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        isArray(item) ? _flattenArray(item, target) : target.push(item);
      }
    return target;
  }
  function bootstrap(appComponentType, customProviders) {
    reflector.reflectionCapabilities = new ReflectionCapabilities;
    var providers = [_angular_platformBrowser.BROWSER_APP_PROVIDERS, BROWSER_APP_COMPILER_PROVIDERS, isPresent(customProviders) ? customProviders : []],
        appInjector = _angular_core.ReflectiveInjector.resolveAndCreate(providers, _angular_platformBrowser.browserPlatform().injector);
    return _angular_core.coreLoadAndBootstrap(appComponentType, appInjector);
  }
  function bootstrapWorkerUi(workerScriptUri, customProviders) {
    var app = _angular_core.ReflectiveInjector.resolveAndCreate([_angular_platformBrowser.WORKER_UI_APPLICATION_PROVIDERS, BROWSER_APP_COMPILER_PROVIDERS, {
      provide: _angular_platformBrowser.WORKER_SCRIPT,
      useValue: workerScriptUri
    }, isPresent(customProviders) ? customProviders : []], _angular_platformBrowser.workerUiPlatform().injector);
    return PromiseWrapper.resolve(app.get(_angular_core.ApplicationRef));
  }
  function bootstrapWorkerApp(appComponentType, customProviders) {
    var appInjector = _angular_core.ReflectiveInjector.resolveAndCreate([_angular_platformBrowser.WORKER_APP_APPLICATION_PROVIDERS, WORKER_APP_COMPILER_PROVIDERS, isPresent(customProviders) ? customProviders : []], _angular_platformBrowser.workerAppPlatform().injector);
    return _angular_core.coreLoadAndBootstrap(appComponentType, appInjector);
  }
  var globalScope,
      ReflectionCapabilities = _angular_core.__core_private__.ReflectionCapabilities,
      reflector = _angular_core.__core_private__.reflector;
  globalScope = "undefined" == typeof window ? "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : global : window;
  var global$1 = globalScope;
  global$1.assert = function(condition) {};
  var PromiseCompleter = function() {
    function PromiseCompleter() {
      var _this = this;
      this.promise = new Promise(function(res, rej) {
        _this.resolve = res, _this.reject = rej;
      });
    }
    return PromiseCompleter;
  }(),
      PromiseWrapper = function() {
        function PromiseWrapper() {}
        return PromiseWrapper.resolve = function(obj) {
          return Promise.resolve(obj);
        }, PromiseWrapper.reject = function(obj, _) {
          return Promise.reject(obj);
        }, PromiseWrapper.catchError = function(promise, onError) {
          return promise.catch(onError);
        }, PromiseWrapper.all = function(promises) {
          return 0 == promises.length ? Promise.resolve([]) : Promise.all(promises);
        }, PromiseWrapper.then = function(promise, success, rejection) {
          return promise.then(success, rejection);
        }, PromiseWrapper.wrap = function(computation) {
          return new Promise(function(res, rej) {
            try {
              res(computation());
            } catch (e) {
              rej(e);
            }
          });
        }, PromiseWrapper.scheduleMicrotask = function(computation) {
          PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function(_) {});
        }, PromiseWrapper.completer = function() {
          return new PromiseCompleter;
        }, PromiseWrapper;
      }(),
      Map$1 = global$1.Map,
      Set = global$1.Set,
      ListWrapper = (function() {
        try {
          if (1 === new Map$1([[1, 2]]).size)
            return function(pairs) {
              return new Map$1(pairs);
            };
        } catch (e) {}
        return function(pairs) {
          for (var map = new Map$1,
              i = 0; i < pairs.length; i++) {
            var pair = pairs[i];
            map.set(pair[0], pair[1]);
          }
          return map;
        };
      }(), function() {
        try {
          if (new Map$1(new Map$1))
            return function(m) {
              return new Map$1(m);
            };
        } catch (e) {}
        return function(m) {
          var map = new Map$1;
          return m.forEach(function(v, k) {
            map.set(k, v);
          }), map;
        };
      }(), function() {
        return (new Map$1).keys().next ? function(m) {
          for (var k,
              keyIterator = m.keys(); !(k = keyIterator.next()).done; )
            m.set(k.value, null);
        } : function(m) {
          m.forEach(function(v, k) {
            m.set(k, null);
          });
        };
      }(), function() {
        try {
          if ((new Map$1).values().next)
            return function(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
        } catch (e) {}
        return function(m, getValues) {
          var res = ListWrapper.createFixedSize(m.size),
              i = 0;
          return m.forEach(function(v, k) {
            res[i] = getValues ? v : k, i++;
          }), res;
        };
      }(), function() {
        function ListWrapper() {}
        return ListWrapper.createFixedSize = function(size) {
          return new Array(size);
        }, ListWrapper.createGrowableSize = function(size) {
          return new Array(size);
        }, ListWrapper.clone = function(array) {
          return array.slice(0);
        }, ListWrapper.forEachWithIndex = function(array, fn) {
          for (var i = 0; i < array.length; i++)
            fn(array[i], i);
        }, ListWrapper.first = function(array) {
          return array ? array[0] : null;
        }, ListWrapper.last = function(array) {
          return array && 0 != array.length ? array[array.length - 1] : null;
        }, ListWrapper.indexOf = function(array, value, startIndex) {
          return void 0 === startIndex && (startIndex = 0), array.indexOf(value, startIndex);
        }, ListWrapper.contains = function(list, el) {
          return list.indexOf(el) !== -1;
        }, ListWrapper.reversed = function(array) {
          var a = ListWrapper.clone(array);
          return a.reverse();
        }, ListWrapper.concat = function(a, b) {
          return a.concat(b);
        }, ListWrapper.insert = function(list, index, value) {
          list.splice(index, 0, value);
        }, ListWrapper.removeAt = function(list, index) {
          var res = list[index];
          return list.splice(index, 1), res;
        }, ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        }, ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          return index > -1 && (list.splice(index, 1), !0);
        }, ListWrapper.clear = function(list) {
          list.length = 0;
        }, ListWrapper.isEmpty = function(list) {
          return 0 == list.length;
        }, ListWrapper.fill = function(list, value, start, end) {
          void 0 === start && (start = 0), void 0 === end && (end = null), list.fill(value, start, null === end ? list.length : end);
        }, ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return !1;
          for (var i = 0; i < a.length; ++i)
            if (a[i] !== b[i])
              return !1;
          return !0;
        }, ListWrapper.slice = function(l, from, to) {
          return void 0 === from && (from = 0), void 0 === to && (to = null), l.slice(from, null === to ? void 0 : to);
        }, ListWrapper.splice = function(l, from, length) {
          return l.splice(from, length);
        }, ListWrapper.sort = function(l, compareFn) {
          isPresent(compareFn) ? l.sort(compareFn) : l.sort();
        }, ListWrapper.toString = function(l) {
          return l.toString();
        }, ListWrapper.toJSON = function(l) {
          return JSON.stringify(l);
        }, ListWrapper.maximum = function(list, predicate) {
          if (0 == list.length)
            return null;
          for (var solution = null,
              maxValue = -(1 / 0),
              index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (!isBlank(candidate)) {
              var candidateValue = predicate(candidate);
              candidateValue > maxValue && (solution = candidate, maxValue = candidateValue);
            }
          }
          return solution;
        }, ListWrapper.flatten = function(list) {
          var target = [];
          return _flattenArray(list, target), target;
        }, ListWrapper.addAll = function(list, source) {
          for (var i = 0; i < source.length; i++)
            list.push(source[i]);
        }, ListWrapper;
      }()),
      BaseException = (function() {
        var test = new Set([1, 2, 3]);
        return 3 === test.size ? function(lst) {
          return new Set(lst);
        } : function(lst) {
          var res = new Set(lst);
          if (res.size !== lst.length)
            for (var i = 0; i < lst.length; i++)
              res.add(lst[i]);
          return res;
        };
      }(), function(_super) {
        function BaseException(message) {
          void 0 === message && (message = "--"), _super.call(this, message), this.message = message, this.stack = new Error(message).stack;
        }
        return __extends(BaseException, _super), BaseException.prototype.toString = function() {
          return this.message;
        }, BaseException;
      }(Error)),
      CachedXHR = function(_super) {
        function CachedXHR() {
          if (_super.call(this), this._cache = global$1.$templateCache, null == this._cache)
            throw new BaseException("CachedXHR: Template cache was not found in $templateCache.");
        }
        return __extends(CachedXHR, _super), CachedXHR.prototype.get = function(url) {
          return this._cache.hasOwnProperty(url) ? PromiseWrapper.resolve(this._cache[url]) : PromiseWrapper.reject("CachedXHR: Did not find cached template for " + url, null);
        }, CachedXHR;
      }(_angular_compiler.XHR),
      XHRImpl = function(_super) {
        function XHRImpl() {
          _super.apply(this, arguments);
        }
        return __extends(XHRImpl, _super), XHRImpl.prototype.get = function(url) {
          var completer = PromiseWrapper.completer(),
              xhr = new XMLHttpRequest;
          return xhr.open("GET", url, !0), xhr.responseType = "text", xhr.onload = function() {
            var response = isPresent(xhr.response) ? xhr.response : xhr.responseText,
                status = 1223 === xhr.status ? 204 : xhr.status;
            0 === status && (status = response ? 200 : 0), 200 <= status && status <= 300 ? completer.resolve(response) : completer.reject("Failed to load " + url, null);
          }, xhr.onerror = function() {
            completer.reject("Failed to load " + url, null);
          }, xhr.send(), completer.promise;
        }, XHRImpl;
      }(_angular_compiler.XHR),
      BROWSER_APP_COMPILER_PROVIDERS = [_angular_compiler.COMPILER_PROVIDERS, {
        provide: _angular_compiler.CompilerConfig,
        useFactory: function(platformDirectives, platformPipes) {
          return new _angular_compiler.CompilerConfig({
            platformDirectives: platformDirectives,
            platformPipes: platformPipes
          });
        },
        deps: [_angular_core.PLATFORM_DIRECTIVES, _angular_core.PLATFORM_PIPES]
      }, {
        provide: _angular_compiler.XHR,
        useClass: XHRImpl
      }, {
        provide: _angular_core.PLATFORM_DIRECTIVES,
        useValue: _angular_common.COMMON_DIRECTIVES,
        multi: !0
      }, {
        provide: _angular_core.PLATFORM_PIPES,
        useValue: _angular_common.COMMON_PIPES,
        multi: !0
      }],
      CACHED_TEMPLATE_PROVIDER = [{
        provide: _angular_compiler.XHR,
        useClass: CachedXHR
      }],
      WORKER_APP_COMPILER_PROVIDERS = [_angular_compiler.COMPILER_PROVIDERS, {
        provide: _angular_compiler.CompilerConfig,
        useFactory: function(platformDirectives, platformPipes) {
          return new _angular_compiler.CompilerConfig({
            platformDirectives: platformDirectives,
            platformPipes: platformPipes
          });
        },
        deps: [_angular_core.PLATFORM_DIRECTIVES, _angular_core.PLATFORM_PIPES]
      }, {
        provide: _angular_compiler.XHR,
        useClass: XHRImpl
      }, {
        provide: _angular_core.PLATFORM_DIRECTIVES,
        useValue: _angular_common.COMMON_DIRECTIVES,
        multi: !0
      }, {
        provide: _angular_core.PLATFORM_PIPES,
        useValue: _angular_common.COMMON_PIPES,
        multi: !0
      }];
  exports.BROWSER_APP_COMPILER_PROVIDERS = BROWSER_APP_COMPILER_PROVIDERS, exports.CACHED_TEMPLATE_PROVIDER = CACHED_TEMPLATE_PROVIDER, exports.bootstrap = bootstrap, exports.bootstrapWorkerUi = bootstrapWorkerUi, exports.bootstrapWorkerApp = bootstrapWorkerApp;
});

})();
(function() {
var define = $__System.amdDefine;
var __extends = this && this.__extends || function(d, b) {
  function __() {
    this.constructor = d;
  }
  for (var p in b)
    b.hasOwnProperty(p) && (d[p] = b[p]);
  d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __);
};
!function(global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/core"), require("rxjs/Subject"), require("rxjs/observable/PromiseObservable"), require("rxjs/operator/toPromise"), require("rxjs/Observable")) : "function" == typeof define && define.amd ? define("9", ["exports", "3", "4", "5", "6", "7"], factory) : factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}), global.ng.core, global.Rx, global.Rx, global.Rx.Observable.prototype, global.Rx);
}(this, function(exports, _angular_core, rxjs_Subject, rxjs_observable_PromiseObservable, rxjs_operator_toPromise, rxjs_Observable) {
  "use strict";
  function getTypeNameForDebugging(type) {
    return type.name ? type.name : typeof type;
  }
  function isPresent(obj) {
    return void 0 !== obj && null !== obj;
  }
  function isBlank(obj) {
    return void 0 === obj || null === obj;
  }
  function isNumber(obj) {
    return "number" == typeof obj;
  }
  function isString(obj) {
    return "string" == typeof obj;
  }
  function isFunction(obj) {
    return "function" == typeof obj;
  }
  function isStringMap(obj) {
    return "object" == typeof obj && null !== obj;
  }
  function isPromise(obj) {
    return obj instanceof global$1.Promise;
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
  }
  function noop() {}
  function stringify(token) {
    if ("string" == typeof token)
      return token;
    if (void 0 === token || null === token)
      return "" + token;
    if (token.name)
      return token.name;
    if (token.overriddenName)
      return token.overriddenName;
    var res = token.toString(),
        newLineIndex = res.indexOf("\n");
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function looseIdentical(a, b) {
    return a === b || "number" == typeof a && "number" == typeof b && isNaN(a) && isNaN(b);
  }
  function normalizeBlank(obj) {
    return isBlank(obj) ? null : obj;
  }
  function normalizeBool(obj) {
    return !isBlank(obj) && obj;
  }
  function isJsObject(o) {
    return null !== o && ("function" == typeof o || "object" == typeof o);
  }
  function getSymbolIterator() {
    if (isBlank(_symbolIterator))
      if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator))
        _symbolIterator = Symbol.iterator;
      else
        for (var keys = Object.getOwnPropertyNames(Map.prototype),
            i = 0; i < keys.length; ++i) {
          var key = keys[i];
          "entries" !== key && "size" !== key && Map.prototype[key] === Map.prototype.entries && (_symbolIterator = key);
        }
    return _symbolIterator;
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function hasConstructor(value, type) {
    return value.constructor === type;
  }
  function _flattenArray(source, target) {
    if (isPresent(source))
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        isArray(item) ? _flattenArray(item, target) : target.push(item);
      }
    return target;
  }
  function isListLikeIterable(obj) {
    return !!isJsObject(obj) && (isArray(obj) || !(obj instanceof Map$1) && getSymbolIterator() in obj);
  }
  function unimplemented() {
    throw new BaseException("unimplemented");
  }
  function digitModifier(inner) {
    return function(date, locale) {
      var result = inner(date, locale);
      return 1 == result.length ? "0" + result : result;
    };
  }
  function hourClockExtracter(inner) {
    return function(date, locale) {
      var result = inner(date, locale);
      return result.split(" ")[1];
    };
  }
  function hourExtracter(inner) {
    return function(date, locale) {
      var result = inner(date, locale);
      return result.split(" ")[0];
    };
  }
  function hour12Modify(options, value) {
    return options.hour12 = value, options;
  }
  function digitCondition(prop, len) {
    var result = {};
    return result[prop] = 2 == len ? "2-digit" : "numeric", result;
  }
  function nameCondition(prop, len) {
    var result = {};
    return result[prop] = len < 4 ? "short" : "long", result;
  }
  function combine(options) {
    var result = {};
    return options.forEach(function(option) {
      Object.assign(result, option);
    }), result;
  }
  function datePartGetterFactory(ret) {
    return function(date, locale) {
      return new Intl.DateTimeFormat(locale, ret).format(date);
    };
  }
  function dateFormatter(format, date, locale) {
    var match,
        fn,
        text = "",
        parts = [];
    if (PATTERN_ALIASES[format])
      return PATTERN_ALIASES[format](date, locale);
    if (datePartsFormatterCache.has(format))
      parts = datePartsFormatterCache.get(format);
    else {
      for (DATE_FORMATS_SPLIT.exec(format); format; )
        match = DATE_FORMATS_SPLIT.exec(format), match ? (parts = concat(parts, match, 1), format = parts.pop()) : (parts.push(format), format = null);
      datePartsFormatterCache.set(format, parts);
    }
    return parts.forEach(function(part) {
      fn = DATE_FORMATS[part], text += fn ? fn(date, locale) : "''" === part ? "'" : part.replace(/(^'|'$)/g, "").replace(/''/g, "'");
    }), text;
  }
  function concat(array1, array2, index) {
    return array1.concat(slice.call(array2, index));
  }
  function getPluralCategory(value, cases, ngLocalization) {
    var nbCase = "=" + value;
    return cases.indexOf(nbCase) > -1 ? nbCase : ngLocalization.getPluralCategory(value);
  }
  function formatNumber(pipe, value, style, digits, currency, currencyAsSymbol) {
    if (void 0 === currency && (currency = null), void 0 === currencyAsSymbol && (currencyAsSymbol = !1), isBlank(value))
      return null;
    if (!isNumber(value))
      throw new InvalidPipeArgumentException(pipe, value);
    var minInt = 1,
        minFraction = 0,
        maxFraction = 3;
    if (isPresent(digits)) {
      var parts = RegExpWrapper.firstMatch(_NUMBER_FORMAT_REGEXP, digits);
      if (isBlank(parts))
        throw new BaseException(digits + " is not a valid digit info for number pipes");
      isPresent(parts[1]) && (minInt = NumberWrapper.parseIntAutoRadix(parts[1])), isPresent(parts[3]) && (minFraction = NumberWrapper.parseIntAutoRadix(parts[3])), isPresent(parts[5]) && (maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]));
    }
    return NumberFormatter.format(value, defaultLocale$1, style, {
      minimumIntegerDigits: minInt,
      minimumFractionDigits: minFraction,
      maximumFractionDigits: maxFraction,
      currency: currency,
      currencyAsSymbol: currencyAsSymbol
    });
  }
  function _find(control, path) {
    return isBlank(path) ? null : (path instanceof Array || (path = path.split("/")), path instanceof Array && ListWrapper.isEmpty(path) ? null : path.reduce(function(v, name) {
      if (v instanceof ControlGroup)
        return isPresent(v.controls[name]) ? v.controls[name] : null;
      if (v instanceof ControlArray) {
        var index = name;
        return isPresent(v.at(index)) ? v.at(index) : null;
      }
      return null;
    }, control));
  }
  function toObservable(r) {
    return isPromise(r) ? ObservableWrapper.fromPromise(r) : r;
  }
  function _convertToPromise(obj) {
    return isPromise(obj) ? obj : ObservableWrapper.toPromise(obj);
  }
  function _executeValidators(control, validators) {
    return validators.map(function(v) {
      return v(control);
    });
  }
  function _executeAsyncValidators(control, validators) {
    return validators.map(function(v) {
      return v(control);
    });
  }
  function _mergeErrors(arrayOfErrors) {
    var res = arrayOfErrors.reduce(function(res, errors) {
      return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;
    }, {});
    return StringMapWrapper.isEmpty(res) ? null : res;
  }
  function normalizeValidator(validator) {
    return void 0 !== validator.validate ? function(c) {
      return validator.validate(c);
    } : validator;
  }
  function normalizeAsyncValidator(validator) {
    return void 0 !== validator.validate ? function(c) {
      return validator.validate(c);
    } : validator;
  }
  function _buildValueString(id, value) {
    return isBlank(id) ? "" + value : (isPrimitive(value) || (value = "Object"), StringWrapper.slice(id + ": " + value, 0, 50));
  }
  function _extractId(valueString) {
    return valueString.split(":")[0];
  }
  function _buildValueString$1(id, value) {
    return isBlank(id) ? "" + value : (isString(value) && (value = "'" + value + "'"), isPrimitive(value) || (value = "Object"), StringWrapper.slice(id + ": " + value, 0, 50));
  }
  function _extractId$1(valueString) {
    return valueString.split(":")[0];
  }
  function controlPath(name, parent) {
    var p = ListWrapper.clone(parent.path);
    return p.push(name), p;
  }
  function setUpControl(control, dir) {
    isBlank(control) && _throwError(dir, "Cannot find control"), isBlank(dir.valueAccessor) && _throwError(dir, "No value accessor for"), control.validator = Validators.compose([control.validator, dir.validator]), control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]), dir.valueAccessor.writeValue(control.value), dir.valueAccessor.registerOnChange(function(newValue) {
      dir.viewToModelUpdate(newValue), control.updateValue(newValue, {emitModelToViewChange: !1}), control.markAsDirty();
    }), control.registerOnChange(function(newValue) {
      return dir.valueAccessor.writeValue(newValue);
    }), dir.valueAccessor.registerOnTouched(function() {
      return control.markAsTouched();
    });
  }
  function setUpControlGroup(control, dir) {
    isBlank(control) && _throwError(dir, "Cannot find control"), control.validator = Validators.compose([control.validator, dir.validator]), control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
  }
  function _throwError(dir, message) {
    var path = dir.path.join(" -> ");
    throw new BaseException(message + " '" + path + "'");
  }
  function composeValidators(validators) {
    return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;
  }
  function composeAsyncValidators(validators) {
    return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;
  }
  function isPropertyUpdated(changes, viewModel) {
    if (!StringMapWrapper.contains(changes, "model"))
      return !1;
    var change = changes.model;
    return !!change.isFirstChange() || !looseIdentical(viewModel, change.currentValue);
  }
  function selectValueAccessor(dir, valueAccessors) {
    if (isBlank(valueAccessors))
      return null;
    var defaultAccessor,
        builtinAccessor,
        customAccessor;
    return valueAccessors.forEach(function(v) {
      hasConstructor(v, DefaultValueAccessor) ? defaultAccessor = v : hasConstructor(v, CheckboxControlValueAccessor) || hasConstructor(v, NumberValueAccessor) || hasConstructor(v, SelectControlValueAccessor) || hasConstructor(v, SelectMultipleControlValueAccessor) || hasConstructor(v, RadioControlValueAccessor) ? (isPresent(builtinAccessor) && _throwError(dir, "More than one built-in value accessor matches"), builtinAccessor = v) : (isPresent(customAccessor) && _throwError(dir, "More than one custom value accessor matches"), customAccessor = v);
    }), isPresent(customAccessor) ? customAccessor : isPresent(builtinAccessor) ? builtinAccessor : isPresent(defaultAccessor) ? defaultAccessor : (_throwError(dir, "No valid value accessor for"), null);
  }
  function _stripBaseHref(baseHref, url) {
    return baseHref.length > 0 && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
  }
  function _stripIndexHtml(url) {
    return /\/index.html$/g.test(url) ? url.substring(0, url.length - 11) : url;
  }
  var globalScope;
  globalScope = "undefined" == typeof window ? "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : global : window;
  var global$1 = globalScope,
      Date = global$1.Date;
  global$1.assert = function(condition) {};
  var StringWrapper = function() {
    function StringWrapper() {}
    return StringWrapper.fromCharCode = function(code) {
      return String.fromCharCode(code);
    }, StringWrapper.charCodeAt = function(s, index) {
      return s.charCodeAt(index);
    }, StringWrapper.split = function(s, regExp) {
      return s.split(regExp);
    }, StringWrapper.equals = function(s, s2) {
      return s === s2;
    }, StringWrapper.stripLeft = function(s, charVal) {
      if (s && s.length) {
        for (var pos = 0,
            i = 0; i < s.length && s[i] == charVal; i++)
          pos++;
        s = s.substring(pos);
      }
      return s;
    }, StringWrapper.stripRight = function(s, charVal) {
      if (s && s.length) {
        for (var pos = s.length,
            i = s.length - 1; i >= 0 && s[i] == charVal; i--)
          pos--;
        s = s.substring(0, pos);
      }
      return s;
    }, StringWrapper.replace = function(s, from, replace) {
      return s.replace(from, replace);
    }, StringWrapper.replaceAll = function(s, from, replace) {
      return s.replace(from, replace);
    }, StringWrapper.slice = function(s, from, to) {
      return void 0 === from && (from = 0), void 0 === to && (to = null), s.slice(from, null === to ? void 0 : to);
    }, StringWrapper.replaceAllMapped = function(s, from, cb) {
      return s.replace(from, function() {
        for (var matches = [],
            _i = 0; _i < arguments.length; _i++)
          matches[_i - 0] = arguments[_i];
        return matches.splice(-2, 2), cb(matches);
      });
    }, StringWrapper.contains = function(s, substr) {
      return s.indexOf(substr) != -1;
    }, StringWrapper.compare = function(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }, StringWrapper;
  }(),
      NumberParseError = function(_super) {
        function NumberParseError(message) {
          _super.call(this), this.message = message;
        }
        return __extends(NumberParseError, _super), NumberParseError.prototype.toString = function() {
          return this.message;
        }, NumberParseError;
      }(Error),
      NumberWrapper = function() {
        function NumberWrapper() {}
        return NumberWrapper.toFixed = function(n, fractionDigits) {
          return n.toFixed(fractionDigits);
        }, NumberWrapper.equal = function(a, b) {
          return a === b;
        }, NumberWrapper.parseIntAutoRadix = function(text) {
          var result = parseInt(text);
          if (isNaN(result))
            throw new NumberParseError("Invalid integer literal when parsing " + text);
          return result;
        }, NumberWrapper.parseInt = function(text, radix) {
          if (10 == radix) {
            if (/^(\-|\+)?[0-9]+$/.test(text))
              return parseInt(text, radix);
          } else if (16 == radix) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text))
              return parseInt(text, radix);
          } else {
            var result = parseInt(text, radix);
            if (!isNaN(result))
              return result;
          }
          throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
        }, NumberWrapper.parseFloat = function(text) {
          return parseFloat(text);
        }, Object.defineProperty(NumberWrapper, "NaN", {
          get: function() {
            return NaN;
          },
          enumerable: !0,
          configurable: !0
        }), NumberWrapper.isNumeric = function(value) {
          return !isNaN(value - parseFloat(value));
        }, NumberWrapper.isNaN = function(value) {
          return isNaN(value);
        }, NumberWrapper.isInteger = function(value) {
          return Number.isInteger(value);
        }, NumberWrapper;
      }(),
      RegExpWrapper = function() {
        function RegExpWrapper() {}
        return RegExpWrapper.create = function(regExpStr, flags) {
          return void 0 === flags && (flags = ""), flags = flags.replace(/g/g, ""), new global$1.RegExp(regExpStr, flags + "g");
        }, RegExpWrapper.firstMatch = function(regExp, input) {
          return regExp.lastIndex = 0, regExp.exec(input);
        }, RegExpWrapper.test = function(regExp, input) {
          return regExp.lastIndex = 0, regExp.test(input);
        }, RegExpWrapper.matcher = function(regExp, input) {
          return regExp.lastIndex = 0, {
            re: regExp,
            input: input
          };
        }, RegExpWrapper.replaceAll = function(regExp, input, replace) {
          var c = regExp.exec(input),
              res = "";
          regExp.lastIndex = 0;
          for (var prev = 0; c; )
            res += input.substring(prev, c.index), res += replace(c), prev = c.index + c[0].length, regExp.lastIndex = prev, c = regExp.exec(input);
          return res += input.substring(prev);
        }, RegExpWrapper;
      }(),
      Json = function() {
        function Json() {}
        return Json.parse = function(s) {
          return global$1.JSON.parse(s);
        }, Json.stringify = function(data) {
          return global$1.JSON.stringify(data, null, 2);
        }, Json;
      }(),
      DateWrapper = function() {
        function DateWrapper() {}
        return DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
          return void 0 === month && (month = 1), void 0 === day && (day = 1), void 0 === hour && (hour = 0), void 0 === minutes && (minutes = 0), void 0 === seconds && (seconds = 0), void 0 === milliseconds && (milliseconds = 0), new Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
        }, DateWrapper.fromISOString = function(str) {
          return new Date(str);
        }, DateWrapper.fromMillis = function(ms) {
          return new Date(ms);
        }, DateWrapper.toMillis = function(date) {
          return date.getTime();
        }, DateWrapper.now = function() {
          return new Date;
        }, DateWrapper.toJson = function(date) {
          return date.toJSON();
        }, DateWrapper;
      }(),
      _symbolIterator = null,
      PromiseCompleter = function() {
        function PromiseCompleter() {
          var _this = this;
          this.promise = new Promise(function(res, rej) {
            _this.resolve = res, _this.reject = rej;
          });
        }
        return PromiseCompleter;
      }(),
      PromiseWrapper = function() {
        function PromiseWrapper() {}
        return PromiseWrapper.resolve = function(obj) {
          return Promise.resolve(obj);
        }, PromiseWrapper.reject = function(obj, _) {
          return Promise.reject(obj);
        }, PromiseWrapper.catchError = function(promise, onError) {
          return promise.catch(onError);
        }, PromiseWrapper.all = function(promises) {
          return 0 == promises.length ? Promise.resolve([]) : Promise.all(promises);
        }, PromiseWrapper.then = function(promise, success, rejection) {
          return promise.then(success, rejection);
        }, PromiseWrapper.wrap = function(computation) {
          return new Promise(function(res, rej) {
            try {
              res(computation());
            } catch (e) {
              rej(e);
            }
          });
        }, PromiseWrapper.scheduleMicrotask = function(computation) {
          PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function(_) {});
        }, PromiseWrapper.completer = function() {
          return new PromiseCompleter;
        }, PromiseWrapper;
      }(),
      ObservableWrapper = function() {
        function ObservableWrapper() {}
        return ObservableWrapper.subscribe = function(emitter, onNext, onError, onComplete) {
          return void 0 === onComplete && (onComplete = function() {}), onError = "function" == typeof onError && onError || noop, onComplete = "function" == typeof onComplete && onComplete || noop, emitter.subscribe({
            next: onNext,
            error: onError,
            complete: onComplete
          });
        }, ObservableWrapper.isObservable = function(obs) {
          return !!obs.subscribe;
        }, ObservableWrapper.hasSubscribers = function(obs) {
          return obs.observers.length > 0;
        }, ObservableWrapper.dispose = function(subscription) {
          subscription.unsubscribe();
        }, ObservableWrapper.callNext = function(emitter, value) {
          emitter.emit(value);
        }, ObservableWrapper.callEmit = function(emitter, value) {
          emitter.emit(value);
        }, ObservableWrapper.callError = function(emitter, error) {
          emitter.error(error);
        }, ObservableWrapper.callComplete = function(emitter) {
          emitter.complete();
        }, ObservableWrapper.fromPromise = function(promise) {
          return rxjs_observable_PromiseObservable.PromiseObservable.create(promise);
        }, ObservableWrapper.toPromise = function(obj) {
          return rxjs_operator_toPromise.toPromise.call(obj);
        }, ObservableWrapper;
      }(),
      EventEmitter$1 = function(_super) {
        function EventEmitter$1(isAsync) {
          void 0 === isAsync && (isAsync = !1), _super.call(this), this.__isAsync = isAsync;
        }
        return __extends(EventEmitter$1, _super), EventEmitter$1.prototype.emit = function(value) {
          _super.prototype.next.call(this, value);
        }, EventEmitter$1.prototype.next = function(value) {
          _super.prototype.next.call(this, value);
        }, EventEmitter$1.prototype.subscribe = function(generatorOrNext, error, complete) {
          var schedulerFn,
              errorFn = function(err) {
                return null;
              },
              completeFn = function() {
                return null;
              };
          return generatorOrNext && "object" == typeof generatorOrNext ? (schedulerFn = this.__isAsync ? function(value) {
            setTimeout(function() {
              return generatorOrNext.next(value);
            });
          } : function(value) {
            generatorOrNext.next(value);
          }, generatorOrNext.error && (errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return generatorOrNext.error(err);
            });
          } : function(err) {
            generatorOrNext.error(err);
          }), generatorOrNext.complete && (completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return generatorOrNext.complete();
            });
          } : function() {
            generatorOrNext.complete();
          })) : (schedulerFn = this.__isAsync ? function(value) {
            setTimeout(function() {
              return generatorOrNext(value);
            });
          } : function(value) {
            generatorOrNext(value);
          }, error && (errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return error(err);
            });
          } : function(err) {
            error(err);
          }), complete && (completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return complete();
            });
          } : function() {
            complete();
          })), _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
        }, EventEmitter$1;
      }(rxjs_Subject.Subject),
      Map$1 = global$1.Map,
      Set$1 = global$1.Set,
      createMapFromPairs = function() {
        try {
          if (1 === new Map$1([[1, 2]]).size)
            return function(pairs) {
              return new Map$1(pairs);
            };
        } catch (e) {}
        return function(pairs) {
          for (var map = new Map$1,
              i = 0; i < pairs.length; i++) {
            var pair = pairs[i];
            map.set(pair[0], pair[1]);
          }
          return map;
        };
      }(),
      createMapFromMap = function() {
        try {
          if (new Map$1(new Map$1))
            return function(m) {
              return new Map$1(m);
            };
        } catch (e) {}
        return function(m) {
          var map = new Map$1;
          return m.forEach(function(v, k) {
            map.set(k, v);
          }), map;
        };
      }(),
      _clearValues = function() {
        return (new Map$1).keys().next ? function(m) {
          for (var k,
              keyIterator = m.keys(); !(k = keyIterator.next()).done; )
            m.set(k.value, null);
        } : function(m) {
          m.forEach(function(v, k) {
            m.set(k, null);
          });
        };
      }(),
      _arrayFromMap = function() {
        try {
          if ((new Map$1).values().next)
            return function(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
        } catch (e) {}
        return function(m, getValues) {
          var res = ListWrapper.createFixedSize(m.size),
              i = 0;
          return m.forEach(function(v, k) {
            res[i] = getValues ? v : k, i++;
          }), res;
        };
      }(),
      MapWrapper = function() {
        function MapWrapper() {}
        return MapWrapper.clone = function(m) {
          return createMapFromMap(m);
        }, MapWrapper.createFromStringMap = function(stringMap) {
          var result = new Map$1;
          for (var prop in stringMap)
            result.set(prop, stringMap[prop]);
          return result;
        }, MapWrapper.toStringMap = function(m) {
          var r = {};
          return m.forEach(function(v, k) {
            return r[k] = v;
          }), r;
        }, MapWrapper.createFromPairs = function(pairs) {
          return createMapFromPairs(pairs);
        }, MapWrapper.clearValues = function(m) {
          _clearValues(m);
        }, MapWrapper.iterable = function(m) {
          return m;
        }, MapWrapper.keys = function(m) {
          return _arrayFromMap(m, !1);
        }, MapWrapper.values = function(m) {
          return _arrayFromMap(m, !0);
        }, MapWrapper;
      }(),
      StringMapWrapper = function() {
        function StringMapWrapper() {}
        return StringMapWrapper.create = function() {
          return {};
        }, StringMapWrapper.contains = function(map, key) {
          return map.hasOwnProperty(key);
        }, StringMapWrapper.get = function(map, key) {
          return map.hasOwnProperty(key) ? map[key] : void 0;
        }, StringMapWrapper.set = function(map, key, value) {
          map[key] = value;
        }, StringMapWrapper.keys = function(map) {
          return Object.keys(map);
        }, StringMapWrapper.values = function(map) {
          return Object.keys(map).reduce(function(r, a) {
            return r.push(map[a]), r;
          }, []);
        }, StringMapWrapper.isEmpty = function(map) {
          for (var prop in map)
            return !1;
          return !0;
        }, StringMapWrapper.delete = function(map, key) {
          delete map[key];
        }, StringMapWrapper.forEach = function(map, callback) {
          for (var prop in map)
            map.hasOwnProperty(prop) && callback(map[prop], prop);
        }, StringMapWrapper.merge = function(m1, m2) {
          var m = {};
          for (var attr in m1)
            m1.hasOwnProperty(attr) && (m[attr] = m1[attr]);
          for (var attr in m2)
            m2.hasOwnProperty(attr) && (m[attr] = m2[attr]);
          return m;
        }, StringMapWrapper.equals = function(m1, m2) {
          var k1 = Object.keys(m1),
              k2 = Object.keys(m2);
          if (k1.length != k2.length)
            return !1;
          for (var key,
              i = 0; i < k1.length; i++)
            if (key = k1[i], m1[key] !== m2[key])
              return !1;
          return !0;
        }, StringMapWrapper;
      }(),
      ListWrapper = function() {
        function ListWrapper() {}
        return ListWrapper.createFixedSize = function(size) {
          return new Array(size);
        }, ListWrapper.createGrowableSize = function(size) {
          return new Array(size);
        }, ListWrapper.clone = function(array) {
          return array.slice(0);
        }, ListWrapper.forEachWithIndex = function(array, fn) {
          for (var i = 0; i < array.length; i++)
            fn(array[i], i);
        }, ListWrapper.first = function(array) {
          return array ? array[0] : null;
        }, ListWrapper.last = function(array) {
          return array && 0 != array.length ? array[array.length - 1] : null;
        }, ListWrapper.indexOf = function(array, value, startIndex) {
          return void 0 === startIndex && (startIndex = 0), array.indexOf(value, startIndex);
        }, ListWrapper.contains = function(list, el) {
          return list.indexOf(el) !== -1;
        }, ListWrapper.reversed = function(array) {
          var a = ListWrapper.clone(array);
          return a.reverse();
        }, ListWrapper.concat = function(a, b) {
          return a.concat(b);
        }, ListWrapper.insert = function(list, index, value) {
          list.splice(index, 0, value);
        }, ListWrapper.removeAt = function(list, index) {
          var res = list[index];
          return list.splice(index, 1), res;
        }, ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        }, ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          return index > -1 && (list.splice(index, 1), !0);
        }, ListWrapper.clear = function(list) {
          list.length = 0;
        }, ListWrapper.isEmpty = function(list) {
          return 0 == list.length;
        }, ListWrapper.fill = function(list, value, start, end) {
          void 0 === start && (start = 0), void 0 === end && (end = null), list.fill(value, start, null === end ? list.length : end);
        }, ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return !1;
          for (var i = 0; i < a.length; ++i)
            if (a[i] !== b[i])
              return !1;
          return !0;
        }, ListWrapper.slice = function(l, from, to) {
          return void 0 === from && (from = 0), void 0 === to && (to = null), l.slice(from, null === to ? void 0 : to);
        }, ListWrapper.splice = function(l, from, length) {
          return l.splice(from, length);
        }, ListWrapper.sort = function(l, compareFn) {
          isPresent(compareFn) ? l.sort(compareFn) : l.sort();
        }, ListWrapper.toString = function(l) {
          return l.toString();
        }, ListWrapper.toJSON = function(l) {
          return JSON.stringify(l);
        }, ListWrapper.maximum = function(list, predicate) {
          if (0 == list.length)
            return null;
          for (var solution = null,
              maxValue = -(1 / 0),
              index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (!isBlank(candidate)) {
              var candidateValue = predicate(candidate);
              candidateValue > maxValue && (solution = candidate, maxValue = candidateValue);
            }
          }
          return solution;
        }, ListWrapper.flatten = function(list) {
          var target = [];
          return _flattenArray(list, target), target;
        }, ListWrapper.addAll = function(list, source) {
          for (var i = 0; i < source.length; i++)
            list.push(source[i]);
        }, ListWrapper;
      }(),
      BaseException = (function() {
        var test = new Set$1([1, 2, 3]);
        return 3 === test.size ? function(lst) {
          return new Set$1(lst);
        } : function(lst) {
          var res = new Set$1(lst);
          if (res.size !== lst.length)
            for (var i = 0; i < lst.length; i++)
              res.add(lst[i]);
          return res;
        };
      }(), function(_super) {
        function BaseException(message) {
          void 0 === message && (message = "--"), _super.call(this, message), this.message = message, this.stack = new Error(message).stack;
        }
        return __extends(BaseException, _super), BaseException.prototype.toString = function() {
          return this.message;
        }, BaseException;
      }(Error)),
      InvalidPipeArgumentException = function(_super) {
        function InvalidPipeArgumentException(type, value) {
          _super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify(type) + "'");
        }
        return __extends(InvalidPipeArgumentException, _super), InvalidPipeArgumentException;
      }(BaseException),
      ObservableStrategy = function() {
        function ObservableStrategy() {}
        return ObservableStrategy.prototype.createSubscription = function(async, updateLatestValue) {
          return ObservableWrapper.subscribe(async, updateLatestValue, function(e) {
            throw e;
          });
        }, ObservableStrategy.prototype.dispose = function(subscription) {
          ObservableWrapper.dispose(subscription);
        }, ObservableStrategy.prototype.onDestroy = function(subscription) {
          ObservableWrapper.dispose(subscription);
        }, ObservableStrategy;
      }(),
      PromiseStrategy = function() {
        function PromiseStrategy() {}
        return PromiseStrategy.prototype.createSubscription = function(async, updateLatestValue) {
          return async.then(updateLatestValue, function(e) {
            throw e;
          });
        }, PromiseStrategy.prototype.dispose = function(subscription) {}, PromiseStrategy.prototype.onDestroy = function(subscription) {}, PromiseStrategy;
      }(),
      _promiseStrategy = new PromiseStrategy,
      _observableStrategy = new ObservableStrategy,
      AsyncPipe = function() {
        function AsyncPipe(_ref) {
          this._latestValue = null, this._latestReturnedValue = null, this._subscription = null, this._obj = null, this._strategy = null, this._ref = _ref;
        }
        return AsyncPipe.prototype.ngOnDestroy = function() {
          isPresent(this._subscription) && this._dispose();
        }, AsyncPipe.prototype.transform = function(obj) {
          return isBlank(this._obj) ? (isPresent(obj) && this._subscribe(obj), this._latestReturnedValue = this._latestValue, this._latestValue) : obj !== this._obj ? (this._dispose(), this.transform(obj)) : this._latestValue === this._latestReturnedValue ? this._latestReturnedValue : (this._latestReturnedValue = this._latestValue, _angular_core.WrappedValue.wrap(this._latestValue));
        }, AsyncPipe.prototype._subscribe = function(obj) {
          var _this = this;
          this._obj = obj, this._strategy = this._selectStrategy(obj), this._subscription = this._strategy.createSubscription(obj, function(value) {
            return _this._updateLatestValue(obj, value);
          });
        }, AsyncPipe.prototype._selectStrategy = function(obj) {
          if (isPromise(obj))
            return _promiseStrategy;
          if (ObservableWrapper.isObservable(obj))
            return _observableStrategy;
          throw new InvalidPipeArgumentException(AsyncPipe, obj);
        }, AsyncPipe.prototype._dispose = function() {
          this._strategy.dispose(this._subscription), this._latestValue = null, this._latestReturnedValue = null, this._subscription = null, this._obj = null;
        }, AsyncPipe.prototype._updateLatestValue = function(async, value) {
          async === this._obj && (this._latestValue = value, this._ref.markForCheck());
        }, AsyncPipe;
      }();
  AsyncPipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{
      name: "async",
      pure: !1
    }]
  }], AsyncPipe.ctorParameters = [{type: _angular_core.ChangeDetectorRef}];
  var NumberFormatStyle;
  !function(NumberFormatStyle) {
    NumberFormatStyle[NumberFormatStyle.Decimal = 0] = "Decimal", NumberFormatStyle[NumberFormatStyle.Percent = 1] = "Percent", NumberFormatStyle[NumberFormatStyle.Currency = 2] = "Currency";
  }(NumberFormatStyle || (NumberFormatStyle = {}));
  var NumberFormatter = function() {
    function NumberFormatter() {}
    return NumberFormatter.format = function(num, locale, style, _a) {
      var _b = void 0 === _a ? {} : _a,
          _c = _b.minimumIntegerDigits,
          minimumIntegerDigits = void 0 === _c ? 1 : _c,
          _d = _b.minimumFractionDigits,
          minimumFractionDigits = void 0 === _d ? 0 : _d,
          _e = _b.maximumFractionDigits,
          maximumFractionDigits = void 0 === _e ? 3 : _e,
          currency = _b.currency,
          _f = _b.currencyAsSymbol,
          currencyAsSymbol = void 0 !== _f && _f,
          intlOptions = {
            minimumIntegerDigits: minimumIntegerDigits,
            minimumFractionDigits: minimumFractionDigits,
            maximumFractionDigits: maximumFractionDigits
          };
      return intlOptions.style = NumberFormatStyle[style].toLowerCase(), style == NumberFormatStyle.Currency && (intlOptions.currency = currency, intlOptions.currencyDisplay = currencyAsSymbol ? "symbol" : "code"), new Intl.NumberFormat(locale, intlOptions).format(num);
    }, NumberFormatter;
  }(),
      DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsaZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|Z|G+|w+))(.*)/,
      PATTERN_ALIASES = {
        yMMMdjms: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 3), digitCondition("day", 1), digitCondition("hour", 1), digitCondition("minute", 1), digitCondition("second", 1)])),
        yMdjm: datePartGetterFactory(combine([digitCondition("year", 1), digitCondition("month", 1), digitCondition("day", 1), digitCondition("hour", 1), digitCondition("minute", 1)])),
        yMMMMEEEEd: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 4), nameCondition("weekday", 4), digitCondition("day", 1)])),
        yMMMMd: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 4), digitCondition("day", 1)])),
        yMMMd: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 3), digitCondition("day", 1)])),
        yMd: datePartGetterFactory(combine([digitCondition("year", 1), digitCondition("month", 1), digitCondition("day", 1)])),
        jms: datePartGetterFactory(combine([digitCondition("hour", 1), digitCondition("second", 1), digitCondition("minute", 1)])),
        jm: datePartGetterFactory(combine([digitCondition("hour", 1), digitCondition("minute", 1)]))
      },
      DATE_FORMATS = {
        yyyy: datePartGetterFactory(digitCondition("year", 4)),
        yy: datePartGetterFactory(digitCondition("year", 2)),
        y: datePartGetterFactory(digitCondition("year", 1)),
        MMMM: datePartGetterFactory(nameCondition("month", 4)),
        MMM: datePartGetterFactory(nameCondition("month", 3)),
        MM: datePartGetterFactory(digitCondition("month", 2)),
        M: datePartGetterFactory(digitCondition("month", 1)),
        LLLL: datePartGetterFactory(nameCondition("month", 4)),
        dd: datePartGetterFactory(digitCondition("day", 2)),
        d: datePartGetterFactory(digitCondition("day", 1)),
        HH: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition("hour", 2), !1))),
        H: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), !1))),
        hh: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition("hour", 2), !0))),
        h: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), !0))),
        jj: datePartGetterFactory(digitCondition("hour", 2)),
        j: datePartGetterFactory(digitCondition("hour", 1)),
        mm: digitModifier(datePartGetterFactory(digitCondition("minute", 2))),
        m: datePartGetterFactory(digitCondition("minute", 1)),
        ss: digitModifier(datePartGetterFactory(digitCondition("second", 2))),
        s: datePartGetterFactory(digitCondition("second", 1)),
        sss: datePartGetterFactory(digitCondition("second", 3)),
        EEEE: datePartGetterFactory(nameCondition("weekday", 4)),
        EEE: datePartGetterFactory(nameCondition("weekday", 3)),
        EE: datePartGetterFactory(nameCondition("weekday", 2)),
        E: datePartGetterFactory(nameCondition("weekday", 1)),
        a: hourClockExtracter(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), !0))),
        Z: datePartGetterFactory({timeZoneName: "long"}),
        z: datePartGetterFactory({timeZoneName: "short"}),
        ww: datePartGetterFactory({}),
        w: datePartGetterFactory({}),
        G: datePartGetterFactory(nameCondition("era", 1)),
        GG: datePartGetterFactory(nameCondition("era", 2)),
        GGG: datePartGetterFactory(nameCondition("era", 3)),
        GGGG: datePartGetterFactory(nameCondition("era", 4))
      },
      datePartsFormatterCache = new Map,
      slice = [].slice,
      DateFormatter = function() {
        function DateFormatter() {}
        return DateFormatter.format = function(date, locale, pattern) {
          return dateFormatter(pattern, date, locale);
        }, DateFormatter;
      }(),
      defaultLocale = "en-US",
      DatePipe = function() {
        function DatePipe() {}
        return DatePipe.prototype.transform = function(value, pattern) {
          if (void 0 === pattern && (pattern = "mediumDate"), isBlank(value))
            return null;
          if (!this.supports(value))
            throw new InvalidPipeArgumentException(DatePipe, value);
          return NumberWrapper.isNumeric(value) ? value = DateWrapper.fromMillis(NumberWrapper.parseInt(value, 10)) : isString(value) && (value = DateWrapper.fromISOString(value)), StringMapWrapper.contains(DatePipe._ALIASES, pattern) && (pattern = StringMapWrapper.get(DatePipe._ALIASES, pattern)), DateFormatter.format(value, defaultLocale, pattern);
        }, DatePipe.prototype.supports = function(obj) {
          return !(!isDate(obj) && !NumberWrapper.isNumeric(obj)) || !(!isString(obj) || !isDate(DateWrapper.fromISOString(obj)));
        }, DatePipe;
      }();
  DatePipe._ALIASES = {
    medium: "yMMMdjms",
    short: "yMdjm",
    fullDate: "yMMMMEEEEd",
    longDate: "yMMMMd",
    mediumDate: "yMMMd",
    shortDate: "yMd",
    mediumTime: "jms",
    shortTime: "jm"
  }, DatePipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{
      name: "date",
      pure: !0
    }]
  }];
  var NgLocalization = function() {
    function NgLocalization() {}
    return NgLocalization;
  }(),
      _INTERPOLATION_REGEXP = /#/g,
      I18nPluralPipe = function() {
        function I18nPluralPipe(_localization) {
          this._localization = _localization;
        }
        return I18nPluralPipe.prototype.transform = function(value, pluralMap) {
          if (isBlank(value))
            return "";
          if (!isStringMap(pluralMap))
            throw new InvalidPipeArgumentException(I18nPluralPipe, pluralMap);
          var key = getPluralCategory(value, Object.getOwnPropertyNames(pluralMap), this._localization);
          return StringWrapper.replaceAll(pluralMap[key], _INTERPOLATION_REGEXP, value.toString());
        }, I18nPluralPipe;
      }();
  I18nPluralPipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{
      name: "i18nPlural",
      pure: !0
    }]
  }], I18nPluralPipe.ctorParameters = [{type: NgLocalization}];
  var I18nSelectPipe = function() {
    function I18nSelectPipe() {}
    return I18nSelectPipe.prototype.transform = function(value, mapping) {
      if (isBlank(value))
        return "";
      if (!isStringMap(mapping))
        throw new InvalidPipeArgumentException(I18nSelectPipe, mapping);
      return mapping.hasOwnProperty(value) ? mapping[value] : "";
    }, I18nSelectPipe;
  }();
  I18nSelectPipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{
      name: "i18nSelect",
      pure: !0
    }]
  }];
  var JsonPipe = function() {
    function JsonPipe() {}
    return JsonPipe.prototype.transform = function(value) {
      return Json.stringify(value);
    }, JsonPipe;
  }();
  JsonPipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{
      name: "json",
      pure: !1
    }]
  }];
  var LowerCasePipe = function() {
    function LowerCasePipe() {}
    return LowerCasePipe.prototype.transform = function(value) {
      if (isBlank(value))
        return value;
      if (!isString(value))
        throw new InvalidPipeArgumentException(LowerCasePipe, value);
      return value.toLowerCase();
    }, LowerCasePipe;
  }();
  LowerCasePipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{name: "lowercase"}]
  }];
  var defaultLocale$1 = "en-US",
      _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(\-(\d+))?)?$/g,
      DecimalPipe = function() {
        function DecimalPipe() {}
        return DecimalPipe.prototype.transform = function(value, digits) {
          return void 0 === digits && (digits = null), formatNumber(DecimalPipe, value, NumberFormatStyle.Decimal, digits);
        }, DecimalPipe;
      }();
  DecimalPipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{name: "number"}]
  }];
  var PercentPipe = function() {
    function PercentPipe() {}
    return PercentPipe.prototype.transform = function(value, digits) {
      return void 0 === digits && (digits = null), formatNumber(PercentPipe, value, NumberFormatStyle.Percent, digits);
    }, PercentPipe;
  }();
  PercentPipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{name: "percent"}]
  }];
  var CurrencyPipe = function() {
    function CurrencyPipe() {}
    return CurrencyPipe.prototype.transform = function(value, currencyCode, symbolDisplay, digits) {
      return void 0 === currencyCode && (currencyCode = "USD"), void 0 === symbolDisplay && (symbolDisplay = !1), void 0 === digits && (digits = null), formatNumber(CurrencyPipe, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
    }, CurrencyPipe;
  }();
  CurrencyPipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{name: "currency"}]
  }];
  var ReplacePipe = function() {
    function ReplacePipe() {}
    return ReplacePipe.prototype.transform = function(value, pattern, replacement) {
      if (isBlank(value))
        return value;
      if (!this._supportedInput(value))
        throw new InvalidPipeArgumentException(ReplacePipe, value);
      var input = value.toString();
      if (!this._supportedPattern(pattern))
        throw new InvalidPipeArgumentException(ReplacePipe, pattern);
      if (!this._supportedReplacement(replacement))
        throw new InvalidPipeArgumentException(ReplacePipe, replacement);
      if (isFunction(replacement)) {
        var rgxPattern = isString(pattern) ? RegExpWrapper.create(pattern) : pattern;
        return StringWrapper.replaceAllMapped(input, rgxPattern, replacement);
      }
      return pattern instanceof RegExp ? StringWrapper.replaceAll(input, pattern, replacement) : StringWrapper.replace(input, pattern, replacement);
    }, ReplacePipe.prototype._supportedInput = function(input) {
      return isString(input) || isNumber(input);
    }, ReplacePipe.prototype._supportedPattern = function(pattern) {
      return isString(pattern) || pattern instanceof RegExp;
    }, ReplacePipe.prototype._supportedReplacement = function(replacement) {
      return isString(replacement) || isFunction(replacement);
    }, ReplacePipe;
  }();
  ReplacePipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{name: "replace"}]
  }];
  var SlicePipe = function() {
    function SlicePipe() {}
    return SlicePipe.prototype.transform = function(value, start, end) {
      if (void 0 === end && (end = null), isBlank(value))
        return value;
      if (!this.supports(value))
        throw new InvalidPipeArgumentException(SlicePipe, value);
      return isString(value) ? StringWrapper.slice(value, start, end) : ListWrapper.slice(value, start, end);
    }, SlicePipe.prototype.supports = function(obj) {
      return isString(obj) || isArray(obj);
    }, SlicePipe;
  }();
  SlicePipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{
      name: "slice",
      pure: !1
    }]
  }];
  var UpperCasePipe = function() {
    function UpperCasePipe() {}
    return UpperCasePipe.prototype.transform = function(value) {
      if (isBlank(value))
        return value;
      if (!isString(value))
        throw new InvalidPipeArgumentException(UpperCasePipe, value);
      return value.toUpperCase();
    }, UpperCasePipe;
  }();
  UpperCasePipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{name: "uppercase"}]
  }];
  var COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, CurrencyPipe, DatePipe, ReplacePipe, I18nPluralPipe, I18nSelectPipe],
      NgClass = function() {
        function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
          this._iterableDiffers = _iterableDiffers, this._keyValueDiffers = _keyValueDiffers, this._ngEl = _ngEl, this._renderer = _renderer, this._initialClasses = [];
        }
        return Object.defineProperty(NgClass.prototype, "initialClasses", {
          set: function(v) {
            this._applyInitialClasses(!0), this._initialClasses = isPresent(v) && isString(v) ? v.split(" ") : [], this._applyInitialClasses(!1), this._applyClasses(this._rawClass, !1);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgClass.prototype, "rawClass", {
          set: function(v) {
            this._cleanupClasses(this._rawClass), isString(v) && (v = v.split(" ")), this._rawClass = v, this._iterableDiffer = null, this._keyValueDiffer = null, isPresent(v) && (isListLikeIterable(v) ? this._iterableDiffer = this._iterableDiffers.find(v).create(null) : this._keyValueDiffer = this._keyValueDiffers.find(v).create(null));
          },
          enumerable: !0,
          configurable: !0
        }), NgClass.prototype.ngDoCheck = function() {
          if (isPresent(this._iterableDiffer)) {
            var changes = this._iterableDiffer.diff(this._rawClass);
            isPresent(changes) && this._applyIterableChanges(changes);
          }
          if (isPresent(this._keyValueDiffer)) {
            var changes = this._keyValueDiffer.diff(this._rawClass);
            isPresent(changes) && this._applyKeyValueChanges(changes);
          }
        }, NgClass.prototype.ngOnDestroy = function() {
          this._cleanupClasses(this._rawClass);
        }, NgClass.prototype._cleanupClasses = function(rawClassVal) {
          this._applyClasses(rawClassVal, !0), this._applyInitialClasses(!1);
        }, NgClass.prototype._applyKeyValueChanges = function(changes) {
          var _this = this;
          changes.forEachAddedItem(function(record) {
            _this._toggleClass(record.key, record.currentValue);
          }), changes.forEachChangedItem(function(record) {
            _this._toggleClass(record.key, record.currentValue);
          }), changes.forEachRemovedItem(function(record) {
            record.previousValue && _this._toggleClass(record.key, !1);
          });
        }, NgClass.prototype._applyIterableChanges = function(changes) {
          var _this = this;
          changes.forEachAddedItem(function(record) {
            _this._toggleClass(record.item, !0);
          }), changes.forEachRemovedItem(function(record) {
            _this._toggleClass(record.item, !1);
          });
        }, NgClass.prototype._applyInitialClasses = function(isCleanup) {
          var _this = this;
          this._initialClasses.forEach(function(className) {
            return _this._toggleClass(className, !isCleanup);
          });
        }, NgClass.prototype._applyClasses = function(rawClassVal, isCleanup) {
          var _this = this;
          isPresent(rawClassVal) && (isArray(rawClassVal) ? rawClassVal.forEach(function(className) {
            return _this._toggleClass(className, !isCleanup);
          }) : rawClassVal instanceof Set ? rawClassVal.forEach(function(className) {
            return _this._toggleClass(className, !isCleanup);
          }) : StringMapWrapper.forEach(rawClassVal, function(expVal, className) {
            isPresent(expVal) && _this._toggleClass(className, !isCleanup);
          }));
        }, NgClass.prototype._toggleClass = function(className, enabled) {
          if (className = className.trim(), className.length > 0)
            if (className.indexOf(" ") > -1)
              for (var classes = className.split(/\s+/g),
                  i = 0,
                  len = classes.length; i < len; i++)
                this._renderer.setElementClass(this._ngEl.nativeElement, classes[i], enabled);
            else
              this._renderer.setElementClass(this._ngEl.nativeElement, className, enabled);
        }, NgClass;
      }();
  NgClass.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngClass]",
      inputs: ["rawClass: ngClass", "initialClasses: class"]
    }]
  }], NgClass.ctorParameters = [{type: _angular_core.IterableDiffers}, {type: _angular_core.KeyValueDiffers}, {type: _angular_core.ElementRef}, {type: _angular_core.Renderer}];
  var NgForRow = function() {
    function NgForRow($implicit, index, count) {
      this.$implicit = $implicit, this.index = index, this.count = count;
    }
    return Object.defineProperty(NgForRow.prototype, "first", {
      get: function() {
        return 0 === this.index;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgForRow.prototype, "last", {
      get: function() {
        return this.index === this.count - 1;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgForRow.prototype, "even", {
      get: function() {
        return this.index % 2 === 0;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgForRow.prototype, "odd", {
      get: function() {
        return !this.even;
      },
      enumerable: !0,
      configurable: !0
    }), NgForRow;
  }(),
      NgFor = function() {
        function NgFor(_viewContainer, _templateRef, _iterableDiffers, _cdr) {
          this._viewContainer = _viewContainer, this._templateRef = _templateRef, this._iterableDiffers = _iterableDiffers, this._cdr = _cdr;
        }
        return Object.defineProperty(NgFor.prototype, "ngForOf", {
          set: function(value) {
            if (this._ngForOf = value, isBlank(this._differ) && isPresent(value))
              try {
                this._differ = this._iterableDiffers.find(value).create(this._cdr, this._ngForTrackBy);
              } catch (e) {
                throw new BaseException("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
              }
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgFor.prototype, "ngForTemplate", {
          set: function(value) {
            isPresent(value) && (this._templateRef = value);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgFor.prototype, "ngForTrackBy", {
          set: function(value) {
            this._ngForTrackBy = value;
          },
          enumerable: !0,
          configurable: !0
        }), NgFor.prototype.ngDoCheck = function() {
          if (isPresent(this._differ)) {
            var changes = this._differ.diff(this._ngForOf);
            isPresent(changes) && this._applyChanges(changes);
          }
        }, NgFor.prototype._applyChanges = function(changes) {
          var _this = this,
              recordViewTuples = [];
          changes.forEachRemovedItem(function(removedRecord) {
            return recordViewTuples.push(new RecordViewTuple(removedRecord, null));
          }), changes.forEachMovedItem(function(movedRecord) {
            return recordViewTuples.push(new RecordViewTuple(movedRecord, null));
          });
          var insertTuples = this._bulkRemove(recordViewTuples);
          changes.forEachAddedItem(function(addedRecord) {
            return insertTuples.push(new RecordViewTuple(addedRecord, null));
          }), this._bulkInsert(insertTuples);
          for (var i = 0; i < insertTuples.length; i++)
            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
          for (var i = 0,
              ilen = this._viewContainer.length; i < ilen; i++) {
            var viewRef = this._viewContainer.get(i);
            viewRef.context.index = i, viewRef.context.count = ilen;
          }
          changes.forEachIdentityChange(function(record) {
            var viewRef = _this._viewContainer.get(record.currentIndex);
            viewRef.context.$implicit = record.item;
          });
        }, NgFor.prototype._perViewChange = function(view, record) {
          view.context.$implicit = record.item;
        }, NgFor.prototype._bulkRemove = function(tuples) {
          tuples.sort(function(a, b) {
            return a.record.previousIndex - b.record.previousIndex;
          });
          for (var movedTuples = [],
              i = tuples.length - 1; i >= 0; i--) {
            var tuple = tuples[i];
            isPresent(tuple.record.currentIndex) ? (tuple.view = this._viewContainer.detach(tuple.record.previousIndex), movedTuples.push(tuple)) : this._viewContainer.remove(tuple.record.previousIndex);
          }
          return movedTuples;
        }, NgFor.prototype._bulkInsert = function(tuples) {
          tuples.sort(function(a, b) {
            return a.record.currentIndex - b.record.currentIndex;
          });
          for (var i = 0; i < tuples.length; i++) {
            var tuple = tuples[i];
            isPresent(tuple.view) ? this._viewContainer.insert(tuple.view, tuple.record.currentIndex) : tuple.view = this._viewContainer.createEmbeddedView(this._templateRef, new NgForRow(null, null, null), tuple.record.currentIndex);
          }
          return tuples;
        }, NgFor;
      }();
  NgFor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngFor][ngForOf]",
      inputs: ["ngForTrackBy", "ngForOf", "ngForTemplate"]
    }]
  }], NgFor.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}, {type: _angular_core.IterableDiffers}, {type: _angular_core.ChangeDetectorRef}];
  var RecordViewTuple = function() {
    function RecordViewTuple(record, view) {
      this.record = record, this.view = view;
    }
    return RecordViewTuple;
  }(),
      NgIf = function() {
        function NgIf(_viewContainer, _templateRef) {
          this._viewContainer = _viewContainer, this._templateRef = _templateRef, this._prevCondition = null;
        }
        return Object.defineProperty(NgIf.prototype, "ngIf", {
          set: function(newCondition) {
            !newCondition || !isBlank(this._prevCondition) && this._prevCondition ? newCondition || !isBlank(this._prevCondition) && !this._prevCondition || (this._prevCondition = !1, this._viewContainer.clear()) : (this._prevCondition = !0, this._viewContainer.createEmbeddedView(this._templateRef));
          },
          enumerable: !0,
          configurable: !0
        }), NgIf;
      }();
  NgIf.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngIf]",
      inputs: ["ngIf"]
    }]
  }], NgIf.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}];
  var _CASE_DEFAULT = new Object,
      _warned = !1,
      SwitchView = function() {
        function SwitchView(_viewContainerRef, _templateRef) {
          this._viewContainerRef = _viewContainerRef, this._templateRef = _templateRef;
        }
        return SwitchView.prototype.create = function() {
          this._viewContainerRef.createEmbeddedView(this._templateRef);
        }, SwitchView.prototype.destroy = function() {
          this._viewContainerRef.clear();
        }, SwitchView;
      }(),
      NgSwitch = function() {
        function NgSwitch() {
          this._useDefault = !1, this._valueViews = new Map$1, this._activeViews = [];
        }
        return Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
          set: function(value) {
            this._emptyAllActiveViews(), this._useDefault = !1;
            var views = this._valueViews.get(value);
            isBlank(views) && (this._useDefault = !0, views = normalizeBlank(this._valueViews.get(_CASE_DEFAULT))), this._activateViews(views), this._switchValue = value;
          },
          enumerable: !0,
          configurable: !0
        }), NgSwitch.prototype._onCaseValueChanged = function(oldCase, newCase, view) {
          this._deregisterView(oldCase, view), this._registerView(newCase, view), oldCase === this._switchValue ? (view.destroy(), ListWrapper.remove(this._activeViews, view)) : newCase === this._switchValue && (this._useDefault && (this._useDefault = !1, this._emptyAllActiveViews()), view.create(), this._activeViews.push(view)), 0 !== this._activeViews.length || this._useDefault || (this._useDefault = !0, this._activateViews(this._valueViews.get(_CASE_DEFAULT)));
        }, NgSwitch.prototype._emptyAllActiveViews = function() {
          for (var activeContainers = this._activeViews,
              i = 0; i < activeContainers.length; i++)
            activeContainers[i].destroy();
          this._activeViews = [];
        }, NgSwitch.prototype._activateViews = function(views) {
          if (isPresent(views)) {
            for (var i = 0; i < views.length; i++)
              views[i].create();
            this._activeViews = views;
          }
        }, NgSwitch.prototype._registerView = function(value, view) {
          var views = this._valueViews.get(value);
          isBlank(views) && (views = [], this._valueViews.set(value, views)), views.push(view);
        }, NgSwitch.prototype._deregisterView = function(value, view) {
          if (value !== _CASE_DEFAULT) {
            var views = this._valueViews.get(value);
            1 == views.length ? this._valueViews.delete(value) : ListWrapper.remove(views, view);
          }
        }, NgSwitch;
      }();
  NgSwitch.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngSwitch]",
      inputs: ["ngSwitch"]
    }]
  }];
  var NgSwitchCase = function() {
    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
      this._value = _CASE_DEFAULT, this._switch = ngSwitch, this._view = new SwitchView(viewContainer, templateRef);
    }
    return Object.defineProperty(NgSwitchCase.prototype, "ngSwitchCase", {
      set: function(value) {
        this._switch._onCaseValueChanged(this._value, value, this._view), this._value = value;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgSwitchCase.prototype, "ngSwitchWhen", {
      set: function(value) {
        _warned || (_warned = !0, console.warn("*ngSwitchWhen is deprecated and will be removed. Use *ngSwitchCase instead")), this._switch._onCaseValueChanged(this._value, value, this._view), this._value = value;
      },
      enumerable: !0,
      configurable: !0
    }), NgSwitchCase;
  }();
  NgSwitchCase.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngSwitchCase],[ngSwitchWhen]",
      inputs: ["ngSwitchCase", "ngSwitchWhen"]
    }]
  }], NgSwitchCase.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}, {
    type: NgSwitch,
    decorators: [{type: _angular_core.Host}]
  }];
  var NgSwitchDefault = function() {
    function NgSwitchDefault(viewContainer, templateRef, sswitch) {
      sswitch._registerView(_CASE_DEFAULT, new SwitchView(viewContainer, templateRef));
    }
    return NgSwitchDefault;
  }();
  NgSwitchDefault.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "[ngSwitchDefault]"}]
  }], NgSwitchDefault.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}, {
    type: NgSwitch,
    decorators: [{type: _angular_core.Host}]
  }];
  var NgPluralCase = function() {
    function NgPluralCase(value, template, viewContainer) {
      this.value = value, this._view = new SwitchView(viewContainer, template);
    }
    return NgPluralCase;
  }();
  NgPluralCase.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "[ngPluralCase]"}]
  }], NgPluralCase.ctorParameters = [{
    type: void 0,
    decorators: [{
      type: _angular_core.Attribute,
      args: ["ngPluralCase"]
    }]
  }, {type: _angular_core.TemplateRef}, {type: _angular_core.ViewContainerRef}];
  var NgPlural = function() {
    function NgPlural(_localization) {
      this._localization = _localization, this._caseViews = {}, this.cases = null;
    }
    return Object.defineProperty(NgPlural.prototype, "ngPlural", {
      set: function(value) {
        this._switchValue = value, this._updateView();
      },
      enumerable: !0,
      configurable: !0
    }), NgPlural.prototype.ngAfterContentInit = function() {
      var _this = this;
      this.cases.forEach(function(pluralCase) {
        _this._caseViews[pluralCase.value] = pluralCase._view;
      }), this._updateView();
    }, NgPlural.prototype._updateView = function() {
      this._clearViews();
      var key = getPluralCategory(this._switchValue, Object.getOwnPropertyNames(this._caseViews), this._localization);
      this._activateView(this._caseViews[key]);
    }, NgPlural.prototype._clearViews = function() {
      isPresent(this._activeView) && this._activeView.destroy();
    }, NgPlural.prototype._activateView = function(view) {
      isPresent(view) && (this._activeView = view, this._activeView.create());
    }, NgPlural;
  }();
  NgPlural.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "[ngPlural]"}]
  }], NgPlural.ctorParameters = [{type: NgLocalization}], NgPlural.propDecorators = {
    cases: [{
      type: _angular_core.ContentChildren,
      args: [NgPluralCase]
    }],
    ngPlural: [{type: _angular_core.Input}]
  };
  var NgStyle = function() {
    function NgStyle(_differs, _ngEl, _renderer) {
      this._differs = _differs, this._ngEl = _ngEl, this._renderer = _renderer;
    }
    return Object.defineProperty(NgStyle.prototype, "rawStyle", {
      set: function(v) {
        this._rawStyle = v, isBlank(this._differ) && isPresent(v) && (this._differ = this._differs.find(this._rawStyle).create(null));
      },
      enumerable: !0,
      configurable: !0
    }), NgStyle.prototype.ngDoCheck = function() {
      if (isPresent(this._differ)) {
        var changes = this._differ.diff(this._rawStyle);
        isPresent(changes) && this._applyChanges(changes);
      }
    }, NgStyle.prototype._applyChanges = function(changes) {
      var _this = this;
      changes.forEachAddedItem(function(record) {
        _this._setStyle(record.key, record.currentValue);
      }), changes.forEachChangedItem(function(record) {
        _this._setStyle(record.key, record.currentValue);
      }), changes.forEachRemovedItem(function(record) {
        _this._setStyle(record.key, null);
      });
    }, NgStyle.prototype._setStyle = function(name, val) {
      this._renderer.setElementStyle(this._ngEl.nativeElement, name, val);
    }, NgStyle;
  }();
  NgStyle.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngStyle]",
      inputs: ["rawStyle: ngStyle"]
    }]
  }], NgStyle.ctorParameters = [{type: _angular_core.KeyValueDiffers}, {type: _angular_core.ElementRef}, {type: _angular_core.Renderer}];
  var NgTemplateOutlet = function() {
    function NgTemplateOutlet(_viewContainerRef) {
      this._viewContainerRef = _viewContainerRef;
    }
    return Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
      set: function(context) {
        this._context !== context && (this._context = context, isPresent(this._viewRef) && this.createView());
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
      set: function(templateRef) {
        this._templateRef !== templateRef && (this._templateRef = templateRef, this.createView());
      },
      enumerable: !0,
      configurable: !0
    }), NgTemplateOutlet.prototype.createView = function() {
      isPresent(this._viewRef) && this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef)), isPresent(this._templateRef) && (this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context));
    }, NgTemplateOutlet;
  }();
  NgTemplateOutlet.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "[ngTemplateOutlet]"}]
  }], NgTemplateOutlet.ctorParameters = [{type: _angular_core.ViewContainerRef}], NgTemplateOutlet.propDecorators = {
    ngOutletContext: [{type: _angular_core.Input}],
    ngTemplateOutlet: [{type: _angular_core.Input}]
  };
  var CORE_DIRECTIVES = [NgClass, NgFor, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase],
      NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken("NgValueAccessor"),
      AbstractControlDirective = function() {
        function AbstractControlDirective() {}
        return Object.defineProperty(AbstractControlDirective.prototype, "control", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "value", {
          get: function() {
            return isPresent(this.control) ? this.control.value : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "valid", {
          get: function() {
            return isPresent(this.control) ? this.control.valid : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "errors", {
          get: function() {
            return isPresent(this.control) ? this.control.errors : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
          get: function() {
            return isPresent(this.control) ? this.control.pristine : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
          get: function() {
            return isPresent(this.control) ? this.control.dirty : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "touched", {
          get: function() {
            return isPresent(this.control) ? this.control.touched : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
          get: function() {
            return isPresent(this.control) ? this.control.untouched : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "path", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), AbstractControlDirective;
      }(),
      NgControl = function(_super) {
        function NgControl() {
          for (var args = [],
              _i = 0; _i < arguments.length; _i++)
            args[_i - 0] = arguments[_i];
          _super.apply(this, args), this.name = null, this.valueAccessor = null;
        }
        return __extends(NgControl, _super), Object.defineProperty(NgControl.prototype, "validator", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControl.prototype, "asyncValidator", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), NgControl;
      }(AbstractControlDirective),
      RADIO_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function() {
          return RadioControlValueAccessor;
        }),
        multi: !0
      },
      RadioControlRegistry = function() {
        function RadioControlRegistry() {
          this._accessors = [];
        }
        return RadioControlRegistry.prototype.add = function(control, accessor) {
          this._accessors.push([control, accessor]);
        }, RadioControlRegistry.prototype.remove = function(accessor) {
          for (var indexToRemove = -1,
              i = 0; i < this._accessors.length; ++i)
            this._accessors[i][1] === accessor && (indexToRemove = i);
          ListWrapper.removeAt(this._accessors, indexToRemove);
        }, RadioControlRegistry.prototype.select = function(accessor) {
          var _this = this;
          this._accessors.forEach(function(c) {
            _this._isSameGroup(c, accessor) && c[1] !== accessor && c[1].fireUncheck();
          });
        }, RadioControlRegistry.prototype._isSameGroup = function(controlPair, accessor) {
          return controlPair[0].control.root === accessor._control.control.root && controlPair[1].name === accessor.name;
        }, RadioControlRegistry;
      }();
  RadioControlRegistry.decorators = [{type: _angular_core.Injectable}];
  var RadioButtonState = function() {
    function RadioButtonState(checked, value) {
      this.checked = checked, this.value = value;
    }
    return RadioButtonState;
  }(),
      RadioControlValueAccessor = function() {
        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
          this._renderer = _renderer, this._elementRef = _elementRef, this._registry = _registry, this._injector = _injector, this.onChange = function() {}, this.onTouched = function() {};
        }
        return RadioControlValueAccessor.prototype.ngOnInit = function() {
          this._control = this._injector.get(NgControl), this._registry.add(this._control, this);
        }, RadioControlValueAccessor.prototype.ngOnDestroy = function() {
          this._registry.remove(this);
        }, RadioControlValueAccessor.prototype.writeValue = function(value) {
          this._state = value, isPresent(value) && value.checked && this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", !0);
        }, RadioControlValueAccessor.prototype.registerOnChange = function(fn) {
          var _this = this;
          this._fn = fn, this.onChange = function() {
            fn(new RadioButtonState((!0), _this._state.value)), _this._registry.select(_this);
          };
        }, RadioControlValueAccessor.prototype.fireUncheck = function() {
          this._fn(new RadioButtonState((!1), this._state.value));
        }, RadioControlValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        }, RadioControlValueAccessor;
      }();
  RadioControlValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "input[type=radio][ngControl],input[type=radio][ngFormControl],input[type=radio][ngModel]",
      host: {
        "(change)": "onChange()",
        "(blur)": "onTouched()"
      },
      providers: [RADIO_VALUE_ACCESSOR]
    }]
  }], RadioControlValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}, {type: RadioControlRegistry}, {type: _angular_core.Injector}], RadioControlValueAccessor.propDecorators = {name: [{type: _angular_core.Input}]};
  var VALID = "VALID",
      INVALID = "INVALID",
      PENDING = "PENDING",
      AbstractControl = function() {
        function AbstractControl(validator, asyncValidator) {
          this.validator = validator, this.asyncValidator = asyncValidator, this._pristine = !0, this._touched = !1;
        }
        return Object.defineProperty(AbstractControl.prototype, "value", {
          get: function() {
            return this._value;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "status", {
          get: function() {
            return this._status;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "valid", {
          get: function() {
            return this._status === VALID;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "errors", {
          get: function() {
            return this._errors;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "pristine", {
          get: function() {
            return this._pristine;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "dirty", {
          get: function() {
            return !this.pristine;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "touched", {
          get: function() {
            return this._touched;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "untouched", {
          get: function() {
            return !this._touched;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "valueChanges", {
          get: function() {
            return this._valueChanges;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "statusChanges", {
          get: function() {
            return this._statusChanges;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "pending", {
          get: function() {
            return this._status == PENDING;
          },
          enumerable: !0,
          configurable: !0
        }), AbstractControl.prototype.markAsTouched = function() {
          this._touched = !0;
        }, AbstractControl.prototype.markAsDirty = function(_a) {
          var onlySelf = (void 0 === _a ? {} : _a).onlySelf;
          onlySelf = normalizeBool(onlySelf), this._pristine = !1, isPresent(this._parent) && !onlySelf && this._parent.markAsDirty({onlySelf: onlySelf});
        }, AbstractControl.prototype.markAsPending = function(_a) {
          var onlySelf = (void 0 === _a ? {} : _a).onlySelf;
          onlySelf = normalizeBool(onlySelf), this._status = PENDING, isPresent(this._parent) && !onlySelf && this._parent.markAsPending({onlySelf: onlySelf});
        }, AbstractControl.prototype.setParent = function(parent) {
          this._parent = parent;
        }, AbstractControl.prototype.updateValueAndValidity = function(_a) {
          var _b = void 0 === _a ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent;
          onlySelf = normalizeBool(onlySelf), emitEvent = !isPresent(emitEvent) || emitEvent, this._updateValue(), this._errors = this._runValidator(), this._status = this._calculateStatus(), this._status != VALID && this._status != PENDING || this._runAsyncValidator(emitEvent), emitEvent && (ObservableWrapper.callEmit(this._valueChanges, this._value), ObservableWrapper.callEmit(this._statusChanges, this._status)), isPresent(this._parent) && !onlySelf && this._parent.updateValueAndValidity({
            onlySelf: onlySelf,
            emitEvent: emitEvent
          });
        }, AbstractControl.prototype._runValidator = function() {
          return isPresent(this.validator) ? this.validator(this) : null;
        }, AbstractControl.prototype._runAsyncValidator = function(emitEvent) {
          var _this = this;
          if (isPresent(this.asyncValidator)) {
            this._status = PENDING, this._cancelExistingSubscription();
            var obs = toObservable(this.asyncValidator(this));
            this._asyncValidationSubscription = ObservableWrapper.subscribe(obs, function(res) {
              return _this.setErrors(res, {emitEvent: emitEvent});
            });
          }
        }, AbstractControl.prototype._cancelExistingSubscription = function() {
          isPresent(this._asyncValidationSubscription) && ObservableWrapper.dispose(this._asyncValidationSubscription);
        }, AbstractControl.prototype.setErrors = function(errors, _a) {
          var emitEvent = (void 0 === _a ? {} : _a).emitEvent;
          emitEvent = !isPresent(emitEvent) || emitEvent, this._errors = errors, this._status = this._calculateStatus(), emitEvent && ObservableWrapper.callEmit(this._statusChanges, this._status), isPresent(this._parent) && this._parent._updateControlsErrors();
        }, AbstractControl.prototype.find = function(path) {
          return _find(this, path);
        }, AbstractControl.prototype.getError = function(errorCode, path) {
          void 0 === path && (path = null);
          var control = isPresent(path) && !ListWrapper.isEmpty(path) ? this.find(path) : this;
          return isPresent(control) && isPresent(control._errors) ? StringMapWrapper.get(control._errors, errorCode) : null;
        }, AbstractControl.prototype.hasError = function(errorCode, path) {
          return void 0 === path && (path = null), isPresent(this.getError(errorCode, path));
        }, Object.defineProperty(AbstractControl.prototype, "root", {
          get: function() {
            for (var x = this; isPresent(x._parent); )
              x = x._parent;
            return x;
          },
          enumerable: !0,
          configurable: !0
        }), AbstractControl.prototype._updateControlsErrors = function() {
          this._status = this._calculateStatus(), isPresent(this._parent) && this._parent._updateControlsErrors();
        }, AbstractControl.prototype._initObservables = function() {
          this._valueChanges = new EventEmitter$1, this._statusChanges = new EventEmitter$1;
        }, AbstractControl.prototype._calculateStatus = function() {
          return isPresent(this._errors) ? INVALID : this._anyControlsHaveStatus(PENDING) ? PENDING : this._anyControlsHaveStatus(INVALID) ? INVALID : VALID;
        }, AbstractControl;
      }(),
      Control = function(_super) {
        function Control(value, validator, asyncValidator) {
          void 0 === value && (value = null), void 0 === validator && (validator = null), void 0 === asyncValidator && (asyncValidator = null), _super.call(this, validator, asyncValidator), this._value = value, this.updateValueAndValidity({
            onlySelf: !0,
            emitEvent: !1
          }), this._initObservables();
        }
        return __extends(Control, _super), Control.prototype.updateValue = function(value, _a) {
          var _b = void 0 === _a ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent,
              emitModelToViewChange = _b.emitModelToViewChange;
          emitModelToViewChange = !isPresent(emitModelToViewChange) || emitModelToViewChange, this._value = value, isPresent(this._onChange) && emitModelToViewChange && this._onChange(this._value), this.updateValueAndValidity({
            onlySelf: onlySelf,
            emitEvent: emitEvent
          });
        }, Control.prototype._updateValue = function() {}, Control.prototype._anyControlsHaveStatus = function(status) {
          return !1;
        }, Control.prototype.registerOnChange = function(fn) {
          this._onChange = fn;
        }, Control;
      }(AbstractControl),
      ControlGroup = function(_super) {
        function ControlGroup(controls, optionals, validator, asyncValidator) {
          void 0 === optionals && (optionals = null), void 0 === validator && (validator = null), void 0 === asyncValidator && (asyncValidator = null), _super.call(this, validator, asyncValidator), this.controls = controls, this._optionals = isPresent(optionals) ? optionals : {}, this._initObservables(), this._setParentForControls(), this.updateValueAndValidity({
            onlySelf: !0,
            emitEvent: !1
          });
        }
        return __extends(ControlGroup, _super), ControlGroup.prototype.registerControl = function(name, control) {
          this.controls[name] = control, control.setParent(this);
        }, ControlGroup.prototype.addControl = function(name, control) {
          this.registerControl(name, control), this.updateValueAndValidity();
        }, ControlGroup.prototype.removeControl = function(name) {
          StringMapWrapper.delete(this.controls, name), this.updateValueAndValidity();
        }, ControlGroup.prototype.include = function(controlName) {
          StringMapWrapper.set(this._optionals, controlName, !0), this.updateValueAndValidity();
        }, ControlGroup.prototype.exclude = function(controlName) {
          StringMapWrapper.set(this._optionals, controlName, !1), this.updateValueAndValidity();
        }, ControlGroup.prototype.contains = function(controlName) {
          var c = StringMapWrapper.contains(this.controls, controlName);
          return c && this._included(controlName);
        }, ControlGroup.prototype._setParentForControls = function() {
          var _this = this;
          StringMapWrapper.forEach(this.controls, function(control, name) {
            control.setParent(_this);
          });
        }, ControlGroup.prototype._updateValue = function() {
          this._value = this._reduceValue();
        }, ControlGroup.prototype._anyControlsHaveStatus = function(status) {
          var _this = this,
              res = !1;
          return StringMapWrapper.forEach(this.controls, function(control, name) {
            res = res || _this.contains(name) && control.status == status;
          }), res;
        }, ControlGroup.prototype._reduceValue = function() {
          return this._reduceChildren({}, function(acc, control, name) {
            return acc[name] = control.value, acc;
          });
        }, ControlGroup.prototype._reduceChildren = function(initValue, fn) {
          var _this = this,
              res = initValue;
          return StringMapWrapper.forEach(this.controls, function(control, name) {
            _this._included(name) && (res = fn(res, control, name));
          }), res;
        }, ControlGroup.prototype._included = function(controlName) {
          var isOptional = StringMapWrapper.contains(this._optionals, controlName);
          return !isOptional || StringMapWrapper.get(this._optionals, controlName);
        }, ControlGroup;
      }(AbstractControl),
      ControlArray = function(_super) {
        function ControlArray(controls, validator, asyncValidator) {
          void 0 === validator && (validator = null), void 0 === asyncValidator && (asyncValidator = null), _super.call(this, validator, asyncValidator), this.controls = controls, this._initObservables(), this._setParentForControls(), this.updateValueAndValidity({
            onlySelf: !0,
            emitEvent: !1
          });
        }
        return __extends(ControlArray, _super), ControlArray.prototype.at = function(index) {
          return this.controls[index];
        }, ControlArray.prototype.push = function(control) {
          this.controls.push(control), control.setParent(this), this.updateValueAndValidity();
        }, ControlArray.prototype.insert = function(index, control) {
          ListWrapper.insert(this.controls, index, control), control.setParent(this), this.updateValueAndValidity();
        }, ControlArray.prototype.removeAt = function(index) {
          ListWrapper.removeAt(this.controls, index), this.updateValueAndValidity();
        }, Object.defineProperty(ControlArray.prototype, "length", {
          get: function() {
            return this.controls.length;
          },
          enumerable: !0,
          configurable: !0
        }), ControlArray.prototype._updateValue = function() {
          this._value = this.controls.map(function(control) {
            return control.value;
          });
        }, ControlArray.prototype._anyControlsHaveStatus = function(status) {
          return this.controls.some(function(c) {
            return c.status == status;
          });
        }, ControlArray.prototype._setParentForControls = function() {
          var _this = this;
          this.controls.forEach(function(control) {
            control.setParent(_this);
          });
        }, ControlArray;
      }(AbstractControl),
      FormBuilder = function() {
        function FormBuilder() {}
        return FormBuilder.prototype.group = function(controlsConfig, extra) {
          void 0 === extra && (extra = null);
          var controls = this._reduceControls(controlsConfig),
              optionals = isPresent(extra) ? StringMapWrapper.get(extra, "optionals") : null,
              validator = isPresent(extra) ? StringMapWrapper.get(extra, "validator") : null,
              asyncValidator = isPresent(extra) ? StringMapWrapper.get(extra, "asyncValidator") : null;
          return new ControlGroup(controls, optionals, validator, asyncValidator);
        }, FormBuilder.prototype.control = function(value, validator, asyncValidator) {
          return void 0 === validator && (validator = null), void 0 === asyncValidator && (asyncValidator = null), new Control(value, validator, asyncValidator);
        }, FormBuilder.prototype.array = function(controlsConfig, validator, asyncValidator) {
          var _this = this;
          void 0 === validator && (validator = null), void 0 === asyncValidator && (asyncValidator = null);
          var controls = controlsConfig.map(function(c) {
            return _this._createControl(c);
          });
          return new ControlArray(controls, validator, asyncValidator);
        }, FormBuilder.prototype._reduceControls = function(controlsConfig) {
          var _this = this,
              controls = {};
          return StringMapWrapper.forEach(controlsConfig, function(controlConfig, controlName) {
            controls[controlName] = _this._createControl(controlConfig);
          }), controls;
        }, FormBuilder.prototype._createControl = function(controlConfig) {
          if (controlConfig instanceof Control || controlConfig instanceof ControlGroup || controlConfig instanceof ControlArray)
            return controlConfig;
          if (isArray(controlConfig)) {
            var value = controlConfig[0],
                validator = controlConfig.length > 1 ? controlConfig[1] : null,
                asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
            return this.control(value, validator, asyncValidator);
          }
          return this.control(controlConfig);
        }, FormBuilder;
      }();
  FormBuilder.decorators = [{type: _angular_core.Injectable}];
  var CHECKBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return CheckboxControlValueAccessor;
    }),
    multi: !0
  },
      CheckboxControlValueAccessor = function() {
        function CheckboxControlValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer, this._elementRef = _elementRef, this.onChange = function(_) {}, this.onTouched = function() {};
        }
        return CheckboxControlValueAccessor.prototype.writeValue = function(value) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", value);
        }, CheckboxControlValueAccessor.prototype.registerOnChange = function(fn) {
          this.onChange = fn;
        }, CheckboxControlValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        }, CheckboxControlValueAccessor;
      }();
  CheckboxControlValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "input[type=checkbox][ngControl],input[type=checkbox][ngFormControl],input[type=checkbox][ngModel]",
      host: {
        "(change)": "onChange($event.target.checked)",
        "(blur)": "onTouched()"
      },
      providers: [CHECKBOX_VALUE_ACCESSOR]
    }]
  }], CheckboxControlValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
  var DEFAULT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return DefaultValueAccessor;
    }),
    multi: !0
  },
      DefaultValueAccessor = function() {
        function DefaultValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer, this._elementRef = _elementRef, this.onChange = function(_) {}, this.onTouched = function() {};
        }
        return DefaultValueAccessor.prototype.writeValue = function(value) {
          var normalizedValue = isBlank(value) ? "" : value;
          this._renderer.setElementProperty(this._elementRef.nativeElement, "value", normalizedValue);
        }, DefaultValueAccessor.prototype.registerOnChange = function(fn) {
          this.onChange = fn;
        }, DefaultValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        }, DefaultValueAccessor;
      }();
  DefaultValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "input:not([type=checkbox])[ngControl],textarea[ngControl],input:not([type=checkbox])[ngFormControl],textarea[ngFormControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]",
      host: {
        "(input)": "onChange($event.target.value)",
        "(blur)": "onTouched()"
      },
      providers: [DEFAULT_VALUE_ACCESSOR]
    }]
  }], DefaultValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
  var NG_VALIDATORS = new _angular_core.OpaqueToken("NgValidators"),
      NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken("NgAsyncValidators"),
      Validators = function() {
        function Validators() {}
        return Validators.required = function(control) {
          return isBlank(control.value) || isString(control.value) && "" == control.value ? {required: !0} : null;
        }, Validators.minLength = function(minLength) {
          return function(control) {
            if (isPresent(Validators.required(control)))
              return null;
            var v = control.value;
            return v.length < minLength ? {minlength: {
                requiredLength: minLength,
                actualLength: v.length
              }} : null;
          };
        }, Validators.maxLength = function(maxLength) {
          return function(control) {
            if (isPresent(Validators.required(control)))
              return null;
            var v = control.value;
            return v.length > maxLength ? {maxlength: {
                requiredLength: maxLength,
                actualLength: v.length
              }} : null;
          };
        }, Validators.pattern = function(pattern) {
          return function(control) {
            if (isPresent(Validators.required(control)))
              return null;
            var regex = new RegExp("^" + pattern + "$"),
                v = control.value;
            return regex.test(v) ? null : {pattern: {
                requiredPattern: "^" + pattern + "$",
                actualValue: v
              }};
          };
        }, Validators.nullValidator = function(c) {
          return null;
        }, Validators.compose = function(validators) {
          if (isBlank(validators))
            return null;
          var presentValidators = validators.filter(isPresent);
          return 0 == presentValidators.length ? null : function(control) {
            return _mergeErrors(_executeValidators(control, presentValidators));
          };
        }, Validators.composeAsync = function(validators) {
          if (isBlank(validators))
            return null;
          var presentValidators = validators.filter(isPresent);
          return 0 == presentValidators.length ? null : function(control) {
            var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);
            return PromiseWrapper.all(promises).then(_mergeErrors);
          };
        }, Validators;
      }(),
      ControlContainer = function(_super) {
        function ControlContainer() {
          _super.apply(this, arguments);
        }
        return __extends(ControlContainer, _super), Object.defineProperty(ControlContainer.prototype, "formDirective", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ControlContainer.prototype, "path", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), ControlContainer;
      }(AbstractControlDirective),
      NUMBER_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function() {
          return NumberValueAccessor;
        }),
        multi: !0
      },
      NumberValueAccessor = function() {
        function NumberValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer, this._elementRef = _elementRef, this.onChange = function(_) {}, this.onTouched = function() {};
        }
        return NumberValueAccessor.prototype.writeValue = function(value) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, "value", value);
        }, NumberValueAccessor.prototype.registerOnChange = function(fn) {
          this.onChange = function(value) {
            fn("" == value ? null : NumberWrapper.parseFloat(value));
          };
        }, NumberValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        }, NumberValueAccessor;
      }();
  NumberValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "input[type=number][ngControl],input[type=number][ngFormControl],input[type=number][ngModel]",
      host: {
        "(change)": "onChange($event.target.value)",
        "(input)": "onChange($event.target.value)",
        "(blur)": "onTouched()"
      },
      providers: [NUMBER_VALUE_ACCESSOR]
    }]
  }], NumberValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
  var SELECT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return SelectControlValueAccessor;
    }),
    multi: !0
  },
      SelectControlValueAccessor = function() {
        function SelectControlValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer, this._elementRef = _elementRef, this._optionMap = new Map, this._idCounter = 0, this.onChange = function(_) {}, this.onTouched = function() {};
        }
        return SelectControlValueAccessor.prototype.writeValue = function(value) {
          this.value = value;
          var valueString = _buildValueString(this._getOptionId(value), value);
          this._renderer.setElementProperty(this._elementRef.nativeElement, "value", valueString);
        }, SelectControlValueAccessor.prototype.registerOnChange = function(fn) {
          var _this = this;
          this.onChange = function(valueString) {
            _this.value = valueString, fn(_this._getOptionValue(valueString));
          };
        }, SelectControlValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        }, SelectControlValueAccessor.prototype._registerOption = function() {
          return (this._idCounter++).toString();
        }, SelectControlValueAccessor.prototype._getOptionId = function(value) {
          for (var _i = 0,
              _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {
            var id = _a[_i];
            if (looseIdentical(this._optionMap.get(id), value))
              return id;
          }
          return null;
        }, SelectControlValueAccessor.prototype._getOptionValue = function(valueString) {
          var value = this._optionMap.get(_extractId(valueString));
          return isPresent(value) ? value : valueString;
        }, SelectControlValueAccessor;
      }();
  SelectControlValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "select:not([multiple])[ngControl],select:not([multiple])[ngFormControl],select:not([multiple])[ngModel]",
      host: {
        "(change)": "onChange($event.target.value)",
        "(blur)": "onTouched()"
      },
      providers: [SELECT_VALUE_ACCESSOR]
    }]
  }], SelectControlValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
  var NgSelectOption = function() {
    function NgSelectOption(_element, _renderer, _select) {
      this._element = _element, this._renderer = _renderer, this._select = _select, isPresent(this._select) && (this.id = this._select._registerOption());
    }
    return Object.defineProperty(NgSelectOption.prototype, "ngValue", {
      set: function(value) {
        null != this._select && (this._select._optionMap.set(this.id, value), this._setElementValue(_buildValueString(this.id, value)), this._select.writeValue(this._select.value));
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgSelectOption.prototype, "value", {
      set: function(value) {
        this._setElementValue(value), isPresent(this._select) && this._select.writeValue(this._select.value);
      },
      enumerable: !0,
      configurable: !0
    }), NgSelectOption.prototype._setElementValue = function(value) {
      this._renderer.setElementProperty(this._element.nativeElement, "value", value);
    }, NgSelectOption.prototype.ngOnDestroy = function() {
      isPresent(this._select) && (this._select._optionMap.delete(this.id), this._select.writeValue(this._select.value));
    }, NgSelectOption;
  }();
  NgSelectOption.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "option"}]
  }], NgSelectOption.ctorParameters = [{type: _angular_core.ElementRef}, {type: _angular_core.Renderer}, {
    type: SelectControlValueAccessor,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}]
  }], NgSelectOption.propDecorators = {
    ngValue: [{
      type: _angular_core.Input,
      args: ["ngValue"]
    }],
    value: [{
      type: _angular_core.Input,
      args: ["value"]
    }]
  };
  var SELECT_MULTIPLE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return SelectMultipleControlValueAccessor;
    }),
    multi: !0
  },
      SelectMultipleControlValueAccessor = function() {
        function SelectMultipleControlValueAccessor() {
          this._optionMap = new Map, this._idCounter = 0, this.onChange = function(_) {}, this.onTouched = function() {};
        }
        return SelectMultipleControlValueAccessor.prototype.writeValue = function(value) {
          var _this = this;
          if (this.value = value, null != value) {
            var values = value,
                ids = values.map(function(v) {
                  return _this._getOptionId(v);
                });
            this._optionMap.forEach(function(opt, o) {
              opt._setSelected(ids.indexOf(o.toString()) > -1);
            });
          }
        }, SelectMultipleControlValueAccessor.prototype.registerOnChange = function(fn) {
          var _this = this;
          this.onChange = function(_) {
            var selected = [];
            if (_.hasOwnProperty("selectedOptions"))
              for (var options = _.selectedOptions,
                  i = 0; i < options.length; i++) {
                var opt = options.item(i),
                    val = _this._getOptionValue(opt.value);
                selected.push(val);
              }
            else
              for (var options = _.options,
                  i = 0; i < options.length; i++) {
                var opt = options.item(i);
                if (opt.selected) {
                  var val = _this._getOptionValue(opt.value);
                  selected.push(val);
                }
              }
            fn(selected);
          };
        }, SelectMultipleControlValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        }, SelectMultipleControlValueAccessor.prototype._registerOption = function(value) {
          var id = (this._idCounter++).toString();
          return this._optionMap.set(id, value), id;
        }, SelectMultipleControlValueAccessor.prototype._getOptionId = function(value) {
          for (var _i = 0,
              _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {
            var id = _a[_i];
            if (looseIdentical(this._optionMap.get(id)._value, value))
              return id;
          }
          return null;
        }, SelectMultipleControlValueAccessor.prototype._getOptionValue = function(valueString) {
          var opt = this._optionMap.get(_extractId$1(valueString));
          return isPresent(opt) ? opt._value : valueString;
        }, SelectMultipleControlValueAccessor;
      }();
  SelectMultipleControlValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "select[multiple][ngControl],select[multiple][ngFormControl],select[multiple][ngModel]",
      host: {
        "(input)": "onChange($event.target)",
        "(blur)": "onTouched()"
      },
      providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
    }]
  }], SelectMultipleControlValueAccessor.ctorParameters = [];
  var NgSelectMultipleOption = function() {
    function NgSelectMultipleOption(_element, _renderer, _select) {
      this._element = _element, this._renderer = _renderer, this._select = _select, isPresent(this._select) && (this.id = this._select._registerOption(this));
    }
    return Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
      set: function(value) {
        null != this._select && (this._value = value, this._setElementValue(_buildValueString$1(this.id, value)), this._select.writeValue(this._select.value));
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
      set: function(value) {
        isPresent(this._select) ? (this._value = value, this._setElementValue(_buildValueString$1(this.id, value)), this._select.writeValue(this._select.value)) : this._setElementValue(value);
      },
      enumerable: !0,
      configurable: !0
    }), NgSelectMultipleOption.prototype._setElementValue = function(value) {
      this._renderer.setElementProperty(this._element.nativeElement, "value", value);
    }, NgSelectMultipleOption.prototype._setSelected = function(selected) {
      this._renderer.setElementProperty(this._element.nativeElement, "selected", selected);
    }, NgSelectMultipleOption.prototype.ngOnDestroy = function() {
      isPresent(this._select) && (this._select._optionMap.delete(this.id), this._select.writeValue(this._select.value));
    }, NgSelectMultipleOption;
  }();
  NgSelectMultipleOption.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "option"}]
  }], NgSelectMultipleOption.ctorParameters = [{type: _angular_core.ElementRef}, {type: _angular_core.Renderer}, {
    type: SelectMultipleControlValueAccessor,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}]
  }], NgSelectMultipleOption.propDecorators = {
    ngValue: [{
      type: _angular_core.Input,
      args: ["ngValue"]
    }],
    value: [{
      type: _angular_core.Input,
      args: ["value"]
    }]
  };
  var controlGroupProvider = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return NgControlGroup;
    })
  },
      NgControlGroup = function(_super) {
        function NgControlGroup(parent, _validators, _asyncValidators) {
          _super.call(this), this._validators = _validators, this._asyncValidators = _asyncValidators, this._parent = parent;
        }
        return __extends(NgControlGroup, _super), NgControlGroup.prototype.ngOnInit = function() {
          this.formDirective.addControlGroup(this);
        }, NgControlGroup.prototype.ngOnDestroy = function() {
          this.formDirective.removeControlGroup(this);
        }, Object.defineProperty(NgControlGroup.prototype, "control", {
          get: function() {
            return this.formDirective.getControlGroup(this);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlGroup.prototype, "path", {
          get: function() {
            return controlPath(this.name, this._parent);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlGroup.prototype, "formDirective", {
          get: function() {
            return this._parent.formDirective;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlGroup.prototype, "validator", {
          get: function() {
            return composeValidators(this._validators);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlGroup.prototype, "asyncValidator", {
          get: function() {
            return composeAsyncValidators(this._asyncValidators);
          },
          enumerable: !0,
          configurable: !0
        }), NgControlGroup;
      }(ControlContainer);
  NgControlGroup.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngControlGroup]",
      providers: [controlGroupProvider],
      inputs: ["name: ngControlGroup"],
      exportAs: "ngForm"
    }]
  }], NgControlGroup.ctorParameters = [{
    type: ControlContainer,
    decorators: [{type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
  var controlNameBinding = {
    provide: NgControl,
    useExisting: _angular_core.forwardRef(function() {
      return NgControlName;
    })
  },
      NgControlName = function(_super) {
        function NgControlName(_parent, _validators, _asyncValidators, valueAccessors) {
          _super.call(this), this._parent = _parent, this._validators = _validators, this._asyncValidators = _asyncValidators, this.update = new EventEmitter$1, this._added = !1, this.valueAccessor = selectValueAccessor(this, valueAccessors);
        }
        return __extends(NgControlName, _super), NgControlName.prototype.ngOnChanges = function(changes) {
          this._added || (this.formDirective.addControl(this), this._added = !0), isPropertyUpdated(changes, this.viewModel) && (this.viewModel = this.model, this.formDirective.updateModel(this, this.model));
        }, NgControlName.prototype.ngOnDestroy = function() {
          this.formDirective.removeControl(this);
        }, NgControlName.prototype.viewToModelUpdate = function(newValue) {
          this.viewModel = newValue, ObservableWrapper.callEmit(this.update, newValue);
        }, Object.defineProperty(NgControlName.prototype, "path", {
          get: function() {
            return controlPath(this.name, this._parent);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlName.prototype, "formDirective", {
          get: function() {
            return this._parent.formDirective;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlName.prototype, "validator", {
          get: function() {
            return composeValidators(this._validators);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlName.prototype, "asyncValidator", {
          get: function() {
            return composeAsyncValidators(this._asyncValidators);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlName.prototype, "control", {
          get: function() {
            return this.formDirective.getControl(this);
          },
          enumerable: !0,
          configurable: !0
        }), NgControlName;
      }(NgControl);
  NgControlName.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngControl]",
      providers: [controlNameBinding],
      inputs: ["name: ngControl", "model: ngModel"],
      outputs: ["update: ngModelChange"],
      exportAs: "ngForm"
    }]
  }], NgControlName.ctorParameters = [{
    type: ControlContainer,
    decorators: [{type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALUE_ACCESSOR]
    }]
  }];
  var NgControlStatus = function() {
    function NgControlStatus(cd) {
      this._cd = cd;
    }
    return Object.defineProperty(NgControlStatus.prototype, "ngClassUntouched", {
      get: function() {
        return !!isPresent(this._cd.control) && this._cd.control.untouched;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgControlStatus.prototype, "ngClassTouched", {
      get: function() {
        return !!isPresent(this._cd.control) && this._cd.control.touched;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgControlStatus.prototype, "ngClassPristine", {
      get: function() {
        return !!isPresent(this._cd.control) && this._cd.control.pristine;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgControlStatus.prototype, "ngClassDirty", {
      get: function() {
        return !!isPresent(this._cd.control) && this._cd.control.dirty;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgControlStatus.prototype, "ngClassValid", {
      get: function() {
        return !!isPresent(this._cd.control) && this._cd.control.valid;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgControlStatus.prototype, "ngClassInvalid", {
      get: function() {
        return !!isPresent(this._cd.control) && !this._cd.control.valid;
      },
      enumerable: !0,
      configurable: !0
    }), NgControlStatus;
  }();
  NgControlStatus.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngControl],[ngModel],[ngFormControl]",
      host: {
        "[class.ng-untouched]": "ngClassUntouched",
        "[class.ng-touched]": "ngClassTouched",
        "[class.ng-pristine]": "ngClassPristine",
        "[class.ng-dirty]": "ngClassDirty",
        "[class.ng-valid]": "ngClassValid",
        "[class.ng-invalid]": "ngClassInvalid"
      }
    }]
  }], NgControlStatus.ctorParameters = [{
    type: NgControl,
    decorators: [{type: _angular_core.Self}]
  }];
  var formDirectiveProvider = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return NgForm;
    })
  },
      _formWarningDisplayed = !1,
      NgForm = function(_super) {
        function NgForm(validators, asyncValidators) {
          _super.call(this), this._submitted = !1, this.ngSubmit = new EventEmitter$1, this._displayWarning(), this.form = new ControlGroup({}, null, composeValidators(validators), composeAsyncValidators(asyncValidators));
        }
        return __extends(NgForm, _super), NgForm.prototype._displayWarning = function() {
          _formWarningDisplayed || (_formWarningDisplayed = !0, console.warn("\n      *It looks like you're using the old forms module. This will be opt-in in the next RC, and\n      will eventually be removed in favor of the new forms module. For more information, see:\n      https://docs.google.com/document/u/1/d/1RIezQqE4aEhBRmArIAS1mRIZtWFf6JxN_7B4meyWK0Y/pub\n    "));
        }, Object.defineProperty(NgForm.prototype, "submitted", {
          get: function() {
            return this._submitted;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgForm.prototype, "formDirective", {
          get: function() {
            return this;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgForm.prototype, "control", {
          get: function() {
            return this.form;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgForm.prototype, "path", {
          get: function() {
            return [];
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgForm.prototype, "controls", {
          get: function() {
            return this.form.controls;
          },
          enumerable: !0,
          configurable: !0
        }), NgForm.prototype.addControl = function(dir) {
          var _this = this;
          PromiseWrapper.scheduleMicrotask(function() {
            var container = _this._findContainer(dir.path),
                ctrl = new Control;
            setUpControl(ctrl, dir), container.registerControl(dir.name, ctrl), ctrl.updateValueAndValidity({emitEvent: !1});
          });
        }, NgForm.prototype.getControl = function(dir) {
          return this.form.find(dir.path);
        }, NgForm.prototype.removeControl = function(dir) {
          var _this = this;
          PromiseWrapper.scheduleMicrotask(function() {
            var container = _this._findContainer(dir.path);
            isPresent(container) && container.removeControl(dir.name);
          });
        }, NgForm.prototype.addControlGroup = function(dir) {
          var _this = this;
          PromiseWrapper.scheduleMicrotask(function() {
            var container = _this._findContainer(dir.path),
                group = new ControlGroup({});
            setUpControlGroup(group, dir), container.registerControl(dir.name, group), group.updateValueAndValidity({emitEvent: !1});
          });
        }, NgForm.prototype.removeControlGroup = function(dir) {
          var _this = this;
          PromiseWrapper.scheduleMicrotask(function() {
            var container = _this._findContainer(dir.path);
            isPresent(container) && container.removeControl(dir.name);
          });
        }, NgForm.prototype.getControlGroup = function(dir) {
          return this.form.find(dir.path);
        }, NgForm.prototype.updateModel = function(dir, value) {
          var _this = this;
          PromiseWrapper.scheduleMicrotask(function() {
            var ctrl = _this.form.find(dir.path);
            ctrl.updateValue(value);
          });
        }, NgForm.prototype.onSubmit = function() {
          return this._submitted = !0, ObservableWrapper.callEmit(this.ngSubmit, null), !1;
        }, NgForm.prototype._findContainer = function(path) {
          return path.pop(), ListWrapper.isEmpty(path) ? this.form : this.form.find(path);
        }, NgForm;
      }(ControlContainer);
  NgForm.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "form:not([ngNoForm]):not([ngFormModel]),ngForm,[ngForm]",
      providers: [formDirectiveProvider],
      host: {"(submit)": "onSubmit()"},
      outputs: ["ngSubmit"],
      exportAs: "ngForm"
    }]
  }], NgForm.ctorParameters = [{
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
  var formControlBinding = {
    provide: NgControl,
    useExisting: _angular_core.forwardRef(function() {
      return NgFormControl;
    })
  },
      NgFormControl = function(_super) {
        function NgFormControl(_validators, _asyncValidators, valueAccessors) {
          _super.call(this), this._validators = _validators, this._asyncValidators = _asyncValidators, this.update = new EventEmitter$1, this.valueAccessor = selectValueAccessor(this, valueAccessors);
        }
        return __extends(NgFormControl, _super), NgFormControl.prototype.ngOnChanges = function(changes) {
          this._isControlChanged(changes) && (setUpControl(this.form, this), this.form.updateValueAndValidity({emitEvent: !1})), isPropertyUpdated(changes, this.viewModel) && (this.form.updateValue(this.model), this.viewModel = this.model);
        }, Object.defineProperty(NgFormControl.prototype, "path", {
          get: function() {
            return [];
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgFormControl.prototype, "validator", {
          get: function() {
            return composeValidators(this._validators);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgFormControl.prototype, "asyncValidator", {
          get: function() {
            return composeAsyncValidators(this._asyncValidators);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgFormControl.prototype, "control", {
          get: function() {
            return this.form;
          },
          enumerable: !0,
          configurable: !0
        }), NgFormControl.prototype.viewToModelUpdate = function(newValue) {
          this.viewModel = newValue, ObservableWrapper.callEmit(this.update, newValue);
        }, NgFormControl.prototype._isControlChanged = function(changes) {
          return StringMapWrapper.contains(changes, "form");
        }, NgFormControl;
      }(NgControl);
  NgFormControl.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngFormControl]",
      providers: [formControlBinding],
      inputs: ["form: ngFormControl", "model: ngModel"],
      outputs: ["update: ngModelChange"],
      exportAs: "ngForm"
    }]
  }], NgFormControl.ctorParameters = [{
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALUE_ACCESSOR]
    }]
  }];
  var formDirectiveProvider$1 = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return NgFormModel;
    })
  },
      _formModelWarningDisplayed = !1,
      NgFormModel = function(_super) {
        function NgFormModel(_validators, _asyncValidators) {
          _super.call(this), this._validators = _validators, this._asyncValidators = _asyncValidators, this._submitted = !1, this.form = null, this.directives = [], this.ngSubmit = new EventEmitter$1, this._displayWarning();
        }
        return __extends(NgFormModel, _super), NgFormModel.prototype._displayWarning = function() {
          _formModelWarningDisplayed || (_formModelWarningDisplayed = !0, console.warn("\n      *It looks like you're using the old forms module. This will be opt-in in the next RC, and\n      will eventually be removed in favor of the new forms module. For more information, see:\n      https://docs.google.com/document/u/1/d/1RIezQqE4aEhBRmArIAS1mRIZtWFf6JxN_7B4meyWK0Y/pub\n    "));
        }, NgFormModel.prototype.ngOnChanges = function(changes) {
          if (this._checkFormPresent(), StringMapWrapper.contains(changes, "form")) {
            var sync = composeValidators(this._validators);
            this.form.validator = Validators.compose([this.form.validator, sync]);
            var async = composeAsyncValidators(this._asyncValidators);
            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]), this.form.updateValueAndValidity({
              onlySelf: !0,
              emitEvent: !1
            });
          }
          this._updateDomValue();
        }, Object.defineProperty(NgFormModel.prototype, "submitted", {
          get: function() {
            return this._submitted;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgFormModel.prototype, "formDirective", {
          get: function() {
            return this;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgFormModel.prototype, "control", {
          get: function() {
            return this.form;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgFormModel.prototype, "path", {
          get: function() {
            return [];
          },
          enumerable: !0,
          configurable: !0
        }), NgFormModel.prototype.addControl = function(dir) {
          var ctrl = this.form.find(dir.path);
          setUpControl(ctrl, dir), ctrl.updateValueAndValidity({emitEvent: !1}), this.directives.push(dir);
        }, NgFormModel.prototype.getControl = function(dir) {
          return this.form.find(dir.path);
        }, NgFormModel.prototype.removeControl = function(dir) {
          ListWrapper.remove(this.directives, dir);
        }, NgFormModel.prototype.addControlGroup = function(dir) {
          var ctrl = this.form.find(dir.path);
          setUpControlGroup(ctrl, dir), ctrl.updateValueAndValidity({emitEvent: !1});
        }, NgFormModel.prototype.removeControlGroup = function(dir) {}, NgFormModel.prototype.getControlGroup = function(dir) {
          return this.form.find(dir.path);
        }, NgFormModel.prototype.updateModel = function(dir, value) {
          var ctrl = this.form.find(dir.path);
          ctrl.updateValue(value);
        }, NgFormModel.prototype.onSubmit = function() {
          return this._submitted = !0, ObservableWrapper.callEmit(this.ngSubmit, null), !1;
        }, NgFormModel.prototype._updateDomValue = function() {
          var _this = this;
          this.directives.forEach(function(dir) {
            var ctrl = _this.form.find(dir.path);
            dir.valueAccessor.writeValue(ctrl.value);
          });
        }, NgFormModel.prototype._checkFormPresent = function() {
          if (isBlank(this.form))
            throw new BaseException('ngFormModel expects a form. Please pass one in. Example: <form [ngFormModel]="myCoolForm">');
        }, NgFormModel;
      }(ControlContainer);
  NgFormModel.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngFormModel]",
      providers: [formDirectiveProvider$1],
      inputs: ["form: ngFormModel"],
      host: {"(submit)": "onSubmit()"},
      outputs: ["ngSubmit"],
      exportAs: "ngForm"
    }]
  }], NgFormModel.ctorParameters = [{
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
  var formControlBinding$1 = {
    provide: NgControl,
    useExisting: _angular_core.forwardRef(function() {
      return NgModel;
    })
  },
      NgModel = function(_super) {
        function NgModel(_validators, _asyncValidators, valueAccessors) {
          _super.call(this), this._validators = _validators, this._asyncValidators = _asyncValidators, this._control = new Control, this._added = !1, this.update = new EventEmitter$1, this.valueAccessor = selectValueAccessor(this, valueAccessors);
        }
        return __extends(NgModel, _super), NgModel.prototype.ngOnChanges = function(changes) {
          this._added || (setUpControl(this._control, this), this._control.updateValueAndValidity({emitEvent: !1}), this._added = !0), isPropertyUpdated(changes, this.viewModel) && (this._control.updateValue(this.model), this.viewModel = this.model);
        }, Object.defineProperty(NgModel.prototype, "control", {
          get: function() {
            return this._control;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgModel.prototype, "path", {
          get: function() {
            return [];
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgModel.prototype, "validator", {
          get: function() {
            return composeValidators(this._validators);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgModel.prototype, "asyncValidator", {
          get: function() {
            return composeAsyncValidators(this._asyncValidators);
          },
          enumerable: !0,
          configurable: !0
        }), NgModel.prototype.viewToModelUpdate = function(newValue) {
          this.viewModel = newValue, ObservableWrapper.callEmit(this.update, newValue);
        }, NgModel;
      }(NgControl);
  NgModel.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngModel]:not([ngControl]):not([ngFormControl])",
      providers: [formControlBinding$1],
      inputs: ["model: ngModel"],
      outputs: ["update: ngModelChange"],
      exportAs: "ngForm"
    }]
  }], NgModel.ctorParameters = [{
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALUE_ACCESSOR]
    }]
  }];
  var REQUIRED = Validators.required,
      REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useValue: REQUIRED,
        multi: !0
      },
      RequiredValidator = function() {
        function RequiredValidator() {}
        return RequiredValidator;
      }();
  RequiredValidator.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[required][ngControl],[required][ngFormControl],[required][ngModel]",
      providers: [REQUIRED_VALIDATOR]
    }]
  }];
  var MIN_LENGTH_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return MinLengthValidator;
    }),
    multi: !0
  },
      MinLengthValidator = function() {
        function MinLengthValidator(minLength) {
          this._validator = Validators.minLength(NumberWrapper.parseInt(minLength, 10));
        }
        return MinLengthValidator.prototype.validate = function(c) {
          return this._validator(c);
        }, MinLengthValidator;
      }();
  MinLengthValidator.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[minlength][ngControl],[minlength][ngFormControl],[minlength][ngModel]",
      providers: [MIN_LENGTH_VALIDATOR]
    }]
  }], MinLengthValidator.ctorParameters = [{
    type: void 0,
    decorators: [{
      type: _angular_core.Attribute,
      args: ["minlength"]
    }]
  }];
  var MAX_LENGTH_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return MaxLengthValidator;
    }),
    multi: !0
  },
      MaxLengthValidator = function() {
        function MaxLengthValidator(maxLength) {
          this._validator = Validators.maxLength(NumberWrapper.parseInt(maxLength, 10));
        }
        return MaxLengthValidator.prototype.validate = function(c) {
          return this._validator(c);
        }, MaxLengthValidator;
      }();
  MaxLengthValidator.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[maxlength][ngControl],[maxlength][ngFormControl],[maxlength][ngModel]",
      providers: [MAX_LENGTH_VALIDATOR]
    }]
  }], MaxLengthValidator.ctorParameters = [{
    type: void 0,
    decorators: [{
      type: _angular_core.Attribute,
      args: ["maxlength"]
    }]
  }];
  var PATTERN_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return PatternValidator;
    }),
    multi: !0
  },
      PatternValidator = function() {
        function PatternValidator(pattern) {
          this._validator = Validators.pattern(pattern);
        }
        return PatternValidator.prototype.validate = function(c) {
          return this._validator(c);
        }, PatternValidator;
      }();
  PatternValidator.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[pattern][ngControl],[pattern][ngFormControl],[pattern][ngModel]",
      providers: [PATTERN_VALIDATOR]
    }]
  }], PatternValidator.ctorParameters = [{
    type: void 0,
    decorators: [{
      type: _angular_core.Attribute,
      args: ["pattern"]
    }]
  }];
  var FORM_DIRECTIVES = [NgControlName, NgControlGroup, NgFormControl, NgModel, NgFormModel, NgForm, NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator],
      FORM_PROVIDERS = [FormBuilder, RadioControlRegistry],
      COMMON_DIRECTIVES = [CORE_DIRECTIVES, FORM_DIRECTIVES],
      PlatformLocation = function() {
        function PlatformLocation() {}
        return Object.defineProperty(PlatformLocation.prototype, "pathname", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(PlatformLocation.prototype, "search", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(PlatformLocation.prototype, "hash", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), PlatformLocation;
      }(),
      LocationStrategy = function() {
        function LocationStrategy() {}
        return LocationStrategy;
      }(),
      APP_BASE_HREF = new _angular_core.OpaqueToken("appBaseHref"),
      Location = function() {
        function Location(platformStrategy) {
          var _this = this;
          this._subject = new _angular_core.EventEmitter, this._platformStrategy = platformStrategy;
          var browserBaseHref = this._platformStrategy.getBaseHref();
          this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref)), this._platformStrategy.onPopState(function(ev) {
            ObservableWrapper.callEmit(_this._subject, {
              url: _this.path(!0),
              pop: !0,
              type: ev.type
            });
          });
        }
        return Location.prototype.path = function(includeHash) {
          return void 0 === includeHash && (includeHash = !1), this.normalize(this._platformStrategy.path(includeHash));
        }, Location.prototype.isCurrentPathEqualTo = function(path, query) {
          return void 0 === query && (query = ""), this.path() == this.normalize(path + Location.normalizeQueryParams(query));
        }, Location.prototype.normalize = function(url) {
          return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
        }, Location.prototype.prepareExternalUrl = function(url) {
          return url.length > 0 && !url.startsWith("/") && (url = "/" + url), this._platformStrategy.prepareExternalUrl(url);
        }, Location.prototype.go = function(path, query) {
          void 0 === query && (query = ""), this._platformStrategy.pushState(null, "", path, query);
        }, Location.prototype.replaceState = function(path, query) {
          void 0 === query && (query = ""), this._platformStrategy.replaceState(null, "", path, query);
        }, Location.prototype.forward = function() {
          this._platformStrategy.forward();
        }, Location.prototype.back = function() {
          this._platformStrategy.back();
        }, Location.prototype.subscribe = function(onNext, onThrow, onReturn) {
          return void 0 === onThrow && (onThrow = null), void 0 === onReturn && (onReturn = null), ObservableWrapper.subscribe(this._subject, onNext, onThrow, onReturn);
        }, Location.normalizeQueryParams = function(params) {
          return params.length > 0 && "?" != params.substring(0, 1) ? "?" + params : params;
        }, Location.joinWithSlash = function(start, end) {
          if (0 == start.length)
            return end;
          if (0 == end.length)
            return start;
          var slashes = 0;
          return start.endsWith("/") && slashes++, end.startsWith("/") && slashes++, 2 == slashes ? start + end.substring(1) : 1 == slashes ? start + end : start + "/" + end;
        }, Location.stripTrailingSlash = function(url) {
          return /\/$/g.test(url) && (url = url.substring(0, url.length - 1)), url;
        }, Location;
      }();
  Location.decorators = [{type: _angular_core.Injectable}], Location.ctorParameters = [{type: LocationStrategy}];
  var HashLocationStrategy = function(_super) {
    function HashLocationStrategy(_platformLocation, _baseHref) {
      _super.call(this), this._platformLocation = _platformLocation, this._baseHref = "", isPresent(_baseHref) && (this._baseHref = _baseHref);
    }
    return __extends(HashLocationStrategy, _super), HashLocationStrategy.prototype.onPopState = function(fn) {
      this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn);
    }, HashLocationStrategy.prototype.getBaseHref = function() {
      return this._baseHref;
    }, HashLocationStrategy.prototype.path = function(includeHash) {
      void 0 === includeHash && (includeHash = !1);
      var path = this._platformLocation.hash;
      return isPresent(path) || (path = "#"), path.length > 0 ? path.substring(1) : path;
    }, HashLocationStrategy.prototype.prepareExternalUrl = function(internal) {
      var url = Location.joinWithSlash(this._baseHref, internal);
      return url.length > 0 ? "#" + url : url;
    }, HashLocationStrategy.prototype.pushState = function(state, title, path, queryParams) {
      var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
      0 == url.length && (url = this._platformLocation.pathname), this._platformLocation.pushState(state, title, url);
    }, HashLocationStrategy.prototype.replaceState = function(state, title, path, queryParams) {
      var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
      0 == url.length && (url = this._platformLocation.pathname), this._platformLocation.replaceState(state, title, url);
    }, HashLocationStrategy.prototype.forward = function() {
      this._platformLocation.forward();
    }, HashLocationStrategy.prototype.back = function() {
      this._platformLocation.back();
    }, HashLocationStrategy;
  }(LocationStrategy);
  HashLocationStrategy.decorators = [{type: _angular_core.Injectable}], HashLocationStrategy.ctorParameters = [{type: PlatformLocation}, {
    type: void 0,
    decorators: [{type: _angular_core.Optional}, {
      type: _angular_core.Inject,
      args: [APP_BASE_HREF]
    }]
  }];
  var PathLocationStrategy = function(_super) {
    function PathLocationStrategy(_platformLocation, href) {
      if (_super.call(this), this._platformLocation = _platformLocation, isBlank(href) && (href = this._platformLocation.getBaseHrefFromDOM()), isBlank(href))
        throw new BaseException("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
      this._baseHref = href;
    }
    return __extends(PathLocationStrategy, _super), PathLocationStrategy.prototype.onPopState = function(fn) {
      this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn);
    }, PathLocationStrategy.prototype.getBaseHref = function() {
      return this._baseHref;
    }, PathLocationStrategy.prototype.prepareExternalUrl = function(internal) {
      return Location.joinWithSlash(this._baseHref, internal);
    }, PathLocationStrategy.prototype.path = function(includeHash) {
      void 0 === includeHash && (includeHash = !1);
      var pathname = this._platformLocation.pathname + Location.normalizeQueryParams(this._platformLocation.search),
          hash = this._platformLocation.hash;
      return hash && includeHash ? "" + pathname + hash : pathname;
    }, PathLocationStrategy.prototype.pushState = function(state, title, url, queryParams) {
      var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
      this._platformLocation.pushState(state, title, externalUrl);
    }, PathLocationStrategy.prototype.replaceState = function(state, title, url, queryParams) {
      var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
      this._platformLocation.replaceState(state, title, externalUrl);
    }, PathLocationStrategy.prototype.forward = function() {
      this._platformLocation.forward();
    }, PathLocationStrategy.prototype.back = function() {
      this._platformLocation.back();
    }, PathLocationStrategy;
  }(LocationStrategy);
  PathLocationStrategy.decorators = [{type: _angular_core.Injectable}], PathLocationStrategy.ctorParameters = [{type: PlatformLocation}, {
    type: void 0,
    decorators: [{type: _angular_core.Optional}, {
      type: _angular_core.Inject,
      args: [APP_BASE_HREF]
    }]
  }], exports.NgLocalization = NgLocalization, exports.AsyncPipe = AsyncPipe, exports.COMMON_PIPES = COMMON_PIPES, exports.DatePipe = DatePipe, exports.I18nPluralPipe = I18nPluralPipe, exports.I18nSelectPipe = I18nSelectPipe, exports.JsonPipe = JsonPipe, exports.LowerCasePipe = LowerCasePipe, exports.CurrencyPipe = CurrencyPipe, exports.DecimalPipe = DecimalPipe, exports.PercentPipe = PercentPipe, exports.ReplacePipe = ReplacePipe, exports.SlicePipe = SlicePipe, exports.UpperCasePipe = UpperCasePipe, exports.CORE_DIRECTIVES = CORE_DIRECTIVES, exports.NgClass = NgClass, exports.NgFor = NgFor, exports.NgIf = NgIf, exports.NgPlural = NgPlural, exports.NgPluralCase = NgPluralCase, exports.NgStyle = NgStyle, exports.NgSwitch = NgSwitch, exports.NgSwitchCase = NgSwitchCase, exports.NgSwitchDefault = NgSwitchDefault, exports.NgTemplateOutlet = NgTemplateOutlet, exports.FORM_PROVIDERS = FORM_PROVIDERS, exports.FORM_DIRECTIVES = FORM_DIRECTIVES, exports.RadioButtonState = RadioButtonState, exports.AbstractControlDirective = AbstractControlDirective, exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor, exports.ControlContainer = ControlContainer, exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR, exports.DefaultValueAccessor = DefaultValueAccessor, exports.NgControl = NgControl, exports.NgControlGroup = NgControlGroup, exports.NgControlName = NgControlName, exports.NgControlStatus = NgControlStatus, exports.NgForm = NgForm, exports.NgFormControl = NgFormControl, exports.NgFormModel = NgFormModel, exports.NgModel = NgModel, exports.NgSelectOption = NgSelectOption, exports.SelectControlValueAccessor = SelectControlValueAccessor, exports.MaxLengthValidator = MaxLengthValidator, exports.MinLengthValidator = MinLengthValidator, exports.PatternValidator = PatternValidator, exports.RequiredValidator = RequiredValidator, exports.FormBuilder = FormBuilder, exports.AbstractControl = AbstractControl, exports.Control = Control, exports.ControlArray = ControlArray, exports.ControlGroup = ControlGroup, exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS, exports.NG_VALIDATORS = NG_VALIDATORS, exports.Validators = Validators, exports.COMMON_DIRECTIVES = COMMON_DIRECTIVES, exports.PlatformLocation = PlatformLocation, exports.LocationStrategy = LocationStrategy, exports.APP_BASE_HREF = APP_BASE_HREF, exports.HashLocationStrategy = HashLocationStrategy, exports.PathLocationStrategy = PathLocationStrategy, exports.Location = Location;
});

})();
(function() {
var define = $__System.amdDefine;
var __extends = this && this.__extends || function(d, b) {
  function __() {
    this.constructor = d;
  }
  for (var p in b)
    b.hasOwnProperty(p) && (d[p] = b[p]);
  d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __);
};
!function(global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/common"), require("@angular/core"), require("rxjs/Subject"), require("rxjs/observable/PromiseObservable"), require("rxjs/operator/toPromise"), require("rxjs/Observable")) : "function" == typeof define && define.amd ? define("a", ["exports", "9", "3", "4", "5", "6", "7"], factory) : factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}), global.ng.common, global.ng.core, global.Rx, global.Rx, global.Rx.Observable.prototype, global.Rx);
}(this, function(exports, _angular_common, _angular_core, rxjs_Subject, rxjs_observable_PromiseObservable, rxjs_operator_toPromise, rxjs_Observable) {
  "use strict";
  function isPresent(obj) {
    return void 0 !== obj && null !== obj;
  }
  function isBlank(obj) {
    return void 0 === obj || null === obj;
  }
  function isNumber(obj) {
    return "number" == typeof obj;
  }
  function isString(obj) {
    return "string" == typeof obj;
  }
  function isFunction(obj) {
    return "function" == typeof obj;
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function noop() {}
  function stringify(token) {
    if ("string" == typeof token)
      return token;
    if (void 0 === token || null === token)
      return "" + token;
    if (token.name)
      return token.name;
    if (token.overriddenName)
      return token.overriddenName;
    var res = token.toString(),
        newLineIndex = res.indexOf("\n");
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function serializeEnum(val) {
    return val;
  }
  function print(obj) {
    console.log(obj);
  }
  function setValueOnPath(global, path, value) {
    for (var parts = path.split("."),
        obj = global; parts.length > 1; ) {
      var name = parts.shift();
      obj = obj.hasOwnProperty(name) && isPresent(obj[name]) ? obj[name] : obj[name] = {};
    }
    void 0 !== obj && null !== obj || (obj = {}), obj[parts.shift()] = value;
  }
  function getDOM() {
    return _DOM;
  }
  function setRootDomAdapter(adapter) {
    isBlank(_DOM) && (_DOM = adapter);
  }
  function supportsState() {
    return !!window.history.pushState;
  }
  function enableDebugTools(ref) {
    return context.ng = new AngularTools(ref), ref;
  }
  function disableDebugTools() {
    delete context.ng;
  }
  function _flattenArray(source, target) {
    if (isPresent(source))
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        isArray(item) ? _flattenArray(item, target) : target.push(item);
      }
    return target;
  }
  function sanitizeUrl(url) {
    return url = String(url), url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN) ? url : (_angular_core.isDevMode() && getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)"), "unsafe:" + url);
  }
  function sanitizeSrcset(srcset) {
    return srcset = String(srcset), srcset.split(",").map(function(srcset) {
      return sanitizeUrl(srcset.trim());
    }).join(", ");
  }
  function getInertElement() {
    if (inertElement)
      return inertElement;
    DOM = getDOM();
    var templateEl = DOM.createElement("template");
    if ("content" in templateEl)
      return templateEl;
    var doc = DOM.createHtmlDocument();
    if (inertElement = DOM.querySelector(doc, "body"), null == inertElement) {
      var html = DOM.createElement("html", doc);
      inertElement = DOM.createElement("body", doc), DOM.appendChild(html, inertElement), DOM.appendChild(doc, html);
    }
    return inertElement;
  }
  function tagSet(tags) {
    for (var res = {},
        _i = 0,
        _a = tags.split(","); _i < _a.length; _i++) {
      var t = _a[_i];
      res[t.toLowerCase()] = !0;
    }
    return res;
  }
  function merge() {
    for (var sets = [],
        _i = 0; _i < arguments.length; _i++)
      sets[_i - 0] = arguments[_i];
    for (var res = {},
        _a = 0,
        sets_1 = sets; _a < sets_1.length; _a++) {
      var s = sets_1[_a];
      for (var v in s)
        s.hasOwnProperty(v) && (res[v] = !0);
    }
    return res;
  }
  function encodeEntities(value) {
    return value.replace(/&/g, "&amp;").replace(SURROGATE_PAIR_REGEXP, function(match) {
      var hi = match.charCodeAt(0),
          low = match.charCodeAt(1);
      return "&#" + (1024 * (hi - 55296) + (low - 56320) + 65536) + ";";
    }).replace(NON_ALPHANUMERIC_REGEXP, function(match) {
      return "&#" + match.charCodeAt(0) + ";";
    }).replace(/</g, "&lt;").replace(/>/g, "&gt;");
  }
  function stripCustomNsAttrs(el) {
    DOM.attributeMap(el).forEach(function(_, attrName) {
      "xmlns:ns1" !== attrName && 0 !== attrName.indexOf("ns1:") || DOM.removeAttribute(el, attrName);
    });
    for (var _i = 0,
        _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
      var n = _a[_i];
      DOM.isElementNode(n) && stripCustomNsAttrs(n);
    }
  }
  function sanitizeHtml(unsafeHtmlInput) {
    try {
      var containerEl = getInertElement(),
          unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : "",
          mXSSAttempts = 5,
          parsedHtml = unsafeHtml;
      do {
        if (0 === mXSSAttempts)
          throw new Error("Failed to sanitize html because the input is unstable");
        mXSSAttempts--, unsafeHtml = parsedHtml, DOM.setInnerHTML(containerEl, unsafeHtml), DOM.defaultDoc().documentMode && stripCustomNsAttrs(containerEl), parsedHtml = DOM.getInnerHTML(containerEl);
      } while (unsafeHtml !== parsedHtml);
      for (var sanitizer = new SanitizingHtmlSerializer,
          safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl),
          parent_1 = DOM.getTemplateContent(containerEl) || containerEl,
          _i = 0,
          _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
        var child = _a[_i];
        DOM.removeChild(parent_1, child);
      }
      return _angular_core.isDevMode() && safeHtml !== unsafeHtmlInput && DOM.log("WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss)."), safeHtml;
    } catch (e) {
      throw inertElement = null, e;
    }
  }
  function hasBalancedQuotes(value) {
    for (var outsideSingle = !0,
        outsideDouble = !0,
        i = 0; i < value.length; i++) {
      var c = value.charAt(i);
      "'" === c && outsideDouble ? outsideSingle = !outsideSingle : '"' === c && outsideSingle && (outsideDouble = !outsideDouble);
    }
    return outsideSingle && outsideDouble;
  }
  function sanitizeStyle(value) {
    if (value = String(value).trim(), !value)
      return "";
    var urlMatch = URL_RE.exec(value);
    return urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1] || value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value) ? value : (_angular_core.isDevMode() && getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss)."), "unsafe");
  }
  function camelCaseToDashCase(input) {
    return StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function(m) {
      return "-" + m[1].toLowerCase();
    });
  }
  function dashCaseToCamelCase(input) {
    return StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function(m) {
      return m[1].toUpperCase();
    });
  }
  function _populateStyles(element, styles, defaultStyles) {
    var data = {};
    return styles.styles.forEach(function(entry) {
      StringMapWrapper.forEach(entry, function(val, prop) {
        var formattedProp = dashCaseToCamelCase(prop);
        data[formattedProp] = val == _angular_core.AUTO_STYLE ? _computeStyle(element, formattedProp) : val.toString() + _resolveStyleUnit(val, prop, formattedProp);
      });
    }), StringMapWrapper.forEach(defaultStyles, function(value, prop) {
      isPresent(data[prop]) || (data[prop] = value);
    }), data;
  }
  function _resolveStyleUnit(val, userProvidedProp, formattedProp) {
    var unit = "";
    if (_isPixelDimensionStyle(formattedProp) && 0 != val && "0" != val)
      if (isNumber(val))
        unit = "px";
      else if (0 == _findDimensionalSuffix(val.toString()).length)
        throw new _angular_core.BaseException("Please provide a CSS unit value for " + userProvidedProp + ":" + val);
    return unit;
  }
  function _findDimensionalSuffix(value) {
    for (var i = 0; i < value.length; i++) {
      var c = StringWrapper.charCodeAt(value, i);
      if (!(c >= _$0 && c <= _$9 || c == _$PERIOD))
        return value.substring(i, value.length);
    }
    return "";
  }
  function _isPixelDimensionStyle(prop) {
    switch (prop) {
      case "width":
      case "height":
      case "minWidth":
      case "minHeight":
      case "maxWidth":
      case "maxHeight":
      case "left":
      case "top":
      case "bottom":
      case "right":
      case "fontSize":
      case "outlineWidth":
      case "outlineOffset":
      case "paddingTop":
      case "paddingLeft":
      case "paddingBottom":
      case "paddingRight":
      case "marginTop":
      case "marginLeft":
      case "marginBottom":
      case "marginRight":
      case "borderRadius":
      case "borderWidth":
      case "borderTopWidth":
      case "borderLeftWidth":
      case "borderRightWidth":
      case "borderBottomWidth":
      case "textIndent":
        return !0;
      default:
        return !1;
    }
  }
  function _computeStyle(element, prop) {
    return getDOM().getComputedStyle(element)[prop];
  }
  function getBaseElementHref() {
    return isBlank(baseElement) && (baseElement = document.querySelector("base"), isBlank(baseElement)) ? null : baseElement.getAttribute("href");
  }
  function relativePath(url) {
    return isBlank(urlParsingNode) && (urlParsingNode = document.createElement("a")), urlParsingNode.setAttribute("href", url), "/" === urlParsingNode.pathname.charAt(0) ? urlParsingNode.pathname : "/" + urlParsingNode.pathname;
  }
  function parseCookieValue(cookie, name) {
    name = encodeURIComponent(name);
    for (var cookies = cookie.split(";"),
        _i = 0,
        cookies_1 = cookies; _i < cookies_1.length; _i++) {
      var cookie_1 = cookies_1[_i],
          _a = cookie_1.split("=", 2),
          key = _a[0],
          value = _a[1];
      if (key.trim() === name)
        return decodeURIComponent(value);
    }
    return null;
  }
  function moveNodesAfterSibling(sibling, nodes) {
    var parent = getDOM().parentElement(sibling);
    if (nodes.length > 0 && isPresent(parent)) {
      var nextSibling = getDOM().nextSibling(sibling);
      if (isPresent(nextSibling))
        for (var i = 0; i < nodes.length; i++)
          getDOM().insertBefore(nextSibling, nodes[i]);
      else
        for (var i = 0; i < nodes.length; i++)
          getDOM().appendChild(parent, nodes[i]);
    }
  }
  function appendNodes(parent, nodes) {
    for (var i = 0; i < nodes.length; i++)
      getDOM().appendChild(parent, nodes[i]);
  }
  function decoratePreventDefault(eventHandler) {
    return function(event) {
      var allowDefaultBehavior = eventHandler(event);
      allowDefaultBehavior === !1 && getDOM().preventDefault(event);
    };
  }
  function _shimContentAttribute(componentShortId) {
    return StringWrapper.replaceAll(CONTENT_ATTR, COMPONENT_REGEX, componentShortId);
  }
  function _shimHostAttribute(componentShortId) {
    return StringWrapper.replaceAll(HOST_ATTR, COMPONENT_REGEX, componentShortId);
  }
  function _flattenStyles(compId, styles, target) {
    for (var i = 0; i < styles.length; i++) {
      var style = styles[i];
      isArray(style) ? _flattenStyles(compId, style, target) : (style = StringWrapper.replaceAll(style, COMPONENT_REGEX, compId), target.push(style));
    }
    return target;
  }
  function splitNamespace(name) {
    if (":" != name[0])
      return [null, name];
    var match = RegExpWrapper.firstMatch(NS_PREFIX_RE, name);
    return [match[1], match[2]];
  }
  function inspectNativeElement(element) {
    return _angular_core.getDebugNode(element);
  }
  function _createConditionalRootRenderer(rootRenderer) {
    return _angular_core.isDevMode() ? _createRootRenderer(rootRenderer) : rootRenderer;
  }
  function _createRootRenderer(rootRenderer) {
    return getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement), getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, CORE_TOKENS), new DebugDomRootRenderer(rootRenderer);
  }
  function browserPlatform() {
    return isBlank(_angular_core.getPlatform()) && _angular_core.createPlatform(_angular_core.ReflectiveInjector.resolveAndCreate(BROWSER_PLATFORM_PROVIDERS)), _angular_core.assertPlatform(BROWSER_PLATFORM_MARKER);
  }
  function initDomAdapter() {
    BrowserDomAdapter.makeCurrent(), wtfInit(), BrowserGetTestability.init();
  }
  function _exceptionHandler() {
    return new _angular_core.ExceptionHandler(getDOM());
  }
  function _document() {
    return getDOM().defaultDoc();
  }
  function _resolveDefaultAnimationDriver() {
    return getDOM().supportsWebAnimation() ? new WebAnimationsDriver : new NoOpAnimationDriver;
  }
  function deserializeGenericEvent(serializedEvent) {
    return serializedEvent;
  }
  function appInitFnFactory(platformLocation, zone) {
    return function() {
      return zone.runGuarded(function() {
        return platformLocation.init();
      });
    };
  }
  function initUiLocation(injector) {
    return function() {
      var zone = injector.get(_angular_core.NgZone);
      zone.runGuarded(function() {
        return injector.get(MessageBasedPlatformLocation).start();
      });
    };
  }
  function serializeGenericEvent(e) {
    return serializeEvent(e, EVENT_PROPERTIES);
  }
  function serializeEventWithTarget(e) {
    var serializedEvent = serializeEvent(e, EVENT_PROPERTIES);
    return addTarget(e, serializedEvent);
  }
  function serializeMouseEvent(e) {
    return serializeEvent(e, MOUSE_EVENT_PROPERTIES);
  }
  function serializeKeyboardEvent(e) {
    var serializedEvent = serializeEvent(e, KEYBOARD_EVENT_PROPERTIES);
    return addTarget(e, serializedEvent);
  }
  function serializeTransitionEvent(e) {
    var serializedEvent = serializeEvent(e, TRANSITION_EVENT_PROPERTIES);
    return addTarget(e, serializedEvent);
  }
  function addTarget(e, serializedEvent) {
    if (NODES_WITH_VALUE.has(e.target.tagName.toLowerCase())) {
      var target = e.target;
      serializedEvent.target = {value: target.value}, isPresent(target.files) && (serializedEvent.target.files = target.files);
    }
    return serializedEvent;
  }
  function serializeEvent(e, properties) {
    for (var serialized = {},
        i = 0; i < properties.length; i++) {
      var prop = properties[i];
      serialized[prop] = e[prop];
    }
    return serialized;
  }
  function initializeGenericWorkerRenderer(injector) {
    var bus = injector.get(MessageBus),
        zone = injector.get(_angular_core.NgZone);
    bus.attachToZone(zone);
    var services = injector.get(WORKER_UI_STARTABLE_MESSAGING_SERVICE);
    zone.runGuarded(function() {
      services.forEach(function(svc) {
        svc.start();
      });
    });
  }
  function messageBusFactory(instance) {
    return instance.bus;
  }
  function initWebWorkerRenderPlatform() {
    BrowserDomAdapter.makeCurrent(), wtfInit(), BrowserGetTestability.init();
  }
  function workerUiPlatform() {
    return isBlank(_angular_core.getPlatform()) && _angular_core.createPlatform(_angular_core.ReflectiveInjector.resolveAndCreate(WORKER_UI_PLATFORM_PROVIDERS)), _angular_core.assertPlatform(WORKER_RENDER_PLATFORM_MARKER);
  }
  function _exceptionHandler$1() {
    return new _angular_core.ExceptionHandler(getDOM());
  }
  function _document$1() {
    return getDOM().defaultDoc();
  }
  function initWebWorkerAppFn(injector) {
    return function() {
      var scriptUri;
      try {
        scriptUri = injector.get(WORKER_SCRIPT);
      } catch (e) {
        throw new BaseException$1("You must provide your WebWorker's initialization script with the WORKER_SCRIPT token");
      }
      var instance = injector.get(WebWorkerInstance);
      spawnWebWorker(scriptUri, instance), initializeGenericWorkerRenderer(injector);
    };
  }
  function spawnWebWorker(uri, instance) {
    var webWorker = new Worker(uri),
        sink = new PostMessageBusSink(webWorker),
        source = new PostMessageBusSource(webWorker),
        bus = new PostMessageBus(sink, source);
    instance.init(webWorker, bus);
  }
  function _resolveDefaultAnimationDriver$1() {
    return new NoOpAnimationDriver;
  }
  function eventNameWithTarget(target, eventName) {
    return target + ":" + eventName;
  }
  function workerAppPlatform() {
    return isBlank(_angular_core.getPlatform()) && _angular_core.createPlatform(_angular_core.ReflectiveInjector.resolveAndCreate(WORKER_APP_PLATFORM_PROVIDERS)), _angular_core.assertPlatform(WORKER_APP_PLATFORM_MARKER);
  }
  function _exceptionHandler$2() {
    return new _angular_core.ExceptionHandler(new PrintLogger);
  }
  function createMessageBus(zone) {
    var sink = new PostMessageBusSink(_postMessage),
        source = new PostMessageBusSource,
        bus = new PostMessageBus(sink, source);
    return bus.attachToZone(zone), bus;
  }
  function setupWebWorker() {
    WorkerDomAdapter.makeCurrent();
  }
  var globalScope;
  globalScope = "undefined" == typeof window ? "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : global : window;
  var global$1 = globalScope,
      Date = global$1.Date;
  global$1.assert = function(condition) {};
  var StringWrapper = function() {
    function StringWrapper() {}
    return StringWrapper.fromCharCode = function(code) {
      return String.fromCharCode(code);
    }, StringWrapper.charCodeAt = function(s, index) {
      return s.charCodeAt(index);
    }, StringWrapper.split = function(s, regExp) {
      return s.split(regExp);
    }, StringWrapper.equals = function(s, s2) {
      return s === s2;
    }, StringWrapper.stripLeft = function(s, charVal) {
      if (s && s.length) {
        for (var pos = 0,
            i = 0; i < s.length && s[i] == charVal; i++)
          pos++;
        s = s.substring(pos);
      }
      return s;
    }, StringWrapper.stripRight = function(s, charVal) {
      if (s && s.length) {
        for (var pos = s.length,
            i = s.length - 1; i >= 0 && s[i] == charVal; i--)
          pos--;
        s = s.substring(0, pos);
      }
      return s;
    }, StringWrapper.replace = function(s, from, replace) {
      return s.replace(from, replace);
    }, StringWrapper.replaceAll = function(s, from, replace) {
      return s.replace(from, replace);
    }, StringWrapper.slice = function(s, from, to) {
      return void 0 === from && (from = 0), void 0 === to && (to = null), s.slice(from, null === to ? void 0 : to);
    }, StringWrapper.replaceAllMapped = function(s, from, cb) {
      return s.replace(from, function() {
        for (var matches = [],
            _i = 0; _i < arguments.length; _i++)
          matches[_i - 0] = arguments[_i];
        return matches.splice(-2, 2), cb(matches);
      });
    }, StringWrapper.contains = function(s, substr) {
      return s.indexOf(substr) != -1;
    }, StringWrapper.compare = function(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }, StringWrapper;
  }(),
      NumberParseError = function(_super) {
        function NumberParseError(message) {
          _super.call(this), this.message = message;
        }
        return __extends(NumberParseError, _super), NumberParseError.prototype.toString = function() {
          return this.message;
        }, NumberParseError;
      }(Error),
      NumberWrapper = function() {
        function NumberWrapper() {}
        return NumberWrapper.toFixed = function(n, fractionDigits) {
          return n.toFixed(fractionDigits);
        }, NumberWrapper.equal = function(a, b) {
          return a === b;
        }, NumberWrapper.parseIntAutoRadix = function(text) {
          var result = parseInt(text);
          if (isNaN(result))
            throw new NumberParseError("Invalid integer literal when parsing " + text);
          return result;
        }, NumberWrapper.parseInt = function(text, radix) {
          if (10 == radix) {
            if (/^(\-|\+)?[0-9]+$/.test(text))
              return parseInt(text, radix);
          } else if (16 == radix) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text))
              return parseInt(text, radix);
          } else {
            var result = parseInt(text, radix);
            if (!isNaN(result))
              return result;
          }
          throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
        }, NumberWrapper.parseFloat = function(text) {
          return parseFloat(text);
        }, Object.defineProperty(NumberWrapper, "NaN", {
          get: function() {
            return NaN;
          },
          enumerable: !0,
          configurable: !0
        }), NumberWrapper.isNumeric = function(value) {
          return !isNaN(value - parseFloat(value));
        }, NumberWrapper.isNaN = function(value) {
          return isNaN(value);
        }, NumberWrapper.isInteger = function(value) {
          return Number.isInteger(value);
        }, NumberWrapper;
      }(),
      RegExpWrapper = function() {
        function RegExpWrapper() {}
        return RegExpWrapper.create = function(regExpStr, flags) {
          return void 0 === flags && (flags = ""), flags = flags.replace(/g/g, ""), new global$1.RegExp(regExpStr, flags + "g");
        }, RegExpWrapper.firstMatch = function(regExp, input) {
          return regExp.lastIndex = 0, regExp.exec(input);
        }, RegExpWrapper.test = function(regExp, input) {
          return regExp.lastIndex = 0, regExp.test(input);
        }, RegExpWrapper.matcher = function(regExp, input) {
          return regExp.lastIndex = 0, {
            re: regExp,
            input: input
          };
        }, RegExpWrapper.replaceAll = function(regExp, input, replace) {
          var c = regExp.exec(input),
              res = "";
          regExp.lastIndex = 0;
          for (var prev = 0; c; )
            res += input.substring(prev, c.index), res += replace(c), prev = c.index + c[0].length, regExp.lastIndex = prev, c = regExp.exec(input);
          return res += input.substring(prev);
        }, RegExpWrapper;
      }(),
      FunctionWrapper = function() {
        function FunctionWrapper() {}
        return FunctionWrapper.apply = function(fn, posArgs) {
          return fn.apply(null, posArgs);
        }, FunctionWrapper.bind = function(fn, scope) {
          return fn.bind(scope);
        }, FunctionWrapper;
      }(),
      Json = function() {
        function Json() {}
        return Json.parse = function(s) {
          return global$1.JSON.parse(s);
        }, Json.stringify = function(data) {
          return global$1.JSON.stringify(data, null, 2);
        }, Json;
      }(),
      DateWrapper = function() {
        function DateWrapper() {}
        return DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
          return void 0 === month && (month = 1), void 0 === day && (day = 1), void 0 === hour && (hour = 0), void 0 === minutes && (minutes = 0), void 0 === seconds && (seconds = 0), void 0 === milliseconds && (milliseconds = 0), new Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
        }, DateWrapper.fromISOString = function(str) {
          return new Date(str);
        }, DateWrapper.fromMillis = function(ms) {
          return new Date(ms);
        }, DateWrapper.toMillis = function(date) {
          return date.getTime();
        }, DateWrapper.now = function() {
          return new Date;
        }, DateWrapper.toJson = function(date) {
          return date.toJSON();
        }, DateWrapper;
      }(),
      _DOM = null,
      DomAdapter = function() {
        function DomAdapter() {
          this.xhrType = null;
        }
        return DomAdapter.prototype.getXHR = function() {
          return this.xhrType;
        }, Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
          get: function() {
            return this._attrToPropMap;
          },
          set: function(value) {
            this._attrToPropMap = value;
          },
          enumerable: !0,
          configurable: !0
        }), DomAdapter;
      }(),
      BrowserPlatformLocation = function(_super) {
        function BrowserPlatformLocation() {
          _super.call(this), this._init();
        }
        return __extends(BrowserPlatformLocation, _super), BrowserPlatformLocation.prototype._init = function() {
          this._location = getDOM().getLocation(), this._history = getDOM().getHistory();
        }, Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
          get: function() {
            return this._location;
          },
          enumerable: !0,
          configurable: !0
        }), BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function() {
          return getDOM().getBaseHref();
        }, BrowserPlatformLocation.prototype.onPopState = function(fn) {
          getDOM().getGlobalEventTarget("window").addEventListener("popstate", fn, !1);
        }, BrowserPlatformLocation.prototype.onHashChange = function(fn) {
          getDOM().getGlobalEventTarget("window").addEventListener("hashchange", fn, !1);
        }, Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
          get: function() {
            return this._location.pathname;
          },
          set: function(newPath) {
            this._location.pathname = newPath;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
          get: function() {
            return this._location.search;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
          get: function() {
            return this._location.hash;
          },
          enumerable: !0,
          configurable: !0
        }), BrowserPlatformLocation.prototype.pushState = function(state, title, url) {
          supportsState() ? this._history.pushState(state, title, url) : this._location.hash = url;
        }, BrowserPlatformLocation.prototype.replaceState = function(state, title, url) {
          supportsState() ? this._history.replaceState(state, title, url) : this._location.hash = url;
        }, BrowserPlatformLocation.prototype.forward = function() {
          this._history.forward();
        }, BrowserPlatformLocation.prototype.back = function() {
          this._history.back();
        }, BrowserPlatformLocation;
      }(_angular_common.PlatformLocation);
  BrowserPlatformLocation.decorators = [{type: _angular_core.Injectable}], BrowserPlatformLocation.ctorParameters = [];
  var Title = function() {
    function Title() {}
    return Title.prototype.getTitle = function() {
      return getDOM().getTitle();
    }, Title.prototype.setTitle = function(newTitle) {
      getDOM().setTitle(newTitle);
    }, Title;
  }(),
      win = "undefined" != typeof window && window || {},
      ChangeDetectionPerfRecord = function() {
        function ChangeDetectionPerfRecord(msPerTick, numTicks) {
          this.msPerTick = msPerTick, this.numTicks = numTicks;
        }
        return ChangeDetectionPerfRecord;
      }(),
      AngularTools = function() {
        function AngularTools(ref) {
          this.profiler = new AngularProfiler(ref);
        }
        return AngularTools;
      }(),
      AngularProfiler = function() {
        function AngularProfiler(ref) {
          this.appRef = ref.injector.get(_angular_core.ApplicationRef);
        }
        return AngularProfiler.prototype.timeChangeDetection = function(config) {
          var record = isPresent(config) && config.record,
              profileName = "Change Detection",
              isProfilerAvailable = isPresent(win.console.profile);
          record && isProfilerAvailable && win.console.profile(profileName);
          for (var start = getDOM().performanceNow(),
              numTicks = 0; numTicks < 5 || getDOM().performanceNow() - start < 500; )
            this.appRef.tick(), numTicks++;
          var end = getDOM().performanceNow();
          record && isProfilerAvailable && win.console.profileEnd(profileName);
          var msPerTick = (end - start) / numTicks;
          return win.console.log("ran " + numTicks + " change detection cycles"), win.console.log(NumberWrapper.toFixed(msPerTick, 2) + " ms per check"), new ChangeDetectionPerfRecord(msPerTick, numTicks);
        }, AngularProfiler;
      }(),
      context = global$1,
      By = function() {
        function By() {}
        return By.all = function() {
          return function(debugElement) {
            return !0;
          };
        }, By.css = function(selector) {
          return function(debugElement) {
            return !!isPresent(debugElement.nativeElement) && getDOM().elementMatches(debugElement.nativeElement, selector);
          };
        }, By.directive = function(type) {
          return function(debugElement) {
            return debugElement.providerTokens.indexOf(type) !== -1;
          };
        }, By;
      }(),
      DOCUMENT = new _angular_core.OpaqueToken("DocumentToken"),
      Map$1 = global$1.Map,
      Set$1 = global$1.Set,
      StringMapWrapper = (function() {
        try {
          if (1 === new Map$1([[1, 2]]).size)
            return function(pairs) {
              return new Map$1(pairs);
            };
        } catch (e) {}
        return function(pairs) {
          for (var map = new Map$1,
              i = 0; i < pairs.length; i++) {
            var pair = pairs[i];
            map.set(pair[0], pair[1]);
          }
          return map;
        };
      }(), function() {
        try {
          if (new Map$1(new Map$1))
            return function(m) {
              return new Map$1(m);
            };
        } catch (e) {}
        return function(m) {
          var map = new Map$1;
          return m.forEach(function(v, k) {
            map.set(k, v);
          }), map;
        };
      }(), function() {
        return (new Map$1).keys().next ? function(m) {
          for (var k,
              keyIterator = m.keys(); !(k = keyIterator.next()).done; )
            m.set(k.value, null);
        } : function(m) {
          m.forEach(function(v, k) {
            m.set(k, null);
          });
        };
      }(), function() {
        try {
          if ((new Map$1).values().next)
            return function(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
        } catch (e) {}
        return function(m, getValues) {
          var res = ListWrapper.createFixedSize(m.size),
              i = 0;
          return m.forEach(function(v, k) {
            res[i] = getValues ? v : k, i++;
          }), res;
        };
      }(), function() {
        function StringMapWrapper() {}
        return StringMapWrapper.create = function() {
          return {};
        }, StringMapWrapper.contains = function(map, key) {
          return map.hasOwnProperty(key);
        }, StringMapWrapper.get = function(map, key) {
          return map.hasOwnProperty(key) ? map[key] : void 0;
        }, StringMapWrapper.set = function(map, key, value) {
          map[key] = value;
        }, StringMapWrapper.keys = function(map) {
          return Object.keys(map);
        }, StringMapWrapper.values = function(map) {
          return Object.keys(map).reduce(function(r, a) {
            return r.push(map[a]), r;
          }, []);
        }, StringMapWrapper.isEmpty = function(map) {
          for (var prop in map)
            return !1;
          return !0;
        }, StringMapWrapper.delete = function(map, key) {
          delete map[key];
        }, StringMapWrapper.forEach = function(map, callback) {
          for (var prop in map)
            map.hasOwnProperty(prop) && callback(map[prop], prop);
        }, StringMapWrapper.merge = function(m1, m2) {
          var m = {};
          for (var attr in m1)
            m1.hasOwnProperty(attr) && (m[attr] = m1[attr]);
          for (var attr in m2)
            m2.hasOwnProperty(attr) && (m[attr] = m2[attr]);
          return m;
        }, StringMapWrapper.equals = function(m1, m2) {
          var k1 = Object.keys(m1),
              k2 = Object.keys(m2);
          if (k1.length != k2.length)
            return !1;
          for (var key,
              i = 0; i < k1.length; i++)
            if (key = k1[i], m1[key] !== m2[key])
              return !1;
          return !0;
        }, StringMapWrapper;
      }()),
      ListWrapper = function() {
        function ListWrapper() {}
        return ListWrapper.createFixedSize = function(size) {
          return new Array(size);
        }, ListWrapper.createGrowableSize = function(size) {
          return new Array(size);
        }, ListWrapper.clone = function(array) {
          return array.slice(0);
        }, ListWrapper.forEachWithIndex = function(array, fn) {
          for (var i = 0; i < array.length; i++)
            fn(array[i], i);
        }, ListWrapper.first = function(array) {
          return array ? array[0] : null;
        }, ListWrapper.last = function(array) {
          return array && 0 != array.length ? array[array.length - 1] : null;
        }, ListWrapper.indexOf = function(array, value, startIndex) {
          return void 0 === startIndex && (startIndex = 0), array.indexOf(value, startIndex);
        }, ListWrapper.contains = function(list, el) {
          return list.indexOf(el) !== -1;
        }, ListWrapper.reversed = function(array) {
          var a = ListWrapper.clone(array);
          return a.reverse();
        }, ListWrapper.concat = function(a, b) {
          return a.concat(b);
        }, ListWrapper.insert = function(list, index, value) {
          list.splice(index, 0, value);
        }, ListWrapper.removeAt = function(list, index) {
          var res = list[index];
          return list.splice(index, 1), res;
        }, ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        }, ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          return index > -1 && (list.splice(index, 1), !0);
        }, ListWrapper.clear = function(list) {
          list.length = 0;
        }, ListWrapper.isEmpty = function(list) {
          return 0 == list.length;
        }, ListWrapper.fill = function(list, value, start, end) {
          void 0 === start && (start = 0), void 0 === end && (end = null), list.fill(value, start, null === end ? list.length : end);
        }, ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return !1;
          for (var i = 0; i < a.length; ++i)
            if (a[i] !== b[i])
              return !1;
          return !0;
        }, ListWrapper.slice = function(l, from, to) {
          return void 0 === from && (from = 0), void 0 === to && (to = null), l.slice(from, null === to ? void 0 : to);
        }, ListWrapper.splice = function(l, from, length) {
          return l.splice(from, length);
        }, ListWrapper.sort = function(l, compareFn) {
          isPresent(compareFn) ? l.sort(compareFn) : l.sort();
        }, ListWrapper.toString = function(l) {
          return l.toString();
        }, ListWrapper.toJSON = function(l) {
          return JSON.stringify(l);
        }, ListWrapper.maximum = function(list, predicate) {
          if (0 == list.length)
            return null;
          for (var solution = null,
              maxValue = -(1 / 0),
              index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (!isBlank(candidate)) {
              var candidateValue = predicate(candidate);
              candidateValue > maxValue && (solution = candidate, maxValue = candidateValue);
            }
          }
          return solution;
        }, ListWrapper.flatten = function(list) {
          var target = [];
          return _flattenArray(list, target), target;
        }, ListWrapper.addAll = function(list, source) {
          for (var i = 0; i < source.length; i++)
            list.push(source[i]);
        }, ListWrapper;
      }(),
      createSetFromList = function() {
        var test = new Set$1([1, 2, 3]);
        return 3 === test.size ? function(lst) {
          return new Set$1(lst);
        } : function(lst) {
          var res = new Set$1(lst);
          if (res.size !== lst.length)
            for (var i = 0; i < lst.length; i++)
              res.add(lst[i]);
          return res;
        };
      }(),
      SetWrapper = function() {
        function SetWrapper() {}
        return SetWrapper.createFromList = function(lst) {
          return createSetFromList(lst);
        }, SetWrapper.has = function(s, key) {
          return s.has(key);
        }, SetWrapper.delete = function(m, k) {
          m.delete(k);
        }, SetWrapper;
      }(),
      BaseException$1 = function(_super) {
        function BaseException$1(message) {
          void 0 === message && (message = "--"), _super.call(this, message), this.message = message, this.stack = new Error(message).stack;
        }
        return __extends(BaseException$1, _super), BaseException$1.prototype.toString = function() {
          return this.message;
        }, BaseException$1;
      }(Error),
      EVENT_MANAGER_PLUGINS = new _angular_core.OpaqueToken("EventManagerPlugins"),
      EventManager = function() {
        function EventManager(plugins, _zone) {
          var _this = this;
          this._zone = _zone, plugins.forEach(function(p) {
            return p.manager = _this;
          }), this._plugins = ListWrapper.reversed(plugins);
        }
        return EventManager.prototype.addEventListener = function(element, eventName, handler) {
          var plugin = this._findPluginFor(eventName);
          return plugin.addEventListener(element, eventName, handler);
        }, EventManager.prototype.addGlobalEventListener = function(target, eventName, handler) {
          var plugin = this._findPluginFor(eventName);
          return plugin.addGlobalEventListener(target, eventName, handler);
        }, EventManager.prototype.getZone = function() {
          return this._zone;
        }, EventManager.prototype._findPluginFor = function(eventName) {
          for (var plugins = this._plugins,
              i = 0; i < plugins.length; i++) {
            var plugin = plugins[i];
            if (plugin.supports(eventName))
              return plugin;
          }
          throw new BaseException$1("No event manager plugin found for event " + eventName);
        }, EventManager;
      }();
  EventManager.decorators = [{type: _angular_core.Injectable}], EventManager.ctorParameters = [{
    type: Array,
    decorators: [{
      type: _angular_core.Inject,
      args: [EVENT_MANAGER_PLUGINS]
    }]
  }, {type: _angular_core.NgZone}];
  var EventManagerPlugin = function() {
    function EventManagerPlugin() {}
    return EventManagerPlugin.prototype.supports = function(eventName) {
      return !1;
    }, EventManagerPlugin.prototype.addEventListener = function(element, eventName, handler) {
      throw "not implemented";
    }, EventManagerPlugin.prototype.addGlobalEventListener = function(element, eventName, handler) {
      throw "not implemented";
    }, EventManagerPlugin;
  }(),
      _eventNames = {
        pan: !0,
        panstart: !0,
        panmove: !0,
        panend: !0,
        pancancel: !0,
        panleft: !0,
        panright: !0,
        panup: !0,
        pandown: !0,
        pinch: !0,
        pinchstart: !0,
        pinchmove: !0,
        pinchend: !0,
        pinchcancel: !0,
        pinchin: !0,
        pinchout: !0,
        press: !0,
        pressup: !0,
        rotate: !0,
        rotatestart: !0,
        rotatemove: !0,
        rotateend: !0,
        rotatecancel: !0,
        swipe: !0,
        swipeleft: !0,
        swiperight: !0,
        swipeup: !0,
        swipedown: !0,
        tap: !0
      },
      HammerGesturesPluginCommon = function(_super) {
        function HammerGesturesPluginCommon() {
          _super.call(this);
        }
        return __extends(HammerGesturesPluginCommon, _super), HammerGesturesPluginCommon.prototype.supports = function(eventName) {
          return eventName = eventName.toLowerCase(), StringMapWrapper.contains(_eventNames, eventName);
        }, HammerGesturesPluginCommon;
      }(EventManagerPlugin),
      HAMMER_GESTURE_CONFIG = new _angular_core.OpaqueToken("HammerGestureConfig"),
      HammerGestureConfig = function() {
        function HammerGestureConfig() {
          this.events = [], this.overrides = {};
        }
        return HammerGestureConfig.prototype.buildHammer = function(element) {
          var mc = new Hammer(element);
          mc.get("pinch").set({enable: !0}), mc.get("rotate").set({enable: !0});
          for (var eventName in this.overrides)
            mc.get(eventName).set(this.overrides[eventName]);
          return mc;
        }, HammerGestureConfig;
      }();
  HammerGestureConfig.decorators = [{type: _angular_core.Injectable}];
  var HammerGesturesPlugin = function(_super) {
    function HammerGesturesPlugin(_config) {
      _super.call(this), this._config = _config;
    }
    return __extends(HammerGesturesPlugin, _super), HammerGesturesPlugin.prototype.supports = function(eventName) {
      if (!_super.prototype.supports.call(this, eventName) && !this.isCustomEvent(eventName))
        return !1;
      if (!isPresent(window.Hammer))
        throw new BaseException$1("Hammer.js is not loaded, can not bind " + eventName + " event");
      return !0;
    }, HammerGesturesPlugin.prototype.addEventListener = function(element, eventName, handler) {
      var _this = this,
          zone = this.manager.getZone();
      return eventName = eventName.toLowerCase(), zone.runOutsideAngular(function() {
        var mc = _this._config.buildHammer(element),
            callback = function(eventObj) {
              zone.runGuarded(function() {
                handler(eventObj);
              });
            };
        return mc.on(eventName, callback), function() {
          mc.off(eventName, callback);
        };
      });
    }, HammerGesturesPlugin.prototype.isCustomEvent = function(eventName) {
      return this._config.events.indexOf(eventName) > -1;
    }, HammerGesturesPlugin;
  }(HammerGesturesPluginCommon);
  HammerGesturesPlugin.decorators = [{type: _angular_core.Injectable}], HammerGesturesPlugin.ctorParameters = [{
    type: HammerGestureConfig,
    decorators: [{
      type: _angular_core.Inject,
      args: [HAMMER_GESTURE_CONFIG]
    }]
  }];
  var wtfInit = _angular_core.__core_private__.wtfInit,
      VIEW_ENCAPSULATION_VALUES = _angular_core.__core_private__.VIEW_ENCAPSULATION_VALUES,
      DebugDomRootRenderer = _angular_core.__core_private__.DebugDomRootRenderer,
      SecurityContext = _angular_core.__core_private__.SecurityContext,
      SanitizationService = _angular_core.__core_private__.SanitizationService,
      NoOpAnimationDriver = _angular_core.__core_private__.NoOpAnimationDriver,
      AnimationDriver = _angular_core.__core_private__.AnimationDriver,
      SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:\/?#]*(?:[\/?#]|$))/gi,
      DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i,
      inertElement = null,
      DOM = null,
      VOID_ELEMENTS = tagSet("area,br,col,hr,img,wbr"),
      OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),
      OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet("rp,rt"),
      OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS),
      BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul")),
      INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video")),
      VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS),
      URI_ATTRS = tagSet("background,cite,href,itemtype,longdesc,poster,src,xlink:href"),
      SRCSET_ATTRS = tagSet("srcset"),
      HTML_ATTRS = tagSet("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width"),
      VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS),
      SanitizingHtmlSerializer = function() {
        function SanitizingHtmlSerializer() {
          this.buf = [];
        }
        return SanitizingHtmlSerializer.prototype.sanitizeChildren = function(el) {
          for (var current = el.firstChild; current; )
            if (DOM.isElementNode(current) ? this.startElement(current) : DOM.isTextNode(current) && this.chars(DOM.nodeValue(current)), DOM.firstChild(current))
              current = DOM.firstChild(current);
            else
              for (; current; ) {
                if (DOM.isElementNode(current) && this.endElement(DOM.nodeName(current).toLowerCase()), DOM.nextSibling(current)) {
                  current = DOM.nextSibling(current);
                  break;
                }
                current = DOM.parentElement(current);
              }
          return this.buf.join("");
        }, SanitizingHtmlSerializer.prototype.startElement = function(element) {
          var _this = this,
              tagName = DOM.nodeName(element).toLowerCase();
          tagName = tagName.toLowerCase(), VALID_ELEMENTS.hasOwnProperty(tagName) && (this.buf.push("<"), this.buf.push(tagName), DOM.attributeMap(element).forEach(function(value, attrName) {
            var lower = attrName.toLowerCase();
            VALID_ATTRS.hasOwnProperty(lower) && (URI_ATTRS[lower] && (value = sanitizeUrl(value)), SRCSET_ATTRS[lower] && (value = sanitizeSrcset(value)), _this.buf.push(" "), _this.buf.push(attrName), _this.buf.push('="'), _this.buf.push(encodeEntities(value)), _this.buf.push('"'));
          }), this.buf.push(">"));
        }, SanitizingHtmlSerializer.prototype.endElement = function(tagName) {
          tagName = tagName.toLowerCase(), VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName) && (this.buf.push("</"), this.buf.push(tagName), this.buf.push(">"));
        }, SanitizingHtmlSerializer.prototype.chars = function(chars) {
          this.buf.push(encodeEntities(chars));
        }, SanitizingHtmlSerializer;
      }(),
      SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
      NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g,
      VALUES = "[-,.\"'%_!# a-zA-Z0-9]+",
      TRANSFORMATION_FNS = "(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?",
      COLOR_FNS = "(?:rgb|hsl)a?",
      FN_ARGS = "\\([-0-9.%, a-zA-Z]+\\)",
      SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + ")" + FN_ARGS + ")$", "g"),
      URL_RE = /^url\(([^)]+)\)$/,
      DomSanitizationService = function() {
        function DomSanitizationService() {}
        return DomSanitizationService;
      }(),
      DomSanitizationServiceImpl = function(_super) {
        function DomSanitizationServiceImpl() {
          _super.apply(this, arguments);
        }
        return __extends(DomSanitizationServiceImpl, _super), DomSanitizationServiceImpl.prototype.sanitize = function(ctx, value) {
          if (null == value)
            return null;
          switch (ctx) {
            case SecurityContext.NONE:
              return value;
            case SecurityContext.HTML:
              return value instanceof SafeHtmlImpl ? value.changingThisBreaksApplicationSecurity : (this.checkNotSafeValue(value, "HTML"), sanitizeHtml(String(value)));
            case SecurityContext.STYLE:
              return value instanceof SafeStyleImpl ? value.changingThisBreaksApplicationSecurity : (this.checkNotSafeValue(value, "Style"), sanitizeStyle(value));
            case SecurityContext.SCRIPT:
              if (value instanceof SafeScriptImpl)
                return value.changingThisBreaksApplicationSecurity;
              throw this.checkNotSafeValue(value, "Script"), new Error("unsafe value used in a script context");
            case SecurityContext.URL:
              return value instanceof SafeUrlImpl ? value.changingThisBreaksApplicationSecurity : (this.checkNotSafeValue(value, "URL"), sanitizeUrl(String(value)));
            case SecurityContext.RESOURCE_URL:
              if (value instanceof SafeResourceUrlImpl)
                return value.changingThisBreaksApplicationSecurity;
              throw this.checkNotSafeValue(value, "ResourceURL"), new Error("unsafe value used in a resource URL context (see http://g.co/ng/security#xss)");
            default:
              throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
          }
        }, DomSanitizationServiceImpl.prototype.checkNotSafeValue = function(value, expectedType) {
          if (value instanceof SafeValueImpl)
            throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName() + " (see http://g.co/ng/security#xss)");
        }, DomSanitizationServiceImpl.prototype.bypassSecurityTrustHtml = function(value) {
          return new SafeHtmlImpl(value);
        }, DomSanitizationServiceImpl.prototype.bypassSecurityTrustStyle = function(value) {
          return new SafeStyleImpl(value);
        }, DomSanitizationServiceImpl.prototype.bypassSecurityTrustScript = function(value) {
          return new SafeScriptImpl(value);
        }, DomSanitizationServiceImpl.prototype.bypassSecurityTrustUrl = function(value) {
          return new SafeUrlImpl(value);
        }, DomSanitizationServiceImpl.prototype.bypassSecurityTrustResourceUrl = function(value) {
          return new SafeResourceUrlImpl(value);
        }, DomSanitizationServiceImpl;
      }(DomSanitizationService);
  DomSanitizationServiceImpl.decorators = [{type: _angular_core.Injectable}];
  var SafeValueImpl = function() {
    function SafeValueImpl(changingThisBreaksApplicationSecurity) {
      this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
    }
    return SafeValueImpl.prototype.toString = function() {
      return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity + " (see http://g.co/ng/security#xss)";
    }, SafeValueImpl;
  }(),
      SafeHtmlImpl = function(_super) {
        function SafeHtmlImpl() {
          _super.apply(this, arguments);
        }
        return __extends(SafeHtmlImpl, _super), SafeHtmlImpl.prototype.getTypeName = function() {
          return "HTML";
        }, SafeHtmlImpl;
      }(SafeValueImpl),
      SafeStyleImpl = function(_super) {
        function SafeStyleImpl() {
          _super.apply(this, arguments);
        }
        return __extends(SafeStyleImpl, _super), SafeStyleImpl.prototype.getTypeName = function() {
          return "Style";
        }, SafeStyleImpl;
      }(SafeValueImpl),
      SafeScriptImpl = function(_super) {
        function SafeScriptImpl() {
          _super.apply(this, arguments);
        }
        return __extends(SafeScriptImpl, _super), SafeScriptImpl.prototype.getTypeName = function() {
          return "Script";
        }, SafeScriptImpl;
      }(SafeValueImpl),
      SafeUrlImpl = function(_super) {
        function SafeUrlImpl() {
          _super.apply(this, arguments);
        }
        return __extends(SafeUrlImpl, _super), SafeUrlImpl.prototype.getTypeName = function() {
          return "URL";
        }, SafeUrlImpl;
      }(SafeValueImpl),
      SafeResourceUrlImpl = function(_super) {
        function SafeResourceUrlImpl() {
          _super.apply(this, arguments);
        }
        return __extends(SafeResourceUrlImpl, _super), SafeResourceUrlImpl.prototype.getTypeName = function() {
          return "ResourceURL";
        }, SafeResourceUrlImpl;
      }(SafeValueImpl),
      CAMEL_CASE_REGEXP = /([A-Z])/g,
      DASH_CASE_REGEXP = /-([a-z])/g,
      WebAnimationsPlayer = function() {
        function WebAnimationsPlayer(_player, totalTime) {
          var _this = this;
          this._player = _player, this.totalTime = totalTime, this._subscriptions = [], this._finished = !1, this.parentPlayer = null, this.reset(), this._player.onfinish = function() {
            return _this._onFinish();
          };
        }
        return WebAnimationsPlayer.prototype._onFinish = function() {
          this._finished || (this._finished = !0, isPresent(this.parentPlayer) || this.destroy(), this._subscriptions.forEach(function(fn) {
            return fn();
          }), this._subscriptions = []);
        }, WebAnimationsPlayer.prototype.onDone = function(fn) {
          this._subscriptions.push(fn);
        }, WebAnimationsPlayer.prototype.play = function() {
          this._player.play();
        }, WebAnimationsPlayer.prototype.pause = function() {
          this._player.pause();
        }, WebAnimationsPlayer.prototype.finish = function() {
          this._onFinish(), this._player.finish();
        }, WebAnimationsPlayer.prototype.reset = function() {
          this._player.cancel();
        }, WebAnimationsPlayer.prototype.restart = function() {
          this.reset(), this.play();
        }, WebAnimationsPlayer.prototype.destroy = function() {
          this.reset(), this._onFinish();
        }, WebAnimationsPlayer.prototype.setPosition = function(p) {
          this._player.currentTime = p * this.totalTime;
        }, WebAnimationsPlayer.prototype.getPosition = function() {
          return this._player.currentTime / this.totalTime;
        }, WebAnimationsPlayer;
      }(),
      WebAnimationsDriver = function() {
        function WebAnimationsDriver() {}
        return WebAnimationsDriver.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
          var anyElm = element,
              formattedSteps = [],
              startingStyleLookup = {};
          if (isPresent(startingStyles) && startingStyles.styles.length > 0 && (startingStyleLookup = _populateStyles(anyElm, startingStyles, {}), startingStyleLookup.offset = 0, formattedSteps.push(startingStyleLookup)), keyframes.forEach(function(keyframe) {
            var data = _populateStyles(anyElm, keyframe.styles, startingStyleLookup);
            data.offset = keyframe.offset, formattedSteps.push(data);
          }), 1 == formattedSteps.length) {
            var start = formattedSteps[0];
            start.offset = null, formattedSteps = [start, start];
          }
          var playerOptions = {
            duration: duration,
            delay: delay,
            easing: easing,
            fill: "both"
          },
              player = this._triggerWebAnimation(anyElm, formattedSteps, playerOptions);
          return new WebAnimationsPlayer(player, duration);
        }, WebAnimationsDriver.prototype._triggerWebAnimation = function(elm, keyframes, options) {
          return elm.animate(keyframes, options);
        }, WebAnimationsDriver;
      }(),
      _$0 = 48,
      _$9 = 57,
      _$PERIOD = 46,
      GenericBrowserDomAdapter = function(_super) {
        function GenericBrowserDomAdapter() {
          var _this = this;
          _super.call(this), this._animationPrefix = null, this._transitionEnd = null;
          try {
            var element = this.createElement("div", this.defaultDoc());
            if (isPresent(this.getStyle(element, "animationName")))
              this._animationPrefix = "";
            else
              for (var domPrefixes = ["Webkit", "Moz", "O", "ms"],
                  i = 0; i < domPrefixes.length; i++)
                if (isPresent(this.getStyle(element, domPrefixes[i] + "AnimationName"))) {
                  this._animationPrefix = "-" + domPrefixes[i].toLowerCase() + "-";
                  break;
                }
            var transEndEventNames = {
              WebkitTransition: "webkitTransitionEnd",
              MozTransition: "transitionend",
              OTransition: "oTransitionEnd otransitionend",
              transition: "transitionend"
            };
            StringMapWrapper.forEach(transEndEventNames, function(value, key) {
              isPresent(_this.getStyle(element, key)) && (_this._transitionEnd = value);
            });
          } catch (e) {
            this._animationPrefix = null, this._transitionEnd = null;
          }
        }
        return __extends(GenericBrowserDomAdapter, _super), GenericBrowserDomAdapter.prototype.getDistributedNodes = function(el) {
          return el.getDistributedNodes();
        }, GenericBrowserDomAdapter.prototype.resolveAndSetHref = function(el, baseUrl, href) {
          el.href = null == href ? baseUrl : baseUrl + "/../" + href;
        }, GenericBrowserDomAdapter.prototype.supportsDOMEvents = function() {
          return !0;
        }, GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function() {
          return isFunction(this.defaultDoc().body.createShadowRoot);
        }, GenericBrowserDomAdapter.prototype.getAnimationPrefix = function() {
          return isPresent(this._animationPrefix) ? this._animationPrefix : "";
        }, GenericBrowserDomAdapter.prototype.getTransitionEnd = function() {
          return isPresent(this._transitionEnd) ? this._transitionEnd : "";
        }, GenericBrowserDomAdapter.prototype.supportsAnimation = function() {
          return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);
        }, GenericBrowserDomAdapter;
      }(DomAdapter),
      _attrToPropMap = {
        class: "className",
        innerHtml: "innerHTML",
        readonly: "readOnly",
        tabindex: "tabIndex"
      },
      DOM_KEY_LOCATION_NUMPAD = 3,
      _keyMap = {
        "\b": "Backspace",
        "\t": "Tab",
        "": "Delete",
        "": "Escape",
        Del: "Delete",
        Esc: "Escape",
        Left: "ArrowLeft",
        Right: "ArrowRight",
        Up: "ArrowUp",
        Down: "ArrowDown",
        Menu: "ContextMenu",
        Scroll: "ScrollLock",
        Win: "OS"
      },
      _chromeNumKeyPadMap = {
        A: "1",
        B: "2",
        C: "3",
        D: "4",
        E: "5",
        F: "6",
        G: "7",
        H: "8",
        I: "9",
        J: "*",
        K: "+",
        M: "-",
        N: ".",
        O: "/",
        "`": "0",
        "": "NumLock"
      },
      BrowserDomAdapter = function(_super) {
        function BrowserDomAdapter() {
          _super.apply(this, arguments);
        }
        return __extends(BrowserDomAdapter, _super), BrowserDomAdapter.prototype.parse = function(templateHtml) {
          throw new Error("parse not implemented");
        }, BrowserDomAdapter.makeCurrent = function() {
          setRootDomAdapter(new BrowserDomAdapter);
        }, BrowserDomAdapter.prototype.hasProperty = function(element, name) {
          return name in element;
        }, BrowserDomAdapter.prototype.setProperty = function(el, name, value) {
          el[name] = value;
        }, BrowserDomAdapter.prototype.getProperty = function(el, name) {
          return el[name];
        }, BrowserDomAdapter.prototype.invoke = function(el, methodName, args) {
          el[methodName].apply(el, args);
        }, BrowserDomAdapter.prototype.logError = function(error) {
          window.console.error ? window.console.error(error) : window.console.log(error);
        }, BrowserDomAdapter.prototype.log = function(error) {
          window.console.log(error);
        }, BrowserDomAdapter.prototype.logGroup = function(error) {
          window.console.group ? (window.console.group(error), this.logError(error)) : window.console.log(error);
        }, BrowserDomAdapter.prototype.logGroupEnd = function() {
          window.console.groupEnd && window.console.groupEnd();
        }, Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
          get: function() {
            return _attrToPropMap;
          },
          enumerable: !0,
          configurable: !0
        }), BrowserDomAdapter.prototype.query = function(selector) {
          return document.querySelector(selector);
        }, BrowserDomAdapter.prototype.querySelector = function(el, selector) {
          return el.querySelector(selector);
        }, BrowserDomAdapter.prototype.querySelectorAll = function(el, selector) {
          return el.querySelectorAll(selector);
        }, BrowserDomAdapter.prototype.on = function(el, evt, listener) {
          el.addEventListener(evt, listener, !1);
        }, BrowserDomAdapter.prototype.onAndCancel = function(el, evt, listener) {
          return el.addEventListener(evt, listener, !1), function() {
            el.removeEventListener(evt, listener, !1);
          };
        }, BrowserDomAdapter.prototype.dispatchEvent = function(el, evt) {
          el.dispatchEvent(evt);
        }, BrowserDomAdapter.prototype.createMouseEvent = function(eventType) {
          var evt = document.createEvent("MouseEvent");
          return evt.initEvent(eventType, !0, !0), evt;
        }, BrowserDomAdapter.prototype.createEvent = function(eventType) {
          var evt = document.createEvent("Event");
          return evt.initEvent(eventType, !0, !0), evt;
        }, BrowserDomAdapter.prototype.preventDefault = function(evt) {
          evt.preventDefault(), evt.returnValue = !1;
        }, BrowserDomAdapter.prototype.isPrevented = function(evt) {
          return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;
        }, BrowserDomAdapter.prototype.getInnerHTML = function(el) {
          return el.innerHTML;
        }, BrowserDomAdapter.prototype.getTemplateContent = function(el) {
          return "content" in el && el instanceof HTMLTemplateElement ? el.content : null;
        }, BrowserDomAdapter.prototype.getOuterHTML = function(el) {
          return el.outerHTML;
        }, BrowserDomAdapter.prototype.nodeName = function(node) {
          return node.nodeName;
        }, BrowserDomAdapter.prototype.nodeValue = function(node) {
          return node.nodeValue;
        }, BrowserDomAdapter.prototype.type = function(node) {
          return node.type;
        }, BrowserDomAdapter.prototype.content = function(node) {
          return this.hasProperty(node, "content") ? node.content : node;
        }, BrowserDomAdapter.prototype.firstChild = function(el) {
          return el.firstChild;
        }, BrowserDomAdapter.prototype.nextSibling = function(el) {
          return el.nextSibling;
        }, BrowserDomAdapter.prototype.parentElement = function(el) {
          return el.parentNode;
        }, BrowserDomAdapter.prototype.childNodes = function(el) {
          return el.childNodes;
        }, BrowserDomAdapter.prototype.childNodesAsList = function(el) {
          for (var childNodes = el.childNodes,
              res = ListWrapper.createFixedSize(childNodes.length),
              i = 0; i < childNodes.length; i++)
            res[i] = childNodes[i];
          return res;
        }, BrowserDomAdapter.prototype.clearNodes = function(el) {
          for (; el.firstChild; )
            el.removeChild(el.firstChild);
        }, BrowserDomAdapter.prototype.appendChild = function(el, node) {
          el.appendChild(node);
        }, BrowserDomAdapter.prototype.removeChild = function(el, node) {
          el.removeChild(node);
        }, BrowserDomAdapter.prototype.replaceChild = function(el, newChild, oldChild) {
          el.replaceChild(newChild, oldChild);
        }, BrowserDomAdapter.prototype.remove = function(node) {
          return node.parentNode && node.parentNode.removeChild(node), node;
        }, BrowserDomAdapter.prototype.insertBefore = function(el, node) {
          el.parentNode.insertBefore(node, el);
        }, BrowserDomAdapter.prototype.insertAllBefore = function(el, nodes) {
          nodes.forEach(function(n) {
            return el.parentNode.insertBefore(n, el);
          });
        }, BrowserDomAdapter.prototype.insertAfter = function(el, node) {
          el.parentNode.insertBefore(node, el.nextSibling);
        }, BrowserDomAdapter.prototype.setInnerHTML = function(el, value) {
          el.innerHTML = value;
        }, BrowserDomAdapter.prototype.getText = function(el) {
          return el.textContent;
        }, BrowserDomAdapter.prototype.setText = function(el, value) {
          el.textContent = value;
        }, BrowserDomAdapter.prototype.getValue = function(el) {
          return el.value;
        }, BrowserDomAdapter.prototype.setValue = function(el, value) {
          el.value = value;
        }, BrowserDomAdapter.prototype.getChecked = function(el) {
          return el.checked;
        }, BrowserDomAdapter.prototype.setChecked = function(el, value) {
          el.checked = value;
        }, BrowserDomAdapter.prototype.createComment = function(text) {
          return document.createComment(text);
        }, BrowserDomAdapter.prototype.createTemplate = function(html) {
          var t = document.createElement("template");
          return t.innerHTML = html, t;
        }, BrowserDomAdapter.prototype.createElement = function(tagName, doc) {
          return void 0 === doc && (doc = document), doc.createElement(tagName);
        }, BrowserDomAdapter.prototype.createElementNS = function(ns, tagName, doc) {
          return void 0 === doc && (doc = document), doc.createElementNS(ns, tagName);
        }, BrowserDomAdapter.prototype.createTextNode = function(text, doc) {
          return void 0 === doc && (doc = document), doc.createTextNode(text);
        }, BrowserDomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {
          void 0 === doc && (doc = document);
          var el = doc.createElement("SCRIPT");
          return el.setAttribute(attrName, attrValue), el;
        }, BrowserDomAdapter.prototype.createStyleElement = function(css, doc) {
          void 0 === doc && (doc = document);
          var style = doc.createElement("style");
          return this.appendChild(style, this.createTextNode(css)), style;
        }, BrowserDomAdapter.prototype.createShadowRoot = function(el) {
          return el.createShadowRoot();
        }, BrowserDomAdapter.prototype.getShadowRoot = function(el) {
          return el.shadowRoot;
        }, BrowserDomAdapter.prototype.getHost = function(el) {
          return el.host;
        }, BrowserDomAdapter.prototype.clone = function(node) {
          return node.cloneNode(!0);
        }, BrowserDomAdapter.prototype.getElementsByClassName = function(element, name) {
          return element.getElementsByClassName(name);
        }, BrowserDomAdapter.prototype.getElementsByTagName = function(element, name) {
          return element.getElementsByTagName(name);
        }, BrowserDomAdapter.prototype.classList = function(element) {
          return Array.prototype.slice.call(element.classList, 0);
        }, BrowserDomAdapter.prototype.addClass = function(element, className) {
          element.classList.add(className);
        }, BrowserDomAdapter.prototype.removeClass = function(element, className) {
          element.classList.remove(className);
        }, BrowserDomAdapter.prototype.hasClass = function(element, className) {
          return element.classList.contains(className);
        }, BrowserDomAdapter.prototype.setStyle = function(element, styleName, styleValue) {
          element.style[styleName] = styleValue;
        }, BrowserDomAdapter.prototype.removeStyle = function(element, stylename) {
          element.style[stylename] = null;
        }, BrowserDomAdapter.prototype.getStyle = function(element, stylename) {
          return element.style[stylename];
        }, BrowserDomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {
          void 0 === styleValue && (styleValue = null);
          var value = this.getStyle(element, styleName) || "";
          return styleValue ? value == styleValue : value.length > 0;
        }, BrowserDomAdapter.prototype.tagName = function(element) {
          return element.tagName;
        }, BrowserDomAdapter.prototype.attributeMap = function(element) {
          for (var res = new Map,
              elAttrs = element.attributes,
              i = 0; i < elAttrs.length; i++) {
            var attrib = elAttrs[i];
            res.set(attrib.name, attrib.value);
          }
          return res;
        }, BrowserDomAdapter.prototype.hasAttribute = function(element, attribute) {
          return element.hasAttribute(attribute);
        }, BrowserDomAdapter.prototype.hasAttributeNS = function(element, ns, attribute) {
          return element.hasAttributeNS(ns, attribute);
        }, BrowserDomAdapter.prototype.getAttribute = function(element, attribute) {
          return element.getAttribute(attribute);
        }, BrowserDomAdapter.prototype.getAttributeNS = function(element, ns, name) {
          return element.getAttributeNS(ns, name);
        }, BrowserDomAdapter.prototype.setAttribute = function(element, name, value) {
          element.setAttribute(name, value);
        }, BrowserDomAdapter.prototype.setAttributeNS = function(element, ns, name, value) {
          element.setAttributeNS(ns, name, value);
        }, BrowserDomAdapter.prototype.removeAttribute = function(element, attribute) {
          element.removeAttribute(attribute);
        }, BrowserDomAdapter.prototype.removeAttributeNS = function(element, ns, name) {
          element.removeAttributeNS(ns, name);
        }, BrowserDomAdapter.prototype.templateAwareRoot = function(el) {
          return this.isTemplateElement(el) ? this.content(el) : el;
        }, BrowserDomAdapter.prototype.createHtmlDocument = function() {
          return document.implementation.createHTMLDocument("fakeTitle");
        }, BrowserDomAdapter.prototype.defaultDoc = function() {
          return document;
        }, BrowserDomAdapter.prototype.getBoundingClientRect = function(el) {
          try {
            return el.getBoundingClientRect();
          } catch (e) {
            return {
              top: 0,
              bottom: 0,
              left: 0,
              right: 0,
              width: 0,
              height: 0
            };
          }
        }, BrowserDomAdapter.prototype.getTitle = function() {
          return document.title;
        }, BrowserDomAdapter.prototype.setTitle = function(newTitle) {
          document.title = newTitle || "";
        }, BrowserDomAdapter.prototype.elementMatches = function(n, selector) {
          var matches = !1;
          return n instanceof HTMLElement && (n.matches ? matches = n.matches(selector) : n.msMatchesSelector ? matches = n.msMatchesSelector(selector) : n.webkitMatchesSelector && (matches = n.webkitMatchesSelector(selector))), matches;
        }, BrowserDomAdapter.prototype.isTemplateElement = function(el) {
          return el instanceof HTMLElement && "TEMPLATE" == el.nodeName;
        }, BrowserDomAdapter.prototype.isTextNode = function(node) {
          return node.nodeType === Node.TEXT_NODE;
        }, BrowserDomAdapter.prototype.isCommentNode = function(node) {
          return node.nodeType === Node.COMMENT_NODE;
        }, BrowserDomAdapter.prototype.isElementNode = function(node) {
          return node.nodeType === Node.ELEMENT_NODE;
        }, BrowserDomAdapter.prototype.hasShadowRoot = function(node) {
          return node instanceof HTMLElement && isPresent(node.shadowRoot);
        }, BrowserDomAdapter.prototype.isShadowRoot = function(node) {
          return node instanceof DocumentFragment;
        }, BrowserDomAdapter.prototype.importIntoDoc = function(node) {
          var toImport = node;
          return this.isTemplateElement(node) && (toImport = this.content(node)), document.importNode(toImport, !0);
        }, BrowserDomAdapter.prototype.adoptNode = function(node) {
          return document.adoptNode(node);
        }, BrowserDomAdapter.prototype.getHref = function(el) {
          return el.href;
        }, BrowserDomAdapter.prototype.getEventKey = function(event) {
          var key = event.key;
          if (isBlank(key)) {
            if (key = event.keyIdentifier, isBlank(key))
              return "Unidentified";
            key.startsWith("U+") && (key = String.fromCharCode(parseInt(key.substring(2), 16)), event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key) && (key = _chromeNumKeyPadMap[key]));
          }
          return _keyMap.hasOwnProperty(key) && (key = _keyMap[key]), key;
        }, BrowserDomAdapter.prototype.getGlobalEventTarget = function(target) {
          return "window" == target ? window : "document" == target ? document : "body" == target ? document.body : void 0;
        }, BrowserDomAdapter.prototype.getHistory = function() {
          return window.history;
        }, BrowserDomAdapter.prototype.getLocation = function() {
          return window.location;
        }, BrowserDomAdapter.prototype.getBaseHref = function() {
          var href = getBaseElementHref();
          return isBlank(href) ? null : relativePath(href);
        }, BrowserDomAdapter.prototype.resetBaseElement = function() {
          baseElement = null;
        }, BrowserDomAdapter.prototype.getUserAgent = function() {
          return window.navigator.userAgent;
        }, BrowserDomAdapter.prototype.setData = function(element, name, value) {
          this.setAttribute(element, "data-" + name, value);
        }, BrowserDomAdapter.prototype.getData = function(element, name) {
          return this.getAttribute(element, "data-" + name);
        }, BrowserDomAdapter.prototype.getComputedStyle = function(element) {
          return getComputedStyle(element);
        }, BrowserDomAdapter.prototype.setGlobalVar = function(path, value) {
          setValueOnPath(global$1, path, value);
        }, BrowserDomAdapter.prototype.requestAnimationFrame = function(callback) {
          return window.requestAnimationFrame(callback);
        }, BrowserDomAdapter.prototype.cancelAnimationFrame = function(id) {
          window.cancelAnimationFrame(id);
        }, BrowserDomAdapter.prototype.supportsWebAnimation = function() {
          return isFunction(document.body.animate);
        }, BrowserDomAdapter.prototype.performanceNow = function() {
          return isPresent(window.performance) && isPresent(window.performance.now) ? window.performance.now() : DateWrapper.toMillis(DateWrapper.now());
        }, BrowserDomAdapter.prototype.supportsCookies = function() {
          return !0;
        }, BrowserDomAdapter.prototype.getCookie = function(name) {
          return parseCookieValue(document.cookie, name);
        }, BrowserDomAdapter.prototype.setCookie = function(name, value) {
          document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);
        }, BrowserDomAdapter;
      }(GenericBrowserDomAdapter),
      baseElement = null,
      urlParsingNode = null,
      PublicTestability = function() {
        function PublicTestability(testability) {
          this._testability = testability;
        }
        return PublicTestability.prototype.isStable = function() {
          return this._testability.isStable();
        }, PublicTestability.prototype.whenStable = function(callback) {
          this._testability.whenStable(callback);
        }, PublicTestability.prototype.findBindings = function(using, provider, exactMatch) {
          return this.findProviders(using, provider, exactMatch);
        }, PublicTestability.prototype.findProviders = function(using, provider, exactMatch) {
          return this._testability.findBindings(using, provider, exactMatch);
        }, PublicTestability;
      }(),
      BrowserGetTestability = function() {
        function BrowserGetTestability() {}
        return BrowserGetTestability.init = function() {
          _angular_core.setTestabilityGetter(new BrowserGetTestability);
        }, BrowserGetTestability.prototype.addToWindow = function(registry) {
          global$1.getAngularTestability = function(elem, findInAncestors) {
            void 0 === findInAncestors && (findInAncestors = !0);
            var testability = registry.findTestabilityInTree(elem, findInAncestors);
            if (null == testability)
              throw new Error("Could not find testability for element.");
            return new PublicTestability(testability);
          }, global$1.getAllAngularTestabilities = function() {
            var testabilities = registry.getAllTestabilities();
            return testabilities.map(function(testability) {
              return new PublicTestability(testability);
            });
          }, global$1.getAllAngularRootElements = function() {
            return registry.getAllRootElements();
          };
          var whenAllStable = function(callback) {
            var testabilities = global$1.getAllAngularTestabilities(),
                count = testabilities.length,
                didWork = !1,
                decrement = function(didWork_) {
                  didWork = didWork || didWork_, count--, 0 == count && callback(didWork);
                };
            testabilities.forEach(function(testability) {
              testability.whenStable(decrement);
            });
          };
          global$1.frameworkStabilizers || (global$1.frameworkStabilizers = ListWrapper.createGrowableSize(0)), global$1.frameworkStabilizers.push(whenAllStable);
        }, BrowserGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
          if (null == elem)
            return null;
          var t = registry.getTestability(elem);
          return isPresent(t) ? t : findInAncestors ? getDOM().isShadowRoot(elem) ? this.findTestabilityInTree(registry, getDOM().getHost(elem), !0) : this.findTestabilityInTree(registry, getDOM().parentElement(elem), !0) : null;
        }, BrowserGetTestability;
      }(),
      SharedStylesHost = function() {
        function SharedStylesHost() {
          this._styles = [], this._stylesSet = new Set;
        }
        return SharedStylesHost.prototype.addStyles = function(styles) {
          var _this = this,
              additions = [];
          styles.forEach(function(style) {
            SetWrapper.has(_this._stylesSet, style) || (_this._stylesSet.add(style), _this._styles.push(style), additions.push(style));
          }), this.onStylesAdded(additions);
        }, SharedStylesHost.prototype.onStylesAdded = function(additions) {}, SharedStylesHost.prototype.getAllStyles = function() {
          return this._styles;
        }, SharedStylesHost;
      }();
  SharedStylesHost.decorators = [{type: _angular_core.Injectable}], SharedStylesHost.ctorParameters = [];
  var DomSharedStylesHost = function(_super) {
    function DomSharedStylesHost(doc) {
      _super.call(this), this._hostNodes = new Set, this._hostNodes.add(doc.head);
    }
    return __extends(DomSharedStylesHost, _super), DomSharedStylesHost.prototype._addStylesToHost = function(styles, host) {
      for (var i = 0; i < styles.length; i++) {
        var style = styles[i];
        getDOM().appendChild(host, getDOM().createStyleElement(style));
      }
    }, DomSharedStylesHost.prototype.addHost = function(hostNode) {
      this._addStylesToHost(this._styles, hostNode), this._hostNodes.add(hostNode);
    }, DomSharedStylesHost.prototype.removeHost = function(hostNode) {
      SetWrapper.delete(this._hostNodes, hostNode);
    }, DomSharedStylesHost.prototype.onStylesAdded = function(additions) {
      var _this = this;
      this._hostNodes.forEach(function(hostNode) {
        _this._addStylesToHost(additions, hostNode);
      });
    }, DomSharedStylesHost;
  }(SharedStylesHost);
  DomSharedStylesHost.decorators = [{type: _angular_core.Injectable}], DomSharedStylesHost.ctorParameters = [{
    type: void 0,
    decorators: [{
      type: _angular_core.Inject,
      args: [DOCUMENT]
    }]
  }];
  var NAMESPACE_URIS = {
    xlink: "http://www.w3.org/1999/xlink",
    svg: "http://www.w3.org/2000/svg",
    xhtml: "http://www.w3.org/1999/xhtml"
  },
      TEMPLATE_COMMENT_TEXT = "template bindings={}",
      TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/g,
      DomRootRenderer = function() {
        function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver) {
          this.document = document, this.eventManager = eventManager, this.sharedStylesHost = sharedStylesHost, this.animationDriver = animationDriver, this.registeredComponents = new Map;
        }
        return DomRootRenderer.prototype.renderComponent = function(componentProto) {
          var renderer = this.registeredComponents.get(componentProto.id);
          return isBlank(renderer) && (renderer = new DomRenderer(this, componentProto, this.animationDriver), this.registeredComponents.set(componentProto.id, renderer)), renderer;
        }, DomRootRenderer;
      }(),
      DomRootRenderer_ = function(_super) {
        function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver) {
          _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver);
        }
        return __extends(DomRootRenderer_, _super), DomRootRenderer_;
      }(DomRootRenderer);
  DomRootRenderer_.decorators = [{type: _angular_core.Injectable}], DomRootRenderer_.ctorParameters = [{
    type: void 0,
    decorators: [{
      type: _angular_core.Inject,
      args: [DOCUMENT]
    }]
  }, {type: EventManager}, {type: DomSharedStylesHost}, {type: AnimationDriver}];
  var DomRenderer = function() {
    function DomRenderer(_rootRenderer, componentProto, _animationDriver) {
      this._rootRenderer = _rootRenderer, this.componentProto = componentProto, this._animationDriver = _animationDriver, this._styles = _flattenStyles(componentProto.id, componentProto.styles, []), componentProto.encapsulation !== _angular_core.ViewEncapsulation.Native && this._rootRenderer.sharedStylesHost.addStyles(this._styles), this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Emulated ? (this._contentAttr = _shimContentAttribute(componentProto.id), this._hostAttr = _shimHostAttribute(componentProto.id)) : (this._contentAttr = null, this._hostAttr = null);
    }
    return DomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
      var el;
      if (isString(selectorOrNode)) {
        if (el = getDOM().querySelector(this._rootRenderer.document, selectorOrNode), isBlank(el))
          throw new BaseException$1('The selector "' + selectorOrNode + '" did not match any elements');
      } else
        el = selectorOrNode;
      return getDOM().clearNodes(el), el;
    }, DomRenderer.prototype.createElement = function(parent, name, debugInfo) {
      var nsAndName = splitNamespace(name),
          el = isPresent(nsAndName[0]) ? getDOM().createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) : getDOM().createElement(nsAndName[1]);
      return isPresent(this._contentAttr) && getDOM().setAttribute(el, this._contentAttr, ""), isPresent(parent) && getDOM().appendChild(parent, el), el;
    }, DomRenderer.prototype.createViewRoot = function(hostElement) {
      var nodesParent;
      if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native) {
        nodesParent = getDOM().createShadowRoot(hostElement), this._rootRenderer.sharedStylesHost.addHost(nodesParent);
        for (var i = 0; i < this._styles.length; i++)
          getDOM().appendChild(nodesParent, getDOM().createStyleElement(this._styles[i]));
      } else
        isPresent(this._hostAttr) && getDOM().setAttribute(hostElement, this._hostAttr, ""), nodesParent = hostElement;
      return nodesParent;
    }, DomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
      var comment = getDOM().createComment(TEMPLATE_COMMENT_TEXT);
      return isPresent(parentElement) && getDOM().appendChild(parentElement, comment), comment;
    }, DomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
      var node = getDOM().createTextNode(value);
      return isPresent(parentElement) && getDOM().appendChild(parentElement, node), node;
    }, DomRenderer.prototype.projectNodes = function(parentElement, nodes) {
      isBlank(parentElement) || appendNodes(parentElement, nodes);
    }, DomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
      moveNodesAfterSibling(node, viewRootNodes);
    }, DomRenderer.prototype.detachView = function(viewRootNodes) {
      for (var i = 0; i < viewRootNodes.length; i++)
        getDOM().remove(viewRootNodes[i]);
    }, DomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
      this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native && isPresent(hostElement) && this._rootRenderer.sharedStylesHost.removeHost(getDOM().getShadowRoot(hostElement));
    }, DomRenderer.prototype.listen = function(renderElement, name, callback) {
      return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
    }, DomRenderer.prototype.listenGlobal = function(target, name, callback) {
      return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
    }, DomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
      getDOM().setProperty(renderElement, propertyName, propertyValue);
    }, DomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
      var attrNs,
          nsAndName = splitNamespace(attributeName);
      isPresent(nsAndName[0]) && (attributeName = nsAndName[0] + ":" + nsAndName[1], attrNs = NAMESPACE_URIS[nsAndName[0]]), isPresent(attributeValue) ? isPresent(attrNs) ? getDOM().setAttributeNS(renderElement, attrNs, attributeName, attributeValue) : getDOM().setAttribute(renderElement, attributeName, attributeValue) : isPresent(attrNs) ? getDOM().removeAttributeNS(renderElement, attrNs, nsAndName[1]) : getDOM().removeAttribute(renderElement, attributeName);
    }, DomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
      var dashCasedPropertyName = camelCaseToDashCase(propertyName);
      if (getDOM().isCommentNode(renderElement)) {
        var existingBindings = RegExpWrapper.firstMatch(TEMPLATE_BINDINGS_EXP, StringWrapper.replaceAll(getDOM().getText(renderElement), /\n/g, "")),
            parsedBindings = Json.parse(existingBindings[1]);
        parsedBindings[dashCasedPropertyName] = propertyValue, getDOM().setText(renderElement, StringWrapper.replace(TEMPLATE_COMMENT_TEXT, "{}", Json.stringify(parsedBindings)));
      } else
        this.setElementAttribute(renderElement, propertyName, propertyValue);
    }, DomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
      isAdd ? getDOM().addClass(renderElement, className) : getDOM().removeClass(renderElement, className);
    }, DomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
      isPresent(styleValue) ? getDOM().setStyle(renderElement, styleName, stringify(styleValue)) : getDOM().removeStyle(renderElement, styleName);
    }, DomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
      getDOM().invoke(renderElement, methodName, args);
    }, DomRenderer.prototype.setText = function(renderNode, text) {
      getDOM().setText(renderNode, text);
    }, DomRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
      return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing);
    }, DomRenderer;
  }(),
      COMPONENT_REGEX = /%COMP%/g,
      COMPONENT_VARIABLE = "%COMP%",
      HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE,
      CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE,
      NS_PREFIX_RE = /^:([^:]+):(.+)/g,
      CORE_TOKENS = {
        ApplicationRef: _angular_core.ApplicationRef,
        NgZone: _angular_core.NgZone
      },
      INSPECT_GLOBAL_NAME = "ng.probe",
      CORE_TOKENS_GLOBAL_NAME = "ng.coreTokens",
      ELEMENT_PROBE_PROVIDERS = [{
        provide: _angular_core.RootRenderer,
        useFactory: _createConditionalRootRenderer,
        deps: [DomRootRenderer]
      }],
      DomEventsPlugin = function(_super) {
        function DomEventsPlugin() {
          _super.apply(this, arguments);
        }
        return __extends(DomEventsPlugin, _super), DomEventsPlugin.prototype.supports = function(eventName) {
          return !0;
        }, DomEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
          var zone = this.manager.getZone(),
              outsideHandler = function(event) {
                return zone.runGuarded(function() {
                  return handler(event);
                });
              };
          return this.manager.getZone().runOutsideAngular(function() {
            return getDOM().onAndCancel(element, eventName, outsideHandler);
          });
        }, DomEventsPlugin.prototype.addGlobalEventListener = function(target, eventName, handler) {
          var element = getDOM().getGlobalEventTarget(target),
              zone = this.manager.getZone(),
              outsideHandler = function(event) {
                return zone.runGuarded(function() {
                  return handler(event);
                });
              };
          return this.manager.getZone().runOutsideAngular(function() {
            return getDOM().onAndCancel(element, eventName, outsideHandler);
          });
        }, DomEventsPlugin;
      }(EventManagerPlugin);
  DomEventsPlugin.decorators = [{type: _angular_core.Injectable}];
  var modifierKeys = ["alt", "control", "meta", "shift"],
      modifierKeyGetters = {
        alt: function(event) {
          return event.altKey;
        },
        control: function(event) {
          return event.ctrlKey;
        },
        meta: function(event) {
          return event.metaKey;
        },
        shift: function(event) {
          return event.shiftKey;
        }
      },
      KeyEventsPlugin = function(_super) {
        function KeyEventsPlugin() {
          _super.call(this);
        }
        return __extends(KeyEventsPlugin, _super), KeyEventsPlugin.prototype.supports = function(eventName) {
          return isPresent(KeyEventsPlugin.parseEventName(eventName));
        }, KeyEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
          var parsedEvent = KeyEventsPlugin.parseEventName(eventName),
              outsideHandler = KeyEventsPlugin.eventCallback(element, StringMapWrapper.get(parsedEvent, "fullKey"), handler, this.manager.getZone());
          return this.manager.getZone().runOutsideAngular(function() {
            return getDOM().onAndCancel(element, StringMapWrapper.get(parsedEvent, "domEventName"), outsideHandler);
          });
        }, KeyEventsPlugin.parseEventName = function(eventName) {
          var parts = eventName.toLowerCase().split("."),
              domEventName = parts.shift();
          if (0 === parts.length || !StringWrapper.equals(domEventName, "keydown") && !StringWrapper.equals(domEventName, "keyup"))
            return null;
          var key = KeyEventsPlugin._normalizeKey(parts.pop()),
              fullKey = "";
          if (modifierKeys.forEach(function(modifierName) {
            ListWrapper.contains(parts, modifierName) && (ListWrapper.remove(parts, modifierName), fullKey += modifierName + ".");
          }), fullKey += key, 0 != parts.length || 0 === key.length)
            return null;
          var result = StringMapWrapper.create();
          return StringMapWrapper.set(result, "domEventName", domEventName), StringMapWrapper.set(result, "fullKey", fullKey), result;
        }, KeyEventsPlugin.getEventFullKey = function(event) {
          var fullKey = "",
              key = getDOM().getEventKey(event);
          return key = key.toLowerCase(), StringWrapper.equals(key, " ") ? key = "space" : StringWrapper.equals(key, ".") && (key = "dot"), modifierKeys.forEach(function(modifierName) {
            if (modifierName != key) {
              var modifierGetter = StringMapWrapper.get(modifierKeyGetters, modifierName);
              modifierGetter(event) && (fullKey += modifierName + ".");
            }
          }), fullKey += key;
        }, KeyEventsPlugin.eventCallback = function(element, fullKey, handler, zone) {
          return function(event) {
            StringWrapper.equals(KeyEventsPlugin.getEventFullKey(event), fullKey) && zone.runGuarded(function() {
              return handler(event);
            });
          };
        }, KeyEventsPlugin._normalizeKey = function(keyName) {
          switch (keyName) {
            case "esc":
              return "escape";
            default:
              return keyName;
          }
        }, KeyEventsPlugin;
      }(EventManagerPlugin);
  KeyEventsPlugin.decorators = [{type: _angular_core.Injectable}], KeyEventsPlugin.ctorParameters = [];
  var BROWSER_PLATFORM_MARKER = new _angular_core.OpaqueToken("BrowserPlatformMarker"),
      BROWSER_PLATFORM_PROVIDERS = [{
        provide: BROWSER_PLATFORM_MARKER,
        useValue: !0
      }, _angular_core.PLATFORM_COMMON_PROVIDERS, {
        provide: _angular_core.PLATFORM_INITIALIZER,
        useValue: initDomAdapter,
        multi: !0
      }, {
        provide: _angular_common.PlatformLocation,
        useClass: BrowserPlatformLocation
      }],
      BROWSER_SANITIZATION_PROVIDERS = [{
        provide: SanitizationService,
        useExisting: DomSanitizationService
      }, {
        provide: DomSanitizationService,
        useClass: DomSanitizationServiceImpl
      }],
      BROWSER_APP_PROVIDERS = [_angular_core.APPLICATION_COMMON_PROVIDERS, _angular_common.FORM_PROVIDERS, BROWSER_SANITIZATION_PROVIDERS, {
        provide: _angular_core.ExceptionHandler,
        useFactory: _exceptionHandler,
        deps: []
      }, {
        provide: DOCUMENT,
        useFactory: _document,
        deps: []
      }, {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: DomEventsPlugin,
        multi: !0
      }, {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: KeyEventsPlugin,
        multi: !0
      }, {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: HammerGesturesPlugin,
        multi: !0
      }, {
        provide: HAMMER_GESTURE_CONFIG,
        useClass: HammerGestureConfig
      }, {
        provide: DomRootRenderer,
        useClass: DomRootRenderer_
      }, {
        provide: _angular_core.RootRenderer,
        useExisting: DomRootRenderer
      }, {
        provide: SharedStylesHost,
        useExisting: DomSharedStylesHost
      }, {
        provide: AnimationDriver,
        useFactory: _resolveDefaultAnimationDriver
      }, DomSharedStylesHost, _angular_core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS],
      PromiseCompleter = function() {
        function PromiseCompleter() {
          var _this = this;
          this.promise = new Promise(function(res, rej) {
            _this.resolve = res, _this.reject = rej;
          });
        }
        return PromiseCompleter;
      }(),
      PromiseWrapper = function() {
        function PromiseWrapper() {}
        return PromiseWrapper.resolve = function(obj) {
          return Promise.resolve(obj);
        }, PromiseWrapper.reject = function(obj, _) {
          return Promise.reject(obj);
        }, PromiseWrapper.catchError = function(promise, onError) {
          return promise.catch(onError);
        }, PromiseWrapper.all = function(promises) {
          return 0 == promises.length ? Promise.resolve([]) : Promise.all(promises);
        }, PromiseWrapper.then = function(promise, success, rejection) {
          return promise.then(success, rejection);
        }, PromiseWrapper.wrap = function(computation) {
          return new Promise(function(res, rej) {
            try {
              res(computation());
            } catch (e) {
              rej(e);
            }
          });
        }, PromiseWrapper.scheduleMicrotask = function(computation) {
          PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function(_) {});
        }, PromiseWrapper.completer = function() {
          return new PromiseCompleter;
        }, PromiseWrapper;
      }(),
      ObservableWrapper = function() {
        function ObservableWrapper() {}
        return ObservableWrapper.subscribe = function(emitter, onNext, onError, onComplete) {
          return void 0 === onComplete && (onComplete = function() {}), onError = "function" == typeof onError && onError || noop, onComplete = "function" == typeof onComplete && onComplete || noop, emitter.subscribe({
            next: onNext,
            error: onError,
            complete: onComplete
          });
        }, ObservableWrapper.isObservable = function(obs) {
          return !!obs.subscribe;
        }, ObservableWrapper.hasSubscribers = function(obs) {
          return obs.observers.length > 0;
        }, ObservableWrapper.dispose = function(subscription) {
          subscription.unsubscribe();
        }, ObservableWrapper.callNext = function(emitter, value) {
          emitter.emit(value);
        }, ObservableWrapper.callEmit = function(emitter, value) {
          emitter.emit(value);
        }, ObservableWrapper.callError = function(emitter, error) {
          emitter.error(error);
        }, ObservableWrapper.callComplete = function(emitter) {
          emitter.complete();
        }, ObservableWrapper.fromPromise = function(promise) {
          return rxjs_observable_PromiseObservable.PromiseObservable.create(promise);
        }, ObservableWrapper.toPromise = function(obj) {
          return rxjs_operator_toPromise.toPromise.call(obj);
        }, ObservableWrapper;
      }(),
      EventEmitter = function(_super) {
        function EventEmitter(isAsync) {
          void 0 === isAsync && (isAsync = !1), _super.call(this), this.__isAsync = isAsync;
        }
        return __extends(EventEmitter, _super), EventEmitter.prototype.emit = function(value) {
          _super.prototype.next.call(this, value);
        }, EventEmitter.prototype.next = function(value) {
          _super.prototype.next.call(this, value);
        }, EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
          var schedulerFn,
              errorFn = function(err) {
                return null;
              },
              completeFn = function() {
                return null;
              };
          return generatorOrNext && "object" == typeof generatorOrNext ? (schedulerFn = this.__isAsync ? function(value) {
            setTimeout(function() {
              return generatorOrNext.next(value);
            });
          } : function(value) {
            generatorOrNext.next(value);
          }, generatorOrNext.error && (errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return generatorOrNext.error(err);
            });
          } : function(err) {
            generatorOrNext.error(err);
          }), generatorOrNext.complete && (completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return generatorOrNext.complete();
            });
          } : function() {
            generatorOrNext.complete();
          })) : (schedulerFn = this.__isAsync ? function(value) {
            setTimeout(function() {
              return generatorOrNext(value);
            });
          } : function(value) {
            generatorOrNext(value);
          }, error && (errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return error(err);
            });
          } : function(err) {
            error(err);
          }), complete && (completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return complete();
            });
          } : function() {
            complete();
          })), _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
        }, EventEmitter;
      }(rxjs_Subject.Subject),
      MessageBus = function() {
        function MessageBus() {}
        return MessageBus;
      }(),
      RenderStore = function() {
        function RenderStore() {
          this._nextIndex = 0, this._lookupById = new Map, this._lookupByObject = new Map;
        }
        return RenderStore.prototype.allocateId = function() {
          return this._nextIndex++;
        }, RenderStore.prototype.store = function(obj, id) {
          this._lookupById.set(id, obj), this._lookupByObject.set(obj, id);
        }, RenderStore.prototype.remove = function(obj) {
          var index = this._lookupByObject.get(obj);
          this._lookupByObject.delete(obj), this._lookupById.delete(index);
        }, RenderStore.prototype.deserialize = function(id) {
          return null == id ? null : this._lookupById.has(id) ? this._lookupById.get(id) : null;
        }, RenderStore.prototype.serialize = function(obj) {
          return null == obj ? null : this._lookupByObject.get(obj);
        }, RenderStore;
      }();
  RenderStore.decorators = [{type: _angular_core.Injectable}], RenderStore.ctorParameters = [];
  var LocationType = function() {
    function LocationType(href, protocol, host, hostname, port, pathname, search, hash, origin) {
      this.href = href, this.protocol = protocol, this.host = host, this.hostname = hostname, this.port = port, this.pathname = pathname, this.search = search, this.hash = hash, this.origin = origin;
    }
    return LocationType;
  }(),
      PRIMITIVE = String,
      Serializer = function() {
        function Serializer(_renderStore) {
          this._renderStore = _renderStore;
        }
        return Serializer.prototype.serialize = function(obj, type) {
          var _this = this;
          if (!isPresent(obj))
            return null;
          if (isArray(obj))
            return obj.map(function(v) {
              return _this.serialize(v, type);
            });
          if (type == PRIMITIVE)
            return obj;
          if (type == RenderStoreObject)
            return this._renderStore.serialize(obj);
          if (type === _angular_core.RenderComponentType)
            return this._serializeRenderComponentType(obj);
          if (type === _angular_core.ViewEncapsulation)
            return serializeEnum(obj);
          if (type === LocationType)
            return this._serializeLocation(obj);
          throw new BaseException$1("No serializer for " + type.toString());
        }, Serializer.prototype.deserialize = function(map, type, data) {
          var _this = this;
          if (!isPresent(map))
            return null;
          if (isArray(map)) {
            var obj = [];
            return map.forEach(function(val) {
              return obj.push(_this.deserialize(val, type, data));
            }), obj;
          }
          if (type == PRIMITIVE)
            return map;
          if (type == RenderStoreObject)
            return this._renderStore.deserialize(map);
          if (type === _angular_core.RenderComponentType)
            return this._deserializeRenderComponentType(map);
          if (type === _angular_core.ViewEncapsulation)
            return VIEW_ENCAPSULATION_VALUES[map];
          if (type === LocationType)
            return this._deserializeLocation(map);
          throw new BaseException$1("No deserializer for " + type.toString());
        }, Serializer.prototype._serializeLocation = function(loc) {
          return {
            href: loc.href,
            protocol: loc.protocol,
            host: loc.host,
            hostname: loc.hostname,
            port: loc.port,
            pathname: loc.pathname,
            search: loc.search,
            hash: loc.hash,
            origin: loc.origin
          };
        }, Serializer.prototype._deserializeLocation = function(loc) {
          return new LocationType(loc.href, loc.protocol, loc.host, loc.hostname, loc.port, loc.pathname, loc.search, loc.hash, loc.origin);
        }, Serializer.prototype._serializeRenderComponentType = function(obj) {
          return {
            id: obj.id,
            templateUrl: obj.templateUrl,
            slotCount: obj.slotCount,
            encapsulation: this.serialize(obj.encapsulation, _angular_core.ViewEncapsulation),
            styles: this.serialize(obj.styles, PRIMITIVE)
          };
        }, Serializer.prototype._deserializeRenderComponentType = function(map) {
          return new _angular_core.RenderComponentType(map.id, map.templateUrl, map.slotCount, this.deserialize(map.encapsulation, _angular_core.ViewEncapsulation), this.deserialize(map.styles, PRIMITIVE));
        }, Serializer;
      }();
  Serializer.decorators = [{type: _angular_core.Injectable}], Serializer.ctorParameters = [{type: RenderStore}];
  var RenderStoreObject = function() {
    function RenderStoreObject() {}
    return RenderStoreObject;
  }(),
      ClientMessageBrokerFactory = function() {
        function ClientMessageBrokerFactory() {}
        return ClientMessageBrokerFactory;
      }(),
      ClientMessageBrokerFactory_ = function(_super) {
        function ClientMessageBrokerFactory_(_messageBus, _serializer) {
          _super.call(this), this._messageBus = _messageBus, this._serializer = _serializer;
        }
        return __extends(ClientMessageBrokerFactory_, _super), ClientMessageBrokerFactory_.prototype.createMessageBroker = function(channel, runInZone) {
          return void 0 === runInZone && (runInZone = !0), this._messageBus.initChannel(channel, runInZone), new ClientMessageBroker_(this._messageBus, this._serializer, channel);
        }, ClientMessageBrokerFactory_;
      }(ClientMessageBrokerFactory);
  ClientMessageBrokerFactory_.decorators = [{type: _angular_core.Injectable}], ClientMessageBrokerFactory_.ctorParameters = [{type: MessageBus}, {type: Serializer}];
  var ClientMessageBroker = function() {
    function ClientMessageBroker() {}
    return ClientMessageBroker;
  }(),
      ClientMessageBroker_ = function(_super) {
        function ClientMessageBroker_(messageBus, _serializer, channel) {
          var _this = this;
          _super.call(this), this.channel = channel, this._pending = new Map, this._sink = messageBus.to(channel), this._serializer = _serializer;
          var source = messageBus.from(channel);
          ObservableWrapper.subscribe(source, function(message) {
            return _this._handleMessage(message);
          });
        }
        return __extends(ClientMessageBroker_, _super), ClientMessageBroker_.prototype._generateMessageId = function(name) {
          for (var time = stringify(DateWrapper.toMillis(DateWrapper.now())),
              iteration = 0,
              id = name + time + stringify(iteration); isPresent(this._pending[id]); )
            id = "" + name + time + iteration, iteration++;
          return id;
        }, ClientMessageBroker_.prototype.runOnService = function(args, returnType) {
          var _this = this,
              fnArgs = [];
          isPresent(args.args) && args.args.forEach(function(argument) {
            null != argument.type ? fnArgs.push(_this._serializer.serialize(argument.value, argument.type)) : fnArgs.push(argument.value);
          });
          var promise,
              id = null;
          if (null != returnType) {
            var completer = PromiseWrapper.completer();
            id = this._generateMessageId(args.method), this._pending.set(id, completer), PromiseWrapper.catchError(completer.promise, function(err, stack) {
              print(err), completer.reject(err, stack);
            }), promise = PromiseWrapper.then(completer.promise, function(value) {
              return null == _this._serializer ? value : _this._serializer.deserialize(value, returnType);
            });
          } else
            promise = null;
          var message = {
            method: args.method,
            args: fnArgs
          };
          return null != id && (message.id = id), ObservableWrapper.callEmit(this._sink, message), promise;
        }, ClientMessageBroker_.prototype._handleMessage = function(message) {
          var data = new MessageData(message);
          if (StringWrapper.equals(data.type, "result") || StringWrapper.equals(data.type, "error")) {
            var id = data.id;
            this._pending.has(id) && (StringWrapper.equals(data.type, "result") ? this._pending.get(id).resolve(data.value) : this._pending.get(id).reject(data.value, null), this._pending.delete(id));
          }
        }, ClientMessageBroker_;
      }(ClientMessageBroker),
      MessageData = function() {
        function MessageData(data) {
          this.type = StringMapWrapper.get(data, "type"), this.id = this._getValueIfPresent(data, "id"), this.value = this._getValueIfPresent(data, "value");
        }
        return MessageData.prototype._getValueIfPresent = function(data, key) {
          return StringMapWrapper.contains(data, key) ? StringMapWrapper.get(data, key) : null;
        }, MessageData;
      }(),
      FnArg = function() {
        function FnArg(value, type) {
          this.value = value, this.type = type;
        }
        return FnArg;
      }(),
      UiArguments = function() {
        function UiArguments(method, args) {
          this.method = method, this.args = args;
        }
        return UiArguments;
      }(),
      ServiceMessageBrokerFactory = function() {
        function ServiceMessageBrokerFactory() {}
        return ServiceMessageBrokerFactory;
      }(),
      ServiceMessageBrokerFactory_ = function(_super) {
        function ServiceMessageBrokerFactory_(_messageBus, _serializer) {
          _super.call(this), this._messageBus = _messageBus, this._serializer = _serializer;
        }
        return __extends(ServiceMessageBrokerFactory_, _super), ServiceMessageBrokerFactory_.prototype.createMessageBroker = function(channel, runInZone) {
          return void 0 === runInZone && (runInZone = !0), this._messageBus.initChannel(channel, runInZone), new ServiceMessageBroker_(this._messageBus, this._serializer, channel);
        }, ServiceMessageBrokerFactory_;
      }(ServiceMessageBrokerFactory);
  ServiceMessageBrokerFactory_.decorators = [{type: _angular_core.Injectable}], ServiceMessageBrokerFactory_.ctorParameters = [{type: MessageBus}, {type: Serializer}];
  var ServiceMessageBroker = function() {
    function ServiceMessageBroker() {}
    return ServiceMessageBroker;
  }(),
      ServiceMessageBroker_ = function(_super) {
        function ServiceMessageBroker_(messageBus, _serializer, channel) {
          var _this = this;
          _super.call(this), this._serializer = _serializer, this.channel = channel, this._methods = new Map$1, this._sink = messageBus.to(channel);
          var source = messageBus.from(channel);
          ObservableWrapper.subscribe(source, function(message) {
            return _this._handleMessage(message);
          });
        }
        return __extends(ServiceMessageBroker_, _super), ServiceMessageBroker_.prototype.registerMethod = function(methodName, signature, method, returnType) {
          var _this = this;
          this._methods.set(methodName, function(message) {
            for (var serializedArgs = message.args,
                numArgs = null === signature ? 0 : signature.length,
                deserializedArgs = ListWrapper.createFixedSize(numArgs),
                i = 0; i < numArgs; i++) {
              var serializedArg = serializedArgs[i];
              deserializedArgs[i] = _this._serializer.deserialize(serializedArg, signature[i]);
            }
            var promise = FunctionWrapper.apply(method, deserializedArgs);
            isPresent(returnType) && isPresent(promise) && _this._wrapWebWorkerPromise(message.id, promise, returnType);
          });
        }, ServiceMessageBroker_.prototype._handleMessage = function(map) {
          var message = new ReceivedMessage(map);
          this._methods.has(message.method) && this._methods.get(message.method)(message);
        }, ServiceMessageBroker_.prototype._wrapWebWorkerPromise = function(id, promise, type) {
          var _this = this;
          PromiseWrapper.then(promise, function(result) {
            ObservableWrapper.callEmit(_this._sink, {
              type: "result",
              value: _this._serializer.serialize(result, type),
              id: id
            });
          });
        }, ServiceMessageBroker_;
      }(ServiceMessageBroker),
      ReceivedMessage = function() {
        function ReceivedMessage(data) {
          this.method = data.method, this.args = data.args, this.id = data.id, this.type = data.type;
        }
        return ReceivedMessage;
      }(),
      RENDERER_CHANNEL = "ng-Renderer",
      EVENT_CHANNEL = "ng-Events",
      ROUTER_CHANNEL = "ng-Router",
      WebWorkerPlatformLocation = function(_super) {
        function WebWorkerPlatformLocation(brokerFactory, bus, _serializer) {
          var _this = this;
          _super.call(this), this._serializer = _serializer, this._popStateListeners = [], this._hashChangeListeners = [], this._location = null, this._broker = brokerFactory.createMessageBroker(ROUTER_CHANNEL), this._channelSource = bus.from(ROUTER_CHANNEL), ObservableWrapper.subscribe(this._channelSource, function(msg) {
            var listeners = null;
            if (StringMapWrapper.contains(msg, "event")) {
              var type = msg.event.type;
              if (StringWrapper.equals(type, "popstate") ? listeners = _this._popStateListeners : StringWrapper.equals(type, "hashchange") && (listeners = _this._hashChangeListeners), null !== listeners) {
                var e_1 = deserializeGenericEvent(msg.event);
                _this._location = _this._serializer.deserialize(msg.location, LocationType), listeners.forEach(function(fn) {
                  return fn(e_1);
                });
              }
            }
          });
        }
        return __extends(WebWorkerPlatformLocation, _super), WebWorkerPlatformLocation.prototype.init = function() {
          var _this = this,
              args = new UiArguments("getLocation"),
              locationPromise = this._broker.runOnService(args, LocationType);
          return PromiseWrapper.then(locationPromise, function(val) {
            return _this._location = val, !0;
          }, function(err) {
            throw new BaseException$1(err);
          });
        }, WebWorkerPlatformLocation.prototype.getBaseHrefFromDOM = function() {
          throw new BaseException$1("Attempt to get base href from DOM from WebWorker. You must either provide a value for the APP_BASE_HREF token through DI or use the hash location strategy.");
        }, WebWorkerPlatformLocation.prototype.onPopState = function(fn) {
          this._popStateListeners.push(fn);
        }, WebWorkerPlatformLocation.prototype.onHashChange = function(fn) {
          this._hashChangeListeners.push(fn);
        }, Object.defineProperty(WebWorkerPlatformLocation.prototype, "pathname", {
          get: function() {
            return null === this._location ? null : this._location.pathname;
          },
          set: function(newPath) {
            if (null === this._location)
              throw new BaseException$1("Attempt to set pathname before value is obtained from UI");
            this._location.pathname = newPath;
            var fnArgs = [new FnArg(newPath, PRIMITIVE)],
                args = new UiArguments("setPathname", fnArgs);
            this._broker.runOnService(args, null);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(WebWorkerPlatformLocation.prototype, "search", {
          get: function() {
            return null === this._location ? null : this._location.search;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(WebWorkerPlatformLocation.prototype, "hash", {
          get: function() {
            return null === this._location ? null : this._location.hash;
          },
          enumerable: !0,
          configurable: !0
        }), WebWorkerPlatformLocation.prototype.pushState = function(state, title, url) {
          var fnArgs = [new FnArg(state, PRIMITIVE), new FnArg(title, PRIMITIVE), new FnArg(url, PRIMITIVE)],
              args = new UiArguments("pushState", fnArgs);
          this._broker.runOnService(args, null);
        }, WebWorkerPlatformLocation.prototype.replaceState = function(state, title, url) {
          var fnArgs = [new FnArg(state, PRIMITIVE), new FnArg(title, PRIMITIVE), new FnArg(url, PRIMITIVE)],
              args = new UiArguments("replaceState", fnArgs);
          this._broker.runOnService(args, null);
        }, WebWorkerPlatformLocation.prototype.forward = function() {
          var args = new UiArguments("forward");
          this._broker.runOnService(args, null);
        }, WebWorkerPlatformLocation.prototype.back = function() {
          var args = new UiArguments("back");
          this._broker.runOnService(args, null);
        }, WebWorkerPlatformLocation;
      }(_angular_common.PlatformLocation);
  WebWorkerPlatformLocation.decorators = [{type: _angular_core.Injectable}], WebWorkerPlatformLocation.ctorParameters = [{type: ClientMessageBrokerFactory}, {type: MessageBus}, {type: Serializer}];
  var WORKER_APP_LOCATION_PROVIDERS = [{
    provide: _angular_common.PlatformLocation,
    useClass: WebWorkerPlatformLocation
  }, {
    provide: _angular_core.APP_INITIALIZER,
    useFactory: appInitFnFactory,
    multi: !0,
    deps: [_angular_common.PlatformLocation, _angular_core.NgZone]
  }],
      MessageBasedPlatformLocation = function() {
        function MessageBasedPlatformLocation(_brokerFactory, _platformLocation, bus, _serializer) {
          this._brokerFactory = _brokerFactory, this._platformLocation = _platformLocation, this._serializer = _serializer, this._platformLocation.onPopState(FunctionWrapper.bind(this._sendUrlChangeEvent, this)), this._platformLocation.onHashChange(FunctionWrapper.bind(this._sendUrlChangeEvent, this)), this._broker = this._brokerFactory.createMessageBroker(ROUTER_CHANNEL), this._channelSink = bus.to(ROUTER_CHANNEL);
        }
        return MessageBasedPlatformLocation.prototype.start = function() {
          this._broker.registerMethod("getLocation", null, FunctionWrapper.bind(this._getLocation, this), LocationType), this._broker.registerMethod("setPathname", [PRIMITIVE], FunctionWrapper.bind(this._setPathname, this)), this._broker.registerMethod("pushState", [PRIMITIVE, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._platformLocation.pushState, this._platformLocation)), this._broker.registerMethod("replaceState", [PRIMITIVE, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._platformLocation.replaceState, this._platformLocation)), this._broker.registerMethod("forward", null, FunctionWrapper.bind(this._platformLocation.forward, this._platformLocation)), this._broker.registerMethod("back", null, FunctionWrapper.bind(this._platformLocation.back, this._platformLocation));
        }, MessageBasedPlatformLocation.prototype._getLocation = function() {
          return PromiseWrapper.resolve(this._platformLocation.location);
        }, MessageBasedPlatformLocation.prototype._sendUrlChangeEvent = function(e) {
          var loc = this._serializer.serialize(this._platformLocation.location, LocationType),
              serializedEvent = {type: e.type};
          ObservableWrapper.callEmit(this._channelSink, {
            event: serializedEvent,
            location: loc
          });
        }, MessageBasedPlatformLocation.prototype._setPathname = function(pathname) {
          this._platformLocation.pathname = pathname;
        }, MessageBasedPlatformLocation;
      }();
  MessageBasedPlatformLocation.decorators = [{type: _angular_core.Injectable}], MessageBasedPlatformLocation.ctorParameters = [{type: ServiceMessageBrokerFactory}, {type: BrowserPlatformLocation}, {type: MessageBus}, {type: Serializer}];
  var WORKER_UI_LOCATION_PROVIDERS = [MessageBasedPlatformLocation, BrowserPlatformLocation, {
    provide: _angular_core.APP_INITIALIZER,
    useFactory: initUiLocation,
    multi: !0,
    deps: [_angular_core.Injector]
  }],
      ON_WEB_WORKER = new _angular_core.OpaqueToken("WebWorker.onWebWorker"),
      PostMessageBusSink = function() {
        function PostMessageBusSink(_postMessageTarget) {
          this._postMessageTarget = _postMessageTarget, this._channels = StringMapWrapper.create(), this._messageBuffer = [];
        }
        return PostMessageBusSink.prototype.attachToZone = function(zone) {
          var _this = this;
          this._zone = zone, this._zone.runOutsideAngular(function() {
            ObservableWrapper.subscribe(_this._zone.onStable, function(_) {
              _this._handleOnEventDone();
            });
          });
        }, PostMessageBusSink.prototype.initChannel = function(channel, runInZone) {
          var _this = this;
          if (void 0 === runInZone && (runInZone = !0), StringMapWrapper.contains(this._channels, channel))
            throw new BaseException$1(channel + " has already been initialized");
          var emitter = new EventEmitter((!1)),
              channelInfo = new _Channel(emitter, runInZone);
          this._channels[channel] = channelInfo, emitter.subscribe(function(data) {
            var message = {
              channel: channel,
              message: data
            };
            runInZone ? _this._messageBuffer.push(message) : _this._sendMessages([message]);
          });
        }, PostMessageBusSink.prototype.to = function(channel) {
          if (StringMapWrapper.contains(this._channels, channel))
            return this._channels[channel].emitter;
          throw new BaseException$1(channel + " is not set up. Did you forget to call initChannel?");
        }, PostMessageBusSink.prototype._handleOnEventDone = function() {
          this._messageBuffer.length > 0 && (this._sendMessages(this._messageBuffer), this._messageBuffer = []);
        }, PostMessageBusSink.prototype._sendMessages = function(messages) {
          this._postMessageTarget.postMessage(messages);
        }, PostMessageBusSink;
      }(),
      PostMessageBusSource = function() {
        function PostMessageBusSource(eventTarget) {
          var _this = this;
          if (this._channels = StringMapWrapper.create(), eventTarget)
            eventTarget.addEventListener("message", function(ev) {
              return _this._handleMessages(ev);
            });
          else {
            var workerScope = self;
            workerScope.addEventListener("message", function(ev) {
              return _this._handleMessages(ev);
            });
          }
        }
        return PostMessageBusSource.prototype.attachToZone = function(zone) {
          this._zone = zone;
        }, PostMessageBusSource.prototype.initChannel = function(channel, runInZone) {
          if (void 0 === runInZone && (runInZone = !0), StringMapWrapper.contains(this._channels, channel))
            throw new BaseException$1(channel + " has already been initialized");
          var emitter = new EventEmitter((!1)),
              channelInfo = new _Channel(emitter, runInZone);
          this._channels[channel] = channelInfo;
        }, PostMessageBusSource.prototype.from = function(channel) {
          if (StringMapWrapper.contains(this._channels, channel))
            return this._channels[channel].emitter;
          throw new BaseException$1(channel + " is not set up. Did you forget to call initChannel?");
        }, PostMessageBusSource.prototype._handleMessages = function(ev) {
          for (var messages = ev.data,
              i = 0; i < messages.length; i++)
            this._handleMessage(messages[i]);
        }, PostMessageBusSource.prototype._handleMessage = function(data) {
          var channel = data.channel;
          if (StringMapWrapper.contains(this._channels, channel)) {
            var channelInfo = this._channels[channel];
            channelInfo.runInZone ? this._zone.run(function() {
              channelInfo.emitter.emit(data.message);
            }) : channelInfo.emitter.emit(data.message);
          }
        }, PostMessageBusSource;
      }(),
      PostMessageBus = function() {
        function PostMessageBus(sink, source) {
          this.sink = sink, this.source = source;
        }
        return PostMessageBus.prototype.attachToZone = function(zone) {
          this.source.attachToZone(zone), this.sink.attachToZone(zone);
        }, PostMessageBus.prototype.initChannel = function(channel, runInZone) {
          void 0 === runInZone && (runInZone = !0), this.source.initChannel(channel, runInZone), this.sink.initChannel(channel, runInZone);
        }, PostMessageBus.prototype.from = function(channel) {
          return this.source.from(channel);
        }, PostMessageBus.prototype.to = function(channel) {
          return this.sink.to(channel);
        }, PostMessageBus;
      }();
  PostMessageBus.decorators = [{type: _angular_core.Injectable}], PostMessageBus.ctorParameters = [{type: PostMessageBusSink}, {type: PostMessageBusSource}];
  var _Channel = function() {
    function _Channel(emitter, runInZone) {
      this.emitter = emitter, this.runInZone = runInZone;
    }
    return _Channel;
  }(),
      MOUSE_EVENT_PROPERTIES = ["altKey", "button", "clientX", "clientY", "metaKey", "movementX", "movementY", "offsetX", "offsetY", "region", "screenX", "screenY", "shiftKey"],
      KEYBOARD_EVENT_PROPERTIES = ["altkey", "charCode", "code", "ctrlKey", "isComposing", "key", "keyCode", "location", "metaKey", "repeat", "shiftKey", "which"],
      TRANSITION_EVENT_PROPERTIES = ["propertyName", "elapsedTime", "pseudoElement"],
      EVENT_PROPERTIES = ["type", "bubbles", "cancelable"],
      NODES_WITH_VALUE = new Set$1(["input", "select", "option", "button", "li", "meter", "progress", "param", "textarea"]),
      EventDispatcher = function() {
        function EventDispatcher(_sink, _serializer) {
          this._sink = _sink, this._serializer = _serializer;
        }
        return EventDispatcher.prototype.dispatchRenderEvent = function(element, eventTarget, eventName, event) {
          var serializedEvent;
          switch (event.type) {
            case "click":
            case "mouseup":
            case "mousedown":
            case "dblclick":
            case "contextmenu":
            case "mouseenter":
            case "mouseleave":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "show":
              serializedEvent = serializeMouseEvent(event);
              break;
            case "keydown":
            case "keypress":
            case "keyup":
              serializedEvent = serializeKeyboardEvent(event);
              break;
            case "input":
            case "change":
            case "blur":
              serializedEvent = serializeEventWithTarget(event);
              break;
            case "abort":
            case "afterprint":
            case "beforeprint":
            case "cached":
            case "canplay":
            case "canplaythrough":
            case "chargingchange":
            case "chargingtimechange":
            case "close":
            case "dischargingtimechange":
            case "DOMContentLoaded":
            case "downloading":
            case "durationchange":
            case "emptied":
            case "ended":
            case "error":
            case "fullscreenchange":
            case "fullscreenerror":
            case "invalid":
            case "languagechange":
            case "levelfchange":
            case "loadeddata":
            case "loadedmetadata":
            case "obsolete":
            case "offline":
            case "online":
            case "open":
            case "orientatoinchange":
            case "pause":
            case "pointerlockchange":
            case "pointerlockerror":
            case "play":
            case "playing":
            case "ratechange":
            case "readystatechange":
            case "reset":
            case "scroll":
            case "seeked":
            case "seeking":
            case "stalled":
            case "submit":
            case "success":
            case "suspend":
            case "timeupdate":
            case "updateready":
            case "visibilitychange":
            case "volumechange":
            case "waiting":
              serializedEvent = serializeGenericEvent(event);
              break;
            case "transitionend":
              serializedEvent = serializeTransitionEvent(event);
              break;
            default:
              throw new BaseException$1(eventName + " not supported on WebWorkers");
          }
          return ObservableWrapper.callEmit(this._sink, {
            element: this._serializer.serialize(element, RenderStoreObject),
            eventName: eventName,
            eventTarget: eventTarget,
            event: serializedEvent
          }), !1;
        }, EventDispatcher;
      }(),
      MessageBasedRenderer = function() {
        function MessageBasedRenderer(_brokerFactory, _bus, _serializer, _renderStore, _rootRenderer) {
          this._brokerFactory = _brokerFactory, this._bus = _bus, this._serializer = _serializer, this._renderStore = _renderStore, this._rootRenderer = _rootRenderer;
        }
        return MessageBasedRenderer.prototype.start = function() {
          var broker = this._brokerFactory.createMessageBroker(RENDERER_CHANNEL);
          this._bus.initChannel(EVENT_CHANNEL), this._eventDispatcher = new EventDispatcher(this._bus.to(EVENT_CHANNEL), this._serializer), broker.registerMethod("renderComponent", [_angular_core.RenderComponentType, PRIMITIVE], FunctionWrapper.bind(this._renderComponent, this)), broker.registerMethod("selectRootElement", [RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._selectRootElement, this)), broker.registerMethod("createElement", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._createElement, this)), broker.registerMethod("createViewRoot", [RenderStoreObject, RenderStoreObject, PRIMITIVE], FunctionWrapper.bind(this._createViewRoot, this)), broker.registerMethod("createTemplateAnchor", [RenderStoreObject, RenderStoreObject, PRIMITIVE], FunctionWrapper.bind(this._createTemplateAnchor, this)), broker.registerMethod("createText", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._createText, this)), broker.registerMethod("projectNodes", [RenderStoreObject, RenderStoreObject, RenderStoreObject], FunctionWrapper.bind(this._projectNodes, this)), broker.registerMethod("attachViewAfter", [RenderStoreObject, RenderStoreObject, RenderStoreObject], FunctionWrapper.bind(this._attachViewAfter, this)), broker.registerMethod("detachView", [RenderStoreObject, RenderStoreObject], FunctionWrapper.bind(this._detachView, this)), broker.registerMethod("destroyView", [RenderStoreObject, RenderStoreObject, RenderStoreObject], FunctionWrapper.bind(this._destroyView, this)), broker.registerMethod("setElementProperty", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._setElementProperty, this)), broker.registerMethod("setElementAttribute", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._setElementAttribute, this)), broker.registerMethod("setBindingDebugInfo", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._setBindingDebugInfo, this)), broker.registerMethod("setElementClass", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._setElementClass, this)), broker.registerMethod("setElementStyle", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._setElementStyle, this)), broker.registerMethod("invokeElementMethod", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._invokeElementMethod, this)), broker.registerMethod("setText", [RenderStoreObject, RenderStoreObject, PRIMITIVE], FunctionWrapper.bind(this._setText, this)), broker.registerMethod("listen", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._listen, this)), broker.registerMethod("listenGlobal", [RenderStoreObject, PRIMITIVE, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._listenGlobal, this)), broker.registerMethod("listenDone", [RenderStoreObject, RenderStoreObject], FunctionWrapper.bind(this._listenDone, this));
        }, MessageBasedRenderer.prototype._renderComponent = function(renderComponentType, rendererId) {
          var renderer = this._rootRenderer.renderComponent(renderComponentType);
          this._renderStore.store(renderer, rendererId);
        }, MessageBasedRenderer.prototype._selectRootElement = function(renderer, selector, elId) {
          this._renderStore.store(renderer.selectRootElement(selector, null), elId);
        }, MessageBasedRenderer.prototype._createElement = function(renderer, parentElement, name, elId) {
          this._renderStore.store(renderer.createElement(parentElement, name, null), elId);
        }, MessageBasedRenderer.prototype._createViewRoot = function(renderer, hostElement, elId) {
          var viewRoot = renderer.createViewRoot(hostElement);
          this._renderStore.serialize(hostElement) !== elId && this._renderStore.store(viewRoot, elId);
        }, MessageBasedRenderer.prototype._createTemplateAnchor = function(renderer, parentElement, elId) {
          this._renderStore.store(renderer.createTemplateAnchor(parentElement, null), elId);
        }, MessageBasedRenderer.prototype._createText = function(renderer, parentElement, value, elId) {
          this._renderStore.store(renderer.createText(parentElement, value, null), elId);
        }, MessageBasedRenderer.prototype._projectNodes = function(renderer, parentElement, nodes) {
          renderer.projectNodes(parentElement, nodes);
        }, MessageBasedRenderer.prototype._attachViewAfter = function(renderer, node, viewRootNodes) {
          renderer.attachViewAfter(node, viewRootNodes);
        }, MessageBasedRenderer.prototype._detachView = function(renderer, viewRootNodes) {
          renderer.detachView(viewRootNodes);
        }, MessageBasedRenderer.prototype._destroyView = function(renderer, hostElement, viewAllNodes) {
          renderer.destroyView(hostElement, viewAllNodes);
          for (var i = 0; i < viewAllNodes.length; i++)
            this._renderStore.remove(viewAllNodes[i]);
        }, MessageBasedRenderer.prototype._setElementProperty = function(renderer, renderElement, propertyName, propertyValue) {
          renderer.setElementProperty(renderElement, propertyName, propertyValue);
        }, MessageBasedRenderer.prototype._setElementAttribute = function(renderer, renderElement, attributeName, attributeValue) {
          renderer.setElementAttribute(renderElement, attributeName, attributeValue);
        }, MessageBasedRenderer.prototype._setBindingDebugInfo = function(renderer, renderElement, propertyName, propertyValue) {
          renderer.setBindingDebugInfo(renderElement, propertyName, propertyValue);
        }, MessageBasedRenderer.prototype._setElementClass = function(renderer, renderElement, className, isAdd) {
          renderer.setElementClass(renderElement, className, isAdd);
        }, MessageBasedRenderer.prototype._setElementStyle = function(renderer, renderElement, styleName, styleValue) {
          renderer.setElementStyle(renderElement, styleName, styleValue);
        }, MessageBasedRenderer.prototype._invokeElementMethod = function(renderer, renderElement, methodName, args) {
          renderer.invokeElementMethod(renderElement, methodName, args);
        }, MessageBasedRenderer.prototype._setText = function(renderer, renderNode, text) {
          renderer.setText(renderNode, text);
        }, MessageBasedRenderer.prototype._listen = function(renderer, renderElement, eventName, unlistenId) {
          var _this = this,
              unregisterCallback = renderer.listen(renderElement, eventName, function(event) {
                return _this._eventDispatcher.dispatchRenderEvent(renderElement, null, eventName, event);
              });
          this._renderStore.store(unregisterCallback, unlistenId);
        }, MessageBasedRenderer.prototype._listenGlobal = function(renderer, eventTarget, eventName, unlistenId) {
          var _this = this,
              unregisterCallback = renderer.listenGlobal(eventTarget, eventName, function(event) {
                return _this._eventDispatcher.dispatchRenderEvent(null, eventTarget, eventName, event);
              });
          this._renderStore.store(unregisterCallback, unlistenId);
        }, MessageBasedRenderer.prototype._listenDone = function(renderer, unlistenCallback) {
          unlistenCallback();
        }, MessageBasedRenderer;
      }();
  MessageBasedRenderer.decorators = [{type: _angular_core.Injectable}], MessageBasedRenderer.ctorParameters = [{type: ServiceMessageBrokerFactory}, {type: MessageBus}, {type: Serializer}, {type: RenderStore}, {type: _angular_core.RootRenderer}];
  var WORKER_RENDER_PLATFORM_MARKER = new _angular_core.OpaqueToken("WorkerRenderPlatformMarker"),
      WebWorkerInstance = function() {
        function WebWorkerInstance() {}
        return WebWorkerInstance.prototype.init = function(worker, bus) {
          this.worker = worker, this.bus = bus;
        }, WebWorkerInstance;
      }();
  WebWorkerInstance.decorators = [{type: _angular_core.Injectable}];
  var WORKER_SCRIPT = new _angular_core.OpaqueToken("WebWorkerScript"),
      WORKER_UI_STARTABLE_MESSAGING_SERVICE = new _angular_core.OpaqueToken("WorkerRenderStartableMsgService"),
      WORKER_UI_PLATFORM_PROVIDERS = [_angular_core.PLATFORM_COMMON_PROVIDERS, {
        provide: WORKER_RENDER_PLATFORM_MARKER,
        useValue: !0
      }, {
        provide: _angular_core.PLATFORM_INITIALIZER,
        useValue: initWebWorkerRenderPlatform,
        multi: !0
      }],
      WORKER_UI_APPLICATION_PROVIDERS = [_angular_core.APPLICATION_COMMON_PROVIDERS, MessageBasedRenderer, {
        provide: WORKER_UI_STARTABLE_MESSAGING_SERVICE,
        useExisting: MessageBasedRenderer,
        multi: !0
      }, BROWSER_SANITIZATION_PROVIDERS, {
        provide: _angular_core.ExceptionHandler,
        useFactory: _exceptionHandler$1,
        deps: []
      }, {
        provide: DOCUMENT,
        useFactory: _document$1,
        deps: []
      }, {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: DomEventsPlugin,
        multi: !0
      }, {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: KeyEventsPlugin,
        multi: !0
      }, {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: HammerGesturesPlugin,
        multi: !0
      }, {
        provide: HAMMER_GESTURE_CONFIG,
        useClass: HammerGestureConfig
      }, {
        provide: DomRootRenderer,
        useClass: DomRootRenderer_
      }, {
        provide: _angular_core.RootRenderer,
        useExisting: DomRootRenderer
      }, {
        provide: SharedStylesHost,
        useExisting: DomSharedStylesHost
      }, {
        provide: ServiceMessageBrokerFactory,
        useClass: ServiceMessageBrokerFactory_
      }, {
        provide: ClientMessageBrokerFactory,
        useClass: ClientMessageBrokerFactory_
      }, {
        provide: AnimationDriver,
        useFactory: _resolveDefaultAnimationDriver$1
      }, Serializer, {
        provide: ON_WEB_WORKER,
        useValue: !1
      }, RenderStore, DomSharedStylesHost, _angular_core.Testability, EventManager, WebWorkerInstance, {
        provide: _angular_core.APP_INITIALIZER,
        useFactory: initWebWorkerAppFn,
        multi: !0,
        deps: [_angular_core.Injector]
      }, {
        provide: MessageBus,
        useFactory: messageBusFactory,
        deps: [WebWorkerInstance]
      }],
      WebWorkerRootRenderer = function() {
        function WebWorkerRootRenderer(messageBrokerFactory, bus, _serializer, _renderStore) {
          var _this = this;
          this._serializer = _serializer, this._renderStore = _renderStore, this.globalEvents = new NamedEventEmitter, this._componentRenderers = new Map, this._messageBroker = messageBrokerFactory.createMessageBroker(RENDERER_CHANNEL), bus.initChannel(EVENT_CHANNEL);
          var source = bus.from(EVENT_CHANNEL);
          ObservableWrapper.subscribe(source, function(message) {
            return _this._dispatchEvent(message);
          });
        }
        return WebWorkerRootRenderer.prototype._dispatchEvent = function(message) {
          var eventName = message.eventName,
              target = message.eventTarget,
              event = deserializeGenericEvent(message.event);
          if (isPresent(target))
            this.globalEvents.dispatchEvent(eventNameWithTarget(target, eventName), event);
          else {
            var element = this._serializer.deserialize(message.element, RenderStoreObject);
            element.events.dispatchEvent(eventName, event);
          }
        }, WebWorkerRootRenderer.prototype.renderComponent = function(componentType) {
          var result = this._componentRenderers.get(componentType.id);
          if (isBlank(result)) {
            result = new WebWorkerRenderer(this, componentType), this._componentRenderers.set(componentType.id, result);
            var id = this._renderStore.allocateId();
            this._renderStore.store(result, id), this.runOnService("renderComponent", [new FnArg(componentType, _angular_core.RenderComponentType), new FnArg(result, RenderStoreObject)]);
          }
          return result;
        }, WebWorkerRootRenderer.prototype.runOnService = function(fnName, fnArgs) {
          var args = new UiArguments(fnName, fnArgs);
          this._messageBroker.runOnService(args, null);
        }, WebWorkerRootRenderer.prototype.allocateNode = function() {
          var result = new WebWorkerRenderNode,
              id = this._renderStore.allocateId();
          return this._renderStore.store(result, id), result;
        }, WebWorkerRootRenderer.prototype.allocateId = function() {
          return this._renderStore.allocateId();
        }, WebWorkerRootRenderer.prototype.destroyNodes = function(nodes) {
          for (var i = 0; i < nodes.length; i++)
            this._renderStore.remove(nodes[i]);
        }, WebWorkerRootRenderer;
      }();
  WebWorkerRootRenderer.decorators = [{type: _angular_core.Injectable}], WebWorkerRootRenderer.ctorParameters = [{type: ClientMessageBrokerFactory}, {type: MessageBus}, {type: Serializer}, {type: RenderStore}];
  var WebWorkerRenderer = function() {
    function WebWorkerRenderer(_rootRenderer, _componentType) {
      this._rootRenderer = _rootRenderer, this._componentType = _componentType;
    }
    return WebWorkerRenderer.prototype._runOnService = function(fnName, fnArgs) {
      var fnArgsWithRenderer = [new FnArg(this, RenderStoreObject)].concat(fnArgs);
      this._rootRenderer.runOnService(fnName, fnArgsWithRenderer);
    }, WebWorkerRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
      var node = this._rootRenderer.allocateNode();
      return this._runOnService("selectRootElement", [new FnArg(selectorOrNode, null), new FnArg(node, RenderStoreObject)]), node;
    }, WebWorkerRenderer.prototype.createElement = function(parentElement, name, debugInfo) {
      var node = this._rootRenderer.allocateNode();
      return this._runOnService("createElement", [new FnArg(parentElement, RenderStoreObject), new FnArg(name, null), new FnArg(node, RenderStoreObject)]), node;
    }, WebWorkerRenderer.prototype.createViewRoot = function(hostElement) {
      var viewRoot = this._componentType.encapsulation === _angular_core.ViewEncapsulation.Native ? this._rootRenderer.allocateNode() : hostElement;
      return this._runOnService("createViewRoot", [new FnArg(hostElement, RenderStoreObject), new FnArg(viewRoot, RenderStoreObject)]), viewRoot;
    }, WebWorkerRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
      var node = this._rootRenderer.allocateNode();
      return this._runOnService("createTemplateAnchor", [new FnArg(parentElement, RenderStoreObject), new FnArg(node, RenderStoreObject)]), node;
    }, WebWorkerRenderer.prototype.createText = function(parentElement, value, debugInfo) {
      var node = this._rootRenderer.allocateNode();
      return this._runOnService("createText", [new FnArg(parentElement, RenderStoreObject), new FnArg(value, null), new FnArg(node, RenderStoreObject)]), node;
    }, WebWorkerRenderer.prototype.projectNodes = function(parentElement, nodes) {
      this._runOnService("projectNodes", [new FnArg(parentElement, RenderStoreObject), new FnArg(nodes, RenderStoreObject)]);
    }, WebWorkerRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
      this._runOnService("attachViewAfter", [new FnArg(node, RenderStoreObject), new FnArg(viewRootNodes, RenderStoreObject)]);
    }, WebWorkerRenderer.prototype.detachView = function(viewRootNodes) {
      this._runOnService("detachView", [new FnArg(viewRootNodes, RenderStoreObject)]);
    }, WebWorkerRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
      this._runOnService("destroyView", [new FnArg(hostElement, RenderStoreObject), new FnArg(viewAllNodes, RenderStoreObject)]), this._rootRenderer.destroyNodes(viewAllNodes);
    }, WebWorkerRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
      this._runOnService("setElementProperty", [new FnArg(renderElement, RenderStoreObject), new FnArg(propertyName, null), new FnArg(propertyValue, null)]);
    }, WebWorkerRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
      this._runOnService("setElementAttribute", [new FnArg(renderElement, RenderStoreObject), new FnArg(attributeName, null), new FnArg(attributeValue, null)]);
    }, WebWorkerRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
      this._runOnService("setBindingDebugInfo", [new FnArg(renderElement, RenderStoreObject), new FnArg(propertyName, null), new FnArg(propertyValue, null)]);
    }, WebWorkerRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
      this._runOnService("setElementClass", [new FnArg(renderElement, RenderStoreObject), new FnArg(className, null), new FnArg(isAdd, null)]);
    }, WebWorkerRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
      this._runOnService("setElementStyle", [new FnArg(renderElement, RenderStoreObject), new FnArg(styleName, null), new FnArg(styleValue, null)]);
    }, WebWorkerRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
      this._runOnService("invokeElementMethod", [new FnArg(renderElement, RenderStoreObject), new FnArg(methodName, null), new FnArg(args, null)]);
    }, WebWorkerRenderer.prototype.setText = function(renderNode, text) {
      this._runOnService("setText", [new FnArg(renderNode, RenderStoreObject), new FnArg(text, null)]);
    }, WebWorkerRenderer.prototype.listen = function(renderElement, name, callback) {
      var _this = this;
      renderElement.events.listen(name, callback);
      var unlistenCallbackId = this._rootRenderer.allocateId();
      return this._runOnService("listen", [new FnArg(renderElement, RenderStoreObject), new FnArg(name, null), new FnArg(unlistenCallbackId, null)]), function() {
        renderElement.events.unlisten(name, callback), _this._runOnService("listenDone", [new FnArg(unlistenCallbackId, null)]);
      };
    }, WebWorkerRenderer.prototype.listenGlobal = function(target, name, callback) {
      var _this = this;
      this._rootRenderer.globalEvents.listen(eventNameWithTarget(target, name), callback);
      var unlistenCallbackId = this._rootRenderer.allocateId();
      return this._runOnService("listenGlobal", [new FnArg(target, null), new FnArg(name, null), new FnArg(unlistenCallbackId, null)]), function() {
        _this._rootRenderer.globalEvents.unlisten(eventNameWithTarget(target, name), callback), _this._runOnService("listenDone", [new FnArg(unlistenCallbackId, null)]);
      };
    }, WebWorkerRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
      return null;
    }, WebWorkerRenderer;
  }(),
      NamedEventEmitter = function() {
        function NamedEventEmitter() {}
        return NamedEventEmitter.prototype._getListeners = function(eventName) {
          isBlank(this._listeners) && (this._listeners = new Map);
          var listeners = this._listeners.get(eventName);
          return isBlank(listeners) && (listeners = [], this._listeners.set(eventName, listeners)), listeners;
        }, NamedEventEmitter.prototype.listen = function(eventName, callback) {
          this._getListeners(eventName).push(callback);
        }, NamedEventEmitter.prototype.unlisten = function(eventName, callback) {
          ListWrapper.remove(this._getListeners(eventName), callback);
        }, NamedEventEmitter.prototype.dispatchEvent = function(eventName, event) {
          for (var listeners = this._getListeners(eventName),
              i = 0; i < listeners.length; i++)
            listeners[i](event);
        }, NamedEventEmitter;
      }(),
      WebWorkerRenderNode = function() {
        function WebWorkerRenderNode() {
          this.events = new NamedEventEmitter;
        }
        return WebWorkerRenderNode;
      }(),
      WorkerDomAdapter = function(_super) {
        function WorkerDomAdapter() {
          _super.apply(this, arguments);
        }
        return __extends(WorkerDomAdapter, _super), WorkerDomAdapter.makeCurrent = function() {
          setRootDomAdapter(new WorkerDomAdapter);
        }, WorkerDomAdapter.prototype.logError = function(error) {
          console.error ? console.error(error) : console.log(error);
        }, WorkerDomAdapter.prototype.log = function(error) {
          console.log(error);
        }, WorkerDomAdapter.prototype.logGroup = function(error) {
          console.group ? (console.group(error), this.logError(error)) : console.log(error);
        }, WorkerDomAdapter.prototype.logGroupEnd = function() {
          console.groupEnd && console.groupEnd();
        }, WorkerDomAdapter.prototype.hasProperty = function(element, name) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setProperty = function(el, name, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getProperty = function(el, name) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.invoke = function(el, methodName, args) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getXHR = function() {
          throw "not implemented";
        }, Object.defineProperty(WorkerDomAdapter.prototype, "attrToPropMap", {
          get: function() {
            throw "not implemented";
          },
          set: function(value) {
            throw "not implemented";
          },
          enumerable: !0,
          configurable: !0
        }), WorkerDomAdapter.prototype.parse = function(templateHtml) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.query = function(selector) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.querySelector = function(el, selector) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.querySelectorAll = function(el, selector) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.on = function(el, evt, listener) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.onAndCancel = function(el, evt, listener) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.dispatchEvent = function(el, evt) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createMouseEvent = function(eventType) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createEvent = function(eventType) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.preventDefault = function(evt) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.isPrevented = function(evt) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getInnerHTML = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getTemplateContent = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getOuterHTML = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.nodeName = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.nodeValue = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.type = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.content = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.firstChild = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.nextSibling = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.parentElement = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.childNodes = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.childNodesAsList = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.clearNodes = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.appendChild = function(el, node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.removeChild = function(el, node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.replaceChild = function(el, newNode, oldNode) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.remove = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.insertBefore = function(el, node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.insertAllBefore = function(el, nodes) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.insertAfter = function(el, node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setInnerHTML = function(el, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getText = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setText = function(el, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getValue = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setValue = function(el, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getChecked = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setChecked = function(el, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createComment = function(text) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createTemplate = function(html) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createElement = function(tagName, doc) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createElementNS = function(ns, tagName, doc) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createTextNode = function(text, doc) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createStyleElement = function(css, doc) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createShadowRoot = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getShadowRoot = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getHost = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getDistributedNodes = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.clone = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getElementsByClassName = function(element, name) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getElementsByTagName = function(element, name) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.classList = function(element) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.addClass = function(element, className) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.removeClass = function(element, className) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.hasClass = function(element, className) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setStyle = function(element, styleName, styleValue) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.removeStyle = function(element, styleName) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getStyle = function(element, styleName) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.tagName = function(element) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.attributeMap = function(element) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.hasAttribute = function(element, attribute) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.hasAttributeNS = function(element, ns, attribute) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getAttribute = function(element, attribute) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getAttributeNS = function(element, ns, attribute) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setAttribute = function(element, name, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setAttributeNS = function(element, ns, name, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.removeAttribute = function(element, attribute) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.removeAttributeNS = function(element, ns, attribute) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.templateAwareRoot = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createHtmlDocument = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.defaultDoc = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getBoundingClientRect = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getTitle = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setTitle = function(newTitle) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.elementMatches = function(n, selector) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.isTemplateElement = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.isTextNode = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.isCommentNode = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.isElementNode = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.hasShadowRoot = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.isShadowRoot = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.importIntoDoc = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.adoptNode = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getHref = function(element) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getEventKey = function(event) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.resolveAndSetHref = function(element, baseUrl, href) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.supportsDOMEvents = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.supportsNativeShadowDOM = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getGlobalEventTarget = function(target) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getHistory = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getLocation = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getBaseHref = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.resetBaseElement = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getUserAgent = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setData = function(element, name, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getComputedStyle = function(element) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getData = function(element, name) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setGlobalVar = function(name, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.requestAnimationFrame = function(callback) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.cancelAnimationFrame = function(id) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.performanceNow = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getAnimationPrefix = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getTransitionEnd = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.supportsAnimation = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.supportsWebAnimation = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.supportsCookies = function() {
          return !1;
        }, WorkerDomAdapter.prototype.getCookie = function(name) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setCookie = function(name, value) {
          throw "not implemented";
        }, WorkerDomAdapter;
      }(DomAdapter),
      PrintLogger = function() {
        function PrintLogger() {
          this.log = print, this.logError = print, this.logGroup = print;
        }
        return PrintLogger.prototype.logGroupEnd = function() {}, PrintLogger;
      }(),
      WORKER_APP_PLATFORM_MARKER = new _angular_core.OpaqueToken("WorkerAppPlatformMarker"),
      WORKER_APP_PLATFORM_PROVIDERS = [_angular_core.PLATFORM_COMMON_PROVIDERS, {
        provide: WORKER_APP_PLATFORM_MARKER,
        useValue: !0
      }],
      WORKER_APP_APPLICATION_PROVIDERS = [_angular_core.APPLICATION_COMMON_PROVIDERS, _angular_common.FORM_PROVIDERS, BROWSER_SANITIZATION_PROVIDERS, Serializer, {
        provide: ClientMessageBrokerFactory,
        useClass: ClientMessageBrokerFactory_
      }, {
        provide: ServiceMessageBrokerFactory,
        useClass: ServiceMessageBrokerFactory_
      }, WebWorkerRootRenderer, {
        provide: _angular_core.RootRenderer,
        useExisting: WebWorkerRootRenderer
      }, {
        provide: ON_WEB_WORKER,
        useValue: !0
      }, RenderStore, {
        provide: _angular_core.ExceptionHandler,
        useFactory: _exceptionHandler$2,
        deps: []
      }, {
        provide: MessageBus,
        useFactory: createMessageBus,
        deps: [_angular_core.NgZone]
      }, {
        provide: _angular_core.APP_INITIALIZER,
        useValue: setupWebWorker,
        multi: !0
      }],
      _postMessage = {postMessage: function(message, transferrables) {
          postMessage(message, transferrables);
        }},
      __platform_browser_private__ = {
        DomAdapter: DomAdapter,
        getDOM: getDOM,
        setRootDomAdapter: setRootDomAdapter,
        DomRootRenderer: DomRootRenderer,
        DomRootRenderer_: DomRootRenderer_,
        DomSharedStylesHost: DomSharedStylesHost,
        SharedStylesHost: SharedStylesHost,
        ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS,
        DomEventsPlugin: DomEventsPlugin
      };
  exports.BrowserPlatformLocation = BrowserPlatformLocation, exports.Title = Title, exports.disableDebugTools = disableDebugTools, exports.enableDebugTools = enableDebugTools, exports.By = By, exports.DOCUMENT = DOCUMENT, exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS, exports.EventManager = EventManager, exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG, exports.HammerGestureConfig = HammerGestureConfig, exports.DomSanitizationService = DomSanitizationService, exports.SecurityContext = SecurityContext, exports.ClientMessageBroker = ClientMessageBroker, exports.ClientMessageBrokerFactory = ClientMessageBrokerFactory, exports.FnArg = FnArg, exports.UiArguments = UiArguments, exports.ReceivedMessage = ReceivedMessage, exports.ServiceMessageBroker = ServiceMessageBroker, exports.ServiceMessageBrokerFactory = ServiceMessageBrokerFactory, exports.PRIMITIVE = PRIMITIVE, exports.WORKER_APP_LOCATION_PROVIDERS = WORKER_APP_LOCATION_PROVIDERS, exports.WORKER_UI_LOCATION_PROVIDERS = WORKER_UI_LOCATION_PROVIDERS, exports.BROWSER_PLATFORM_PROVIDERS = BROWSER_PLATFORM_PROVIDERS, exports.BROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS, exports.BROWSER_APP_PROVIDERS = BROWSER_APP_PROVIDERS, exports.browserPlatform = browserPlatform, exports.MessageBus = MessageBus, exports.WebWorkerInstance = WebWorkerInstance, exports.WORKER_SCRIPT = WORKER_SCRIPT, exports.WORKER_UI_STARTABLE_MESSAGING_SERVICE = WORKER_UI_STARTABLE_MESSAGING_SERVICE, exports.WORKER_UI_PLATFORM_PROVIDERS = WORKER_UI_PLATFORM_PROVIDERS, exports.WORKER_UI_APPLICATION_PROVIDERS = WORKER_UI_APPLICATION_PROVIDERS, exports.workerUiPlatform = workerUiPlatform, exports.WORKER_APP_PLATFORM_PROVIDERS = WORKER_APP_PLATFORM_PROVIDERS, exports.WORKER_APP_APPLICATION_PROVIDERS = WORKER_APP_APPLICATION_PROVIDERS, exports.workerAppPlatform = workerAppPlatform, exports.__platform_browser_private__ = __platform_browser_private__;
});

})();
$__System.registerDynamic("b", ["3"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var MaxPipe = (function() {
    function MaxPipe() {}
    MaxPipe.prototype.transform = function(value, args) {
      var allowed = args[0],
          received = value.length;
      if (received > allowed && allowed !== 0) {
        var toCut = allowed - received;
        return value.slice(0, toCut);
      }
      return value;
    };
    MaxPipe = __decorate([core_1.Pipe({name: "max"}), __metadata('design:paramtypes', [])], MaxPipe);
    return MaxPipe;
  }());
  exports.MaxPipe = MaxPipe;
  return module.exports;
});

$__System.registerDynamic("c", ["3", "a", "d", "b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var platform_browser_1 = $__require('a');
  var notifications_service_1 = $__require('d');
  var max_pipe_1 = $__require('b');
  var NotificationComponent = (function() {
    function NotificationComponent(_service, _sanitizer) {
      var _this = this;
      this._service = _service;
      this._sanitizer = _sanitizer;
      this.progressWidth = 0;
      this.stopTime = false;
      this.count = 0;
      this.instance = function() {
        _this.diff = (new Date().getTime() - _this.start) - (_this.count * _this.speed);
        if (_this.count++ === _this.steps)
          _this._remove();
        else if (!_this.stopTime) {
          if (_this.showProgressBar)
            _this.progressWidth += 100 / _this.steps;
          _this.timer = setTimeout(_this.instance, (_this.speed - _this.diff));
        }
      };
    }
    NotificationComponent.prototype.ngOnInit = function() {
      if (this.animate)
        this.item["state"] = "enter";
      if (this.item.override)
        this.attachOverrides();
      if (this.timeOut !== 0)
        this.startTimeOut();
      this.safeSvg = this._sanitizer.bypassSecurityTrustHtml(this.icons[this.item.type]);
    };
    NotificationComponent.prototype.startTimeOut = function() {
      this.steps = this.timeOut / 10;
      this.speed = this.timeOut / this.steps;
      this.start = new Date().getTime();
      this.timer = setTimeout(this.instance, this.speed);
    };
    NotificationComponent.prototype.onEnter = function() {
      if (this.pauseOnHover)
        this.stopTime = true;
    };
    NotificationComponent.prototype.onLeave = function() {
      if (this.pauseOnHover) {
        this.stopTime = false;
        setTimeout(this.instance, (this.speed - this.diff));
      }
    };
    NotificationComponent.prototype.setPosition = function() {
      return this.position !== 0 ? this.position * 90 : 0;
    };
    NotificationComponent.prototype.removeOnClick = function() {
      if (this.clickToClose)
        this._remove();
    };
    NotificationComponent.prototype.attachOverrides = function() {
      var _this = this;
      Object.keys(this.item.override).forEach(function(a) {
        return _this[a] = _this.item.override[a];
      });
    };
    NotificationComponent.prototype.ngOnDestroy = function() {
      clearTimeout(this.timer);
    };
    NotificationComponent.prototype._remove = function() {
      var _this = this;
      if (this.animate) {
        this.item["state"] = "leave";
        setTimeout(function() {
          return _this._service.set(_this.item, false);
        }, 310);
      } else
        this._service.set(this.item, false);
    };
    NotificationComponent = __decorate([core_1.Component({
      selector: "simple-notification",
      inputs: ["item", "timeOut", "position", "clickToClose", "maxLength", "showProgressBar", "pauseOnHover", "theClass", "rtl", "animate", "icons"],
      pipes: [max_pipe_1.MaxPipe],
      encapsulation: core_1.ViewEncapsulation.None,
      animations: [core_1.trigger("enterLeave", [core_1.state("enter", core_1.style({
        opacity: 1,
        transform: "translateX(0)"
      })), core_1.transition("* => enter", [core_1.style({
        opacity: 0,
        transform: "translateX(5%)"
      }), core_1.animate("400ms ease-in-out")]), core_1.state("leave", core_1.style({
        opacity: 0,
        transform: "translateX(-5%)"
      })), core_1.transition("* => leave", [core_1.style({
        opacity: 1,
        transform: "translateX(0)"
      }), core_1.animate("300ms ease-in-out")])])],
      template: "\n        <div class=\"simple-notification\"\n            @enterLeave=\"item.state\"\n            (click)=\"removeOnClick()\"\n            [class]=\"theClass\"\n\n            [ngClass]=\"{\n                'alert': item.type === 'alert',\n                'error': item.type === 'error',\n                'success': item.type === 'success',\n                'info': item.type === 'info',\n                'bare': item.type === 'bare',\n                'rtl-mode': rtl\n            }\"\n\n            (mouseenter)=\"onEnter()\"\n            (mouseleave)=\"onLeave()\">\n\n            <div *ngIf=\"!item.html\">\n                <div class=\"sn-title\">{{item.title}}</div>\n                <div class=\"sn-content\">{{item.content | max:maxLength}}</div>\n\n                <div *ngIf=\"item.type !== 'bare'\" [innerHTML]=\"safeSvg\"></div>\n            </div>\n            <div *ngIf=\"item.html\" [innerHTML]=\"item.html\"></div>\n\n            <div class=\"sn-progress-loader\" *ngIf=\"showProgressBar\">\n                <span [ngStyle]=\"{'width': progressWidth + '%'}\"></span>\n            </div>\n\n        </div>\n    ",
      styles: ["\n        .simple-notification {\n            width: 100%;\n            padding: 10px 20px;\n            box-sizing: border-box;\n            position: relative;\n            float: left;\n            margin-bottom: 10px;\n            color: #fff;\n            cursor: pointer;\n            transition: all 0.5s;\n        }\n\n        .simple-notification .sn-title {\n            margin: 0;\n            padding: 0;\n            line-height: 30px;\n            font-size: 20px;\n        }\n\n        .simple-notification .sn-content {\n            margin: 0;\n            font-size: 16px;\n            padding: 0 50px 0 0;\n            line-height: 20px;\n        }\n\n        .simple-notification svg {\n            position: absolute;\n            box-sizing: border-box;\n            top: 0;\n            right: 0;\n            width: auto;\n            height: 70px;\n            padding: 10px;\n            fill: #fff;\n        }\n\n        .simple-notification.rtl-mode {\n            direction: rtl;\n        }\n\n        .simple-notification.rtl-mode .content {\n            padding: 0 0 0 50px;\n        }\n\n        .simple-notification.rtl-mode svg {\n            left: 0;\n            right: auto;\n        }\n\n        .simple-notification.error { background: #F44336; }\n        .simple-notification.success { background: #8BC34A; }\n        .simple-notification.alert { background: #ffdb5b; }\n        .simple-notification.info { background: #03A9F4; }\n\n        .simple-notification .sn-progress-loader {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 5px;\n        }\n\n        .simple-notification .sn-progress-loader span {\n            float: left;\n            height: 100%;\n        }\n\n        .simple-notification.success .sn-progress-loader span { background: #689F38; }\n        .simple-notification.error .sn-progress-loader span { background: #D32F2F; }\n        .simple-notification.alert .sn-progress-loader span { background: #edc242; }\n        .simple-notification.info .sn-progress-loader span { background: #0288D1; }\n        .simple-notification.bare .sn-progress-loader span { background: #ccc; }\n    "]
    }), __metadata('design:paramtypes', [notifications_service_1.NotificationsService, (typeof(_a = typeof platform_browser_1.DomSanitizationService !== 'undefined' && platform_browser_1.DomSanitizationService) === 'function' && _a) || Object])], NotificationComponent);
    return NotificationComponent;
    var _a;
  }());
  exports.NotificationComponent = NotificationComponent;
  return module.exports;
});

$__System.registerDynamic("e", ["3", "d", "c", "f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var notifications_service_1 = $__require('d');
  var notification_component_1 = $__require('c');
  var icons_1 = $__require('f');
  var SimpleNotificationsComponent = (function() {
    function SimpleNotificationsComponent(_service) {
      this._service = _service;
      this.onCreate = new core_1.EventEmitter();
      this.onDestroy = new core_1.EventEmitter();
      this.notifications = [];
      this.position = ["bottom", "right"];
      this.lastOnBottom = true;
      this.maxStack = 8;
      this.preventLastDuplicates = false;
      this.preventDuplicates = false;
      this.timeOut = 0;
      this.maxLength = 0;
      this.clickToClose = true;
      this.showProgressBar = true;
      this.pauseOnHover = true;
      this.rtl = false;
      this.animate = true;
      this.icons = icons_1.defaultIcons;
    }
    Object.defineProperty(SimpleNotificationsComponent.prototype, "options", {
      set: function(opt) {
        this.attachChanges(opt);
      },
      enumerable: true,
      configurable: true
    });
    SimpleNotificationsComponent.prototype.ngOnInit = function() {
      var _this = this;
      this.listener = this._service.getChangeEmitter().subscribe(function(item) {
        switch (item.command) {
          case "cleanAll":
            _this.notifications = [];
            break;
          case "clean":
            _this.cleanSingle(item.id);
            break;
          case "set":
            if (item.add)
              _this.add(item.notification);
            else
              _this.defaultBehavior(item);
            break;
          default:
            _this.defaultBehavior(item);
            break;
        }
      });
    };
    SimpleNotificationsComponent.prototype.defaultBehavior = function(value) {
      this.notifications.splice(this.notifications.indexOf(value.notification), 1);
      this.onDestroy.emit(this.buildEmit(value.notification, false));
    };
    SimpleNotificationsComponent.prototype.add = function(item) {
      item.createdOn = new Date();
      var toBlock = this.preventLastDuplicates || this.preventDuplicates ? this.block(item) : false;
      this.lastNotificationCreated = item;
      if (!toBlock) {
        if (this.lastOnBottom) {
          if (this.notifications.length >= this.maxStack)
            this.notifications.splice(0, 1);
          this.notifications.push(item);
        } else {
          if (this.notifications.length >= this.maxStack)
            this.notifications.splice(this.notifications.length - 1, 1);
          this.notifications.splice(0, 0, item);
        }
        this.onCreate.emit(this.buildEmit(item, true));
      }
    };
    SimpleNotificationsComponent.prototype.block = function(item) {
      var checkHtml = function(checker) {
        return checker.html ? checker.type === item.type && checker.title === item.title && checker.content === item.content && checker.html === item.html : false;
      },
          checkStandard = function(checker) {
            return checker.type === item.type && checker.title === item.title && checker.content === item.content;
          },
          toCheck = item.html ? checkHtml : checkStandard;
      if (this.preventDuplicates && this.notifications.length > 0)
        for (var i = 0; i < this.notifications.length; i++)
          if (toCheck(this.notifications[i]))
            return true;
      if (this.preventLastDuplicates) {
        var comp = void 0;
        if (this.preventLastDuplicates === "visible" && this.notifications.length > 0) {
          if (this.lastOnBottom)
            comp = this.notifications[this.notifications.length - 1];
          else
            comp = this.notifications[0];
        } else if (this.preventLastDuplicates === "all" && this.lastNotificationCreated)
          comp = this.lastNotificationCreated;
        else
          return false;
        return toCheck(comp);
      }
      return false;
    };
    SimpleNotificationsComponent.prototype.attachChanges = function(options) {
      var _this = this;
      Object.keys(options).forEach(function(a) {
        if (_this.hasOwnProperty(a))
          _this[a] = options[a];
      });
    };
    SimpleNotificationsComponent.prototype.buildEmit = function(notification, to) {
      var toEmit = {
        createdOn: notification.createdOn,
        type: notification.type,
        id: notification.id
      };
      if (notification.html)
        toEmit["html"] = notification.html;
      else {
        toEmit["title"] = notification.title;
        toEmit["content"] = notification.content;
      }
      if (!to)
        toEmit["destroyedOn"] = new Date();
      return toEmit;
    };
    SimpleNotificationsComponent.prototype.cleanSingle = function(id) {
      var indexOfDelete,
          doDelete = false;
      this.notifications.forEach(function(a, idx) {
        if (a.id === id) {
          indexOfDelete = idx;
          doDelete = true;
        }
      });
      if (doDelete)
        this.notifications.splice(indexOfDelete, 1);
    };
    SimpleNotificationsComponent.prototype.ngOnDestroy = function() {
      if (this.listener)
        this.listener.unsubscribe();
    };
    __decorate([core_1.Input(), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], SimpleNotificationsComponent.prototype, "options", null);
    __decorate([core_1.Output(), __metadata('design:type', Object)], SimpleNotificationsComponent.prototype, "onCreate", void 0);
    __decorate([core_1.Output(), __metadata('design:type', Object)], SimpleNotificationsComponent.prototype, "onDestroy", void 0);
    SimpleNotificationsComponent = __decorate([core_1.Component({
      selector: "simple-notifications",
      directives: [notification_component_1.NotificationComponent],
      encapsulation: core_1.ViewEncapsulation.None,
      template: "\n        <div class=\"simple-notification-wrapper\" [ngClass]=\"position\">\n            <simple-notification\n                *ngFor=\"let a of notifications; let i = index\"\n                [item]=\"a\"\n                [timeOut]=\"timeOut\"\n                [clickToClose]=\"clickToClose\"\n                [maxLength]=\"maxLength\"\n                [showProgressBar]=\"showProgressBar\"\n                [pauseOnHover]=\"pauseOnHover\"\n                [theClass]=\"theClass\"\n                [rtl]=\"rtl\"\n                [animate]=\"animate\"\n                [position]=\"i\"\n                [icons]=\"icons\"\n                >\n            </simple-notification>\n        </div>\n    ",
      styles: ["\n        .simple-notification-wrapper {\n            position: fixed;\n            width: 300px;\n            z-index: 1000;\n        }\n        \n        .simple-notification-wrapper.left { left: 20px; }\n        .simple-notification-wrapper.top { top: 20px; }\n        .simple-notification-wrapper.right { right: 20px; }\n        .simple-notification-wrapper.bottom { bottom: 20px; }\n        \n        @media (max-width: 340px) {\n            .simple-notification-wrapper {\n                width: auto;\n                left: 20px;\n                right: 20px;\n            }\n        }\n    "]
    }), __metadata('design:paramtypes', [notifications_service_1.NotificationsService])], SimpleNotificationsComponent);
    return SimpleNotificationsComponent;
  }());
  exports.SimpleNotificationsComponent = SimpleNotificationsComponent;
  return module.exports;
});

$__System.registerDynamic("10", ["7", "11", "12", "13"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var tryCatch_1 = $__require('11');
  var errorObject_1 = $__require('12');
  var AsyncSubject_1 = $__require('13');
  var BoundCallbackObservable = (function(_super) {
    __extends(BoundCallbackObservable, _super);
    function BoundCallbackObservable(callbackFunc, selector, args, scheduler) {
      _super.call(this);
      this.callbackFunc = callbackFunc;
      this.selector = selector;
      this.args = args;
      this.scheduler = scheduler;
    }
    BoundCallbackObservable.create = function(callbackFunc, selector, scheduler) {
      if (selector === void 0) {
        selector = undefined;
      }
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i - 0] = arguments[_i];
        }
        return new BoundCallbackObservable(callbackFunc, selector, args, scheduler);
      };
    };
    BoundCallbackObservable.prototype._subscribe = function(subscriber) {
      var callbackFunc = this.callbackFunc;
      var args = this.args;
      var scheduler = this.scheduler;
      var subject = this.subject;
      if (!scheduler) {
        if (!subject) {
          subject = this.subject = new AsyncSubject_1.AsyncSubject();
          var handler = function handlerFn() {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              innerArgs[_i - 0] = arguments[_i];
            }
            var source = handlerFn.source;
            var selector = source.selector,
                subject = source.subject;
            if (selector) {
              var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
              if (result_1 === errorObject_1.errorObject) {
                subject.error(errorObject_1.errorObject.e);
              } else {
                subject.next(result_1);
                subject.complete();
              }
            } else {
              subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);
              subject.complete();
            }
          };
          handler.source = this;
          var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
          if (result === errorObject_1.errorObject) {
            subject.error(errorObject_1.errorObject.e);
          }
        }
        return subject.subscribe(subscriber);
      } else {
        return scheduler.schedule(dispatch, 0, {
          source: this,
          subscriber: subscriber
        });
      }
    };
    return BoundCallbackObservable;
  }(Observable_1.Observable));
  exports.BoundCallbackObservable = BoundCallbackObservable;
  function dispatch(state) {
    var self = this;
    var source = state.source,
        subscriber = state.subscriber;
    var callbackFunc = source.callbackFunc,
        args = source.args,
        scheduler = source.scheduler;
    var subject = source.subject;
    if (!subject) {
      subject = source.subject = new AsyncSubject_1.AsyncSubject();
      var handler = function handlerFn() {
        var innerArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          innerArgs[_i - 0] = arguments[_i];
        }
        var source = handlerFn.source;
        var selector = source.selector,
            subject = source.subject;
        if (selector) {
          var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
          if (result_2 === errorObject_1.errorObject) {
            self.add(scheduler.schedule(dispatchError, 0, {
              err: errorObject_1.errorObject.e,
              subject: subject
            }));
          } else {
            self.add(scheduler.schedule(dispatchNext, 0, {
              value: result_2,
              subject: subject
            }));
          }
        } else {
          var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;
          self.add(scheduler.schedule(dispatchNext, 0, {
            value: value,
            subject: subject
          }));
        }
      };
      handler.source = source;
      var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
      if (result === errorObject_1.errorObject) {
        subject.error(errorObject_1.errorObject.e);
      }
    }
    self.add(subject.subscribe(subscriber));
  }
  function dispatchNext(arg) {
    var value = arg.value,
        subject = arg.subject;
    subject.next(value);
    subject.complete();
  }
  function dispatchError(arg) {
    var err = arg.err,
        subject = arg.subject;
    subject.error(err);
  }
  return module.exports;
});

$__System.registerDynamic("14", ["10"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var BoundCallbackObservable_1 = $__require('10');
  exports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;
  return module.exports;
});

$__System.registerDynamic("15", ["7", "14"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var bindCallback_1 = $__require('14');
  Observable_1.Observable.bindCallback = bindCallback_1.bindCallback;
  return module.exports;
});

$__System.registerDynamic("16", ["7", "11", "12", "13"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var tryCatch_1 = $__require('11');
  var errorObject_1 = $__require('12');
  var AsyncSubject_1 = $__require('13');
  var BoundNodeCallbackObservable = (function(_super) {
    __extends(BoundNodeCallbackObservable, _super);
    function BoundNodeCallbackObservable(callbackFunc, selector, args, scheduler) {
      _super.call(this);
      this.callbackFunc = callbackFunc;
      this.selector = selector;
      this.args = args;
      this.scheduler = scheduler;
    }
    BoundNodeCallbackObservable.create = function(callbackFunc, selector, scheduler) {
      if (selector === void 0) {
        selector = undefined;
      }
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i - 0] = arguments[_i];
        }
        return new BoundNodeCallbackObservable(callbackFunc, selector, args, scheduler);
      };
    };
    BoundNodeCallbackObservable.prototype._subscribe = function(subscriber) {
      var callbackFunc = this.callbackFunc;
      var args = this.args;
      var scheduler = this.scheduler;
      var subject = this.subject;
      if (!scheduler) {
        if (!subject) {
          subject = this.subject = new AsyncSubject_1.AsyncSubject();
          var handler = function handlerFn() {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              innerArgs[_i - 0] = arguments[_i];
            }
            var source = handlerFn.source;
            var selector = source.selector,
                subject = source.subject;
            var err = innerArgs.shift();
            if (err) {
              subject.error(err);
            } else if (selector) {
              var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
              if (result_1 === errorObject_1.errorObject) {
                subject.error(errorObject_1.errorObject.e);
              } else {
                subject.next(result_1);
                subject.complete();
              }
            } else {
              subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);
              subject.complete();
            }
          };
          handler.source = this;
          var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
          if (result === errorObject_1.errorObject) {
            subject.error(errorObject_1.errorObject.e);
          }
        }
        return subject.subscribe(subscriber);
      } else {
        return scheduler.schedule(dispatch, 0, {
          source: this,
          subscriber: subscriber
        });
      }
    };
    return BoundNodeCallbackObservable;
  }(Observable_1.Observable));
  exports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;
  function dispatch(state) {
    var self = this;
    var source = state.source,
        subscriber = state.subscriber;
    var callbackFunc = source.callbackFunc,
        args = source.args,
        scheduler = source.scheduler;
    var subject = source.subject;
    if (!subject) {
      subject = source.subject = new AsyncSubject_1.AsyncSubject();
      var handler = function handlerFn() {
        var innerArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          innerArgs[_i - 0] = arguments[_i];
        }
        var source = handlerFn.source;
        var selector = source.selector,
            subject = source.subject;
        var err = innerArgs.shift();
        if (err) {
          subject.error(err);
        } else if (selector) {
          var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
          if (result_2 === errorObject_1.errorObject) {
            self.add(scheduler.schedule(dispatchError, 0, {
              err: errorObject_1.errorObject.e,
              subject: subject
            }));
          } else {
            self.add(scheduler.schedule(dispatchNext, 0, {
              value: result_2,
              subject: subject
            }));
          }
        } else {
          var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;
          self.add(scheduler.schedule(dispatchNext, 0, {
            value: value,
            subject: subject
          }));
        }
      };
      handler.source = source;
      var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
      if (result === errorObject_1.errorObject) {
        subject.error(errorObject_1.errorObject.e);
      }
    }
    self.add(subject.subscribe(subscriber));
  }
  function dispatchNext(arg) {
    var value = arg.value,
        subject = arg.subject;
    subject.next(value);
    subject.complete();
  }
  function dispatchError(arg) {
    var err = arg.err,
        subject = arg.subject;
    subject.error(err);
  }
  return module.exports;
});

$__System.registerDynamic("17", ["16"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var BoundNodeCallbackObservable_1 = $__require('16');
  exports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;
  return module.exports;
});

$__System.registerDynamic("18", ["7", "17"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var bindNodeCallback_1 = $__require('17');
  Observable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;
  return module.exports;
});

$__System.registerDynamic("19", ["7", "1a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var combineLatest_1 = $__require('1a');
  Observable_1.Observable.combineLatest = combineLatest_1.combineLatestStatic;
  return module.exports;
});

$__System.registerDynamic("1b", ["1c"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var concat_1 = $__require('1c');
  exports.concat = concat_1.concatStatic;
  return module.exports;
});

$__System.registerDynamic("1d", ["7", "1b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var concat_1 = $__require('1b');
  Observable_1.Observable.concat = concat_1.concat;
  return module.exports;
});

$__System.registerDynamic("1e", ["7", "1f", "20"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var subscribeToResult_1 = $__require('1f');
  var OuterSubscriber_1 = $__require('20');
  var DeferObservable = (function(_super) {
    __extends(DeferObservable, _super);
    function DeferObservable(observableFactory) {
      _super.call(this);
      this.observableFactory = observableFactory;
    }
    DeferObservable.create = function(observableFactory) {
      return new DeferObservable(observableFactory);
    };
    DeferObservable.prototype._subscribe = function(subscriber) {
      return new DeferSubscriber(subscriber, this.observableFactory);
    };
    return DeferObservable;
  }(Observable_1.Observable));
  exports.DeferObservable = DeferObservable;
  var DeferSubscriber = (function(_super) {
    __extends(DeferSubscriber, _super);
    function DeferSubscriber(destination, factory) {
      _super.call(this, destination);
      this.factory = factory;
      this.tryDefer();
    }
    DeferSubscriber.prototype.tryDefer = function() {
      try {
        this._callFactory();
      } catch (err) {
        this._error(err);
      }
    };
    DeferSubscriber.prototype._callFactory = function() {
      var result = this.factory();
      if (result) {
        this.add(subscribeToResult_1.subscribeToResult(this, result));
      }
    };
    return DeferSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("21", ["1e"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var DeferObservable_1 = $__require('1e');
  exports.defer = DeferObservable_1.DeferObservable.create;
  return module.exports;
});

$__System.registerDynamic("22", ["7", "21"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var defer_1 = $__require('21');
  Observable_1.Observable.defer = defer_1.defer;
  return module.exports;
});

$__System.registerDynamic("23", ["24"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var EmptyObservable_1 = $__require('24');
  exports.empty = EmptyObservable_1.EmptyObservable.create;
  return module.exports;
});

$__System.registerDynamic("25", ["7", "23"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var empty_1 = $__require('23');
  Observable_1.Observable.empty = empty_1.empty;
  return module.exports;
});

$__System.registerDynamic("26", ["7", "24", "27", "1f", "20"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var EmptyObservable_1 = $__require('24');
  var isArray_1 = $__require('27');
  var subscribeToResult_1 = $__require('1f');
  var OuterSubscriber_1 = $__require('20');
  var ForkJoinObservable = (function(_super) {
    __extends(ForkJoinObservable, _super);
    function ForkJoinObservable(sources, resultSelector) {
      _super.call(this);
      this.sources = sources;
      this.resultSelector = resultSelector;
    }
    ForkJoinObservable.create = function() {
      var sources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i - 0] = arguments[_i];
      }
      if (sources === null || arguments.length === 0) {
        return new EmptyObservable_1.EmptyObservable();
      }
      var resultSelector = null;
      if (typeof sources[sources.length - 1] === 'function') {
        resultSelector = sources.pop();
      }
      if (sources.length === 1 && isArray_1.isArray(sources[0])) {
        sources = sources[0];
      }
      if (sources.length === 0) {
        return new EmptyObservable_1.EmptyObservable();
      }
      return new ForkJoinObservable(sources, resultSelector);
    };
    ForkJoinObservable.prototype._subscribe = function(subscriber) {
      return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);
    };
    return ForkJoinObservable;
  }(Observable_1.Observable));
  exports.ForkJoinObservable = ForkJoinObservable;
  var ForkJoinSubscriber = (function(_super) {
    __extends(ForkJoinSubscriber, _super);
    function ForkJoinSubscriber(destination, sources, resultSelector) {
      _super.call(this, destination);
      this.sources = sources;
      this.resultSelector = resultSelector;
      this.completed = 0;
      this.haveValues = 0;
      var len = sources.length;
      this.total = len;
      this.values = new Array(len);
      for (var i = 0; i < len; i++) {
        var source = sources[i];
        var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);
        if (innerSubscription) {
          innerSubscription.outerIndex = i;
          this.add(innerSubscription);
        }
      }
    }
    ForkJoinSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.values[outerIndex] = innerValue;
      if (!innerSub._hasValue) {
        innerSub._hasValue = true;
        this.haveValues++;
      }
    };
    ForkJoinSubscriber.prototype.notifyComplete = function(innerSub) {
      var destination = this.destination;
      var _a = this,
          haveValues = _a.haveValues,
          resultSelector = _a.resultSelector,
          values = _a.values;
      var len = values.length;
      if (!innerSub._hasValue) {
        destination.complete();
        return;
      }
      this.completed++;
      if (this.completed !== len) {
        return;
      }
      if (haveValues === len) {
        var value = resultSelector ? resultSelector.apply(this, values) : values;
        destination.next(value);
      }
      destination.complete();
    };
    return ForkJoinSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("28", ["26"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var ForkJoinObservable_1 = $__require('26');
  exports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;
  return module.exports;
});

$__System.registerDynamic("29", ["7", "28"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var forkJoin_1 = $__require('28');
  Observable_1.Observable.forkJoin = forkJoin_1.forkJoin;
  return module.exports;
});

$__System.registerDynamic("2a", ["2b", "2c", "11", "7", "2d", "2e", "12"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var root_1 = $__require('2b');
  var isObject_1 = $__require('2c');
  var tryCatch_1 = $__require('11');
  var Observable_1 = $__require('7');
  var isFunction_1 = $__require('2d');
  var iterator_1 = $__require('2e');
  var errorObject_1 = $__require('12');
  var IteratorObservable = (function(_super) {
    __extends(IteratorObservable, _super);
    function IteratorObservable(iterator, project, thisArg, scheduler) {
      _super.call(this);
      if (iterator == null) {
        throw new Error('iterator cannot be null.');
      }
      if (isObject_1.isObject(project)) {
        this.thisArg = project;
        this.scheduler = thisArg;
      } else if (isFunction_1.isFunction(project)) {
        this.project = project;
        this.thisArg = thisArg;
        this.scheduler = scheduler;
      } else if (project != null) {
        throw new Error('When provided, `project` must be a function.');
      }
      this.iterator = getIterator(iterator);
    }
    IteratorObservable.create = function(iterator, project, thisArg, scheduler) {
      return new IteratorObservable(iterator, project, thisArg, scheduler);
    };
    IteratorObservable.dispatch = function(state) {
      var index = state.index,
          hasError = state.hasError,
          thisArg = state.thisArg,
          project = state.project,
          iterator = state.iterator,
          subscriber = state.subscriber;
      if (hasError) {
        subscriber.error(state.error);
        return;
      }
      var result = iterator.next();
      if (result.done) {
        subscriber.complete();
        return;
      }
      if (project) {
        result = tryCatch_1.tryCatch(project).call(thisArg, result.value, index);
        if (result === errorObject_1.errorObject) {
          state.error = errorObject_1.errorObject.e;
          state.hasError = true;
        } else {
          subscriber.next(result);
          state.index = index + 1;
        }
      } else {
        subscriber.next(result.value);
        state.index = index + 1;
      }
      if (subscriber.isUnsubscribed) {
        return;
      }
      this.schedule(state);
    };
    IteratorObservable.prototype._subscribe = function(subscriber) {
      var index = 0;
      var _a = this,
          iterator = _a.iterator,
          project = _a.project,
          thisArg = _a.thisArg,
          scheduler = _a.scheduler;
      if (scheduler) {
        return scheduler.schedule(IteratorObservable.dispatch, 0, {
          index: index,
          thisArg: thisArg,
          project: project,
          iterator: iterator,
          subscriber: subscriber
        });
      } else {
        do {
          var result = iterator.next();
          if (result.done) {
            subscriber.complete();
            break;
          } else if (project) {
            result = tryCatch_1.tryCatch(project).call(thisArg, result.value, index++);
            if (result === errorObject_1.errorObject) {
              subscriber.error(errorObject_1.errorObject.e);
              break;
            }
            subscriber.next(result);
          } else {
            subscriber.next(result.value);
          }
          if (subscriber.isUnsubscribed) {
            break;
          }
        } while (true);
      }
    };
    return IteratorObservable;
  }(Observable_1.Observable));
  exports.IteratorObservable = IteratorObservable;
  var StringIterator = (function() {
    function StringIterator(str, idx, len) {
      if (idx === void 0) {
        idx = 0;
      }
      if (len === void 0) {
        len = str.length;
      }
      this.str = str;
      this.idx = idx;
      this.len = len;
    }
    StringIterator.prototype[iterator_1.$$iterator] = function() {
      return (this);
    };
    StringIterator.prototype.next = function() {
      return this.idx < this.len ? {
        done: false,
        value: this.str.charAt(this.idx++)
      } : {
        done: true,
        value: undefined
      };
    };
    return StringIterator;
  }());
  var ArrayIterator = (function() {
    function ArrayIterator(arr, idx, len) {
      if (idx === void 0) {
        idx = 0;
      }
      if (len === void 0) {
        len = toLength(arr);
      }
      this.arr = arr;
      this.idx = idx;
      this.len = len;
    }
    ArrayIterator.prototype[iterator_1.$$iterator] = function() {
      return this;
    };
    ArrayIterator.prototype.next = function() {
      return this.idx < this.len ? {
        done: false,
        value: this.arr[this.idx++]
      } : {
        done: true,
        value: undefined
      };
    };
    return ArrayIterator;
  }());
  function getIterator(obj) {
    var i = obj[iterator_1.$$iterator];
    if (!i && typeof obj === 'string') {
      return new StringIterator(obj);
    }
    if (!i && obj.length !== undefined) {
      return new ArrayIterator(obj);
    }
    if (!i) {
      throw new TypeError('Object is not iterable');
    }
    return obj[iterator_1.$$iterator]();
  }
  var maxSafeInteger = Math.pow(2, 53) - 1;
  function toLength(o) {
    var len = +o.length;
    if (isNaN(len)) {
      return 0;
    }
    if (len === 0 || !numberIsFinite(len)) {
      return len;
    }
    len = sign(len) * Math.floor(Math.abs(len));
    if (len <= 0) {
      return 0;
    }
    if (len > maxSafeInteger) {
      return maxSafeInteger;
    }
    return len;
  }
  function numberIsFinite(value) {
    return typeof value === 'number' && root_1.root.isFinite(value);
  }
  function sign(value) {
    var valueAsNumber = +value;
    if (valueAsNumber === 0) {
      return valueAsNumber;
    }
    if (isNaN(valueAsNumber)) {
      return valueAsNumber;
    }
    return valueAsNumber < 0 ? -1 : 1;
  }
  return module.exports;
});

$__System.registerDynamic("2f", ["7", "30", "24"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var ScalarObservable_1 = $__require('30');
  var EmptyObservable_1 = $__require('24');
  var ArrayLikeObservable = (function(_super) {
    __extends(ArrayLikeObservable, _super);
    function ArrayLikeObservable(arrayLike, mapFn, thisArg, scheduler) {
      _super.call(this);
      this.arrayLike = arrayLike;
      this.scheduler = scheduler;
      if (!mapFn && !scheduler && arrayLike.length === 1) {
        this._isScalar = true;
        this.value = arrayLike[0];
      }
      if (mapFn) {
        this.mapFn = mapFn.bind(thisArg);
      }
    }
    ArrayLikeObservable.create = function(arrayLike, mapFn, thisArg, scheduler) {
      var length = arrayLike.length;
      if (length === 0) {
        return new EmptyObservable_1.EmptyObservable();
      } else if (length === 1 && !mapFn) {
        return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
      } else {
        return new ArrayLikeObservable(arrayLike, mapFn, thisArg, scheduler);
      }
    };
    ArrayLikeObservable.dispatch = function(state) {
      var arrayLike = state.arrayLike,
          index = state.index,
          length = state.length,
          mapFn = state.mapFn,
          subscriber = state.subscriber;
      if (subscriber.isUnsubscribed) {
        return;
      }
      if (index >= length) {
        subscriber.complete();
        return;
      }
      var result = mapFn ? mapFn(arrayLike[index], index) : arrayLike[index];
      subscriber.next(result);
      state.index = index + 1;
      this.schedule(state);
    };
    ArrayLikeObservable.prototype._subscribe = function(subscriber) {
      var index = 0;
      var _a = this,
          arrayLike = _a.arrayLike,
          mapFn = _a.mapFn,
          scheduler = _a.scheduler;
      var length = arrayLike.length;
      if (scheduler) {
        return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
          arrayLike: arrayLike,
          index: index,
          length: length,
          mapFn: mapFn,
          subscriber: subscriber
        });
      } else {
        for (var i = 0; i < length && !subscriber.isUnsubscribed; i++) {
          var result = mapFn ? mapFn(arrayLike[i], i) : arrayLike[i];
          subscriber.next(result);
        }
        subscriber.complete();
      }
    };
    return ArrayLikeObservable;
  }(Observable_1.Observable));
  exports.ArrayLikeObservable = ArrayLikeObservable;
  return module.exports;
});

$__System.registerDynamic("31", ["27", "2d", "32", "33", "5", "2a", "34", "2f", "35", "2e", "7", "36"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var isArray_1 = $__require('27');
  var isFunction_1 = $__require('2d');
  var isPromise_1 = $__require('32');
  var isScheduler_1 = $__require('33');
  var PromiseObservable_1 = $__require('5');
  var IteratorObservable_1 = $__require('2a');
  var ArrayObservable_1 = $__require('34');
  var ArrayLikeObservable_1 = $__require('2f');
  var observable_1 = $__require('35');
  var iterator_1 = $__require('2e');
  var Observable_1 = $__require('7');
  var observeOn_1 = $__require('36');
  var isArrayLike = (function(x) {
    return x && typeof x.length === 'number';
  });
  var FromObservable = (function(_super) {
    __extends(FromObservable, _super);
    function FromObservable(ish, scheduler) {
      _super.call(this, null);
      this.ish = ish;
      this.scheduler = scheduler;
    }
    FromObservable.create = function(ish, mapFnOrScheduler, thisArg, lastScheduler) {
      var scheduler = null;
      var mapFn = null;
      if (isFunction_1.isFunction(mapFnOrScheduler)) {
        scheduler = lastScheduler || null;
        mapFn = mapFnOrScheduler;
      } else if (isScheduler_1.isScheduler(scheduler)) {
        scheduler = mapFnOrScheduler;
      }
      if (ish != null) {
        if (typeof ish[observable_1.$$observable] === 'function') {
          if (ish instanceof Observable_1.Observable && !scheduler) {
            return ish;
          }
          return new FromObservable(ish, scheduler);
        } else if (isArray_1.isArray(ish)) {
          return new ArrayObservable_1.ArrayObservable(ish, scheduler);
        } else if (isPromise_1.isPromise(ish)) {
          return new PromiseObservable_1.PromiseObservable(ish, scheduler);
        } else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {
          return new IteratorObservable_1.IteratorObservable(ish, null, null, scheduler);
        } else if (isArrayLike(ish)) {
          return new ArrayLikeObservable_1.ArrayLikeObservable(ish, mapFn, thisArg, scheduler);
        }
      }
      throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
    };
    FromObservable.prototype._subscribe = function(subscriber) {
      var ish = this.ish;
      var scheduler = this.scheduler;
      if (scheduler == null) {
        return ish[observable_1.$$observable]().subscribe(subscriber);
      } else {
        return ish[observable_1.$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
      }
    };
    return FromObservable;
  }(Observable_1.Observable));
  exports.FromObservable = FromObservable;
  return module.exports;
});

$__System.registerDynamic("37", ["31"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var FromObservable_1 = $__require('31');
  exports.from = FromObservable_1.FromObservable.create;
  return module.exports;
});

$__System.registerDynamic("38", ["7", "37"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var from_1 = $__require('37');
  Observable_1.Observable.from = from_1.from;
  return module.exports;
});

$__System.registerDynamic("39", ["7", "11", "12", "3a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var tryCatch_1 = $__require('11');
  var errorObject_1 = $__require('12');
  var Subscription_1 = $__require('3a');
  function isNodeStyleEventEmmitter(sourceObj) {
    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
  }
  function isJQueryStyleEventEmitter(sourceObj) {
    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
  }
  function isNodeList(sourceObj) {
    return !!sourceObj && sourceObj.toString() === '[object NodeList]';
  }
  function isHTMLCollection(sourceObj) {
    return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';
  }
  function isEventTarget(sourceObj) {
    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
  }
  var FromEventObservable = (function(_super) {
    __extends(FromEventObservable, _super);
    function FromEventObservable(sourceObj, eventName, selector) {
      _super.call(this);
      this.sourceObj = sourceObj;
      this.eventName = eventName;
      this.selector = selector;
    }
    FromEventObservable.create = function(sourceObj, eventName, selector) {
      return new FromEventObservable(sourceObj, eventName, selector);
    };
    FromEventObservable.setupSubscription = function(sourceObj, eventName, handler, subscriber) {
      var unsubscribe;
      if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {
        for (var i = 0,
            len = sourceObj.length; i < len; i++) {
          FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber);
        }
      } else if (isEventTarget(sourceObj)) {
        sourceObj.addEventListener(eventName, handler);
        unsubscribe = function() {
          return sourceObj.removeEventListener(eventName, handler);
        };
      } else if (isJQueryStyleEventEmitter(sourceObj)) {
        sourceObj.on(eventName, handler);
        unsubscribe = function() {
          return sourceObj.off(eventName, handler);
        };
      } else if (isNodeStyleEventEmmitter(sourceObj)) {
        sourceObj.addListener(eventName, handler);
        unsubscribe = function() {
          return sourceObj.removeListener(eventName, handler);
        };
      }
      subscriber.add(new Subscription_1.Subscription(unsubscribe));
    };
    FromEventObservable.prototype._subscribe = function(subscriber) {
      var sourceObj = this.sourceObj;
      var eventName = this.eventName;
      var selector = this.selector;
      var handler = selector ? function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i - 0] = arguments[_i];
        }
        var result = tryCatch_1.tryCatch(selector).apply(void 0, args);
        if (result === errorObject_1.errorObject) {
          subscriber.error(errorObject_1.errorObject.e);
        } else {
          subscriber.next(result);
        }
      } : function(e) {
        return subscriber.next(e);
      };
      FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber);
    };
    return FromEventObservable;
  }(Observable_1.Observable));
  exports.FromEventObservable = FromEventObservable;
  return module.exports;
});

$__System.registerDynamic("3b", ["39"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var FromEventObservable_1 = $__require('39');
  exports.fromEvent = FromEventObservable_1.FromEventObservable.create;
  return module.exports;
});

$__System.registerDynamic("3c", ["7", "3b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var fromEvent_1 = $__require('3b');
  Observable_1.Observable.fromEvent = fromEvent_1.fromEvent;
  return module.exports;
});

$__System.registerDynamic("3d", ["7", "3a", "11", "12"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var Subscription_1 = $__require('3a');
  var tryCatch_1 = $__require('11');
  var errorObject_1 = $__require('12');
  var FromEventPatternObservable = (function(_super) {
    __extends(FromEventPatternObservable, _super);
    function FromEventPatternObservable(addHandler, removeHandler, selector) {
      _super.call(this);
      this.addHandler = addHandler;
      this.removeHandler = removeHandler;
      this.selector = selector;
    }
    FromEventPatternObservable.create = function(addHandler, removeHandler, selector) {
      return new FromEventPatternObservable(addHandler, removeHandler, selector);
    };
    FromEventPatternObservable.prototype._subscribe = function(subscriber) {
      var addHandler = this.addHandler;
      var removeHandler = this.removeHandler;
      var selector = this.selector;
      var handler = selector ? function(e) {
        var result = tryCatch_1.tryCatch(selector).apply(null, arguments);
        if (result === errorObject_1.errorObject) {
          subscriber.error(result.e);
        } else {
          subscriber.next(result);
        }
      } : function(e) {
        subscriber.next(e);
      };
      var result = tryCatch_1.tryCatch(addHandler)(handler);
      if (result === errorObject_1.errorObject) {
        subscriber.error(result.e);
      }
      subscriber.add(new Subscription_1.Subscription(function() {
        removeHandler(handler);
      }));
    };
    return FromEventPatternObservable;
  }(Observable_1.Observable));
  exports.FromEventPatternObservable = FromEventPatternObservable;
  return module.exports;
});

$__System.registerDynamic("3e", ["3d"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var FromEventPatternObservable_1 = $__require('3d');
  exports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;
  return module.exports;
});

$__System.registerDynamic("3f", ["7", "3e"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var fromEventPattern_1 = $__require('3e');
  Observable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;
  return module.exports;
});

$__System.registerDynamic("40", ["5"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var PromiseObservable_1 = $__require('5');
  exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
  return module.exports;
});

$__System.registerDynamic("41", ["7", "40"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var fromPromise_1 = $__require('40');
  Observable_1.Observable.fromPromise = fromPromise_1.fromPromise;
  return module.exports;
});

$__System.registerDynamic("42", ["43", "7", "44"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var isNumeric_1 = $__require('43');
  var Observable_1 = $__require('7');
  var async_1 = $__require('44');
  var IntervalObservable = (function(_super) {
    __extends(IntervalObservable, _super);
    function IntervalObservable(period, scheduler) {
      if (period === void 0) {
        period = 0;
      }
      if (scheduler === void 0) {
        scheduler = async_1.async;
      }
      _super.call(this);
      this.period = period;
      this.scheduler = scheduler;
      if (!isNumeric_1.isNumeric(period) || period < 0) {
        this.period = 0;
      }
      if (!scheduler || typeof scheduler.schedule !== 'function') {
        this.scheduler = async_1.async;
      }
    }
    IntervalObservable.create = function(period, scheduler) {
      if (period === void 0) {
        period = 0;
      }
      if (scheduler === void 0) {
        scheduler = async_1.async;
      }
      return new IntervalObservable(period, scheduler);
    };
    IntervalObservable.dispatch = function(state) {
      var index = state.index,
          subscriber = state.subscriber,
          period = state.period;
      subscriber.next(index);
      if (subscriber.isUnsubscribed) {
        return;
      }
      state.index += 1;
      this.schedule(state, period);
    };
    IntervalObservable.prototype._subscribe = function(subscriber) {
      var index = 0;
      var period = this.period;
      var scheduler = this.scheduler;
      subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {
        index: index,
        subscriber: subscriber,
        period: period
      }));
    };
    return IntervalObservable;
  }(Observable_1.Observable));
  exports.IntervalObservable = IntervalObservable;
  return module.exports;
});

$__System.registerDynamic("45", ["42"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var IntervalObservable_1 = $__require('42');
  exports.interval = IntervalObservable_1.IntervalObservable.create;
  return module.exports;
});

$__System.registerDynamic("46", ["7", "45"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var interval_1 = $__require('45');
  Observable_1.Observable.interval = interval_1.interval;
  return module.exports;
});

$__System.registerDynamic("47", ["48"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var merge_1 = $__require('48');
  exports.merge = merge_1.mergeStatic;
  return module.exports;
});

$__System.registerDynamic("49", ["7", "47"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var merge_1 = $__require('47');
  Observable_1.Observable.merge = merge_1.merge;
  return module.exports;
});

$__System.registerDynamic("4a", ["7", "4b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var race_1 = $__require('4b');
  Observable_1.Observable.race = race_1.raceStatic;
  return module.exports;
});

$__System.registerDynamic("4c", ["7", "4d"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var noop_1 = $__require('4d');
  var NeverObservable = (function(_super) {
    __extends(NeverObservable, _super);
    function NeverObservable() {
      _super.call(this);
    }
    NeverObservable.create = function() {
      return new NeverObservable();
    };
    NeverObservable.prototype._subscribe = function(subscriber) {
      noop_1.noop();
    };
    return NeverObservable;
  }(Observable_1.Observable));
  exports.NeverObservable = NeverObservable;
  return module.exports;
});

$__System.registerDynamic("4e", ["4c"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var NeverObservable_1 = $__require('4c');
  exports.never = NeverObservable_1.NeverObservable.create;
  return module.exports;
});

$__System.registerDynamic("4f", ["7", "4e"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var never_1 = $__require('4e');
  Observable_1.Observable.never = never_1.never;
  return module.exports;
});

$__System.registerDynamic("50", ["34"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var ArrayObservable_1 = $__require('34');
  exports.of = ArrayObservable_1.ArrayObservable.of;
  return module.exports;
});

$__System.registerDynamic("51", ["7", "50"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var of_1 = $__require('50');
  Observable_1.Observable.of = of_1.of;
  return module.exports;
});

$__System.registerDynamic("52", ["7"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var RangeObservable = (function(_super) {
    __extends(RangeObservable, _super);
    function RangeObservable(start, count, scheduler) {
      _super.call(this);
      this.start = start;
      this._count = count;
      this.scheduler = scheduler;
    }
    RangeObservable.create = function(start, count, scheduler) {
      if (start === void 0) {
        start = 0;
      }
      if (count === void 0) {
        count = 0;
      }
      return new RangeObservable(start, count, scheduler);
    };
    RangeObservable.dispatch = function(state) {
      var start = state.start,
          index = state.index,
          count = state.count,
          subscriber = state.subscriber;
      if (index >= count) {
        subscriber.complete();
        return;
      }
      subscriber.next(start);
      if (subscriber.isUnsubscribed) {
        return;
      }
      state.index = index + 1;
      state.start = start + 1;
      this.schedule(state);
    };
    RangeObservable.prototype._subscribe = function(subscriber) {
      var index = 0;
      var start = this.start;
      var count = this._count;
      var scheduler = this.scheduler;
      if (scheduler) {
        return scheduler.schedule(RangeObservable.dispatch, 0, {
          index: index,
          count: count,
          start: start,
          subscriber: subscriber
        });
      } else {
        do {
          if (index++ >= count) {
            subscriber.complete();
            break;
          }
          subscriber.next(start++);
          if (subscriber.isUnsubscribed) {
            break;
          }
        } while (true);
      }
    };
    return RangeObservable;
  }(Observable_1.Observable));
  exports.RangeObservable = RangeObservable;
  return module.exports;
});

$__System.registerDynamic("53", ["52"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var RangeObservable_1 = $__require('52');
  exports.range = RangeObservable_1.RangeObservable.create;
  return module.exports;
});

$__System.registerDynamic("54", ["7", "53"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var range_1 = $__require('53');
  Observable_1.Observable.range = range_1.range;
  return module.exports;
});

$__System.registerDynamic("55", ["7"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var ErrorObservable = (function(_super) {
    __extends(ErrorObservable, _super);
    function ErrorObservable(error, scheduler) {
      _super.call(this);
      this.error = error;
      this.scheduler = scheduler;
    }
    ErrorObservable.create = function(error, scheduler) {
      return new ErrorObservable(error, scheduler);
    };
    ErrorObservable.dispatch = function(arg) {
      var error = arg.error,
          subscriber = arg.subscriber;
      subscriber.error(error);
    };
    ErrorObservable.prototype._subscribe = function(subscriber) {
      var error = this.error;
      var scheduler = this.scheduler;
      if (scheduler) {
        return scheduler.schedule(ErrorObservable.dispatch, 0, {
          error: error,
          subscriber: subscriber
        });
      } else {
        subscriber.error(error);
      }
    };
    return ErrorObservable;
  }(Observable_1.Observable));
  exports.ErrorObservable = ErrorObservable;
  return module.exports;
});

$__System.registerDynamic("56", ["55"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var ErrorObservable_1 = $__require('55');
  exports._throw = ErrorObservable_1.ErrorObservable.create;
  return module.exports;
});

$__System.registerDynamic("57", ["7", "56"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var throw_1 = $__require('56');
  Observable_1.Observable.throw = throw_1._throw;
  return module.exports;
});

$__System.registerDynamic("58", ["43", "7", "44", "33", "59"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var isNumeric_1 = $__require('43');
  var Observable_1 = $__require('7');
  var async_1 = $__require('44');
  var isScheduler_1 = $__require('33');
  var isDate_1 = $__require('59');
  var TimerObservable = (function(_super) {
    __extends(TimerObservable, _super);
    function TimerObservable(dueTime, period, scheduler) {
      if (dueTime === void 0) {
        dueTime = 0;
      }
      _super.call(this);
      this.period = -1;
      this.dueTime = 0;
      if (isNumeric_1.isNumeric(period)) {
        this.period = Number(period) < 1 && 1 || Number(period);
      } else if (isScheduler_1.isScheduler(period)) {
        scheduler = period;
      }
      if (!isScheduler_1.isScheduler(scheduler)) {
        scheduler = async_1.async;
      }
      this.scheduler = scheduler;
      this.dueTime = isDate_1.isDate(dueTime) ? (+dueTime - this.scheduler.now()) : dueTime;
    }
    TimerObservable.create = function(initialDelay, period, scheduler) {
      if (initialDelay === void 0) {
        initialDelay = 0;
      }
      return new TimerObservable(initialDelay, period, scheduler);
    };
    TimerObservable.dispatch = function(state) {
      var index = state.index,
          period = state.period,
          subscriber = state.subscriber;
      var action = this;
      subscriber.next(index);
      if (subscriber.isUnsubscribed) {
        return;
      } else if (period === -1) {
        return subscriber.complete();
      }
      state.index = index + 1;
      action.schedule(state, period);
    };
    TimerObservable.prototype._subscribe = function(subscriber) {
      var index = 0;
      var _a = this,
          period = _a.period,
          dueTime = _a.dueTime,
          scheduler = _a.scheduler;
      return scheduler.schedule(TimerObservable.dispatch, dueTime, {
        index: index,
        period: period,
        subscriber: subscriber
      });
    };
    return TimerObservable;
  }(Observable_1.Observable));
  exports.TimerObservable = TimerObservable;
  return module.exports;
});

$__System.registerDynamic("5a", ["58"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var TimerObservable_1 = $__require('58');
  exports.timer = TimerObservable_1.TimerObservable.create;
  return module.exports;
});

$__System.registerDynamic("5b", ["7", "5a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var timer_1 = $__require('5a');
  Observable_1.Observable.timer = timer_1.timer;
  return module.exports;
});

$__System.registerDynamic("5c", ["5d"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var zip_1 = $__require('5d');
  exports.zip = zip_1.zipStatic;
  return module.exports;
});

$__System.registerDynamic("5e", ["7", "5c"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var zip_1 = $__require('5c');
  Observable_1.Observable.zip = zip_1.zip;
  return module.exports;
});

$__System.registerDynamic("5f", ["20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function buffer(closingNotifier) {
    return this.lift(new BufferOperator(closingNotifier));
  }
  exports.buffer = buffer;
  var BufferOperator = (function() {
    function BufferOperator(closingNotifier) {
      this.closingNotifier = closingNotifier;
    }
    BufferOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
    };
    return BufferOperator;
  }());
  var BufferSubscriber = (function(_super) {
    __extends(BufferSubscriber, _super);
    function BufferSubscriber(destination, closingNotifier) {
      _super.call(this, destination);
      this.buffer = [];
      this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
    }
    BufferSubscriber.prototype._next = function(value) {
      this.buffer.push(value);
    };
    BufferSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      var buffer = this.buffer;
      this.buffer = [];
      this.destination.next(buffer);
    };
    return BufferSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("60", ["7", "5f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var buffer_1 = $__require('5f');
  Observable_1.Observable.prototype.buffer = buffer_1.buffer;
  return module.exports;
});

$__System.registerDynamic("61", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function bufferCount(bufferSize, startBufferEvery) {
    if (startBufferEvery === void 0) {
      startBufferEvery = null;
    }
    return this.lift(new BufferCountOperator(bufferSize, startBufferEvery));
  }
  exports.bufferCount = bufferCount;
  var BufferCountOperator = (function() {
    function BufferCountOperator(bufferSize, startBufferEvery) {
      this.bufferSize = bufferSize;
      this.startBufferEvery = startBufferEvery;
    }
    BufferCountOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));
    };
    return BufferCountOperator;
  }());
  var BufferCountSubscriber = (function(_super) {
    __extends(BufferCountSubscriber, _super);
    function BufferCountSubscriber(destination, bufferSize, startBufferEvery) {
      _super.call(this, destination);
      this.bufferSize = bufferSize;
      this.startBufferEvery = startBufferEvery;
      this.buffers = [[]];
      this.count = 0;
    }
    BufferCountSubscriber.prototype._next = function(value) {
      var count = (this.count += 1);
      var destination = this.destination;
      var bufferSize = this.bufferSize;
      var startBufferEvery = (this.startBufferEvery == null) ? bufferSize : this.startBufferEvery;
      var buffers = this.buffers;
      var len = buffers.length;
      var remove = -1;
      if (count % startBufferEvery === 0) {
        buffers.push([]);
      }
      for (var i = 0; i < len; i++) {
        var buffer = buffers[i];
        buffer.push(value);
        if (buffer.length === bufferSize) {
          remove = i;
          destination.next(buffer);
        }
      }
      if (remove !== -1) {
        buffers.splice(remove, 1);
      }
    };
    BufferCountSubscriber.prototype._complete = function() {
      var destination = this.destination;
      var buffers = this.buffers;
      while (buffers.length > 0) {
        var buffer = buffers.shift();
        if (buffer.length > 0) {
          destination.next(buffer);
        }
      }
      _super.prototype._complete.call(this);
    };
    return BufferCountSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("63", ["7", "61"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var bufferCount_1 = $__require('61');
  Observable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;
  return module.exports;
});

$__System.registerDynamic("64", ["62", "44"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var async_1 = $__require('44');
  function bufferTime(bufferTimeSpan, bufferCreationInterval, scheduler) {
    if (bufferCreationInterval === void 0) {
      bufferCreationInterval = null;
    }
    if (scheduler === void 0) {
      scheduler = async_1.async;
    }
    return this.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, scheduler));
  }
  exports.bufferTime = bufferTime;
  var BufferTimeOperator = (function() {
    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, scheduler) {
      this.bufferTimeSpan = bufferTimeSpan;
      this.bufferCreationInterval = bufferCreationInterval;
      this.scheduler = scheduler;
    }
    BufferTimeOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.scheduler));
    };
    return BufferTimeOperator;
  }());
  var BufferTimeSubscriber = (function(_super) {
    __extends(BufferTimeSubscriber, _super);
    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, scheduler) {
      _super.call(this, destination);
      this.bufferTimeSpan = bufferTimeSpan;
      this.bufferCreationInterval = bufferCreationInterval;
      this.scheduler = scheduler;
      this.buffers = [];
      var buffer = this.openBuffer();
      if (bufferCreationInterval !== null && bufferCreationInterval >= 0) {
        var closeState = {
          subscriber: this,
          buffer: buffer
        };
        var creationState = {
          bufferTimeSpan: bufferTimeSpan,
          bufferCreationInterval: bufferCreationInterval,
          subscriber: this,
          scheduler: scheduler
        };
        this.add(scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
        this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
      } else {
        var timeSpanOnlyState = {
          subscriber: this,
          buffer: buffer,
          bufferTimeSpan: bufferTimeSpan
        };
        this.add(scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
      }
    }
    BufferTimeSubscriber.prototype._next = function(value) {
      var buffers = this.buffers;
      var len = buffers.length;
      for (var i = 0; i < len; i++) {
        buffers[i].push(value);
      }
    };
    BufferTimeSubscriber.prototype._error = function(err) {
      this.buffers.length = 0;
      _super.prototype._error.call(this, err);
    };
    BufferTimeSubscriber.prototype._complete = function() {
      var _a = this,
          buffers = _a.buffers,
          destination = _a.destination;
      while (buffers.length > 0) {
        destination.next(buffers.shift());
      }
      _super.prototype._complete.call(this);
    };
    BufferTimeSubscriber.prototype._unsubscribe = function() {
      this.buffers = null;
    };
    BufferTimeSubscriber.prototype.openBuffer = function() {
      var buffer = [];
      this.buffers.push(buffer);
      return buffer;
    };
    BufferTimeSubscriber.prototype.closeBuffer = function(buffer) {
      this.destination.next(buffer);
      var buffers = this.buffers;
      buffers.splice(buffers.indexOf(buffer), 1);
    };
    return BufferTimeSubscriber;
  }(Subscriber_1.Subscriber));
  function dispatchBufferTimeSpanOnly(state) {
    var subscriber = state.subscriber;
    var prevBuffer = state.buffer;
    if (prevBuffer) {
      subscriber.closeBuffer(prevBuffer);
    }
    state.buffer = subscriber.openBuffer();
    if (!subscriber.isUnsubscribed) {
      this.schedule(state, state.bufferTimeSpan);
    }
  }
  function dispatchBufferCreation(state) {
    var bufferCreationInterval = state.bufferCreationInterval,
        bufferTimeSpan = state.bufferTimeSpan,
        subscriber = state.subscriber,
        scheduler = state.scheduler;
    var buffer = subscriber.openBuffer();
    var action = this;
    if (!subscriber.isUnsubscribed) {
      action.add(scheduler.schedule(dispatchBufferClose, bufferTimeSpan, {
        subscriber: subscriber,
        buffer: buffer
      }));
      action.schedule(state, bufferCreationInterval);
    }
  }
  function dispatchBufferClose(arg) {
    var subscriber = arg.subscriber,
        buffer = arg.buffer;
    subscriber.closeBuffer(buffer);
  }
  return module.exports;
});

$__System.registerDynamic("65", ["7", "64"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var bufferTime_1 = $__require('64');
  Observable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;
  return module.exports;
});

$__System.registerDynamic("66", ["3a", "1f", "20"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscription_1 = $__require('3a');
  var subscribeToResult_1 = $__require('1f');
  var OuterSubscriber_1 = $__require('20');
  function bufferToggle(openings, closingSelector) {
    return this.lift(new BufferToggleOperator(openings, closingSelector));
  }
  exports.bufferToggle = bufferToggle;
  var BufferToggleOperator = (function() {
    function BufferToggleOperator(openings, closingSelector) {
      this.openings = openings;
      this.closingSelector = closingSelector;
    }
    BufferToggleOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return BufferToggleOperator;
  }());
  var BufferToggleSubscriber = (function(_super) {
    __extends(BufferToggleSubscriber, _super);
    function BufferToggleSubscriber(destination, openings, closingSelector) {
      _super.call(this, destination);
      this.openings = openings;
      this.closingSelector = closingSelector;
      this.contexts = [];
      this.add(subscribeToResult_1.subscribeToResult(this, openings));
    }
    BufferToggleSubscriber.prototype._next = function(value) {
      var contexts = this.contexts;
      var len = contexts.length;
      for (var i = 0; i < len; i++) {
        contexts[i].buffer.push(value);
      }
    };
    BufferToggleSubscriber.prototype._error = function(err) {
      var contexts = this.contexts;
      while (contexts.length > 0) {
        var context = contexts.shift();
        context.subscription.unsubscribe();
        context.buffer = null;
        context.subscription = null;
      }
      this.contexts = null;
      _super.prototype._error.call(this, err);
    };
    BufferToggleSubscriber.prototype._complete = function() {
      var contexts = this.contexts;
      while (contexts.length > 0) {
        var context = contexts.shift();
        this.destination.next(context.buffer);
        context.subscription.unsubscribe();
        context.buffer = null;
        context.subscription = null;
      }
      this.contexts = null;
      _super.prototype._complete.call(this);
    };
    BufferToggleSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
    };
    BufferToggleSubscriber.prototype.notifyComplete = function(innerSub) {
      this.closeBuffer(innerSub.context);
    };
    BufferToggleSubscriber.prototype.openBuffer = function(value) {
      try {
        var closingSelector = this.closingSelector;
        var closingNotifier = closingSelector.call(this, value);
        if (closingNotifier) {
          this.trySubscribe(closingNotifier);
        }
      } catch (err) {
        this._error(err);
      }
    };
    BufferToggleSubscriber.prototype.closeBuffer = function(context) {
      var contexts = this.contexts;
      if (contexts && context) {
        var buffer = context.buffer,
            subscription = context.subscription;
        this.destination.next(buffer);
        contexts.splice(contexts.indexOf(context), 1);
        this.remove(subscription);
        subscription.unsubscribe();
      }
    };
    BufferToggleSubscriber.prototype.trySubscribe = function(closingNotifier) {
      var contexts = this.contexts;
      var buffer = [];
      var subscription = new Subscription_1.Subscription();
      var context = {
        buffer: buffer,
        subscription: subscription
      };
      contexts.push(context);
      var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
      if (!innerSubscription || innerSubscription.isUnsubscribed) {
        this.closeBuffer(context);
      } else {
        innerSubscription.context = context;
        this.add(innerSubscription);
        subscription.add(innerSubscription);
      }
    };
    return BufferToggleSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("67", ["7", "66"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var bufferToggle_1 = $__require('66');
  Observable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;
  return module.exports;
});

$__System.registerDynamic("68", ["3a", "11", "12", "20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscription_1 = $__require('3a');
  var tryCatch_1 = $__require('11');
  var errorObject_1 = $__require('12');
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function bufferWhen(closingSelector) {
    return this.lift(new BufferWhenOperator(closingSelector));
  }
  exports.bufferWhen = bufferWhen;
  var BufferWhenOperator = (function() {
    function BufferWhenOperator(closingSelector) {
      this.closingSelector = closingSelector;
    }
    BufferWhenOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
    };
    return BufferWhenOperator;
  }());
  var BufferWhenSubscriber = (function(_super) {
    __extends(BufferWhenSubscriber, _super);
    function BufferWhenSubscriber(destination, closingSelector) {
      _super.call(this, destination);
      this.closingSelector = closingSelector;
      this.subscribing = false;
      this.openBuffer();
    }
    BufferWhenSubscriber.prototype._next = function(value) {
      this.buffer.push(value);
    };
    BufferWhenSubscriber.prototype._complete = function() {
      var buffer = this.buffer;
      if (buffer) {
        this.destination.next(buffer);
      }
      _super.prototype._complete.call(this);
    };
    BufferWhenSubscriber.prototype._unsubscribe = function() {
      this.buffer = null;
      this.subscribing = false;
    };
    BufferWhenSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.openBuffer();
    };
    BufferWhenSubscriber.prototype.notifyComplete = function() {
      if (this.subscribing) {
        this.complete();
      } else {
        this.openBuffer();
      }
    };
    BufferWhenSubscriber.prototype.openBuffer = function() {
      var closingSubscription = this.closingSubscription;
      if (closingSubscription) {
        this.remove(closingSubscription);
        closingSubscription.unsubscribe();
      }
      var buffer = this.buffer;
      if (this.buffer) {
        this.destination.next(buffer);
      }
      this.buffer = [];
      var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
      if (closingNotifier === errorObject_1.errorObject) {
        this.error(errorObject_1.errorObject.e);
      } else {
        closingSubscription = new Subscription_1.Subscription();
        this.closingSubscription = closingSubscription;
        this.add(closingSubscription);
        this.subscribing = true;
        closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
        this.subscribing = false;
      }
    };
    return BufferWhenSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("69", ["7", "68"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var bufferWhen_1 = $__require('68');
  Observable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;
  return module.exports;
});

$__System.registerDynamic("6a", ["6b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var publishReplay_1 = $__require('6b');
  function cache(bufferSize, windowTime, scheduler) {
    if (bufferSize === void 0) {
      bufferSize = Number.POSITIVE_INFINITY;
    }
    if (windowTime === void 0) {
      windowTime = Number.POSITIVE_INFINITY;
    }
    return publishReplay_1.publishReplay.call(this, bufferSize, windowTime, scheduler).refCount();
  }
  exports.cache = cache;
  return module.exports;
});

$__System.registerDynamic("6c", ["7", "6a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var cache_1 = $__require('6a');
  Observable_1.Observable.prototype.cache = cache_1.cache;
  return module.exports;
});

$__System.registerDynamic("6d", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function _catch(selector) {
    var operator = new CatchOperator(selector);
    var caught = this.lift(operator);
    return (operator.caught = caught);
  }
  exports._catch = _catch;
  var CatchOperator = (function() {
    function CatchOperator(selector) {
      this.selector = selector;
    }
    CatchOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    };
    return CatchOperator;
  }());
  var CatchSubscriber = (function(_super) {
    __extends(CatchSubscriber, _super);
    function CatchSubscriber(destination, selector, caught) {
      _super.call(this, destination);
      this.selector = selector;
      this.caught = caught;
    }
    CatchSubscriber.prototype.error = function(err) {
      if (!this.isStopped) {
        var result = void 0;
        try {
          result = this.selector(err, this.caught);
        } catch (err) {
          this.destination.error(err);
          return;
        }
        this._innerSub(result);
      }
    };
    CatchSubscriber.prototype._innerSub = function(result) {
      this.unsubscribe();
      this.destination.remove(this);
      result.subscribe(this.destination);
    };
    return CatchSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("6e", ["7", "6d"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var catch_1 = $__require('6d');
  Observable_1.Observable.prototype.catch = catch_1._catch;
  return module.exports;
});

$__System.registerDynamic("6f", ["1a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var combineLatest_1 = $__require('1a');
  function combineAll(project) {
    return this.lift(new combineLatest_1.CombineLatestOperator(project));
  }
  exports.combineAll = combineAll;
  return module.exports;
});

$__System.registerDynamic("70", ["7", "6f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var combineAll_1 = $__require('6f');
  Observable_1.Observable.prototype.combineAll = combineAll_1.combineAll;
  return module.exports;
});

$__System.registerDynamic("1a", ["34", "27", "33", "20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ArrayObservable_1 = $__require('34');
  var isArray_1 = $__require('27');
  var isScheduler_1 = $__require('33');
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      observables[_i - 0] = arguments[_i];
    }
    var project = null;
    if (typeof observables[observables.length - 1] === 'function') {
      project = observables.pop();
    }
    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
      observables = observables[0];
    }
    observables.unshift(this);
    return new ArrayObservable_1.ArrayObservable(observables).lift(new CombineLatestOperator(project));
  }
  exports.combineLatest = combineLatest;
  function combineLatestStatic() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      observables[_i - 0] = arguments[_i];
    }
    var project = null;
    var scheduler = null;
    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {
      scheduler = observables.pop();
    }
    if (typeof observables[observables.length - 1] === 'function') {
      project = observables.pop();
    }
    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
      observables = observables[0];
    }
    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new CombineLatestOperator(project));
  }
  exports.combineLatestStatic = combineLatestStatic;
  var CombineLatestOperator = (function() {
    function CombineLatestOperator(project) {
      this.project = project;
    }
    CombineLatestOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));
    };
    return CombineLatestOperator;
  }());
  exports.CombineLatestOperator = CombineLatestOperator;
  var CombineLatestSubscriber = (function(_super) {
    __extends(CombineLatestSubscriber, _super);
    function CombineLatestSubscriber(destination, project) {
      _super.call(this, destination);
      this.project = project;
      this.active = 0;
      this.values = [];
      this.observables = [];
      this.toRespond = [];
    }
    CombineLatestSubscriber.prototype._next = function(observable) {
      var toRespond = this.toRespond;
      toRespond.push(toRespond.length);
      this.observables.push(observable);
    };
    CombineLatestSubscriber.prototype._complete = function() {
      var observables = this.observables;
      var len = observables.length;
      if (len === 0) {
        this.destination.complete();
      } else {
        this.active = len;
        for (var i = 0; i < len; i++) {
          var observable = observables[i];
          this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
        }
      }
    };
    CombineLatestSubscriber.prototype.notifyComplete = function(unused) {
      if ((this.active -= 1) === 0) {
        this.destination.complete();
      }
    };
    CombineLatestSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      var values = this.values;
      values[outerIndex] = innerValue;
      var toRespond = this.toRespond;
      if (toRespond.length > 0) {
        var found = toRespond.indexOf(outerIndex);
        if (found !== -1) {
          toRespond.splice(found, 1);
        }
      }
      if (toRespond.length === 0) {
        if (this.project) {
          this._tryProject(values);
        } else {
          this.destination.next(values);
        }
      }
    };
    CombineLatestSubscriber.prototype._tryProject = function(values) {
      var result;
      try {
        result = this.project.apply(this, values);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this.destination.next(result);
    };
    return CombineLatestSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  exports.CombineLatestSubscriber = CombineLatestSubscriber;
  return module.exports;
});

$__System.registerDynamic("71", ["7", "1a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var combineLatest_1 = $__require('1a');
  Observable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;
  return module.exports;
});

$__System.registerDynamic("72", ["7", "1c"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var concat_1 = $__require('1c');
  Observable_1.Observable.prototype.concat = concat_1.concat;
  return module.exports;
});

$__System.registerDynamic("73", ["74"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var mergeAll_1 = $__require('74');
  function concatAll() {
    return this.lift(new mergeAll_1.MergeAllOperator(1));
  }
  exports.concatAll = concatAll;
  return module.exports;
});

$__System.registerDynamic("75", ["7", "73"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var concatAll_1 = $__require('73');
  Observable_1.Observable.prototype.concatAll = concatAll_1.concatAll;
  return module.exports;
});

$__System.registerDynamic("76", ["77"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var mergeMap_1 = $__require('77');
  function concatMap(project, resultSelector) {
    return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));
  }
  exports.concatMap = concatMap;
  return module.exports;
});

$__System.registerDynamic("78", ["7", "76"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var concatMap_1 = $__require('76');
  Observable_1.Observable.prototype.concatMap = concatMap_1.concatMap;
  return module.exports;
});

$__System.registerDynamic("79", ["7a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var mergeMapTo_1 = $__require('7a');
  function concatMapTo(innerObservable, resultSelector) {
    return this.lift(new mergeMapTo_1.MergeMapToOperator(innerObservable, resultSelector, 1));
  }
  exports.concatMapTo = concatMapTo;
  return module.exports;
});

$__System.registerDynamic("7b", ["7", "79"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var concatMapTo_1 = $__require('79');
  Observable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;
  return module.exports;
});

$__System.registerDynamic("7c", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function count(predicate) {
    return this.lift(new CountOperator(predicate, this));
  }
  exports.count = count;
  var CountOperator = (function() {
    function CountOperator(predicate, source) {
      this.predicate = predicate;
      this.source = source;
    }
    CountOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
    };
    return CountOperator;
  }());
  var CountSubscriber = (function(_super) {
    __extends(CountSubscriber, _super);
    function CountSubscriber(destination, predicate, source) {
      _super.call(this, destination);
      this.predicate = predicate;
      this.source = source;
      this.count = 0;
      this.index = 0;
    }
    CountSubscriber.prototype._next = function(value) {
      if (this.predicate) {
        this._tryPredicate(value);
      } else {
        this.count++;
      }
    };
    CountSubscriber.prototype._tryPredicate = function(value) {
      var result;
      try {
        result = this.predicate(value, this.index++, this.source);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      if (result) {
        this.count++;
      }
    };
    CountSubscriber.prototype._complete = function() {
      this.destination.next(this.count);
      this.destination.complete();
    };
    return CountSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("7d", ["7", "7c"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var count_1 = $__require('7c');
  Observable_1.Observable.prototype.count = count_1.count;
  return module.exports;
});

$__System.registerDynamic("7e", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function dematerialize() {
    return this.lift(new DeMaterializeOperator());
  }
  exports.dematerialize = dematerialize;
  var DeMaterializeOperator = (function() {
    function DeMaterializeOperator() {}
    DeMaterializeOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new DeMaterializeSubscriber(subscriber));
    };
    return DeMaterializeOperator;
  }());
  var DeMaterializeSubscriber = (function(_super) {
    __extends(DeMaterializeSubscriber, _super);
    function DeMaterializeSubscriber(destination) {
      _super.call(this, destination);
    }
    DeMaterializeSubscriber.prototype._next = function(value) {
      value.observe(this.destination);
    };
    return DeMaterializeSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("7f", ["7", "7e"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var dematerialize_1 = $__require('7e');
  Observable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;
  return module.exports;
});

$__System.registerDynamic("80", ["20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function debounce(durationSelector) {
    return this.lift(new DebounceOperator(durationSelector));
  }
  exports.debounce = debounce;
  var DebounceOperator = (function() {
    function DebounceOperator(durationSelector) {
      this.durationSelector = durationSelector;
    }
    DebounceOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
    };
    return DebounceOperator;
  }());
  var DebounceSubscriber = (function(_super) {
    __extends(DebounceSubscriber, _super);
    function DebounceSubscriber(destination, durationSelector) {
      _super.call(this, destination);
      this.durationSelector = durationSelector;
      this.hasValue = false;
      this.durationSubscription = null;
    }
    DebounceSubscriber.prototype._next = function(value) {
      try {
        var result = this.durationSelector.call(this, value);
        if (result) {
          this._tryNext(value, result);
        }
      } catch (err) {
        this.destination.error(err);
      }
    };
    DebounceSubscriber.prototype._complete = function() {
      this.emitValue();
      this.destination.complete();
    };
    DebounceSubscriber.prototype._tryNext = function(value, duration) {
      var subscription = this.durationSubscription;
      this.value = value;
      this.hasValue = true;
      if (subscription) {
        subscription.unsubscribe();
        this.remove(subscription);
      }
      subscription = subscribeToResult_1.subscribeToResult(this, duration);
      if (!subscription.isUnsubscribed) {
        this.add(this.durationSubscription = subscription);
      }
    };
    DebounceSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.emitValue();
    };
    DebounceSubscriber.prototype.notifyComplete = function() {
      this.emitValue();
    };
    DebounceSubscriber.prototype.emitValue = function() {
      if (this.hasValue) {
        var value = this.value;
        var subscription = this.durationSubscription;
        if (subscription) {
          this.durationSubscription = null;
          subscription.unsubscribe();
          this.remove(subscription);
        }
        this.value = null;
        this.hasValue = false;
        _super.prototype._next.call(this, value);
      }
    };
    return DebounceSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("81", ["7", "80"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var debounce_1 = $__require('80');
  Observable_1.Observable.prototype.debounce = debounce_1.debounce;
  return module.exports;
});

$__System.registerDynamic("82", ["62", "44"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var async_1 = $__require('44');
  function debounceTime(dueTime, scheduler) {
    if (scheduler === void 0) {
      scheduler = async_1.async;
    }
    return this.lift(new DebounceTimeOperator(dueTime, scheduler));
  }
  exports.debounceTime = debounceTime;
  var DebounceTimeOperator = (function() {
    function DebounceTimeOperator(dueTime, scheduler) {
      this.dueTime = dueTime;
      this.scheduler = scheduler;
    }
    DebounceTimeOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
    };
    return DebounceTimeOperator;
  }());
  var DebounceTimeSubscriber = (function(_super) {
    __extends(DebounceTimeSubscriber, _super);
    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
      _super.call(this, destination);
      this.dueTime = dueTime;
      this.scheduler = scheduler;
      this.debouncedSubscription = null;
      this.lastValue = null;
      this.hasValue = false;
    }
    DebounceTimeSubscriber.prototype._next = function(value) {
      this.clearDebounce();
      this.lastValue = value;
      this.hasValue = true;
      this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
    };
    DebounceTimeSubscriber.prototype._complete = function() {
      this.debouncedNext();
      this.destination.complete();
    };
    DebounceTimeSubscriber.prototype.debouncedNext = function() {
      this.clearDebounce();
      if (this.hasValue) {
        this.destination.next(this.lastValue);
        this.lastValue = null;
        this.hasValue = false;
      }
    };
    DebounceTimeSubscriber.prototype.clearDebounce = function() {
      var debouncedSubscription = this.debouncedSubscription;
      if (debouncedSubscription !== null) {
        this.remove(debouncedSubscription);
        debouncedSubscription.unsubscribe();
        this.debouncedSubscription = null;
      }
    };
    return DebounceTimeSubscriber;
  }(Subscriber_1.Subscriber));
  function dispatchNext(subscriber) {
    subscriber.debouncedNext();
  }
  return module.exports;
});

$__System.registerDynamic("83", ["7", "82"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var debounceTime_1 = $__require('82');
  Observable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;
  return module.exports;
});

$__System.registerDynamic("84", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function defaultIfEmpty(defaultValue) {
    if (defaultValue === void 0) {
      defaultValue = null;
    }
    return this.lift(new DefaultIfEmptyOperator(defaultValue));
  }
  exports.defaultIfEmpty = defaultIfEmpty;
  var DefaultIfEmptyOperator = (function() {
    function DefaultIfEmptyOperator(defaultValue) {
      this.defaultValue = defaultValue;
    }
    DefaultIfEmptyOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
    };
    return DefaultIfEmptyOperator;
  }());
  var DefaultIfEmptySubscriber = (function(_super) {
    __extends(DefaultIfEmptySubscriber, _super);
    function DefaultIfEmptySubscriber(destination, defaultValue) {
      _super.call(this, destination);
      this.defaultValue = defaultValue;
      this.isEmpty = true;
    }
    DefaultIfEmptySubscriber.prototype._next = function(value) {
      this.isEmpty = false;
      this.destination.next(value);
    };
    DefaultIfEmptySubscriber.prototype._complete = function() {
      if (this.isEmpty) {
        this.destination.next(this.defaultValue);
      }
      this.destination.complete();
    };
    return DefaultIfEmptySubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("85", ["7", "84"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var defaultIfEmpty_1 = $__require('84');
  Observable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;
  return module.exports;
});

$__System.registerDynamic("86", ["44", "59", "62", "87"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var async_1 = $__require('44');
  var isDate_1 = $__require('59');
  var Subscriber_1 = $__require('62');
  var Notification_1 = $__require('87');
  function delay(delay, scheduler) {
    if (scheduler === void 0) {
      scheduler = async_1.async;
    }
    var absoluteDelay = isDate_1.isDate(delay);
    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);
    return this.lift(new DelayOperator(delayFor, scheduler));
  }
  exports.delay = delay;
  var DelayOperator = (function() {
    function DelayOperator(delay, scheduler) {
      this.delay = delay;
      this.scheduler = scheduler;
    }
    DelayOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
    };
    return DelayOperator;
  }());
  var DelaySubscriber = (function(_super) {
    __extends(DelaySubscriber, _super);
    function DelaySubscriber(destination, delay, scheduler) {
      _super.call(this, destination);
      this.delay = delay;
      this.scheduler = scheduler;
      this.queue = [];
      this.active = false;
      this.errored = false;
    }
    DelaySubscriber.dispatch = function(state) {
      var source = state.source;
      var queue = source.queue;
      var scheduler = state.scheduler;
      var destination = state.destination;
      while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
        queue.shift().notification.observe(destination);
      }
      if (queue.length > 0) {
        var delay_1 = Math.max(0, queue[0].time - scheduler.now());
        this.schedule(state, delay_1);
      } else {
        source.active = false;
      }
    };
    DelaySubscriber.prototype._schedule = function(scheduler) {
      this.active = true;
      this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
        source: this,
        destination: this.destination,
        scheduler: scheduler
      }));
    };
    DelaySubscriber.prototype.scheduleNotification = function(notification) {
      if (this.errored === true) {
        return;
      }
      var scheduler = this.scheduler;
      var message = new DelayMessage(scheduler.now() + this.delay, notification);
      this.queue.push(message);
      if (this.active === false) {
        this._schedule(scheduler);
      }
    };
    DelaySubscriber.prototype._next = function(value) {
      this.scheduleNotification(Notification_1.Notification.createNext(value));
    };
    DelaySubscriber.prototype._error = function(err) {
      this.errored = true;
      this.queue = [];
      this.destination.error(err);
    };
    DelaySubscriber.prototype._complete = function() {
      this.scheduleNotification(Notification_1.Notification.createComplete());
    };
    return DelaySubscriber;
  }(Subscriber_1.Subscriber));
  var DelayMessage = (function() {
    function DelayMessage(time, notification) {
      this.time = time;
      this.notification = notification;
    }
    return DelayMessage;
  }());
  return module.exports;
});

$__System.registerDynamic("88", ["7", "86"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var delay_1 = $__require('86');
  Observable_1.Observable.prototype.delay = delay_1.delay;
  return module.exports;
});

$__System.registerDynamic("89", ["62", "7", "20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var Observable_1 = $__require('7');
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function delayWhen(delayDurationSelector, subscriptionDelay) {
    if (subscriptionDelay) {
      return new SubscriptionDelayObservable(this, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));
    }
    return this.lift(new DelayWhenOperator(delayDurationSelector));
  }
  exports.delayWhen = delayWhen;
  var DelayWhenOperator = (function() {
    function DelayWhenOperator(delayDurationSelector) {
      this.delayDurationSelector = delayDurationSelector;
    }
    DelayWhenOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
    };
    return DelayWhenOperator;
  }());
  var DelayWhenSubscriber = (function(_super) {
    __extends(DelayWhenSubscriber, _super);
    function DelayWhenSubscriber(destination, delayDurationSelector) {
      _super.call(this, destination);
      this.delayDurationSelector = delayDurationSelector;
      this.completed = false;
      this.delayNotifierSubscriptions = [];
      this.values = [];
    }
    DelayWhenSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.destination.next(outerValue);
      this.removeSubscription(innerSub);
      this.tryComplete();
    };
    DelayWhenSubscriber.prototype.notifyError = function(error, innerSub) {
      this._error(error);
    };
    DelayWhenSubscriber.prototype.notifyComplete = function(innerSub) {
      var value = this.removeSubscription(innerSub);
      if (value) {
        this.destination.next(value);
      }
      this.tryComplete();
    };
    DelayWhenSubscriber.prototype._next = function(value) {
      try {
        var delayNotifier = this.delayDurationSelector(value);
        if (delayNotifier) {
          this.tryDelay(delayNotifier, value);
        }
      } catch (err) {
        this.destination.error(err);
      }
    };
    DelayWhenSubscriber.prototype._complete = function() {
      this.completed = true;
      this.tryComplete();
    };
    DelayWhenSubscriber.prototype.removeSubscription = function(subscription) {
      subscription.unsubscribe();
      var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
      var value = null;
      if (subscriptionIdx !== -1) {
        value = this.values[subscriptionIdx];
        this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
        this.values.splice(subscriptionIdx, 1);
      }
      return value;
    };
    DelayWhenSubscriber.prototype.tryDelay = function(delayNotifier, value) {
      var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);
      this.add(notifierSubscription);
      this.delayNotifierSubscriptions.push(notifierSubscription);
      this.values.push(value);
    };
    DelayWhenSubscriber.prototype.tryComplete = function() {
      if (this.completed && this.delayNotifierSubscriptions.length === 0) {
        this.destination.complete();
      }
    };
    return DelayWhenSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  var SubscriptionDelayObservable = (function(_super) {
    __extends(SubscriptionDelayObservable, _super);
    function SubscriptionDelayObservable(source, subscriptionDelay) {
      _super.call(this);
      this.source = source;
      this.subscriptionDelay = subscriptionDelay;
    }
    SubscriptionDelayObservable.prototype._subscribe = function(subscriber) {
      this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
    };
    return SubscriptionDelayObservable;
  }(Observable_1.Observable));
  var SubscriptionDelaySubscriber = (function(_super) {
    __extends(SubscriptionDelaySubscriber, _super);
    function SubscriptionDelaySubscriber(parent, source) {
      _super.call(this);
      this.parent = parent;
      this.source = source;
      this.sourceSubscribed = false;
    }
    SubscriptionDelaySubscriber.prototype._next = function(unused) {
      this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype._error = function(err) {
      this.unsubscribe();
      this.parent.error(err);
    };
    SubscriptionDelaySubscriber.prototype._complete = function() {
      this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype.subscribeToSource = function() {
      if (!this.sourceSubscribed) {
        this.sourceSubscribed = true;
        this.unsubscribe();
        this.source.subscribe(this.parent);
      }
    };
    return SubscriptionDelaySubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("8a", ["7", "89"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var delayWhen_1 = $__require('89');
  Observable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;
  return module.exports;
});

$__System.registerDynamic("8b", ["62", "11", "12"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var tryCatch_1 = $__require('11');
  var errorObject_1 = $__require('12');
  function distinctUntilChanged(compare, keySelector) {
    return this.lift(new DistinctUntilChangedOperator(compare, keySelector));
  }
  exports.distinctUntilChanged = distinctUntilChanged;
  var DistinctUntilChangedOperator = (function() {
    function DistinctUntilChangedOperator(compare, keySelector) {
      this.compare = compare;
      this.keySelector = keySelector;
    }
    DistinctUntilChangedOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
    };
    return DistinctUntilChangedOperator;
  }());
  var DistinctUntilChangedSubscriber = (function(_super) {
    __extends(DistinctUntilChangedSubscriber, _super);
    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
      _super.call(this, destination);
      this.keySelector = keySelector;
      this.hasKey = false;
      if (typeof compare === 'function') {
        this.compare = compare;
      }
    }
    DistinctUntilChangedSubscriber.prototype.compare = function(x, y) {
      return x === y;
    };
    DistinctUntilChangedSubscriber.prototype._next = function(value) {
      var keySelector = this.keySelector;
      var key = value;
      if (keySelector) {
        key = tryCatch_1.tryCatch(this.keySelector)(value);
        if (key === errorObject_1.errorObject) {
          return this.destination.error(errorObject_1.errorObject.e);
        }
      }
      var result = false;
      if (this.hasKey) {
        result = tryCatch_1.tryCatch(this.compare)(this.key, key);
        if (result === errorObject_1.errorObject) {
          return this.destination.error(errorObject_1.errorObject.e);
        }
      } else {
        this.hasKey = true;
      }
      if (Boolean(result) === false) {
        this.key = key;
        this.destination.next(value);
      }
    };
    return DistinctUntilChangedSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("8c", ["7", "8b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var distinctUntilChanged_1 = $__require('8b');
  Observable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
  return module.exports;
});

$__System.registerDynamic("8d", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function _do(nextOrObserver, error, complete) {
    return this.lift(new DoOperator(nextOrObserver, error, complete));
  }
  exports._do = _do;
  var DoOperator = (function() {
    function DoOperator(nextOrObserver, error, complete) {
      this.nextOrObserver = nextOrObserver;
      this.error = error;
      this.complete = complete;
    }
    DoOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
    };
    return DoOperator;
  }());
  var DoSubscriber = (function(_super) {
    __extends(DoSubscriber, _super);
    function DoSubscriber(destination, nextOrObserver, error, complete) {
      _super.call(this, destination);
      var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
      safeSubscriber.syncErrorThrowable = true;
      this.add(safeSubscriber);
      this.safeSubscriber = safeSubscriber;
    }
    DoSubscriber.prototype._next = function(value) {
      var safeSubscriber = this.safeSubscriber;
      safeSubscriber.next(value);
      if (safeSubscriber.syncErrorThrown) {
        this.destination.error(safeSubscriber.syncErrorValue);
      } else {
        this.destination.next(value);
      }
    };
    DoSubscriber.prototype._error = function(err) {
      var safeSubscriber = this.safeSubscriber;
      safeSubscriber.error(err);
      if (safeSubscriber.syncErrorThrown) {
        this.destination.error(safeSubscriber.syncErrorValue);
      } else {
        this.destination.error(err);
      }
    };
    DoSubscriber.prototype._complete = function() {
      var safeSubscriber = this.safeSubscriber;
      safeSubscriber.complete();
      if (safeSubscriber.syncErrorThrown) {
        this.destination.error(safeSubscriber.syncErrorValue);
      } else {
        this.destination.complete();
      }
    };
    return DoSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("8e", ["7", "8d"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var do_1 = $__require('8d');
  Observable_1.Observable.prototype.do = do_1._do;
  return module.exports;
});

$__System.registerDynamic("8f", ["11", "12", "20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var tryCatch_1 = $__require('11');
  var errorObject_1 = $__require('12');
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function expand(project, concurrent, scheduler) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }
    if (scheduler === void 0) {
      scheduler = undefined;
    }
    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
    return this.lift(new ExpandOperator(project, concurrent, scheduler));
  }
  exports.expand = expand;
  var ExpandOperator = (function() {
    function ExpandOperator(project, concurrent, scheduler) {
      this.project = project;
      this.concurrent = concurrent;
      this.scheduler = scheduler;
    }
    ExpandOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
    };
    return ExpandOperator;
  }());
  exports.ExpandOperator = ExpandOperator;
  var ExpandSubscriber = (function(_super) {
    __extends(ExpandSubscriber, _super);
    function ExpandSubscriber(destination, project, concurrent, scheduler) {
      _super.call(this, destination);
      this.project = project;
      this.concurrent = concurrent;
      this.scheduler = scheduler;
      this.index = 0;
      this.active = 0;
      this.hasCompleted = false;
      if (concurrent < Number.POSITIVE_INFINITY) {
        this.buffer = [];
      }
    }
    ExpandSubscriber.dispatch = function(arg) {
      var subscriber = arg.subscriber,
          result = arg.result,
          value = arg.value,
          index = arg.index;
      subscriber.subscribeToProjection(result, value, index);
    };
    ExpandSubscriber.prototype._next = function(value) {
      var destination = this.destination;
      if (destination.isUnsubscribed) {
        this._complete();
        return;
      }
      var index = this.index++;
      if (this.active < this.concurrent) {
        destination.next(value);
        var result = tryCatch_1.tryCatch(this.project)(value, index);
        if (result === errorObject_1.errorObject) {
          destination.error(errorObject_1.errorObject.e);
        } else if (!this.scheduler) {
          this.subscribeToProjection(result, value, index);
        } else {
          var state = {
            subscriber: this,
            result: result,
            value: value,
            index: index
          };
          this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
        }
      } else {
        this.buffer.push(value);
      }
    };
    ExpandSubscriber.prototype.subscribeToProjection = function(result, value, index) {
      this.active++;
      this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
    };
    ExpandSubscriber.prototype._complete = function() {
      this.hasCompleted = true;
      if (this.hasCompleted && this.active === 0) {
        this.destination.complete();
      }
    };
    ExpandSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this._next(innerValue);
    };
    ExpandSubscriber.prototype.notifyComplete = function(innerSub) {
      var buffer = this.buffer;
      this.remove(innerSub);
      this.active--;
      if (buffer && buffer.length > 0) {
        this._next(buffer.shift());
      }
      if (this.hasCompleted && this.active === 0) {
        this.destination.complete();
      }
    };
    return ExpandSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  exports.ExpandSubscriber = ExpandSubscriber;
  return module.exports;
});

$__System.registerDynamic("90", ["7", "8f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var expand_1 = $__require('8f');
  Observable_1.Observable.prototype.expand = expand_1.expand;
  return module.exports;
});

$__System.registerDynamic("91", ["7", "92"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var filter_1 = $__require('92');
  Observable_1.Observable.prototype.filter = filter_1.filter;
  return module.exports;
});

$__System.registerDynamic("93", ["62", "3a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var Subscription_1 = $__require('3a');
  function _finally(finallySelector) {
    return this.lift(new FinallyOperator(finallySelector));
  }
  exports._finally = _finally;
  var FinallyOperator = (function() {
    function FinallyOperator(finallySelector) {
      this.finallySelector = finallySelector;
    }
    FinallyOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new FinallySubscriber(subscriber, this.finallySelector));
    };
    return FinallyOperator;
  }());
  var FinallySubscriber = (function(_super) {
    __extends(FinallySubscriber, _super);
    function FinallySubscriber(destination, finallySelector) {
      _super.call(this, destination);
      this.add(new Subscription_1.Subscription(finallySelector));
    }
    return FinallySubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("94", ["7", "93"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var finally_1 = $__require('93');
  Observable_1.Observable.prototype.finally = finally_1._finally;
  return module.exports;
});

$__System.registerDynamic("95", ["62", "96"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var EmptyError_1 = $__require('96');
  function first(predicate, resultSelector, defaultValue) {
    return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
  }
  exports.first = first;
  var FirstOperator = (function() {
    function FirstOperator(predicate, resultSelector, defaultValue, source) {
      this.predicate = predicate;
      this.resultSelector = resultSelector;
      this.defaultValue = defaultValue;
      this.source = source;
    }
    FirstOperator.prototype.call = function(observer, source) {
      return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
    };
    return FirstOperator;
  }());
  var FirstSubscriber = (function(_super) {
    __extends(FirstSubscriber, _super);
    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
      _super.call(this, destination);
      this.predicate = predicate;
      this.resultSelector = resultSelector;
      this.defaultValue = defaultValue;
      this.source = source;
      this.index = 0;
      this.hasCompleted = false;
    }
    FirstSubscriber.prototype._next = function(value) {
      var index = this.index++;
      if (this.predicate) {
        this._tryPredicate(value, index);
      } else {
        this._emit(value, index);
      }
    };
    FirstSubscriber.prototype._tryPredicate = function(value, index) {
      var result;
      try {
        result = this.predicate(value, index, this.source);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      if (result) {
        this._emit(value, index);
      }
    };
    FirstSubscriber.prototype._emit = function(value, index) {
      if (this.resultSelector) {
        this._tryResultSelector(value, index);
        return;
      }
      this._emitFinal(value);
    };
    FirstSubscriber.prototype._tryResultSelector = function(value, index) {
      var result;
      try {
        result = this.resultSelector(value, index);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this._emitFinal(result);
    };
    FirstSubscriber.prototype._emitFinal = function(value) {
      var destination = this.destination;
      destination.next(value);
      destination.complete();
      this.hasCompleted = true;
    };
    FirstSubscriber.prototype._complete = function() {
      var destination = this.destination;
      if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
        destination.next(this.defaultValue);
        destination.complete();
      } else if (!this.hasCompleted) {
        destination.error(new EmptyError_1.EmptyError);
      }
    };
    return FirstSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("97", ["7", "95"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var first_1 = $__require('95');
  Observable_1.Observable.prototype.first = first_1.first;
  return module.exports;
});

$__System.registerDynamic("98", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var MapPolyfill = (function() {
    function MapPolyfill() {
      this.size = 0;
      this._values = [];
      this._keys = [];
    }
    MapPolyfill.prototype.get = function(key) {
      var i = this._keys.indexOf(key);
      return i === -1 ? undefined : this._values[i];
    };
    MapPolyfill.prototype.set = function(key, value) {
      var i = this._keys.indexOf(key);
      if (i === -1) {
        this._keys.push(key);
        this._values.push(value);
        this.size++;
      } else {
        this._values[i] = value;
      }
      return this;
    };
    MapPolyfill.prototype.delete = function(key) {
      var i = this._keys.indexOf(key);
      if (i === -1) {
        return false;
      }
      this._values.splice(i, 1);
      this._keys.splice(i, 1);
      this.size--;
      return true;
    };
    MapPolyfill.prototype.clear = function() {
      this._keys.length = 0;
      this._values.length = 0;
      this.size = 0;
    };
    MapPolyfill.prototype.forEach = function(cb, thisArg) {
      for (var i = 0; i < this.size; i++) {
        cb.call(thisArg, this._values[i], this._keys[i]);
      }
    };
    return MapPolyfill;
  }());
  exports.MapPolyfill = MapPolyfill;
  return module.exports;
});

$__System.registerDynamic("99", ["2b", "98"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var root_1 = $__require('2b');
  var MapPolyfill_1 = $__require('98');
  exports.Map = root_1.root.Map || (function() {
    return MapPolyfill_1.MapPolyfill;
  })();
  return module.exports;
});

$__System.registerDynamic("9a", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var FastMap = (function() {
    function FastMap() {
      this.values = {};
    }
    FastMap.prototype.delete = function(key) {
      this.values[key] = null;
      return true;
    };
    FastMap.prototype.set = function(key, value) {
      this.values[key] = value;
      return this;
    };
    FastMap.prototype.get = function(key) {
      return this.values[key];
    };
    FastMap.prototype.forEach = function(cb, thisArg) {
      var values = this.values;
      for (var key in values) {
        if (values.hasOwnProperty(key) && values[key] !== null) {
          cb.call(thisArg, values[key], key);
        }
      }
    };
    FastMap.prototype.clear = function() {
      this.values = {};
    };
    return FastMap;
  }());
  exports.FastMap = FastMap;
  return module.exports;
});

$__System.registerDynamic("9b", ["62", "3a", "7", "4", "99", "9a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var Subscription_1 = $__require('3a');
  var Observable_1 = $__require('7');
  var Subject_1 = $__require('4');
  var Map_1 = $__require('99');
  var FastMap_1 = $__require('9a');
  function groupBy(keySelector, elementSelector, durationSelector) {
    return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));
  }
  exports.groupBy = groupBy;
  var GroupByOperator = (function() {
    function GroupByOperator(source, keySelector, elementSelector, durationSelector) {
      this.source = source;
      this.keySelector = keySelector;
      this.elementSelector = elementSelector;
      this.durationSelector = durationSelector;
    }
    GroupByOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector));
    };
    return GroupByOperator;
  }());
  var GroupBySubscriber = (function(_super) {
    __extends(GroupBySubscriber, _super);
    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector) {
      _super.call(this);
      this.keySelector = keySelector;
      this.elementSelector = elementSelector;
      this.durationSelector = durationSelector;
      this.groups = null;
      this.attemptedToUnsubscribe = false;
      this.count = 0;
      this.destination = destination;
      this.add(destination);
    }
    GroupBySubscriber.prototype._next = function(value) {
      var key;
      try {
        key = this.keySelector(value);
      } catch (err) {
        this.error(err);
        return;
      }
      this._group(value, key);
    };
    GroupBySubscriber.prototype._group = function(value, key) {
      var groups = this.groups;
      if (!groups) {
        groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();
      }
      var group = groups.get(key);
      if (!group) {
        groups.set(key, group = new Subject_1.Subject());
        var groupedObservable = new GroupedObservable(key, group, this);
        if (this.durationSelector) {
          this._selectDuration(key, group);
        }
        this.destination.next(groupedObservable);
      }
      if (this.elementSelector) {
        this._selectElement(value, group);
      } else {
        this.tryGroupNext(value, group);
      }
    };
    GroupBySubscriber.prototype._selectElement = function(value, group) {
      var result;
      try {
        result = this.elementSelector(value);
      } catch (err) {
        this.error(err);
        return;
      }
      this.tryGroupNext(result, group);
    };
    GroupBySubscriber.prototype._selectDuration = function(key, group) {
      var duration;
      try {
        duration = this.durationSelector(new GroupedObservable(key, group));
      } catch (err) {
        this.error(err);
        return;
      }
      this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
    };
    GroupBySubscriber.prototype.tryGroupNext = function(value, group) {
      if (!group.isUnsubscribed) {
        group.next(value);
      }
    };
    GroupBySubscriber.prototype._error = function(err) {
      var groups = this.groups;
      if (groups) {
        groups.forEach(function(group, key) {
          group.error(err);
        });
        groups.clear();
      }
      this.destination.error(err);
    };
    GroupBySubscriber.prototype._complete = function() {
      var groups = this.groups;
      if (groups) {
        groups.forEach(function(group, key) {
          group.complete();
        });
        groups.clear();
      }
      this.destination.complete();
    };
    GroupBySubscriber.prototype.removeGroup = function(key) {
      this.groups.delete(key);
    };
    GroupBySubscriber.prototype.unsubscribe = function() {
      if (!this.isUnsubscribed && !this.attemptedToUnsubscribe) {
        this.attemptedToUnsubscribe = true;
        if (this.count === 0) {
          _super.prototype.unsubscribe.call(this);
        }
      }
    };
    return GroupBySubscriber;
  }(Subscriber_1.Subscriber));
  var GroupDurationSubscriber = (function(_super) {
    __extends(GroupDurationSubscriber, _super);
    function GroupDurationSubscriber(key, group, parent) {
      _super.call(this);
      this.key = key;
      this.group = group;
      this.parent = parent;
    }
    GroupDurationSubscriber.prototype._next = function(value) {
      this.tryComplete();
    };
    GroupDurationSubscriber.prototype._error = function(err) {
      this.tryError(err);
    };
    GroupDurationSubscriber.prototype._complete = function() {
      this.tryComplete();
    };
    GroupDurationSubscriber.prototype.tryError = function(err) {
      var group = this.group;
      if (!group.isUnsubscribed) {
        group.error(err);
      }
      this.parent.removeGroup(this.key);
    };
    GroupDurationSubscriber.prototype.tryComplete = function() {
      var group = this.group;
      if (!group.isUnsubscribed) {
        group.complete();
      }
      this.parent.removeGroup(this.key);
    };
    return GroupDurationSubscriber;
  }(Subscriber_1.Subscriber));
  var GroupedObservable = (function(_super) {
    __extends(GroupedObservable, _super);
    function GroupedObservable(key, groupSubject, refCountSubscription) {
      _super.call(this);
      this.key = key;
      this.groupSubject = groupSubject;
      this.refCountSubscription = refCountSubscription;
    }
    GroupedObservable.prototype._subscribe = function(subscriber) {
      var subscription = new Subscription_1.Subscription();
      var _a = this,
          refCountSubscription = _a.refCountSubscription,
          groupSubject = _a.groupSubject;
      if (refCountSubscription && !refCountSubscription.isUnsubscribed) {
        subscription.add(new InnerRefCountSubscription(refCountSubscription));
      }
      subscription.add(groupSubject.subscribe(subscriber));
      return subscription;
    };
    return GroupedObservable;
  }(Observable_1.Observable));
  exports.GroupedObservable = GroupedObservable;
  var InnerRefCountSubscription = (function(_super) {
    __extends(InnerRefCountSubscription, _super);
    function InnerRefCountSubscription(parent) {
      _super.call(this);
      this.parent = parent;
      parent.count++;
    }
    InnerRefCountSubscription.prototype.unsubscribe = function() {
      var parent = this.parent;
      if (!parent.isUnsubscribed && !this.isUnsubscribed) {
        _super.prototype.unsubscribe.call(this);
        parent.count -= 1;
        if (parent.count === 0 && parent.attemptedToUnsubscribe) {
          parent.unsubscribe();
        }
      }
    };
    return InnerRefCountSubscription;
  }(Subscription_1.Subscription));
  return module.exports;
});

$__System.registerDynamic("9c", ["7", "9b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var groupBy_1 = $__require('9b');
  Observable_1.Observable.prototype.groupBy = groupBy_1.groupBy;
  return module.exports;
});

$__System.registerDynamic("4d", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function noop() {}
  exports.noop = noop;
  return module.exports;
});

$__System.registerDynamic("9d", ["62", "4d"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var noop_1 = $__require('4d');
  function ignoreElements() {
    return this.lift(new IgnoreElementsOperator());
  }
  exports.ignoreElements = ignoreElements;
  ;
  var IgnoreElementsOperator = (function() {
    function IgnoreElementsOperator() {}
    IgnoreElementsOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new IgnoreElementsSubscriber(subscriber));
    };
    return IgnoreElementsOperator;
  }());
  var IgnoreElementsSubscriber = (function(_super) {
    __extends(IgnoreElementsSubscriber, _super);
    function IgnoreElementsSubscriber() {
      _super.apply(this, arguments);
    }
    IgnoreElementsSubscriber.prototype._next = function(unused) {
      noop_1.noop();
    };
    return IgnoreElementsSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("9e", ["7", "9d"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var ignoreElements_1 = $__require('9d');
  Observable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;
  return module.exports;
});

$__System.registerDynamic("9f", ["11", "12", "20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var tryCatch_1 = $__require('11');
  var errorObject_1 = $__require('12');
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function audit(durationSelector) {
    return this.lift(new AuditOperator(durationSelector));
  }
  exports.audit = audit;
  var AuditOperator = (function() {
    function AuditOperator(durationSelector) {
      this.durationSelector = durationSelector;
    }
    AuditOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new AuditSubscriber(subscriber, this.durationSelector));
    };
    return AuditOperator;
  }());
  var AuditSubscriber = (function(_super) {
    __extends(AuditSubscriber, _super);
    function AuditSubscriber(destination, durationSelector) {
      _super.call(this, destination);
      this.durationSelector = durationSelector;
      this.hasValue = false;
    }
    AuditSubscriber.prototype._next = function(value) {
      this.value = value;
      this.hasValue = true;
      if (!this.throttled) {
        var duration = tryCatch_1.tryCatch(this.durationSelector)(value);
        if (duration === errorObject_1.errorObject) {
          this.destination.error(errorObject_1.errorObject.e);
        } else {
          this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
        }
      }
    };
    AuditSubscriber.prototype.clearThrottle = function() {
      var _a = this,
          value = _a.value,
          hasValue = _a.hasValue,
          throttled = _a.throttled;
      if (throttled) {
        this.remove(throttled);
        this.throttled = null;
        throttled.unsubscribe();
      }
      if (hasValue) {
        this.value = null;
        this.hasValue = false;
        this.destination.next(value);
      }
    };
    AuditSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex) {
      this.clearThrottle();
    };
    AuditSubscriber.prototype.notifyComplete = function() {
      this.clearThrottle();
    };
    return AuditSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("a0", ["7", "9f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var audit_1 = $__require('9f');
  Observable_1.Observable.prototype.audit = audit_1.audit;
  return module.exports;
});

$__System.registerDynamic("a1", ["44", "62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var async_1 = $__require('44');
  var Subscriber_1 = $__require('62');
  function auditTime(delay, scheduler) {
    if (scheduler === void 0) {
      scheduler = async_1.async;
    }
    return this.lift(new AuditTimeOperator(delay, scheduler));
  }
  exports.auditTime = auditTime;
  var AuditTimeOperator = (function() {
    function AuditTimeOperator(delay, scheduler) {
      this.delay = delay;
      this.scheduler = scheduler;
    }
    AuditTimeOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new AuditTimeSubscriber(subscriber, this.delay, this.scheduler));
    };
    return AuditTimeOperator;
  }());
  var AuditTimeSubscriber = (function(_super) {
    __extends(AuditTimeSubscriber, _super);
    function AuditTimeSubscriber(destination, delay, scheduler) {
      _super.call(this, destination);
      this.delay = delay;
      this.scheduler = scheduler;
      this.hasValue = false;
    }
    AuditTimeSubscriber.prototype._next = function(value) {
      this.value = value;
      this.hasValue = true;
      if (!this.throttled) {
        this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.delay, this));
      }
    };
    AuditTimeSubscriber.prototype.clearThrottle = function() {
      var _a = this,
          value = _a.value,
          hasValue = _a.hasValue,
          throttled = _a.throttled;
      if (throttled) {
        this.remove(throttled);
        this.throttled = null;
        throttled.unsubscribe();
      }
      if (hasValue) {
        this.value = null;
        this.hasValue = false;
        this.destination.next(value);
      }
    };
    return AuditTimeSubscriber;
  }(Subscriber_1.Subscriber));
  function dispatchNext(subscriber) {
    subscriber.clearThrottle();
  }
  return module.exports;
});

$__System.registerDynamic("a2", ["7", "a1"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var auditTime_1 = $__require('a1');
  Observable_1.Observable.prototype.auditTime = auditTime_1.auditTime;
  return module.exports;
});

$__System.registerDynamic("a3", ["62", "96"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var EmptyError_1 = $__require('96');
  function last(predicate, resultSelector, defaultValue) {
    return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
  }
  exports.last = last;
  var LastOperator = (function() {
    function LastOperator(predicate, resultSelector, defaultValue, source) {
      this.predicate = predicate;
      this.resultSelector = resultSelector;
      this.defaultValue = defaultValue;
      this.source = source;
    }
    LastOperator.prototype.call = function(observer, source) {
      return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
    };
    return LastOperator;
  }());
  var LastSubscriber = (function(_super) {
    __extends(LastSubscriber, _super);
    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
      _super.call(this, destination);
      this.predicate = predicate;
      this.resultSelector = resultSelector;
      this.defaultValue = defaultValue;
      this.source = source;
      this.hasValue = false;
      this.index = 0;
      if (typeof defaultValue !== 'undefined') {
        this.lastValue = defaultValue;
        this.hasValue = true;
      }
    }
    LastSubscriber.prototype._next = function(value) {
      var index = this.index++;
      if (this.predicate) {
        this._tryPredicate(value, index);
      } else {
        if (this.resultSelector) {
          this._tryResultSelector(value, index);
          return;
        }
        this.lastValue = value;
        this.hasValue = true;
      }
    };
    LastSubscriber.prototype._tryPredicate = function(value, index) {
      var result;
      try {
        result = this.predicate(value, index, this.source);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      if (result) {
        if (this.resultSelector) {
          this._tryResultSelector(value, index);
          return;
        }
        this.lastValue = value;
        this.hasValue = true;
      }
    };
    LastSubscriber.prototype._tryResultSelector = function(value, index) {
      var result;
      try {
        result = this.resultSelector(value, index);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this.lastValue = result;
      this.hasValue = true;
    };
    LastSubscriber.prototype._complete = function() {
      var destination = this.destination;
      if (this.hasValue) {
        destination.next(this.lastValue);
        destination.complete();
      } else {
        destination.error(new EmptyError_1.EmptyError);
      }
    };
    return LastSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("a4", ["7", "a3"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var last_1 = $__require('a3');
  Observable_1.Observable.prototype.last = last_1.last;
  return module.exports;
});

$__System.registerDynamic("a5", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function letProto(func) {
    return func(this);
  }
  exports.letProto = letProto;
  return module.exports;
});

$__System.registerDynamic("a6", ["7", "a5"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var let_1 = $__require('a5');
  Observable_1.Observable.prototype.let = let_1.letProto;
  Observable_1.Observable.prototype.letBind = let_1.letProto;
  return module.exports;
});

$__System.registerDynamic("a7", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function every(predicate, thisArg) {
    var source = this;
    return source.lift(new EveryOperator(predicate, thisArg, source));
  }
  exports.every = every;
  var EveryOperator = (function() {
    function EveryOperator(predicate, thisArg, source) {
      this.predicate = predicate;
      this.thisArg = thisArg;
      this.source = source;
    }
    EveryOperator.prototype.call = function(observer, source) {
      return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
    };
    return EveryOperator;
  }());
  var EverySubscriber = (function(_super) {
    __extends(EverySubscriber, _super);
    function EverySubscriber(destination, predicate, thisArg, source) {
      _super.call(this, destination);
      this.predicate = predicate;
      this.thisArg = thisArg;
      this.source = source;
      this.index = 0;
      this.thisArg = thisArg || this;
    }
    EverySubscriber.prototype.notifyComplete = function(everyValueMatch) {
      this.destination.next(everyValueMatch);
      this.destination.complete();
    };
    EverySubscriber.prototype._next = function(value) {
      var result = false;
      try {
        result = this.predicate.call(this.thisArg, value, this.index++, this.source);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      if (!result) {
        this.notifyComplete(false);
      }
    };
    EverySubscriber.prototype._complete = function() {
      this.notifyComplete(true);
    };
    return EverySubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("a8", ["7", "a7"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var every_1 = $__require('a7');
  Observable_1.Observable.prototype.every = every_1.every;
  return module.exports;
});

$__System.registerDynamic("a9", ["7", "aa"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var map_1 = $__require('aa');
  Observable_1.Observable.prototype.map = map_1.map;
  return module.exports;
});

$__System.registerDynamic("ab", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function mapTo(value) {
    return this.lift(new MapToOperator(value));
  }
  exports.mapTo = mapTo;
  var MapToOperator = (function() {
    function MapToOperator(value) {
      this.value = value;
    }
    MapToOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new MapToSubscriber(subscriber, this.value));
    };
    return MapToOperator;
  }());
  var MapToSubscriber = (function(_super) {
    __extends(MapToSubscriber, _super);
    function MapToSubscriber(destination, value) {
      _super.call(this, destination);
      this.value = value;
    }
    MapToSubscriber.prototype._next = function(x) {
      this.destination.next(this.value);
    };
    return MapToSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("ac", ["7", "ab"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var mapTo_1 = $__require('ab');
  Observable_1.Observable.prototype.mapTo = mapTo_1.mapTo;
  return module.exports;
});

$__System.registerDynamic("ad", ["62", "87"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var Notification_1 = $__require('87');
  function materialize() {
    return this.lift(new MaterializeOperator());
  }
  exports.materialize = materialize;
  var MaterializeOperator = (function() {
    function MaterializeOperator() {}
    MaterializeOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new MaterializeSubscriber(subscriber));
    };
    return MaterializeOperator;
  }());
  var MaterializeSubscriber = (function(_super) {
    __extends(MaterializeSubscriber, _super);
    function MaterializeSubscriber(destination) {
      _super.call(this, destination);
    }
    MaterializeSubscriber.prototype._next = function(value) {
      this.destination.next(Notification_1.Notification.createNext(value));
    };
    MaterializeSubscriber.prototype._error = function(err) {
      var destination = this.destination;
      destination.next(Notification_1.Notification.createError(err));
      destination.complete();
    };
    MaterializeSubscriber.prototype._complete = function() {
      var destination = this.destination;
      destination.next(Notification_1.Notification.createComplete());
      destination.complete();
    };
    return MaterializeSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("ae", ["7", "ad"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var materialize_1 = $__require('ad');
  Observable_1.Observable.prototype.materialize = materialize_1.materialize;
  return module.exports;
});

$__System.registerDynamic("48", ["34", "74", "33"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var ArrayObservable_1 = $__require('34');
  var mergeAll_1 = $__require('74');
  var isScheduler_1 = $__require('33');
  function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      observables[_i - 0] = arguments[_i];
    }
    observables.unshift(this);
    return mergeStatic.apply(this, observables);
  }
  exports.merge = merge;
  function mergeStatic() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      observables[_i - 0] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if (isScheduler_1.isScheduler(last)) {
      scheduler = observables.pop();
      if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
        concurrent = observables.pop();
      }
    } else if (typeof last === 'number') {
      concurrent = observables.pop();
    }
    if (observables.length === 1) {
      return observables[0];
    }
    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));
  }
  exports.mergeStatic = mergeStatic;
  return module.exports;
});

$__System.registerDynamic("af", ["7", "48"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var merge_1 = $__require('48');
  Observable_1.Observable.prototype.merge = merge_1.merge;
  return module.exports;
});

$__System.registerDynamic("b0", ["7", "74"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var mergeAll_1 = $__require('74');
  Observable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;
  return module.exports;
});

$__System.registerDynamic("77", ["1f", "20"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var subscribeToResult_1 = $__require('1f');
  var OuterSubscriber_1 = $__require('20');
  function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }
    if (typeof resultSelector === 'number') {
      concurrent = resultSelector;
      resultSelector = null;
    }
    return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
  }
  exports.mergeMap = mergeMap;
  var MergeMapOperator = (function() {
    function MergeMapOperator(project, resultSelector, concurrent) {
      if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
      }
      this.project = project;
      this.resultSelector = resultSelector;
      this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function(observer, source) {
      return source._subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
    };
    return MergeMapOperator;
  }());
  exports.MergeMapOperator = MergeMapOperator;
  var MergeMapSubscriber = (function(_super) {
    __extends(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
      if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
      }
      _super.call(this, destination);
      this.project = project;
      this.resultSelector = resultSelector;
      this.concurrent = concurrent;
      this.hasCompleted = false;
      this.buffer = [];
      this.active = 0;
      this.index = 0;
    }
    MergeMapSubscriber.prototype._next = function(value) {
      if (this.active < this.concurrent) {
        this._tryNext(value);
      } else {
        this.buffer.push(value);
      }
    };
    MergeMapSubscriber.prototype._tryNext = function(value) {
      var result;
      var index = this.index++;
      try {
        result = this.project(value, index);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this.active++;
      this._innerSub(result, value, index);
    };
    MergeMapSubscriber.prototype._innerSub = function(ish, value, index) {
      this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
    };
    MergeMapSubscriber.prototype._complete = function() {
      this.hasCompleted = true;
      if (this.active === 0 && this.buffer.length === 0) {
        this.destination.complete();
      }
    };
    MergeMapSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      if (this.resultSelector) {
        this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
      } else {
        this.destination.next(innerValue);
      }
    };
    MergeMapSubscriber.prototype._notifyResultSelector = function(outerValue, innerValue, outerIndex, innerIndex) {
      var result;
      try {
        result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this.destination.next(result);
    };
    MergeMapSubscriber.prototype.notifyComplete = function(innerSub) {
      var buffer = this.buffer;
      this.remove(innerSub);
      this.active--;
      if (buffer.length > 0) {
        this._next(buffer.shift());
      } else if (this.active === 0 && this.hasCompleted) {
        this.destination.complete();
      }
    };
    return MergeMapSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  exports.MergeMapSubscriber = MergeMapSubscriber;
  return module.exports;
});

$__System.registerDynamic("b1", ["7", "77"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var mergeMap_1 = $__require('77');
  Observable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;
  Observable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;
  return module.exports;
});

$__System.registerDynamic("7a", ["20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function mergeMapTo(innerObservable, resultSelector, concurrent) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }
    if (typeof resultSelector === 'number') {
      concurrent = resultSelector;
      resultSelector = null;
    }
    return this.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent));
  }
  exports.mergeMapTo = mergeMapTo;
  var MergeMapToOperator = (function() {
    function MergeMapToOperator(ish, resultSelector, concurrent) {
      if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
      }
      this.ish = ish;
      this.resultSelector = resultSelector;
      this.concurrent = concurrent;
    }
    MergeMapToOperator.prototype.call = function(observer, source) {
      return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));
    };
    return MergeMapToOperator;
  }());
  exports.MergeMapToOperator = MergeMapToOperator;
  var MergeMapToSubscriber = (function(_super) {
    __extends(MergeMapToSubscriber, _super);
    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {
      if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
      }
      _super.call(this, destination);
      this.ish = ish;
      this.resultSelector = resultSelector;
      this.concurrent = concurrent;
      this.hasCompleted = false;
      this.buffer = [];
      this.active = 0;
      this.index = 0;
    }
    MergeMapToSubscriber.prototype._next = function(value) {
      if (this.active < this.concurrent) {
        var resultSelector = this.resultSelector;
        var index = this.index++;
        var ish = this.ish;
        var destination = this.destination;
        this.active++;
        this._innerSub(ish, destination, resultSelector, value, index);
      } else {
        this.buffer.push(value);
      }
    };
    MergeMapToSubscriber.prototype._innerSub = function(ish, destination, resultSelector, value, index) {
      this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
    };
    MergeMapToSubscriber.prototype._complete = function() {
      this.hasCompleted = true;
      if (this.active === 0 && this.buffer.length === 0) {
        this.destination.complete();
      }
    };
    MergeMapToSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      var _a = this,
          resultSelector = _a.resultSelector,
          destination = _a.destination;
      if (resultSelector) {
        this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
      } else {
        destination.next(innerValue);
      }
    };
    MergeMapToSubscriber.prototype.trySelectResult = function(outerValue, innerValue, outerIndex, innerIndex) {
      var _a = this,
          resultSelector = _a.resultSelector,
          destination = _a.destination;
      var result;
      try {
        result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
      } catch (err) {
        destination.error(err);
        return;
      }
      destination.next(result);
    };
    MergeMapToSubscriber.prototype.notifyError = function(err) {
      this.destination.error(err);
    };
    MergeMapToSubscriber.prototype.notifyComplete = function(innerSub) {
      var buffer = this.buffer;
      this.remove(innerSub);
      this.active--;
      if (buffer.length > 0) {
        this._next(buffer.shift());
      } else if (this.active === 0 && this.hasCompleted) {
        this.destination.complete();
      }
    };
    return MergeMapToSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  exports.MergeMapToSubscriber = MergeMapToSubscriber;
  return module.exports;
});

$__System.registerDynamic("b2", ["7", "7a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var mergeMapTo_1 = $__require('7a');
  Observable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;
  Observable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;
  return module.exports;
});

$__System.registerDynamic("b3", ["7", "b4"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var multicast_1 = $__require('b4');
  Observable_1.Observable.prototype.multicast = multicast_1.multicast;
  return module.exports;
});

$__System.registerDynamic("b5", ["7", "36"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var observeOn_1 = $__require('36');
  Observable_1.Observable.prototype.observeOn = observeOn_1.observeOn;
  return module.exports;
});

$__System.registerDynamic("b6", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function not(pred, thisArg) {
    function notPred() {
      return !(notPred.pred.apply(notPred.thisArg, arguments));
    }
    notPred.pred = pred;
    notPred.thisArg = thisArg;
    return notPred;
  }
  exports.not = not;
  return module.exports;
});

$__System.registerDynamic("92", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function filter(predicate, thisArg) {
    return this.lift(new FilterOperator(predicate, thisArg));
  }
  exports.filter = filter;
  var FilterOperator = (function() {
    function FilterOperator(predicate, thisArg) {
      this.predicate = predicate;
      this.thisArg = thisArg;
    }
    FilterOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    };
    return FilterOperator;
  }());
  var FilterSubscriber = (function(_super) {
    __extends(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
      _super.call(this, destination);
      this.predicate = predicate;
      this.thisArg = thisArg;
      this.count = 0;
      this.predicate = predicate;
    }
    FilterSubscriber.prototype._next = function(value) {
      var result;
      try {
        result = this.predicate.call(this.thisArg, value, this.count++);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      if (result) {
        this.destination.next(value);
      }
    };
    return FilterSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("b7", ["b6", "92"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var not_1 = $__require('b6');
  var filter_1 = $__require('92');
  function partition(predicate, thisArg) {
    return [filter_1.filter.call(this, predicate), filter_1.filter.call(this, not_1.not(predicate, thisArg))];
  }
  exports.partition = partition;
  return module.exports;
});

$__System.registerDynamic("b8", ["7", "b7"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var partition_1 = $__require('b7');
  Observable_1.Observable.prototype.partition = partition_1.partition;
  return module.exports;
});

$__System.registerDynamic("aa", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function map(project, thisArg) {
    if (typeof project !== 'function') {
      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
    }
    return this.lift(new MapOperator(project, thisArg));
  }
  exports.map = map;
  var MapOperator = (function() {
    function MapOperator(project, thisArg) {
      this.project = project;
      this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
  }());
  var MapSubscriber = (function(_super) {
    __extends(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
      _super.call(this, destination);
      this.project = project;
      this.count = 0;
      this.thisArg = thisArg || this;
    }
    MapSubscriber.prototype._next = function(value) {
      var result;
      try {
        result = this.project.call(this.thisArg, value, this.count++);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this.destination.next(result);
    };
    return MapSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("b9", ["aa"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var map_1 = $__require('aa');
  function pluck() {
    var properties = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      properties[_i - 0] = arguments[_i];
    }
    var length = properties.length;
    if (length === 0) {
      throw new Error('List of properties cannot be empty.');
    }
    return map_1.map.call(this, plucker(properties, length));
  }
  exports.pluck = pluck;
  function plucker(props, length) {
    var mapper = function(x) {
      var currentProp = x;
      for (var i = 0; i < length; i++) {
        var p = currentProp[props[i]];
        if (typeof p !== 'undefined') {
          currentProp = p;
        } else {
          return undefined;
        }
      }
      return currentProp;
    };
    return mapper;
  }
  return module.exports;
});

$__System.registerDynamic("ba", ["7", "b9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var pluck_1 = $__require('b9');
  Observable_1.Observable.prototype.pluck = pluck_1.pluck;
  return module.exports;
});

$__System.registerDynamic("bb", ["4", "b4"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Subject_1 = $__require('4');
  var multicast_1 = $__require('b4');
  function publish() {
    return multicast_1.multicast.call(this, new Subject_1.Subject());
  }
  exports.publish = publish;
  return module.exports;
});

$__System.registerDynamic("bc", ["7", "bb"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var publish_1 = $__require('bb');
  Observable_1.Observable.prototype.publish = publish_1.publish;
  return module.exports;
});

$__System.registerDynamic("bd", ["be", "b4"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var BehaviorSubject_1 = $__require('be');
  var multicast_1 = $__require('b4');
  function publishBehavior(value) {
    return multicast_1.multicast.call(this, new BehaviorSubject_1.BehaviorSubject(value));
  }
  exports.publishBehavior = publishBehavior;
  return module.exports;
});

$__System.registerDynamic("bf", ["7", "bd"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var publishBehavior_1 = $__require('bd');
  Observable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;
  return module.exports;
});

$__System.registerDynamic("6b", ["c0", "b4"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var ReplaySubject_1 = $__require('c0');
  var multicast_1 = $__require('b4');
  function publishReplay(bufferSize, windowTime, scheduler) {
    if (bufferSize === void 0) {
      bufferSize = Number.POSITIVE_INFINITY;
    }
    if (windowTime === void 0) {
      windowTime = Number.POSITIVE_INFINITY;
    }
    return multicast_1.multicast.call(this, new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler));
  }
  exports.publishReplay = publishReplay;
  return module.exports;
});

$__System.registerDynamic("c1", ["7", "6b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var publishReplay_1 = $__require('6b');
  Observable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;
  return module.exports;
});

$__System.registerDynamic("c2", ["13", "b4"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var AsyncSubject_1 = $__require('13');
  var multicast_1 = $__require('b4');
  function publishLast() {
    return multicast_1.multicast.call(this, new AsyncSubject_1.AsyncSubject());
  }
  exports.publishLast = publishLast;
  return module.exports;
});

$__System.registerDynamic("c3", ["7", "c2"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var publishLast_1 = $__require('c2');
  Observable_1.Observable.prototype.publishLast = publishLast_1.publishLast;
  return module.exports;
});

$__System.registerDynamic("4b", ["27", "34", "20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var isArray_1 = $__require('27');
  var ArrayObservable_1 = $__require('34');
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      observables[_i - 0] = arguments[_i];
    }
    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
      observables = observables[0];
    }
    observables.unshift(this);
    return raceStatic.apply(this, observables);
  }
  exports.race = race;
  function raceStatic() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      observables[_i - 0] = arguments[_i];
    }
    if (observables.length === 1) {
      if (isArray_1.isArray(observables[0])) {
        observables = observables[0];
      } else {
        return observables[0];
      }
    }
    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());
  }
  exports.raceStatic = raceStatic;
  var RaceOperator = (function() {
    function RaceOperator() {}
    RaceOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new RaceSubscriber(subscriber));
    };
    return RaceOperator;
  }());
  exports.RaceOperator = RaceOperator;
  var RaceSubscriber = (function(_super) {
    __extends(RaceSubscriber, _super);
    function RaceSubscriber(destination) {
      _super.call(this, destination);
      this.hasFirst = false;
      this.observables = [];
      this.subscriptions = [];
    }
    RaceSubscriber.prototype._next = function(observable) {
      this.observables.push(observable);
    };
    RaceSubscriber.prototype._complete = function() {
      var observables = this.observables;
      var len = observables.length;
      if (len === 0) {
        this.destination.complete();
      } else {
        for (var i = 0; i < len; i++) {
          var observable = observables[i];
          var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);
          this.subscriptions.push(subscription);
          this.add(subscription);
        }
        this.observables = null;
      }
    };
    RaceSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      if (!this.hasFirst) {
        this.hasFirst = true;
        for (var i = 0; i < this.subscriptions.length; i++) {
          if (i !== outerIndex) {
            var subscription = this.subscriptions[i];
            subscription.unsubscribe();
            this.remove(subscription);
          }
        }
        this.subscriptions = null;
      }
      this.destination.next(innerValue);
    };
    return RaceSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  exports.RaceSubscriber = RaceSubscriber;
  return module.exports;
});

$__System.registerDynamic("c4", ["7", "4b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var race_1 = $__require('4b');
  Observable_1.Observable.prototype.race = race_1.race;
  return module.exports;
});

$__System.registerDynamic("c5", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function reduce(project, seed) {
    return this.lift(new ReduceOperator(project, seed));
  }
  exports.reduce = reduce;
  var ReduceOperator = (function() {
    function ReduceOperator(project, seed) {
      this.project = project;
      this.seed = seed;
    }
    ReduceOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new ReduceSubscriber(subscriber, this.project, this.seed));
    };
    return ReduceOperator;
  }());
  exports.ReduceOperator = ReduceOperator;
  var ReduceSubscriber = (function(_super) {
    __extends(ReduceSubscriber, _super);
    function ReduceSubscriber(destination, project, seed) {
      _super.call(this, destination);
      this.hasValue = false;
      this.acc = seed;
      this.project = project;
      this.hasSeed = typeof seed !== 'undefined';
    }
    ReduceSubscriber.prototype._next = function(value) {
      if (this.hasValue || (this.hasValue = this.hasSeed)) {
        this._tryReduce(value);
      } else {
        this.acc = value;
        this.hasValue = true;
      }
    };
    ReduceSubscriber.prototype._tryReduce = function(value) {
      var result;
      try {
        result = this.project(this.acc, value);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this.acc = result;
    };
    ReduceSubscriber.prototype._complete = function() {
      if (this.hasValue || this.hasSeed) {
        this.destination.next(this.acc);
      }
      this.destination.complete();
    };
    return ReduceSubscriber;
  }(Subscriber_1.Subscriber));
  exports.ReduceSubscriber = ReduceSubscriber;
  return module.exports;
});

$__System.registerDynamic("c6", ["7", "c5"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var reduce_1 = $__require('c5');
  Observable_1.Observable.prototype.reduce = reduce_1.reduce;
  return module.exports;
});

$__System.registerDynamic("c7", ["62", "24"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var EmptyObservable_1 = $__require('24');
  function repeat(count) {
    if (count === void 0) {
      count = -1;
    }
    if (count === 0) {
      return new EmptyObservable_1.EmptyObservable();
    } else if (count < 0) {
      return this.lift(new RepeatOperator(-1, this));
    } else {
      return this.lift(new RepeatOperator(count - 1, this));
    }
  }
  exports.repeat = repeat;
  var RepeatOperator = (function() {
    function RepeatOperator(count, source) {
      this.count = count;
      this.source = source;
    }
    RepeatOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
    };
    return RepeatOperator;
  }());
  var RepeatSubscriber = (function(_super) {
    __extends(RepeatSubscriber, _super);
    function RepeatSubscriber(destination, count, source) {
      _super.call(this, destination);
      this.count = count;
      this.source = source;
    }
    RepeatSubscriber.prototype.complete = function() {
      if (!this.isStopped) {
        var _a = this,
            source = _a.source,
            count = _a.count;
        if (count === 0) {
          return _super.prototype.complete.call(this);
        } else if (count > -1) {
          this.count = count - 1;
        }
        this.unsubscribe();
        this.isStopped = false;
        this.isUnsubscribed = false;
        source.subscribe(this);
      }
    };
    return RepeatSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("c8", ["7", "c7"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var repeat_1 = $__require('c7');
  Observable_1.Observable.prototype.repeat = repeat_1.repeat;
  return module.exports;
});

$__System.registerDynamic("c9", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function retry(count) {
    if (count === void 0) {
      count = -1;
    }
    return this.lift(new RetryOperator(count, this));
  }
  exports.retry = retry;
  var RetryOperator = (function() {
    function RetryOperator(count, source) {
      this.count = count;
      this.source = source;
    }
    RetryOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));
    };
    return RetryOperator;
  }());
  var RetrySubscriber = (function(_super) {
    __extends(RetrySubscriber, _super);
    function RetrySubscriber(destination, count, source) {
      _super.call(this, destination);
      this.count = count;
      this.source = source;
    }
    RetrySubscriber.prototype.error = function(err) {
      if (!this.isStopped) {
        var _a = this,
            source = _a.source,
            count = _a.count;
        if (count === 0) {
          return _super.prototype.error.call(this, err);
        } else if (count > -1) {
          this.count = count - 1;
        }
        this.unsubscribe();
        this.isStopped = false;
        this.isUnsubscribed = false;
        source.subscribe(this);
      }
    };
    return RetrySubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("ca", ["7", "c9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var retry_1 = $__require('c9');
  Observable_1.Observable.prototype.retry = retry_1.retry;
  return module.exports;
});

$__System.registerDynamic("cb", ["4", "11", "12", "20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subject_1 = $__require('4');
  var tryCatch_1 = $__require('11');
  var errorObject_1 = $__require('12');
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function retryWhen(notifier) {
    return this.lift(new RetryWhenOperator(notifier, this));
  }
  exports.retryWhen = retryWhen;
  var RetryWhenOperator = (function() {
    function RetryWhenOperator(notifier, source) {
      this.notifier = notifier;
      this.source = source;
    }
    RetryWhenOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
    };
    return RetryWhenOperator;
  }());
  var RetryWhenSubscriber = (function(_super) {
    __extends(RetryWhenSubscriber, _super);
    function RetryWhenSubscriber(destination, notifier, source) {
      _super.call(this, destination);
      this.notifier = notifier;
      this.source = source;
    }
    RetryWhenSubscriber.prototype.error = function(err) {
      if (!this.isStopped) {
        var errors = this.errors;
        var retries = this.retries;
        var retriesSubscription = this.retriesSubscription;
        if (!retries) {
          errors = new Subject_1.Subject();
          retries = tryCatch_1.tryCatch(this.notifier)(errors);
          if (retries === errorObject_1.errorObject) {
            return _super.prototype.error.call(this, errorObject_1.errorObject.e);
          }
          retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
        } else {
          this.errors = null;
          this.retriesSubscription = null;
        }
        this.unsubscribe();
        this.isUnsubscribed = false;
        this.errors = errors;
        this.retries = retries;
        this.retriesSubscription = retriesSubscription;
        errors.next(err);
      }
    };
    RetryWhenSubscriber.prototype._unsubscribe = function() {
      var _a = this,
          errors = _a.errors,
          retriesSubscription = _a.retriesSubscription;
      if (errors) {
        errors.unsubscribe();
        this.errors = null;
      }
      if (retriesSubscription) {
        retriesSubscription.unsubscribe();
        this.retriesSubscription = null;
      }
      this.retries = null;
    };
    RetryWhenSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      var _a = this,
          errors = _a.errors,
          retries = _a.retries,
          retriesSubscription = _a.retriesSubscription;
      this.errors = null;
      this.retries = null;
      this.retriesSubscription = null;
      this.unsubscribe();
      this.isStopped = false;
      this.isUnsubscribed = false;
      this.errors = errors;
      this.retries = retries;
      this.retriesSubscription = retriesSubscription;
      this.source.subscribe(this);
    };
    return RetryWhenSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("cc", ["7", "cb"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var retryWhen_1 = $__require('cb');
  Observable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;
  return module.exports;
});

$__System.registerDynamic("cd", ["20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function sample(notifier) {
    return this.lift(new SampleOperator(notifier));
  }
  exports.sample = sample;
  var SampleOperator = (function() {
    function SampleOperator(notifier) {
      this.notifier = notifier;
    }
    SampleOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new SampleSubscriber(subscriber, this.notifier));
    };
    return SampleOperator;
  }());
  var SampleSubscriber = (function(_super) {
    __extends(SampleSubscriber, _super);
    function SampleSubscriber(destination, notifier) {
      _super.call(this, destination);
      this.hasValue = false;
      this.add(subscribeToResult_1.subscribeToResult(this, notifier));
    }
    SampleSubscriber.prototype._next = function(value) {
      this.value = value;
      this.hasValue = true;
    };
    SampleSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.emitValue();
    };
    SampleSubscriber.prototype.notifyComplete = function() {
      this.emitValue();
    };
    SampleSubscriber.prototype.emitValue = function() {
      if (this.hasValue) {
        this.hasValue = false;
        this.destination.next(this.value);
      }
    };
    return SampleSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("ce", ["7", "cd"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var sample_1 = $__require('cd');
  Observable_1.Observable.prototype.sample = sample_1.sample;
  return module.exports;
});

$__System.registerDynamic("cf", ["62", "44"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var async_1 = $__require('44');
  function sampleTime(delay, scheduler) {
    if (scheduler === void 0) {
      scheduler = async_1.async;
    }
    return this.lift(new SampleTimeOperator(delay, scheduler));
  }
  exports.sampleTime = sampleTime;
  var SampleTimeOperator = (function() {
    function SampleTimeOperator(delay, scheduler) {
      this.delay = delay;
      this.scheduler = scheduler;
    }
    SampleTimeOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new SampleTimeSubscriber(subscriber, this.delay, this.scheduler));
    };
    return SampleTimeOperator;
  }());
  var SampleTimeSubscriber = (function(_super) {
    __extends(SampleTimeSubscriber, _super);
    function SampleTimeSubscriber(destination, delay, scheduler) {
      _super.call(this, destination);
      this.delay = delay;
      this.scheduler = scheduler;
      this.hasValue = false;
      this.add(scheduler.schedule(dispatchNotification, delay, {
        subscriber: this,
        delay: delay
      }));
    }
    SampleTimeSubscriber.prototype._next = function(value) {
      this.lastValue = value;
      this.hasValue = true;
    };
    SampleTimeSubscriber.prototype.notifyNext = function() {
      if (this.hasValue) {
        this.hasValue = false;
        this.destination.next(this.lastValue);
      }
    };
    return SampleTimeSubscriber;
  }(Subscriber_1.Subscriber));
  function dispatchNotification(state) {
    var subscriber = state.subscriber,
        delay = state.delay;
    subscriber.notifyNext();
    this.schedule(state, delay);
  }
  return module.exports;
});

$__System.registerDynamic("d0", ["7", "cf"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var sampleTime_1 = $__require('cf');
  Observable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;
  return module.exports;
});

$__System.registerDynamic("d1", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function scan(accumulator, seed) {
    return this.lift(new ScanOperator(accumulator, seed));
  }
  exports.scan = scan;
  var ScanOperator = (function() {
    function ScanOperator(accumulator, seed) {
      this.accumulator = accumulator;
      this.seed = seed;
    }
    ScanOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));
    };
    return ScanOperator;
  }());
  var ScanSubscriber = (function(_super) {
    __extends(ScanSubscriber, _super);
    function ScanSubscriber(destination, accumulator, seed) {
      _super.call(this, destination);
      this.accumulator = accumulator;
      this.accumulatorSet = false;
      this.seed = seed;
      this.accumulator = accumulator;
      this.accumulatorSet = typeof seed !== 'undefined';
    }
    Object.defineProperty(ScanSubscriber.prototype, "seed", {
      get: function() {
        return this._seed;
      },
      set: function(value) {
        this.accumulatorSet = true;
        this._seed = value;
      },
      enumerable: true,
      configurable: true
    });
    ScanSubscriber.prototype._next = function(value) {
      if (!this.accumulatorSet) {
        this.seed = value;
        this.destination.next(value);
      } else {
        return this._tryNext(value);
      }
    };
    ScanSubscriber.prototype._tryNext = function(value) {
      var result;
      try {
        result = this.accumulator(this.seed, value);
      } catch (err) {
        this.destination.error(err);
      }
      this.seed = result;
      this.destination.next(result);
    };
    return ScanSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("d2", ["7", "d1"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var scan_1 = $__require('d1');
  Observable_1.Observable.prototype.scan = scan_1.scan;
  return module.exports;
});

$__System.registerDynamic("b4", ["d3"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var ConnectableObservable_1 = $__require('d3');
  function multicast(subjectOrSubjectFactory) {
    var subjectFactory;
    if (typeof subjectOrSubjectFactory === 'function') {
      subjectFactory = subjectOrSubjectFactory;
    } else {
      subjectFactory = function subjectFactory() {
        return subjectOrSubjectFactory;
      };
    }
    return new ConnectableObservable_1.ConnectableObservable(this, subjectFactory);
  }
  exports.multicast = multicast;
  return module.exports;
});

$__System.registerDynamic("d4", ["b4", "4"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var multicast_1 = $__require('b4');
  var Subject_1 = $__require('4');
  function shareSubjectFactory() {
    return new Subject_1.Subject();
  }
  function share() {
    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
  }
  exports.share = share;
  ;
  return module.exports;
});

$__System.registerDynamic("d5", ["7", "d4"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var share_1 = $__require('d4');
  Observable_1.Observable.prototype.share = share_1.share;
  return module.exports;
});

$__System.registerDynamic("d6", ["62", "96"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var EmptyError_1 = $__require('96');
  function single(predicate) {
    return this.lift(new SingleOperator(predicate, this));
  }
  exports.single = single;
  var SingleOperator = (function() {
    function SingleOperator(predicate, source) {
      this.predicate = predicate;
      this.source = source;
    }
    SingleOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
    };
    return SingleOperator;
  }());
  var SingleSubscriber = (function(_super) {
    __extends(SingleSubscriber, _super);
    function SingleSubscriber(destination, predicate, source) {
      _super.call(this, destination);
      this.predicate = predicate;
      this.source = source;
      this.seenValue = false;
      this.index = 0;
    }
    SingleSubscriber.prototype.applySingleValue = function(value) {
      if (this.seenValue) {
        this.destination.error('Sequence contains more than one element');
      } else {
        this.seenValue = true;
        this.singleValue = value;
      }
    };
    SingleSubscriber.prototype._next = function(value) {
      var predicate = this.predicate;
      this.index++;
      if (predicate) {
        this.tryNext(value);
      } else {
        this.applySingleValue(value);
      }
    };
    SingleSubscriber.prototype.tryNext = function(value) {
      try {
        var result = this.predicate(value, this.index, this.source);
        if (result) {
          this.applySingleValue(value);
        }
      } catch (err) {
        this.destination.error(err);
      }
    };
    SingleSubscriber.prototype._complete = function() {
      var destination = this.destination;
      if (this.index > 0) {
        destination.next(this.seenValue ? this.singleValue : undefined);
        destination.complete();
      } else {
        destination.error(new EmptyError_1.EmptyError);
      }
    };
    return SingleSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("d7", ["7", "d6"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var single_1 = $__require('d6');
  Observable_1.Observable.prototype.single = single_1.single;
  return module.exports;
});

$__System.registerDynamic("d8", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function skip(total) {
    return this.lift(new SkipOperator(total));
  }
  exports.skip = skip;
  var SkipOperator = (function() {
    function SkipOperator(total) {
      this.total = total;
    }
    SkipOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new SkipSubscriber(subscriber, this.total));
    };
    return SkipOperator;
  }());
  var SkipSubscriber = (function(_super) {
    __extends(SkipSubscriber, _super);
    function SkipSubscriber(destination, total) {
      _super.call(this, destination);
      this.total = total;
      this.count = 0;
    }
    SkipSubscriber.prototype._next = function(x) {
      if (++this.count > this.total) {
        this.destination.next(x);
      }
    };
    return SkipSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("d9", ["7", "d8"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var skip_1 = $__require('d8');
  Observable_1.Observable.prototype.skip = skip_1.skip;
  return module.exports;
});

$__System.registerDynamic("da", ["20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function skipUntil(notifier) {
    return this.lift(new SkipUntilOperator(notifier));
  }
  exports.skipUntil = skipUntil;
  var SkipUntilOperator = (function() {
    function SkipUntilOperator(notifier) {
      this.notifier = notifier;
    }
    SkipUntilOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));
    };
    return SkipUntilOperator;
  }());
  var SkipUntilSubscriber = (function(_super) {
    __extends(SkipUntilSubscriber, _super);
    function SkipUntilSubscriber(destination, notifier) {
      _super.call(this, destination);
      this.hasValue = false;
      this.isInnerStopped = false;
      this.add(subscribeToResult_1.subscribeToResult(this, notifier));
    }
    SkipUntilSubscriber.prototype._next = function(value) {
      if (this.hasValue) {
        _super.prototype._next.call(this, value);
      }
    };
    SkipUntilSubscriber.prototype._complete = function() {
      if (this.isInnerStopped) {
        _super.prototype._complete.call(this);
      } else {
        this.unsubscribe();
      }
    };
    SkipUntilSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.hasValue = true;
    };
    SkipUntilSubscriber.prototype.notifyComplete = function() {
      this.isInnerStopped = true;
      if (this.isStopped) {
        _super.prototype._complete.call(this);
      }
    };
    return SkipUntilSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("db", ["7", "da"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var skipUntil_1 = $__require('da');
  Observable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;
  return module.exports;
});

$__System.registerDynamic("dc", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function skipWhile(predicate) {
    return this.lift(new SkipWhileOperator(predicate));
  }
  exports.skipWhile = skipWhile;
  var SkipWhileOperator = (function() {
    function SkipWhileOperator(predicate) {
      this.predicate = predicate;
    }
    SkipWhileOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
    };
    return SkipWhileOperator;
  }());
  var SkipWhileSubscriber = (function(_super) {
    __extends(SkipWhileSubscriber, _super);
    function SkipWhileSubscriber(destination, predicate) {
      _super.call(this, destination);
      this.predicate = predicate;
      this.skipping = true;
      this.index = 0;
    }
    SkipWhileSubscriber.prototype._next = function(value) {
      var destination = this.destination;
      if (this.skipping) {
        this.tryCallPredicate(value);
      }
      if (!this.skipping) {
        destination.next(value);
      }
    };
    SkipWhileSubscriber.prototype.tryCallPredicate = function(value) {
      try {
        var result = this.predicate(value, this.index++);
        this.skipping = Boolean(result);
      } catch (err) {
        this.destination.error(err);
      }
    };
    return SkipWhileSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("dd", ["7", "dc"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var skipWhile_1 = $__require('dc');
  Observable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;
  return module.exports;
});

$__System.registerDynamic("74", ["20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function mergeAll(concurrent) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }
    return this.lift(new MergeAllOperator(concurrent));
  }
  exports.mergeAll = mergeAll;
  var MergeAllOperator = (function() {
    function MergeAllOperator(concurrent) {
      this.concurrent = concurrent;
    }
    MergeAllOperator.prototype.call = function(observer, source) {
      return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));
    };
    return MergeAllOperator;
  }());
  exports.MergeAllOperator = MergeAllOperator;
  var MergeAllSubscriber = (function(_super) {
    __extends(MergeAllSubscriber, _super);
    function MergeAllSubscriber(destination, concurrent) {
      _super.call(this, destination);
      this.concurrent = concurrent;
      this.hasCompleted = false;
      this.buffer = [];
      this.active = 0;
    }
    MergeAllSubscriber.prototype._next = function(observable) {
      if (this.active < this.concurrent) {
        this.active++;
        this.add(subscribeToResult_1.subscribeToResult(this, observable));
      } else {
        this.buffer.push(observable);
      }
    };
    MergeAllSubscriber.prototype._complete = function() {
      this.hasCompleted = true;
      if (this.active === 0 && this.buffer.length === 0) {
        this.destination.complete();
      }
    };
    MergeAllSubscriber.prototype.notifyComplete = function(innerSub) {
      var buffer = this.buffer;
      this.remove(innerSub);
      this.active--;
      if (buffer.length > 0) {
        this._next(buffer.shift());
      } else if (this.active === 0 && this.hasCompleted) {
        this.destination.complete();
      }
    };
    return MergeAllSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  exports.MergeAllSubscriber = MergeAllSubscriber;
  return module.exports;
});

$__System.registerDynamic("1c", ["33", "34", "74"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isScheduler_1 = $__require('33');
  var ArrayObservable_1 = $__require('34');
  var mergeAll_1 = $__require('74');
  function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      observables[_i - 0] = arguments[_i];
    }
    return concatStatic.apply(void 0, [this].concat(observables));
  }
  exports.concat = concat;
  function concatStatic() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      observables[_i - 0] = arguments[_i];
    }
    var scheduler = null;
    var args = observables;
    if (isScheduler_1.isScheduler(args[observables.length - 1])) {
      scheduler = args.pop();
    }
    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(1));
  }
  exports.concatStatic = concatStatic;
  return module.exports;
});

$__System.registerDynamic("de", ["34", "30", "24", "1c", "33"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var ArrayObservable_1 = $__require('34');
  var ScalarObservable_1 = $__require('30');
  var EmptyObservable_1 = $__require('24');
  var concat_1 = $__require('1c');
  var isScheduler_1 = $__require('33');
  function startWith() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      array[_i - 0] = arguments[_i];
    }
    var scheduler = array[array.length - 1];
    if (isScheduler_1.isScheduler(scheduler)) {
      array.pop();
    } else {
      scheduler = null;
    }
    var len = array.length;
    if (len === 1) {
      return concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);
    } else if (len > 1) {
      return concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array, scheduler), this);
    } else {
      return concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler), this);
    }
  }
  exports.startWith = startWith;
  return module.exports;
});

$__System.registerDynamic("df", ["7", "de"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var startWith_1 = $__require('de');
  Observable_1.Observable.prototype.startWith = startWith_1.startWith;
  return module.exports;
});

$__System.registerDynamic("43", ["27"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isArray_1 = $__require('27');
  function isNumeric(val) {
    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;
  }
  exports.isNumeric = isNumeric;
  ;
  return module.exports;
});

$__System.registerDynamic("e0", ["7", "e1", "43"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var asap_1 = $__require('e1');
  var isNumeric_1 = $__require('43');
  var SubscribeOnObservable = (function(_super) {
    __extends(SubscribeOnObservable, _super);
    function SubscribeOnObservable(source, delayTime, scheduler) {
      if (delayTime === void 0) {
        delayTime = 0;
      }
      if (scheduler === void 0) {
        scheduler = asap_1.asap;
      }
      _super.call(this);
      this.source = source;
      this.delayTime = delayTime;
      this.scheduler = scheduler;
      if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {
        this.delayTime = 0;
      }
      if (!scheduler || typeof scheduler.schedule !== 'function') {
        this.scheduler = asap_1.asap;
      }
    }
    SubscribeOnObservable.create = function(source, delay, scheduler) {
      if (delay === void 0) {
        delay = 0;
      }
      if (scheduler === void 0) {
        scheduler = asap_1.asap;
      }
      return new SubscribeOnObservable(source, delay, scheduler);
    };
    SubscribeOnObservable.dispatch = function(arg) {
      var source = arg.source,
          subscriber = arg.subscriber;
      return source.subscribe(subscriber);
    };
    SubscribeOnObservable.prototype._subscribe = function(subscriber) {
      var delay = this.delayTime;
      var source = this.source;
      var scheduler = this.scheduler;
      return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
        source: source,
        subscriber: subscriber
      });
    };
    return SubscribeOnObservable;
  }(Observable_1.Observable));
  exports.SubscribeOnObservable = SubscribeOnObservable;
  return module.exports;
});

$__System.registerDynamic("e2", ["e0"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var SubscribeOnObservable_1 = $__require('e0');
  function subscribeOn(scheduler, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return new SubscribeOnObservable_1.SubscribeOnObservable(this, delay, scheduler);
  }
  exports.subscribeOn = subscribeOn;
  return module.exports;
});

$__System.registerDynamic("e3", ["7", "e2"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var subscribeOn_1 = $__require('e2');
  Observable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;
  return module.exports;
});

$__System.registerDynamic("e4", ["20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function _switch() {
    return this.lift(new SwitchOperator());
  }
  exports._switch = _switch;
  var SwitchOperator = (function() {
    function SwitchOperator() {}
    SwitchOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new SwitchSubscriber(subscriber));
    };
    return SwitchOperator;
  }());
  var SwitchSubscriber = (function(_super) {
    __extends(SwitchSubscriber, _super);
    function SwitchSubscriber(destination) {
      _super.call(this, destination);
      this.active = 0;
      this.hasCompleted = false;
    }
    SwitchSubscriber.prototype._next = function(value) {
      this.unsubscribeInner();
      this.active++;
      this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, value));
    };
    SwitchSubscriber.prototype._complete = function() {
      this.hasCompleted = true;
      if (this.active === 0) {
        this.destination.complete();
      }
    };
    SwitchSubscriber.prototype.unsubscribeInner = function() {
      this.active = this.active > 0 ? this.active - 1 : 0;
      var innerSubscription = this.innerSubscription;
      if (innerSubscription) {
        innerSubscription.unsubscribe();
        this.remove(innerSubscription);
      }
    };
    SwitchSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.destination.next(innerValue);
    };
    SwitchSubscriber.prototype.notifyError = function(err) {
      this.destination.error(err);
    };
    SwitchSubscriber.prototype.notifyComplete = function() {
      this.unsubscribeInner();
      if (this.hasCompleted && this.active === 0) {
        this.destination.complete();
      }
    };
    return SwitchSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("e5", ["7", "e4"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var switch_1 = $__require('e4');
  Observable_1.Observable.prototype.switch = switch_1._switch;
  return module.exports;
});

$__System.registerDynamic("e6", ["20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function switchMap(project, resultSelector) {
    return this.lift(new SwitchMapOperator(project, resultSelector));
  }
  exports.switchMap = switchMap;
  var SwitchMapOperator = (function() {
    function SwitchMapOperator(project, resultSelector) {
      this.project = project;
      this.resultSelector = resultSelector;
    }
    SwitchMapOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));
    };
    return SwitchMapOperator;
  }());
  var SwitchMapSubscriber = (function(_super) {
    __extends(SwitchMapSubscriber, _super);
    function SwitchMapSubscriber(destination, project, resultSelector) {
      _super.call(this, destination);
      this.project = project;
      this.resultSelector = resultSelector;
      this.index = 0;
    }
    SwitchMapSubscriber.prototype._next = function(value) {
      var result;
      var index = this.index++;
      try {
        result = this.project(value, index);
      } catch (error) {
        this.destination.error(error);
        return;
      }
      this._innerSub(result, value, index);
    };
    SwitchMapSubscriber.prototype._innerSub = function(result, value, index) {
      var innerSubscription = this.innerSubscription;
      if (innerSubscription) {
        innerSubscription.unsubscribe();
      }
      this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));
    };
    SwitchMapSubscriber.prototype._complete = function() {
      var innerSubscription = this.innerSubscription;
      if (!innerSubscription || innerSubscription.isUnsubscribed) {
        _super.prototype._complete.call(this);
      }
    };
    SwitchMapSubscriber.prototype._unsubscribe = function() {
      this.innerSubscription = null;
    };
    SwitchMapSubscriber.prototype.notifyComplete = function(innerSub) {
      this.remove(innerSub);
      this.innerSubscription = null;
      if (this.isStopped) {
        _super.prototype._complete.call(this);
      }
    };
    SwitchMapSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      if (this.resultSelector) {
        this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);
      } else {
        this.destination.next(innerValue);
      }
    };
    SwitchMapSubscriber.prototype._tryNotifyNext = function(outerValue, innerValue, outerIndex, innerIndex) {
      var result;
      try {
        result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this.destination.next(result);
    };
    return SwitchMapSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("e7", ["7", "e6"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var switchMap_1 = $__require('e6');
  Observable_1.Observable.prototype.switchMap = switchMap_1.switchMap;
  return module.exports;
});

$__System.registerDynamic("e8", ["20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function switchMapTo(innerObservable, resultSelector) {
    return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));
  }
  exports.switchMapTo = switchMapTo;
  var SwitchMapToOperator = (function() {
    function SwitchMapToOperator(observable, resultSelector) {
      this.observable = observable;
      this.resultSelector = resultSelector;
    }
    SwitchMapToOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));
    };
    return SwitchMapToOperator;
  }());
  var SwitchMapToSubscriber = (function(_super) {
    __extends(SwitchMapToSubscriber, _super);
    function SwitchMapToSubscriber(destination, inner, resultSelector) {
      _super.call(this, destination);
      this.inner = inner;
      this.resultSelector = resultSelector;
      this.index = 0;
    }
    SwitchMapToSubscriber.prototype._next = function(value) {
      var innerSubscription = this.innerSubscription;
      if (innerSubscription) {
        innerSubscription.unsubscribe();
      }
      this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));
    };
    SwitchMapToSubscriber.prototype._complete = function() {
      var innerSubscription = this.innerSubscription;
      if (!innerSubscription || innerSubscription.isUnsubscribed) {
        _super.prototype._complete.call(this);
      }
    };
    SwitchMapToSubscriber.prototype._unsubscribe = function() {
      this.innerSubscription = null;
    };
    SwitchMapToSubscriber.prototype.notifyComplete = function(innerSub) {
      this.remove(innerSub);
      this.innerSubscription = null;
      if (this.isStopped) {
        _super.prototype._complete.call(this);
      }
    };
    SwitchMapToSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      var _a = this,
          resultSelector = _a.resultSelector,
          destination = _a.destination;
      if (resultSelector) {
        this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);
      } else {
        destination.next(innerValue);
      }
    };
    SwitchMapToSubscriber.prototype.tryResultSelector = function(outerValue, innerValue, outerIndex, innerIndex) {
      var _a = this,
          resultSelector = _a.resultSelector,
          destination = _a.destination;
      var result;
      try {
        result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
      } catch (err) {
        destination.error(err);
        return;
      }
      destination.next(result);
    };
    return SwitchMapToSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("e9", ["7", "e8"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var switchMapTo_1 = $__require('e8');
  Observable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;
  return module.exports;
});

$__System.registerDynamic("ea", ["62", "eb", "24"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var ArgumentOutOfRangeError_1 = $__require('eb');
  var EmptyObservable_1 = $__require('24');
  function take(total) {
    if (total === 0) {
      return new EmptyObservable_1.EmptyObservable();
    } else {
      return this.lift(new TakeOperator(total));
    }
  }
  exports.take = take;
  var TakeOperator = (function() {
    function TakeOperator(total) {
      this.total = total;
      if (this.total < 0) {
        throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
      }
    }
    TakeOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new TakeSubscriber(subscriber, this.total));
    };
    return TakeOperator;
  }());
  var TakeSubscriber = (function(_super) {
    __extends(TakeSubscriber, _super);
    function TakeSubscriber(destination, total) {
      _super.call(this, destination);
      this.total = total;
      this.count = 0;
    }
    TakeSubscriber.prototype._next = function(value) {
      var total = this.total;
      if (++this.count <= total) {
        this.destination.next(value);
        if (this.count === total) {
          this.destination.complete();
          this.unsubscribe();
        }
      }
    };
    return TakeSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("ec", ["7", "ea"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var take_1 = $__require('ea');
  Observable_1.Observable.prototype.take = take_1.take;
  return module.exports;
});

$__System.registerDynamic("ed", ["62", "eb", "24"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var ArgumentOutOfRangeError_1 = $__require('eb');
  var EmptyObservable_1 = $__require('24');
  function takeLast(total) {
    if (total === 0) {
      return new EmptyObservable_1.EmptyObservable();
    } else {
      return this.lift(new TakeLastOperator(total));
    }
  }
  exports.takeLast = takeLast;
  var TakeLastOperator = (function() {
    function TakeLastOperator(total) {
      this.total = total;
      if (this.total < 0) {
        throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
      }
    }
    TakeLastOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new TakeLastSubscriber(subscriber, this.total));
    };
    return TakeLastOperator;
  }());
  var TakeLastSubscriber = (function(_super) {
    __extends(TakeLastSubscriber, _super);
    function TakeLastSubscriber(destination, total) {
      _super.call(this, destination);
      this.total = total;
      this.ring = new Array();
      this.count = 0;
    }
    TakeLastSubscriber.prototype._next = function(value) {
      var ring = this.ring;
      var total = this.total;
      var count = this.count++;
      if (ring.length < total) {
        ring.push(value);
      } else {
        var index = count % total;
        ring[index] = value;
      }
    };
    TakeLastSubscriber.prototype._complete = function() {
      var destination = this.destination;
      var count = this.count;
      if (count > 0) {
        var total = this.count >= this.total ? this.total : this.count;
        var ring = this.ring;
        for (var i = 0; i < total; i++) {
          var idx = (count++) % total;
          destination.next(ring[idx]);
        }
      }
      destination.complete();
    };
    return TakeLastSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("ee", ["7", "ed"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var takeLast_1 = $__require('ed');
  Observable_1.Observable.prototype.takeLast = takeLast_1.takeLast;
  return module.exports;
});

$__System.registerDynamic("ef", ["20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function takeUntil(notifier) {
    return this.lift(new TakeUntilOperator(notifier));
  }
  exports.takeUntil = takeUntil;
  var TakeUntilOperator = (function() {
    function TakeUntilOperator(notifier) {
      this.notifier = notifier;
    }
    TakeUntilOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));
    };
    return TakeUntilOperator;
  }());
  var TakeUntilSubscriber = (function(_super) {
    __extends(TakeUntilSubscriber, _super);
    function TakeUntilSubscriber(destination, notifier) {
      _super.call(this, destination);
      this.notifier = notifier;
      this.add(subscribeToResult_1.subscribeToResult(this, notifier));
    }
    TakeUntilSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.complete();
    };
    TakeUntilSubscriber.prototype.notifyComplete = function() {};
    return TakeUntilSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("f0", ["7", "ef"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var takeUntil_1 = $__require('ef');
  Observable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;
  return module.exports;
});

$__System.registerDynamic("f1", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function takeWhile(predicate) {
    return this.lift(new TakeWhileOperator(predicate));
  }
  exports.takeWhile = takeWhile;
  var TakeWhileOperator = (function() {
    function TakeWhileOperator(predicate) {
      this.predicate = predicate;
    }
    TakeWhileOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));
    };
    return TakeWhileOperator;
  }());
  var TakeWhileSubscriber = (function(_super) {
    __extends(TakeWhileSubscriber, _super);
    function TakeWhileSubscriber(destination, predicate) {
      _super.call(this, destination);
      this.predicate = predicate;
      this.index = 0;
    }
    TakeWhileSubscriber.prototype._next = function(value) {
      var destination = this.destination;
      var result;
      try {
        result = this.predicate(value, this.index++);
      } catch (err) {
        destination.error(err);
        return;
      }
      this.nextOrComplete(value, result);
    };
    TakeWhileSubscriber.prototype.nextOrComplete = function(value, predicateResult) {
      var destination = this.destination;
      if (Boolean(predicateResult)) {
        destination.next(value);
      } else {
        destination.complete();
      }
    };
    return TakeWhileSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("f2", ["7", "f1"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var takeWhile_1 = $__require('f1');
  Observable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;
  return module.exports;
});

$__System.registerDynamic("f3", ["20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function throttle(durationSelector) {
    return this.lift(new ThrottleOperator(durationSelector));
  }
  exports.throttle = throttle;
  var ThrottleOperator = (function() {
    function ThrottleOperator(durationSelector) {
      this.durationSelector = durationSelector;
    }
    ThrottleOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));
    };
    return ThrottleOperator;
  }());
  var ThrottleSubscriber = (function(_super) {
    __extends(ThrottleSubscriber, _super);
    function ThrottleSubscriber(destination, durationSelector) {
      _super.call(this, destination);
      this.destination = destination;
      this.durationSelector = durationSelector;
    }
    ThrottleSubscriber.prototype._next = function(value) {
      if (!this.throttled) {
        this.tryDurationSelector(value);
      }
    };
    ThrottleSubscriber.prototype.tryDurationSelector = function(value) {
      var duration = null;
      try {
        duration = this.durationSelector(value);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this.emitAndThrottle(value, duration);
    };
    ThrottleSubscriber.prototype.emitAndThrottle = function(value, duration) {
      this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
      this.destination.next(value);
    };
    ThrottleSubscriber.prototype._unsubscribe = function() {
      var throttled = this.throttled;
      if (throttled) {
        this.remove(throttled);
        this.throttled = null;
        throttled.unsubscribe();
      }
    };
    ThrottleSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this._unsubscribe();
    };
    ThrottleSubscriber.prototype.notifyComplete = function() {
      this._unsubscribe();
    };
    return ThrottleSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("f4", ["7", "f3"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var throttle_1 = $__require('f3');
  Observable_1.Observable.prototype.throttle = throttle_1.throttle;
  return module.exports;
});

$__System.registerDynamic("f5", ["62", "44"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var async_1 = $__require('44');
  function throttleTime(delay, scheduler) {
    if (scheduler === void 0) {
      scheduler = async_1.async;
    }
    return this.lift(new ThrottleTimeOperator(delay, scheduler));
  }
  exports.throttleTime = throttleTime;
  var ThrottleTimeOperator = (function() {
    function ThrottleTimeOperator(delay, scheduler) {
      this.delay = delay;
      this.scheduler = scheduler;
    }
    ThrottleTimeOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.delay, this.scheduler));
    };
    return ThrottleTimeOperator;
  }());
  var ThrottleTimeSubscriber = (function(_super) {
    __extends(ThrottleTimeSubscriber, _super);
    function ThrottleTimeSubscriber(destination, delay, scheduler) {
      _super.call(this, destination);
      this.delay = delay;
      this.scheduler = scheduler;
    }
    ThrottleTimeSubscriber.prototype._next = function(value) {
      if (!this.throttled) {
        this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.delay, {subscriber: this}));
        this.destination.next(value);
      }
    };
    ThrottleTimeSubscriber.prototype.clearThrottle = function() {
      var throttled = this.throttled;
      if (throttled) {
        throttled.unsubscribe();
        this.remove(throttled);
        this.throttled = null;
      }
    };
    return ThrottleTimeSubscriber;
  }(Subscriber_1.Subscriber));
  function dispatchNext(arg) {
    var subscriber = arg.subscriber;
    subscriber.clearThrottle();
  }
  return module.exports;
});

$__System.registerDynamic("f6", ["7", "f5"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var throttleTime_1 = $__require('f5');
  Observable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;
  return module.exports;
});

$__System.registerDynamic("f7", ["44", "59", "62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var async_1 = $__require('44');
  var isDate_1 = $__require('59');
  var Subscriber_1 = $__require('62');
  function timeout(due, errorToSend, scheduler) {
    if (errorToSend === void 0) {
      errorToSend = null;
    }
    if (scheduler === void 0) {
      scheduler = async_1.async;
    }
    var absoluteTimeout = isDate_1.isDate(due);
    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
    return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));
  }
  exports.timeout = timeout;
  var TimeoutOperator = (function() {
    function TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler) {
      this.waitFor = waitFor;
      this.absoluteTimeout = absoluteTimeout;
      this.errorToSend = errorToSend;
      this.scheduler = scheduler;
    }
    TimeoutOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler));
    };
    return TimeoutOperator;
  }());
  var TimeoutSubscriber = (function(_super) {
    __extends(TimeoutSubscriber, _super);
    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, errorToSend, scheduler) {
      _super.call(this, destination);
      this.absoluteTimeout = absoluteTimeout;
      this.waitFor = waitFor;
      this.errorToSend = errorToSend;
      this.scheduler = scheduler;
      this.index = 0;
      this._previousIndex = 0;
      this._hasCompleted = false;
      this.scheduleTimeout();
    }
    Object.defineProperty(TimeoutSubscriber.prototype, "previousIndex", {
      get: function() {
        return this._previousIndex;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TimeoutSubscriber.prototype, "hasCompleted", {
      get: function() {
        return this._hasCompleted;
      },
      enumerable: true,
      configurable: true
    });
    TimeoutSubscriber.dispatchTimeout = function(state) {
      var source = state.subscriber;
      var currentIndex = state.index;
      if (!source.hasCompleted && source.previousIndex === currentIndex) {
        source.notifyTimeout();
      }
    };
    TimeoutSubscriber.prototype.scheduleTimeout = function() {
      var currentIndex = this.index;
      this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, {
        subscriber: this,
        index: currentIndex
      });
      this.index++;
      this._previousIndex = currentIndex;
    };
    TimeoutSubscriber.prototype._next = function(value) {
      this.destination.next(value);
      if (!this.absoluteTimeout) {
        this.scheduleTimeout();
      }
    };
    TimeoutSubscriber.prototype._error = function(err) {
      this.destination.error(err);
      this._hasCompleted = true;
    };
    TimeoutSubscriber.prototype._complete = function() {
      this.destination.complete();
      this._hasCompleted = true;
    };
    TimeoutSubscriber.prototype.notifyTimeout = function() {
      this.error(this.errorToSend || new Error('timeout'));
    };
    return TimeoutSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("f8", ["7", "f7"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var timeout_1 = $__require('f7');
  Observable_1.Observable.prototype.timeout = timeout_1.timeout;
  return module.exports;
});

$__System.registerDynamic("59", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function isDate(value) {
    return value instanceof Date && !isNaN(+value);
  }
  exports.isDate = isDate;
  return module.exports;
});

$__System.registerDynamic("f9", ["44", "59", "20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var async_1 = $__require('44');
  var isDate_1 = $__require('59');
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function timeoutWith(due, withObservable, scheduler) {
    if (scheduler === void 0) {
      scheduler = async_1.async;
    }
    var absoluteTimeout = isDate_1.isDate(due);
    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
    return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
  }
  exports.timeoutWith = timeoutWith;
  var TimeoutWithOperator = (function() {
    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
      this.waitFor = waitFor;
      this.absoluteTimeout = absoluteTimeout;
      this.withObservable = withObservable;
      this.scheduler = scheduler;
    }
    TimeoutWithOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
    };
    return TimeoutWithOperator;
  }());
  var TimeoutWithSubscriber = (function(_super) {
    __extends(TimeoutWithSubscriber, _super);
    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
      _super.call(this);
      this.destination = destination;
      this.absoluteTimeout = absoluteTimeout;
      this.waitFor = waitFor;
      this.withObservable = withObservable;
      this.scheduler = scheduler;
      this.timeoutSubscription = undefined;
      this.index = 0;
      this._previousIndex = 0;
      this._hasCompleted = false;
      destination.add(this);
      this.scheduleTimeout();
    }
    Object.defineProperty(TimeoutWithSubscriber.prototype, "previousIndex", {
      get: function() {
        return this._previousIndex;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TimeoutWithSubscriber.prototype, "hasCompleted", {
      get: function() {
        return this._hasCompleted;
      },
      enumerable: true,
      configurable: true
    });
    TimeoutWithSubscriber.dispatchTimeout = function(state) {
      var source = state.subscriber;
      var currentIndex = state.index;
      if (!source.hasCompleted && source.previousIndex === currentIndex) {
        source.handleTimeout();
      }
    };
    TimeoutWithSubscriber.prototype.scheduleTimeout = function() {
      var currentIndex = this.index;
      var timeoutState = {
        subscriber: this,
        index: currentIndex
      };
      this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);
      this.index++;
      this._previousIndex = currentIndex;
    };
    TimeoutWithSubscriber.prototype._next = function(value) {
      this.destination.next(value);
      if (!this.absoluteTimeout) {
        this.scheduleTimeout();
      }
    };
    TimeoutWithSubscriber.prototype._error = function(err) {
      this.destination.error(err);
      this._hasCompleted = true;
    };
    TimeoutWithSubscriber.prototype._complete = function() {
      this.destination.complete();
      this._hasCompleted = true;
    };
    TimeoutWithSubscriber.prototype.handleTimeout = function() {
      if (!this.isUnsubscribed) {
        var withObservable = this.withObservable;
        this.unsubscribe();
        this.destination.add(this.timeoutSubscription = subscribeToResult_1.subscribeToResult(this, withObservable));
      }
    };
    return TimeoutWithSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("fa", ["7", "f9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var timeoutWith_1 = $__require('f9');
  Observable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;
  return module.exports;
});

$__System.registerDynamic("fb", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  function toArray() {
    return this.lift(new ToArrayOperator());
  }
  exports.toArray = toArray;
  var ToArrayOperator = (function() {
    function ToArrayOperator() {}
    ToArrayOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new ToArraySubscriber(subscriber));
    };
    return ToArrayOperator;
  }());
  var ToArraySubscriber = (function(_super) {
    __extends(ToArraySubscriber, _super);
    function ToArraySubscriber(destination) {
      _super.call(this, destination);
      this.array = [];
    }
    ToArraySubscriber.prototype._next = function(x) {
      this.array.push(x);
    };
    ToArraySubscriber.prototype._complete = function() {
      this.destination.next(this.array);
      this.destination.complete();
    };
    return ToArraySubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("fc", ["7", "fb"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var toArray_1 = $__require('fb');
  Observable_1.Observable.prototype.toArray = toArray_1.toArray;
  return module.exports;
});

$__System.registerDynamic("fd", ["7", "6"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var toPromise_1 = $__require('6');
  Observable_1.Observable.prototype.toPromise = toPromise_1.toPromise;
  return module.exports;
});

$__System.registerDynamic("fe", ["4", "20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subject_1 = $__require('4');
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function window(windowBoundaries) {
    return this.lift(new WindowOperator(windowBoundaries));
  }
  exports.window = window;
  var WindowOperator = (function() {
    function WindowOperator(windowBoundaries) {
      this.windowBoundaries = windowBoundaries;
    }
    WindowOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new WindowSubscriber(subscriber, this.windowBoundaries));
    };
    return WindowOperator;
  }());
  var WindowSubscriber = (function(_super) {
    __extends(WindowSubscriber, _super);
    function WindowSubscriber(destination, windowBoundaries) {
      _super.call(this, destination);
      this.destination = destination;
      this.windowBoundaries = windowBoundaries;
      this.add(subscribeToResult_1.subscribeToResult(this, windowBoundaries));
      this.openWindow();
    }
    WindowSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.openWindow();
    };
    WindowSubscriber.prototype.notifyError = function(error, innerSub) {
      this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function(innerSub) {
      this._complete();
    };
    WindowSubscriber.prototype._next = function(value) {
      this.window.next(value);
    };
    WindowSubscriber.prototype._error = function(err) {
      this.window.error(err);
      this.destination.error(err);
    };
    WindowSubscriber.prototype._complete = function() {
      this.window.complete();
      this.destination.complete();
    };
    WindowSubscriber.prototype.openWindow = function() {
      var prevWindow = this.window;
      if (prevWindow) {
        prevWindow.complete();
      }
      var destination = this.destination;
      var newWindow = this.window = new Subject_1.Subject();
      destination.add(newWindow);
      destination.next(newWindow);
    };
    return WindowSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("ff", ["7", "fe"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var window_1 = $__require('fe');
  Observable_1.Observable.prototype.window = window_1.window;
  return module.exports;
});

$__System.registerDynamic("100", ["62", "4"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var Subject_1 = $__require('4');
  function windowCount(windowSize, startWindowEvery) {
    if (startWindowEvery === void 0) {
      startWindowEvery = 0;
    }
    return this.lift(new WindowCountOperator(windowSize, startWindowEvery));
  }
  exports.windowCount = windowCount;
  var WindowCountOperator = (function() {
    function WindowCountOperator(windowSize, startWindowEvery) {
      this.windowSize = windowSize;
      this.startWindowEvery = startWindowEvery;
    }
    WindowCountOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
    };
    return WindowCountOperator;
  }());
  var WindowCountSubscriber = (function(_super) {
    __extends(WindowCountSubscriber, _super);
    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
      _super.call(this, destination);
      this.destination = destination;
      this.windowSize = windowSize;
      this.startWindowEvery = startWindowEvery;
      this.windows = [new Subject_1.Subject()];
      this.count = 0;
      var firstWindow = this.windows[0];
      destination.add(firstWindow);
      destination.next(firstWindow);
    }
    WindowCountSubscriber.prototype._next = function(value) {
      var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
      var destination = this.destination;
      var windowSize = this.windowSize;
      var windows = this.windows;
      var len = windows.length;
      for (var i = 0; i < len; i++) {
        windows[i].next(value);
      }
      var c = this.count - windowSize + 1;
      if (c >= 0 && c % startWindowEvery === 0) {
        windows.shift().complete();
      }
      if (++this.count % startWindowEvery === 0) {
        var window_1 = new Subject_1.Subject();
        windows.push(window_1);
        destination.add(window_1);
        destination.next(window_1);
      }
    };
    WindowCountSubscriber.prototype._error = function(err) {
      var windows = this.windows;
      while (windows.length > 0) {
        windows.shift().error(err);
      }
      this.destination.error(err);
    };
    WindowCountSubscriber.prototype._complete = function() {
      var windows = this.windows;
      while (windows.length > 0) {
        windows.shift().complete();
      }
      this.destination.complete();
    };
    return WindowCountSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("101", ["7", "100"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var windowCount_1 = $__require('100');
  Observable_1.Observable.prototype.windowCount = windowCount_1.windowCount;
  return module.exports;
});

$__System.registerDynamic("102", ["62", "4", "44"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var Subject_1 = $__require('4');
  var async_1 = $__require('44');
  function windowTime(windowTimeSpan, windowCreationInterval, scheduler) {
    if (windowCreationInterval === void 0) {
      windowCreationInterval = null;
    }
    if (scheduler === void 0) {
      scheduler = async_1.async;
    }
    return this.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler));
  }
  exports.windowTime = windowTime;
  var WindowTimeOperator = (function() {
    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler) {
      this.windowTimeSpan = windowTimeSpan;
      this.windowCreationInterval = windowCreationInterval;
      this.scheduler = scheduler;
    }
    WindowTimeOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler));
    };
    return WindowTimeOperator;
  }());
  var WindowTimeSubscriber = (function(_super) {
    __extends(WindowTimeSubscriber, _super);
    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, scheduler) {
      _super.call(this, destination);
      this.destination = destination;
      this.windowTimeSpan = windowTimeSpan;
      this.windowCreationInterval = windowCreationInterval;
      this.scheduler = scheduler;
      this.windows = [];
      if (windowCreationInterval !== null && windowCreationInterval >= 0) {
        var window_1 = this.openWindow();
        var closeState = {
          subscriber: this,
          window: window_1,
          context: null
        };
        var creationState = {
          windowTimeSpan: windowTimeSpan,
          windowCreationInterval: windowCreationInterval,
          subscriber: this,
          scheduler: scheduler
        };
        this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
        this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
      } else {
        var window_2 = this.openWindow();
        var timeSpanOnlyState = {
          subscriber: this,
          window: window_2,
          windowTimeSpan: windowTimeSpan
        };
        this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
      }
    }
    WindowTimeSubscriber.prototype._next = function(value) {
      var windows = this.windows;
      var len = windows.length;
      for (var i = 0; i < len; i++) {
        var window_3 = windows[i];
        if (!window_3.isUnsubscribed) {
          window_3.next(value);
        }
      }
    };
    WindowTimeSubscriber.prototype._error = function(err) {
      var windows = this.windows;
      while (windows.length > 0) {
        windows.shift().error(err);
      }
      this.destination.error(err);
    };
    WindowTimeSubscriber.prototype._complete = function() {
      var windows = this.windows;
      while (windows.length > 0) {
        var window_4 = windows.shift();
        if (!window_4.isUnsubscribed) {
          window_4.complete();
        }
      }
      this.destination.complete();
    };
    WindowTimeSubscriber.prototype.openWindow = function() {
      var window = new Subject_1.Subject();
      this.windows.push(window);
      var destination = this.destination;
      destination.add(window);
      destination.next(window);
      return window;
    };
    WindowTimeSubscriber.prototype.closeWindow = function(window) {
      window.complete();
      var windows = this.windows;
      windows.splice(windows.indexOf(window), 1);
    };
    return WindowTimeSubscriber;
  }(Subscriber_1.Subscriber));
  function dispatchWindowTimeSpanOnly(state) {
    var subscriber = state.subscriber,
        windowTimeSpan = state.windowTimeSpan,
        window = state.window;
    if (window) {
      window.complete();
    }
    state.window = subscriber.openWindow();
    this.schedule(state, windowTimeSpan);
  }
  function dispatchWindowCreation(state) {
    var windowTimeSpan = state.windowTimeSpan,
        subscriber = state.subscriber,
        scheduler = state.scheduler,
        windowCreationInterval = state.windowCreationInterval;
    var window = subscriber.openWindow();
    var action = this;
    var context = {
      action: action,
      subscription: null
    };
    var timeSpanState = {
      subscriber: subscriber,
      window: window,
      context: context
    };
    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
    action.add(context.subscription);
    action.schedule(state, windowCreationInterval);
  }
  function dispatchWindowClose(arg) {
    var subscriber = arg.subscriber,
        window = arg.window,
        context = arg.context;
    if (context && context.action && context.subscription) {
      context.action.remove(context.subscription);
    }
    subscriber.closeWindow(window);
  }
  return module.exports;
});

$__System.registerDynamic("103", ["7", "102"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var windowTime_1 = $__require('102');
  Observable_1.Observable.prototype.windowTime = windowTime_1.windowTime;
  return module.exports;
});

$__System.registerDynamic("104", ["4", "3a", "11", "12", "20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subject_1 = $__require('4');
  var Subscription_1 = $__require('3a');
  var tryCatch_1 = $__require('11');
  var errorObject_1 = $__require('12');
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function windowToggle(openings, closingSelector) {
    return this.lift(new WindowToggleOperator(openings, closingSelector));
  }
  exports.windowToggle = windowToggle;
  var WindowToggleOperator = (function() {
    function WindowToggleOperator(openings, closingSelector) {
      this.openings = openings;
      this.closingSelector = closingSelector;
    }
    WindowToggleOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return WindowToggleOperator;
  }());
  var WindowToggleSubscriber = (function(_super) {
    __extends(WindowToggleSubscriber, _super);
    function WindowToggleSubscriber(destination, openings, closingSelector) {
      _super.call(this, destination);
      this.openings = openings;
      this.closingSelector = closingSelector;
      this.contexts = [];
      this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));
    }
    WindowToggleSubscriber.prototype._next = function(value) {
      var contexts = this.contexts;
      if (contexts) {
        var len = contexts.length;
        for (var i = 0; i < len; i++) {
          contexts[i].window.next(value);
        }
      }
    };
    WindowToggleSubscriber.prototype._error = function(err) {
      var contexts = this.contexts;
      this.contexts = null;
      if (contexts) {
        var len = contexts.length;
        var index = -1;
        while (++index < len) {
          var context = contexts[index];
          context.window.error(err);
          context.subscription.unsubscribe();
        }
      }
      _super.prototype._error.call(this, err);
    };
    WindowToggleSubscriber.prototype._complete = function() {
      var contexts = this.contexts;
      this.contexts = null;
      if (contexts) {
        var len = contexts.length;
        var index = -1;
        while (++index < len) {
          var context = contexts[index];
          context.window.complete();
          context.subscription.unsubscribe();
        }
      }
      _super.prototype._complete.call(this);
    };
    WindowToggleSubscriber.prototype._unsubscribe = function() {
      var contexts = this.contexts;
      this.contexts = null;
      if (contexts) {
        var len = contexts.length;
        var index = -1;
        while (++index < len) {
          var context = contexts[index];
          context.window.unsubscribe();
          context.subscription.unsubscribe();
        }
      }
    };
    WindowToggleSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      if (outerValue === this.openings) {
        var closingSelector = this.closingSelector;
        var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);
        if (closingNotifier === errorObject_1.errorObject) {
          return this.error(errorObject_1.errorObject.e);
        } else {
          var window_1 = new Subject_1.Subject();
          var subscription = new Subscription_1.Subscription();
          var context = {
            window: window_1,
            subscription: subscription
          };
          this.contexts.push(context);
          var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
          if (innerSubscription.isUnsubscribed) {
            this.closeWindow(this.contexts.length - 1);
          } else {
            innerSubscription.context = context;
            subscription.add(innerSubscription);
          }
          this.destination.next(window_1);
        }
      } else {
        this.closeWindow(this.contexts.indexOf(outerValue));
      }
    };
    WindowToggleSubscriber.prototype.notifyError = function(err) {
      this.error(err);
    };
    WindowToggleSubscriber.prototype.notifyComplete = function(inner) {
      if (inner !== this.openSubscription) {
        this.closeWindow(this.contexts.indexOf(inner.context));
      }
    };
    WindowToggleSubscriber.prototype.closeWindow = function(index) {
      if (index === -1) {
        return;
      }
      var contexts = this.contexts;
      var context = contexts[index];
      var window = context.window,
          subscription = context.subscription;
      contexts.splice(index, 1);
      window.complete();
      subscription.unsubscribe();
    };
    return WindowToggleSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("105", ["7", "104"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var windowToggle_1 = $__require('104');
  Observable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;
  return module.exports;
});

$__System.registerDynamic("106", ["4", "11", "12", "20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subject_1 = $__require('4');
  var tryCatch_1 = $__require('11');
  var errorObject_1 = $__require('12');
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function windowWhen(closingSelector) {
    return this.lift(new WindowOperator(closingSelector));
  }
  exports.windowWhen = windowWhen;
  var WindowOperator = (function() {
    function WindowOperator(closingSelector) {
      this.closingSelector = closingSelector;
    }
    WindowOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));
    };
    return WindowOperator;
  }());
  var WindowSubscriber = (function(_super) {
    __extends(WindowSubscriber, _super);
    function WindowSubscriber(destination, closingSelector) {
      _super.call(this, destination);
      this.destination = destination;
      this.closingSelector = closingSelector;
      this.openWindow();
    }
    WindowSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.openWindow(innerSub);
    };
    WindowSubscriber.prototype.notifyError = function(error, innerSub) {
      this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function(innerSub) {
      this.openWindow(innerSub);
    };
    WindowSubscriber.prototype._next = function(value) {
      this.window.next(value);
    };
    WindowSubscriber.prototype._error = function(err) {
      this.window.error(err);
      this.destination.error(err);
      this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype._complete = function() {
      this.window.complete();
      this.destination.complete();
      this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype.unsubscribeClosingNotification = function() {
      if (this.closingNotification) {
        this.closingNotification.unsubscribe();
      }
    };
    WindowSubscriber.prototype.openWindow = function(innerSub) {
      if (innerSub === void 0) {
        innerSub = null;
      }
      if (innerSub) {
        this.remove(innerSub);
        innerSub.unsubscribe();
      }
      var prevWindow = this.window;
      if (prevWindow) {
        prevWindow.complete();
      }
      var window = this.window = new Subject_1.Subject();
      this.destination.next(window);
      var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
      if (closingNotifier === errorObject_1.errorObject) {
        var err = errorObject_1.errorObject.e;
        this.destination.error(err);
        this.window.error(err);
      } else {
        this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));
        this.add(window);
      }
    };
    return WindowSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("107", ["7", "106"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var windowWhen_1 = $__require('106');
  Observable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;
  return module.exports;
});

$__System.registerDynamic("108", ["20", "1f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  function withLatestFrom() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i - 0] = arguments[_i];
    }
    var project;
    if (typeof args[args.length - 1] === 'function') {
      project = args.pop();
    }
    var observables = args;
    return this.lift(new WithLatestFromOperator(observables, project));
  }
  exports.withLatestFrom = withLatestFrom;
  var WithLatestFromOperator = (function() {
    function WithLatestFromOperator(observables, project) {
      this.observables = observables;
      this.project = project;
    }
    WithLatestFromOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
    };
    return WithLatestFromOperator;
  }());
  var WithLatestFromSubscriber = (function(_super) {
    __extends(WithLatestFromSubscriber, _super);
    function WithLatestFromSubscriber(destination, observables, project) {
      _super.call(this, destination);
      this.observables = observables;
      this.project = project;
      this.toRespond = [];
      var len = observables.length;
      this.values = new Array(len);
      for (var i = 0; i < len; i++) {
        this.toRespond.push(i);
      }
      for (var i = 0; i < len; i++) {
        var observable = observables[i];
        this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
      }
    }
    WithLatestFromSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.values[outerIndex] = innerValue;
      var toRespond = this.toRespond;
      if (toRespond.length > 0) {
        var found = toRespond.indexOf(outerIndex);
        if (found !== -1) {
          toRespond.splice(found, 1);
        }
      }
    };
    WithLatestFromSubscriber.prototype.notifyComplete = function() {};
    WithLatestFromSubscriber.prototype._next = function(value) {
      if (this.toRespond.length === 0) {
        var args = [value].concat(this.values);
        if (this.project) {
          this._tryProject(args);
        } else {
          this.destination.next(args);
        }
      }
    };
    WithLatestFromSubscriber.prototype._tryProject = function(args) {
      var result;
      try {
        result = this.project.apply(this, args);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this.destination.next(result);
    };
    return WithLatestFromSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("109", ["7", "108"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var withLatestFrom_1 = $__require('108');
  Observable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;
  return module.exports;
});

$__System.registerDynamic("10a", ["7", "5d"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var zip_1 = $__require('5d');
  Observable_1.Observable.prototype.zip = zip_1.zipProto;
  return module.exports;
});

$__System.registerDynamic("30", ["7"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var ScalarObservable = (function(_super) {
    __extends(ScalarObservable, _super);
    function ScalarObservable(value, scheduler) {
      _super.call(this);
      this.value = value;
      this.scheduler = scheduler;
      this._isScalar = true;
    }
    ScalarObservable.create = function(value, scheduler) {
      return new ScalarObservable(value, scheduler);
    };
    ScalarObservable.dispatch = function(state) {
      var done = state.done,
          value = state.value,
          subscriber = state.subscriber;
      if (done) {
        subscriber.complete();
        return;
      }
      subscriber.next(value);
      if (subscriber.isUnsubscribed) {
        return;
      }
      state.done = true;
      this.schedule(state);
    };
    ScalarObservable.prototype._subscribe = function(subscriber) {
      var value = this.value;
      var scheduler = this.scheduler;
      if (scheduler) {
        return scheduler.schedule(ScalarObservable.dispatch, 0, {
          done: false,
          value: value,
          subscriber: subscriber
        });
      } else {
        subscriber.next(value);
        if (!subscriber.isUnsubscribed) {
          subscriber.complete();
        }
      }
    };
    return ScalarObservable;
  }(Observable_1.Observable));
  exports.ScalarObservable = ScalarObservable;
  return module.exports;
});

$__System.registerDynamic("24", ["7"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var EmptyObservable = (function(_super) {
    __extends(EmptyObservable, _super);
    function EmptyObservable(scheduler) {
      _super.call(this);
      this.scheduler = scheduler;
    }
    EmptyObservable.create = function(scheduler) {
      return new EmptyObservable(scheduler);
    };
    EmptyObservable.dispatch = function(arg) {
      var subscriber = arg.subscriber;
      subscriber.complete();
    };
    EmptyObservable.prototype._subscribe = function(subscriber) {
      var scheduler = this.scheduler;
      if (scheduler) {
        return scheduler.schedule(EmptyObservable.dispatch, 0, {subscriber: subscriber});
      } else {
        subscriber.complete();
      }
    };
    return EmptyObservable;
  }(Observable_1.Observable));
  exports.EmptyObservable = EmptyObservable;
  return module.exports;
});

$__System.registerDynamic("33", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function isScheduler(value) {
    return value && typeof value.schedule === 'function';
  }
  exports.isScheduler = isScheduler;
  return module.exports;
});

$__System.registerDynamic("34", ["7", "30", "24", "33"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var ScalarObservable_1 = $__require('30');
  var EmptyObservable_1 = $__require('24');
  var isScheduler_1 = $__require('33');
  var ArrayObservable = (function(_super) {
    __extends(ArrayObservable, _super);
    function ArrayObservable(array, scheduler) {
      _super.call(this);
      this.array = array;
      this.scheduler = scheduler;
      if (!scheduler && array.length === 1) {
        this._isScalar = true;
        this.value = array[0];
      }
    }
    ArrayObservable.create = function(array, scheduler) {
      return new ArrayObservable(array, scheduler);
    };
    ArrayObservable.of = function() {
      var array = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        array[_i - 0] = arguments[_i];
      }
      var scheduler = array[array.length - 1];
      if (isScheduler_1.isScheduler(scheduler)) {
        array.pop();
      } else {
        scheduler = null;
      }
      var len = array.length;
      if (len > 1) {
        return new ArrayObservable(array, scheduler);
      } else if (len === 1) {
        return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
      } else {
        return new EmptyObservable_1.EmptyObservable(scheduler);
      }
    };
    ArrayObservable.dispatch = function(state) {
      var array = state.array,
          index = state.index,
          count = state.count,
          subscriber = state.subscriber;
      if (index >= count) {
        subscriber.complete();
        return;
      }
      subscriber.next(array[index]);
      if (subscriber.isUnsubscribed) {
        return;
      }
      state.index = index + 1;
      this.schedule(state);
    };
    ArrayObservable.prototype._subscribe = function(subscriber) {
      var index = 0;
      var array = this.array;
      var count = array.length;
      var scheduler = this.scheduler;
      if (scheduler) {
        return scheduler.schedule(ArrayObservable.dispatch, 0, {
          array: array,
          index: index,
          count: count,
          subscriber: subscriber
        });
      } else {
        for (var i = 0; i < count && !subscriber.isUnsubscribed; i++) {
          subscriber.next(array[i]);
        }
        subscriber.complete();
      }
    };
    return ArrayObservable;
  }(Observable_1.Observable));
  exports.ArrayObservable = ArrayObservable;
  return module.exports;
});

$__System.registerDynamic("20", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var OuterSubscriber = (function(_super) {
    __extends(OuterSubscriber, _super);
    function OuterSubscriber() {
      _super.apply(this, arguments);
    }
    OuterSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function(error, innerSub) {
      this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function(innerSub) {
      this.destination.complete();
    };
    return OuterSubscriber;
  }(Subscriber_1.Subscriber));
  exports.OuterSubscriber = OuterSubscriber;
  return module.exports;
});

$__System.registerDynamic("32", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
  }
  exports.isPromise = isPromise;
  return module.exports;
});

$__System.registerDynamic("10b", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var InnerSubscriber = (function(_super) {
    __extends(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
      _super.call(this);
      this.parent = parent;
      this.outerValue = outerValue;
      this.outerIndex = outerIndex;
      this.index = 0;
    }
    InnerSubscriber.prototype._next = function(value) {
      this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function(error) {
      this.parent.notifyError(error, this);
      this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function() {
      this.parent.notifyComplete(this);
      this.unsubscribe();
    };
    return InnerSubscriber;
  }(Subscriber_1.Subscriber));
  exports.InnerSubscriber = InnerSubscriber;
  return module.exports;
});

$__System.registerDynamic("1f", ["2b", "27", "32", "7", "2e", "35", "10b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var root_1 = $__require('2b');
  var isArray_1 = $__require('27');
  var isPromise_1 = $__require('32');
  var Observable_1 = $__require('7');
  var iterator_1 = $__require('2e');
  var observable_1 = $__require('35');
  var InnerSubscriber_1 = $__require('10b');
  function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    if (destination.isUnsubscribed) {
      return;
    }
    if (result instanceof Observable_1.Observable) {
      if (result._isScalar) {
        destination.next(result.value);
        destination.complete();
        return;
      } else {
        return result.subscribe(destination);
      }
    }
    if (isArray_1.isArray(result)) {
      for (var i = 0,
          len = result.length; i < len && !destination.isUnsubscribed; i++) {
        destination.next(result[i]);
      }
      if (!destination.isUnsubscribed) {
        destination.complete();
      }
    } else if (isPromise_1.isPromise(result)) {
      result.then(function(value) {
        if (!destination.isUnsubscribed) {
          destination.next(value);
          destination.complete();
        }
      }, function(err) {
        return destination.error(err);
      }).then(null, function(err) {
        root_1.root.setTimeout(function() {
          throw err;
        });
      });
      return destination;
    } else if (typeof result[iterator_1.$$iterator] === 'function') {
      for (var _i = 0,
          _a = result; _i < _a.length; _i++) {
        var item = _a[_i];
        destination.next(item);
        if (destination.isUnsubscribed) {
          break;
        }
      }
      if (!destination.isUnsubscribed) {
        destination.complete();
      }
    } else if (typeof result[observable_1.$$observable] === 'function') {
      var obs = result[observable_1.$$observable]();
      if (typeof obs.subscribe !== 'function') {
        destination.error('invalid observable');
      } else {
        return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
      }
    } else {
      destination.error(new TypeError('unknown type returned'));
    }
  }
  exports.subscribeToResult = subscribeToResult;
  return module.exports;
});

$__System.registerDynamic("5d", ["34", "27", "62", "20", "1f", "2e"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ArrayObservable_1 = $__require('34');
  var isArray_1 = $__require('27');
  var Subscriber_1 = $__require('62');
  var OuterSubscriber_1 = $__require('20');
  var subscribeToResult_1 = $__require('1f');
  var iterator_1 = $__require('2e');
  function zipProto() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      observables[_i - 0] = arguments[_i];
    }
    observables.unshift(this);
    return zipStatic.apply(this, observables);
  }
  exports.zipProto = zipProto;
  function zipStatic() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      observables[_i - 0] = arguments[_i];
    }
    var project = observables[observables.length - 1];
    if (typeof project === 'function') {
      observables.pop();
    }
    return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));
  }
  exports.zipStatic = zipStatic;
  var ZipOperator = (function() {
    function ZipOperator(project) {
      this.project = project;
    }
    ZipOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new ZipSubscriber(subscriber, this.project));
    };
    return ZipOperator;
  }());
  exports.ZipOperator = ZipOperator;
  var ZipSubscriber = (function(_super) {
    __extends(ZipSubscriber, _super);
    function ZipSubscriber(destination, project, values) {
      if (values === void 0) {
        values = Object.create(null);
      }
      _super.call(this, destination);
      this.index = 0;
      this.iterators = [];
      this.active = 0;
      this.project = (typeof project === 'function') ? project : null;
      this.values = values;
    }
    ZipSubscriber.prototype._next = function(value) {
      var iterators = this.iterators;
      var index = this.index++;
      if (isArray_1.isArray(value)) {
        iterators.push(new StaticArrayIterator(value));
      } else if (typeof value[iterator_1.$$iterator] === 'function') {
        iterators.push(new StaticIterator(value[iterator_1.$$iterator]()));
      } else {
        iterators.push(new ZipBufferIterator(this.destination, this, value, index));
      }
    };
    ZipSubscriber.prototype._complete = function() {
      var iterators = this.iterators;
      var len = iterators.length;
      this.active = len;
      for (var i = 0; i < len; i++) {
        var iterator = iterators[i];
        if (iterator.stillUnsubscribed) {
          this.add(iterator.subscribe(iterator, i));
        } else {
          this.active--;
        }
      }
    };
    ZipSubscriber.prototype.notifyInactive = function() {
      this.active--;
      if (this.active === 0) {
        this.destination.complete();
      }
    };
    ZipSubscriber.prototype.checkIterators = function() {
      var iterators = this.iterators;
      var len = iterators.length;
      var destination = this.destination;
      for (var i = 0; i < len; i++) {
        var iterator = iterators[i];
        if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
          return;
        }
      }
      var shouldComplete = false;
      var args = [];
      for (var i = 0; i < len; i++) {
        var iterator = iterators[i];
        var result = iterator.next();
        if (iterator.hasCompleted()) {
          shouldComplete = true;
        }
        if (result.done) {
          destination.complete();
          return;
        }
        args.push(result.value);
      }
      if (this.project) {
        this._tryProject(args);
      } else {
        destination.next(args);
      }
      if (shouldComplete) {
        destination.complete();
      }
    };
    ZipSubscriber.prototype._tryProject = function(args) {
      var result;
      try {
        result = this.project.apply(this, args);
      } catch (err) {
        this.destination.error(err);
        return;
      }
      this.destination.next(result);
    };
    return ZipSubscriber;
  }(Subscriber_1.Subscriber));
  exports.ZipSubscriber = ZipSubscriber;
  var StaticIterator = (function() {
    function StaticIterator(iterator) {
      this.iterator = iterator;
      this.nextResult = iterator.next();
    }
    StaticIterator.prototype.hasValue = function() {
      return true;
    };
    StaticIterator.prototype.next = function() {
      var result = this.nextResult;
      this.nextResult = this.iterator.next();
      return result;
    };
    StaticIterator.prototype.hasCompleted = function() {
      var nextResult = this.nextResult;
      return nextResult && nextResult.done;
    };
    return StaticIterator;
  }());
  var StaticArrayIterator = (function() {
    function StaticArrayIterator(array) {
      this.array = array;
      this.index = 0;
      this.length = 0;
      this.length = array.length;
    }
    StaticArrayIterator.prototype[iterator_1.$$iterator] = function() {
      return this;
    };
    StaticArrayIterator.prototype.next = function(value) {
      var i = this.index++;
      var array = this.array;
      return i < this.length ? {
        value: array[i],
        done: false
      } : {done: true};
    };
    StaticArrayIterator.prototype.hasValue = function() {
      return this.array.length > this.index;
    };
    StaticArrayIterator.prototype.hasCompleted = function() {
      return this.array.length === this.index;
    };
    return StaticArrayIterator;
  }());
  var ZipBufferIterator = (function(_super) {
    __extends(ZipBufferIterator, _super);
    function ZipBufferIterator(destination, parent, observable, index) {
      _super.call(this, destination);
      this.parent = parent;
      this.observable = observable;
      this.index = index;
      this.stillUnsubscribed = true;
      this.buffer = [];
      this.isComplete = false;
    }
    ZipBufferIterator.prototype[iterator_1.$$iterator] = function() {
      return this;
    };
    ZipBufferIterator.prototype.next = function() {
      var buffer = this.buffer;
      if (buffer.length === 0 && this.isComplete) {
        return {done: true};
      } else {
        return {
          value: buffer.shift(),
          done: false
        };
      }
    };
    ZipBufferIterator.prototype.hasValue = function() {
      return this.buffer.length > 0;
    };
    ZipBufferIterator.prototype.hasCompleted = function() {
      return this.buffer.length === 0 && this.isComplete;
    };
    ZipBufferIterator.prototype.notifyComplete = function() {
      if (this.buffer.length > 0) {
        this.isComplete = true;
        this.parent.notifyInactive();
      } else {
        this.destination.complete();
      }
    };
    ZipBufferIterator.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.buffer.push(innerValue);
      this.parent.checkIterators();
    };
    ZipBufferIterator.prototype.subscribe = function(value, index) {
      return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);
    };
    return ZipBufferIterator;
  }(OuterSubscriber_1.OuterSubscriber));
  return module.exports;
});

$__System.registerDynamic("10c", ["5d"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var zip_1 = $__require('5d');
  function zipAll(project) {
    return this.lift(new zip_1.ZipOperator(project));
  }
  exports.zipAll = zipAll;
  return module.exports;
});

$__System.registerDynamic("10d", ["7", "10c"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var zipAll_1 = $__require('10c');
  Observable_1.Observable.prototype.zipAll = zipAll_1.zipAll;
  return module.exports;
});

$__System.registerDynamic("10e", ["62"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Subscriber_1 = $__require('62');
  var Operator = (function() {
    function Operator() {}
    Operator.prototype.call = function(subscriber, source) {
      return source._subscribe(new Subscriber_1.Subscriber(subscriber));
    };
    return Operator;
  }());
  exports.Operator = Operator;
  return module.exports;
});

$__System.registerDynamic("13", ["4"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subject_1 = $__require('4');
  var AsyncSubject = (function(_super) {
    __extends(AsyncSubject, _super);
    function AsyncSubject() {
      _super.apply(this, arguments);
      this.value = null;
      this.hasNext = false;
    }
    AsyncSubject.prototype._subscribe = function(subscriber) {
      if (this.hasCompleted && this.hasNext) {
        subscriber.next(this.value);
      }
      return _super.prototype._subscribe.call(this, subscriber);
    };
    AsyncSubject.prototype._next = function(value) {
      this.value = value;
      this.hasNext = true;
    };
    AsyncSubject.prototype._complete = function() {
      var index = -1;
      var observers = this.observers;
      var len = observers.length;
      this.isUnsubscribed = true;
      if (this.hasNext) {
        while (++index < len) {
          var o = observers[index];
          o.next(this.value);
          o.complete();
        }
      } else {
        while (++index < len) {
          observers[index].complete();
        }
      }
      this.isUnsubscribed = false;
      this.unsubscribe();
    };
    return AsyncSubject;
  }(Subject_1.Subject));
  exports.AsyncSubject = AsyncSubject;
  return module.exports;
});

$__System.registerDynamic("36", ["62", "87"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1 = $__require('62');
  var Notification_1 = $__require('87');
  function observeOn(scheduler, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return this.lift(new ObserveOnOperator(scheduler, delay));
  }
  exports.observeOn = observeOn;
  var ObserveOnOperator = (function() {
    function ObserveOnOperator(scheduler, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      this.scheduler = scheduler;
      this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function(subscriber, source) {
      return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
  }());
  exports.ObserveOnOperator = ObserveOnOperator;
  var ObserveOnSubscriber = (function(_super) {
    __extends(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      _super.call(this, destination);
      this.scheduler = scheduler;
      this.delay = delay;
    }
    ObserveOnSubscriber.dispatch = function(arg) {
      var notification = arg.notification,
          destination = arg.destination;
      notification.observe(destination);
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function(notification) {
      this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function(value) {
      this.scheduleMessage(Notification_1.Notification.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function(err) {
      this.scheduleMessage(Notification_1.Notification.createError(err));
    };
    ObserveOnSubscriber.prototype._complete = function() {
      this.scheduleMessage(Notification_1.Notification.createComplete());
    };
    return ObserveOnSubscriber;
  }(Subscriber_1.Subscriber));
  exports.ObserveOnSubscriber = ObserveOnSubscriber;
  var ObserveOnMessage = (function() {
    function ObserveOnMessage(notification, destination) {
      this.notification = notification;
      this.destination = destination;
    }
    return ObserveOnMessage;
  }());
  exports.ObserveOnMessage = ObserveOnMessage;
  return module.exports;
});

$__System.registerDynamic("c0", ["4", "10f", "36"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subject_1 = $__require('4');
  var queue_1 = $__require('10f');
  var observeOn_1 = $__require('36');
  var ReplaySubject = (function(_super) {
    __extends(ReplaySubject, _super);
    function ReplaySubject(bufferSize, windowTime, scheduler) {
      if (bufferSize === void 0) {
        bufferSize = Number.POSITIVE_INFINITY;
      }
      if (windowTime === void 0) {
        windowTime = Number.POSITIVE_INFINITY;
      }
      _super.call(this);
      this.events = [];
      this.scheduler = scheduler;
      this.bufferSize = bufferSize < 1 ? 1 : bufferSize;
      this._windowTime = windowTime < 1 ? 1 : windowTime;
    }
    ReplaySubject.prototype._next = function(value) {
      var now = this._getNow();
      this.events.push(new ReplayEvent(now, value));
      this._trimBufferThenGetEvents(now);
      _super.prototype._next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function(subscriber) {
      var events = this._trimBufferThenGetEvents(this._getNow());
      var scheduler = this.scheduler;
      if (scheduler) {
        subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
      }
      var index = -1;
      var len = events.length;
      while (++index < len && !subscriber.isUnsubscribed) {
        subscriber.next(events[index].value);
      }
      return _super.prototype._subscribe.call(this, subscriber);
    };
    ReplaySubject.prototype._getNow = function() {
      return (this.scheduler || queue_1.queue).now();
    };
    ReplaySubject.prototype._trimBufferThenGetEvents = function(now) {
      var bufferSize = this.bufferSize;
      var _windowTime = this._windowTime;
      var events = this.events;
      var eventsCount = events.length;
      var spliceCount = 0;
      while (spliceCount < eventsCount) {
        if ((now - events[spliceCount].time) < _windowTime) {
          break;
        }
        spliceCount += 1;
      }
      if (eventsCount > bufferSize) {
        spliceCount = Math.max(spliceCount, eventsCount - bufferSize);
      }
      if (spliceCount > 0) {
        events.splice(0, spliceCount);
      }
      return events;
    };
    return ReplaySubject;
  }(Subject_1.Subject));
  exports.ReplaySubject = ReplaySubject;
  var ReplayEvent = (function() {
    function ReplayEvent(time, value) {
      this.time = time;
      this.value = value;
    }
    return ReplayEvent;
  }());
  return module.exports;
});

$__System.registerDynamic("be", ["4", "110", "111"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subject_1 = $__require('4');
  var throwError_1 = $__require('110');
  var ObjectUnsubscribedError_1 = $__require('111');
  var BehaviorSubject = (function(_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
      _super.call(this);
      this._value = _value;
    }
    BehaviorSubject.prototype.getValue = function() {
      if (this.hasErrored) {
        throwError_1.throwError(this.errorValue);
      } else if (this.isUnsubscribed) {
        throwError_1.throwError(new ObjectUnsubscribedError_1.ObjectUnsubscribedError());
      } else {
        return this._value;
      }
    };
    Object.defineProperty(BehaviorSubject.prototype, "value", {
      get: function() {
        return this.getValue();
      },
      enumerable: true,
      configurable: true
    });
    BehaviorSubject.prototype._subscribe = function(subscriber) {
      var subscription = _super.prototype._subscribe.call(this, subscriber);
      if (subscription && !subscription.isUnsubscribed) {
        subscriber.next(this._value);
      }
      return subscription;
    };
    BehaviorSubject.prototype._next = function(value) {
      _super.prototype._next.call(this, this._value = value);
    };
    BehaviorSubject.prototype._error = function(err) {
      this.hasErrored = true;
      _super.prototype._error.call(this, this.errorValue = err);
    };
    return BehaviorSubject;
  }(Subject_1.Subject));
  exports.BehaviorSubject = BehaviorSubject;
  return module.exports;
});

$__System.registerDynamic("d3", ["7", "62", "3a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var Subscriber_1 = $__require('62');
  var Subscription_1 = $__require('3a');
  var ConnectableObservable = (function(_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
      _super.call(this);
      this.source = source;
      this.subjectFactory = subjectFactory;
    }
    ConnectableObservable.prototype._subscribe = function(subscriber) {
      return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function() {
      var subject = this.subject;
      if (subject && !subject.isUnsubscribed) {
        return subject;
      }
      return (this.subject = this.subjectFactory());
    };
    ConnectableObservable.prototype.connect = function() {
      var source = this.source;
      var subscription = this.subscription;
      if (subscription && !subscription.isUnsubscribed) {
        return subscription;
      }
      subscription = source.subscribe(this.getSubject());
      subscription.add(new ConnectableSubscription(this));
      return (this.subscription = subscription);
    };
    ConnectableObservable.prototype.refCount = function() {
      return new RefCountObservable(this);
    };
    ConnectableObservable.prototype._closeSubscription = function() {
      this.subject = null;
      this.subscription = null;
    };
    return ConnectableObservable;
  }(Observable_1.Observable));
  exports.ConnectableObservable = ConnectableObservable;
  var ConnectableSubscription = (function(_super) {
    __extends(ConnectableSubscription, _super);
    function ConnectableSubscription(connectable) {
      _super.call(this);
      this.connectable = connectable;
    }
    ConnectableSubscription.prototype._unsubscribe = function() {
      var connectable = this.connectable;
      connectable._closeSubscription();
      this.connectable = null;
    };
    return ConnectableSubscription;
  }(Subscription_1.Subscription));
  var RefCountObservable = (function(_super) {
    __extends(RefCountObservable, _super);
    function RefCountObservable(connectable, refCount) {
      if (refCount === void 0) {
        refCount = 0;
      }
      _super.call(this);
      this.connectable = connectable;
      this.refCount = refCount;
    }
    RefCountObservable.prototype._subscribe = function(subscriber) {
      var connectable = this.connectable;
      var refCountSubscriber = new RefCountSubscriber(subscriber, this);
      var subscription = connectable.subscribe(refCountSubscriber);
      if (!subscription.isUnsubscribed && ++this.refCount === 1) {
        refCountSubscriber.connection = this.connection = connectable.connect();
      }
      return subscription;
    };
    return RefCountObservable;
  }(Observable_1.Observable));
  var RefCountSubscriber = (function(_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, refCountObservable) {
      _super.call(this, null);
      this.destination = destination;
      this.refCountObservable = refCountObservable;
      this.connection = refCountObservable.connection;
      destination.add(this);
    }
    RefCountSubscriber.prototype._next = function(value) {
      this.destination.next(value);
    };
    RefCountSubscriber.prototype._error = function(err) {
      this._resetConnectable();
      this.destination.error(err);
    };
    RefCountSubscriber.prototype._complete = function() {
      this._resetConnectable();
      this.destination.complete();
    };
    RefCountSubscriber.prototype._resetConnectable = function() {
      var observable = this.refCountObservable;
      var obsConnection = observable.connection;
      var subConnection = this.connection;
      if (subConnection && subConnection === obsConnection) {
        observable.refCount = 0;
        obsConnection.unsubscribe();
        observable.connection = null;
        this.unsubscribe();
      }
    };
    RefCountSubscriber.prototype._unsubscribe = function() {
      var observable = this.refCountObservable;
      if (observable.refCount === 0) {
        return;
      }
      if (--observable.refCount === 0) {
        var obsConnection = observable.connection;
        var subConnection = this.connection;
        if (subConnection && subConnection === obsConnection) {
          obsConnection.unsubscribe();
          observable.connection = null;
        }
      }
    };
    return RefCountSubscriber;
  }(Subscriber_1.Subscriber));
  return module.exports;
});

$__System.registerDynamic("87", ["7"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Observable_1 = $__require('7');
  var Notification = (function() {
    function Notification(kind, value, exception) {
      this.kind = kind;
      this.value = value;
      this.exception = exception;
      this.hasValue = kind === 'N';
    }
    Notification.prototype.observe = function(observer) {
      switch (this.kind) {
        case 'N':
          return observer.next && observer.next(this.value);
        case 'E':
          return observer.error && observer.error(this.exception);
        case 'C':
          return observer.complete && observer.complete();
      }
    };
    Notification.prototype.do = function(next, error, complete) {
      var kind = this.kind;
      switch (kind) {
        case 'N':
          return next && next(this.value);
        case 'E':
          return error && error(this.exception);
        case 'C':
          return complete && complete();
      }
    };
    Notification.prototype.accept = function(nextOrObserver, error, complete) {
      if (nextOrObserver && typeof nextOrObserver.next === 'function') {
        return this.observe(nextOrObserver);
      } else {
        return this.do(nextOrObserver, error, complete);
      }
    };
    Notification.prototype.toObservable = function() {
      var kind = this.kind;
      switch (kind) {
        case 'N':
          return Observable_1.Observable.of(this.value);
        case 'E':
          return Observable_1.Observable.throw(this.exception);
        case 'C':
          return Observable_1.Observable.empty();
      }
    };
    Notification.createNext = function(value) {
      if (typeof value !== 'undefined') {
        return new Notification('N', value);
      }
      return this.undefinedValueNotification;
    };
    Notification.createError = function(err) {
      return new Notification('E', undefined, err);
    };
    Notification.createComplete = function() {
      return this.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
  }());
  exports.Notification = Notification;
  return module.exports;
});

$__System.registerDynamic("96", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var EmptyError = (function(_super) {
    __extends(EmptyError, _super);
    function EmptyError() {
      _super.call(this, 'no elements in sequence');
      this.name = 'EmptyError';
    }
    return EmptyError;
  }(Error));
  exports.EmptyError = EmptyError;
  return module.exports;
});

$__System.registerDynamic("eb", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ArgumentOutOfRangeError = (function(_super) {
    __extends(ArgumentOutOfRangeError, _super);
    function ArgumentOutOfRangeError() {
      _super.call(this, 'argument out of range');
      this.name = 'ArgumentOutOfRangeError';
    }
    return ArgumentOutOfRangeError;
  }(Error));
  exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;
  return module.exports;
});

$__System.registerDynamic("112", ["2b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var root_1 = $__require('2b');
  var ImmediateDefinition = (function() {
    function ImmediateDefinition(root) {
      this.root = root;
      if (root.setImmediate && typeof root.setImmediate === 'function') {
        this.setImmediate = root.setImmediate.bind(root);
        this.clearImmediate = root.clearImmediate.bind(root);
      } else {
        this.nextHandle = 1;
        this.tasksByHandle = {};
        this.currentlyRunningATask = false;
        if (this.canUseProcessNextTick()) {
          this.setImmediate = this.createProcessNextTickSetImmediate();
        } else if (this.canUsePostMessage()) {
          this.setImmediate = this.createPostMessageSetImmediate();
        } else if (this.canUseMessageChannel()) {
          this.setImmediate = this.createMessageChannelSetImmediate();
        } else if (this.canUseReadyStateChange()) {
          this.setImmediate = this.createReadyStateChangeSetImmediate();
        } else {
          this.setImmediate = this.createSetTimeoutSetImmediate();
        }
        var ci = function clearImmediate(handle) {
          delete clearImmediate.instance.tasksByHandle[handle];
        };
        ci.instance = this;
        this.clearImmediate = ci;
      }
    }
    ImmediateDefinition.prototype.identify = function(o) {
      return this.root.Object.prototype.toString.call(o);
    };
    ImmediateDefinition.prototype.canUseProcessNextTick = function() {
      return this.identify(this.root.process) === '[object process]';
    };
    ImmediateDefinition.prototype.canUseMessageChannel = function() {
      return Boolean(this.root.MessageChannel);
    };
    ImmediateDefinition.prototype.canUseReadyStateChange = function() {
      var document = this.root.document;
      return Boolean(document && 'onreadystatechange' in document.createElement('script'));
    };
    ImmediateDefinition.prototype.canUsePostMessage = function() {
      var root = this.root;
      if (root.postMessage && !root.importScripts) {
        var postMessageIsAsynchronous_1 = true;
        var oldOnMessage = root.onmessage;
        root.onmessage = function() {
          postMessageIsAsynchronous_1 = false;
        };
        root.postMessage('', '*');
        root.onmessage = oldOnMessage;
        return postMessageIsAsynchronous_1;
      }
      return false;
    };
    ImmediateDefinition.prototype.partiallyApplied = function(handler) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }
      var fn = function result() {
        var _a = result,
            handler = _a.handler,
            args = _a.args;
        if (typeof handler === 'function') {
          handler.apply(undefined, args);
        } else {
          (new Function('' + handler))();
        }
      };
      fn.handler = handler;
      fn.args = args;
      return fn;
    };
    ImmediateDefinition.prototype.addFromSetImmediateArguments = function(args) {
      this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);
      return this.nextHandle++;
    };
    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function() {
      var fn = function setImmediate() {
        var instance = setImmediate.instance;
        var handle = instance.addFromSetImmediateArguments(arguments);
        instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));
        return handle;
      };
      fn.instance = this;
      return fn;
    };
    ImmediateDefinition.prototype.createPostMessageSetImmediate = function() {
      var root = this.root;
      var messagePrefix = 'setImmediate$' + root.Math.random() + '$';
      var onGlobalMessage = function globalMessageHandler(event) {
        var instance = globalMessageHandler.instance;
        if (event.source === root && typeof event.data === 'string' && event.data.indexOf(messagePrefix) === 0) {
          instance.runIfPresent(+event.data.slice(messagePrefix.length));
        }
      };
      onGlobalMessage.instance = this;
      root.addEventListener('message', onGlobalMessage, false);
      var fn = function setImmediate() {
        var _a = setImmediate,
            messagePrefix = _a.messagePrefix,
            instance = _a.instance;
        var handle = instance.addFromSetImmediateArguments(arguments);
        instance.root.postMessage(messagePrefix + handle, '*');
        return handle;
      };
      fn.instance = this;
      fn.messagePrefix = messagePrefix;
      return fn;
    };
    ImmediateDefinition.prototype.runIfPresent = function(handle) {
      if (this.currentlyRunningATask) {
        this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);
      } else {
        var task = this.tasksByHandle[handle];
        if (task) {
          this.currentlyRunningATask = true;
          try {
            task();
          } finally {
            this.clearImmediate(handle);
            this.currentlyRunningATask = false;
          }
        }
      }
    };
    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function() {
      var _this = this;
      var channel = new this.root.MessageChannel();
      channel.port1.onmessage = function(event) {
        var handle = event.data;
        _this.runIfPresent(handle);
      };
      var fn = function setImmediate() {
        var _a = setImmediate,
            channel = _a.channel,
            instance = _a.instance;
        var handle = instance.addFromSetImmediateArguments(arguments);
        channel.port2.postMessage(handle);
        return handle;
      };
      fn.channel = channel;
      fn.instance = this;
      return fn;
    };
    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function() {
      var fn = function setImmediate() {
        var instance = setImmediate.instance;
        var root = instance.root;
        var doc = root.document;
        var html = doc.documentElement;
        var handle = instance.addFromSetImmediateArguments(arguments);
        var script = doc.createElement('script');
        script.onreadystatechange = function() {
          instance.runIfPresent(handle);
          script.onreadystatechange = null;
          html.removeChild(script);
          script = null;
        };
        html.appendChild(script);
        return handle;
      };
      fn.instance = this;
      return fn;
    };
    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function() {
      var fn = function setImmediate() {
        var instance = setImmediate.instance;
        var handle = instance.addFromSetImmediateArguments(arguments);
        instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);
        return handle;
      };
      fn.instance = this;
      return fn;
    };
    return ImmediateDefinition;
  }());
  exports.ImmediateDefinition = ImmediateDefinition;
  exports.Immediate = new ImmediateDefinition(root_1.root);
  return module.exports;
});

$__System.registerDynamic("113", ["112", "114"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Immediate_1 = $__require('112');
  var FutureAction_1 = $__require('114');
  var AsapAction = (function(_super) {
    __extends(AsapAction, _super);
    function AsapAction() {
      _super.apply(this, arguments);
    }
    AsapAction.prototype._schedule = function(state, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      if (delay > 0) {
        return _super.prototype._schedule.call(this, state, delay);
      }
      this.delay = delay;
      this.state = state;
      var scheduler = this.scheduler;
      scheduler.actions.push(this);
      if (!scheduler.scheduledId) {
        scheduler.scheduledId = Immediate_1.Immediate.setImmediate(function() {
          scheduler.scheduledId = null;
          scheduler.flush();
        });
      }
      return this;
    };
    AsapAction.prototype._unsubscribe = function() {
      var scheduler = this.scheduler;
      var scheduledId = scheduler.scheduledId,
          actions = scheduler.actions;
      _super.prototype._unsubscribe.call(this);
      if (actions.length === 0) {
        scheduler.active = false;
        if (scheduledId != null) {
          scheduler.scheduledId = null;
          Immediate_1.Immediate.clearImmediate(scheduledId);
        }
      }
    };
    return AsapAction;
  }(FutureAction_1.FutureAction));
  exports.AsapAction = AsapAction;
  return module.exports;
});

$__System.registerDynamic("115", ["113", "116"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AsapAction_1 = $__require('113');
  var QueueScheduler_1 = $__require('116');
  var AsapScheduler = (function(_super) {
    __extends(AsapScheduler, _super);
    function AsapScheduler() {
      _super.apply(this, arguments);
    }
    AsapScheduler.prototype.scheduleNow = function(work, state) {
      return new AsapAction_1.AsapAction(this, work).schedule(state);
    };
    return AsapScheduler;
  }(QueueScheduler_1.QueueScheduler));
  exports.AsapScheduler = AsapScheduler;
  return module.exports;
});

$__System.registerDynamic("e1", ["115"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var AsapScheduler_1 = $__require('115');
  exports.asap = new AsapScheduler_1.AsapScheduler();
  return module.exports;
});

$__System.registerDynamic("117", ["114", "116"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var FutureAction_1 = $__require('114');
  var QueueScheduler_1 = $__require('116');
  var AsyncScheduler = (function(_super) {
    __extends(AsyncScheduler, _super);
    function AsyncScheduler() {
      _super.apply(this, arguments);
    }
    AsyncScheduler.prototype.scheduleNow = function(work, state) {
      return new FutureAction_1.FutureAction(this, work).schedule(state, 0);
    };
    return AsyncScheduler;
  }(QueueScheduler_1.QueueScheduler));
  exports.AsyncScheduler = AsyncScheduler;
  return module.exports;
});

$__System.registerDynamic("44", ["117"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var AsyncScheduler_1 = $__require('117');
  exports.async = new AsyncScheduler_1.AsyncScheduler();
  return module.exports;
});

$__System.registerDynamic("118", ["114"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var FutureAction_1 = $__require('114');
  var QueueAction = (function(_super) {
    __extends(QueueAction, _super);
    function QueueAction() {
      _super.apply(this, arguments);
    }
    QueueAction.prototype._schedule = function(state, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      if (delay > 0) {
        return _super.prototype._schedule.call(this, state, delay);
      }
      this.delay = delay;
      this.state = state;
      var scheduler = this.scheduler;
      scheduler.actions.push(this);
      scheduler.flush();
      return this;
    };
    return QueueAction;
  }(FutureAction_1.FutureAction));
  exports.QueueAction = QueueAction;
  return module.exports;
});

$__System.registerDynamic("114", ["2b", "3a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var root_1 = $__require('2b');
  var Subscription_1 = $__require('3a');
  var FutureAction = (function(_super) {
    __extends(FutureAction, _super);
    function FutureAction(scheduler, work) {
      _super.call(this);
      this.scheduler = scheduler;
      this.work = work;
      this.pending = false;
    }
    FutureAction.prototype.execute = function() {
      if (this.isUnsubscribed) {
        this.error = new Error('executing a cancelled action');
      } else {
        try {
          this.work(this.state);
        } catch (e) {
          this.unsubscribe();
          this.error = e;
        }
      }
    };
    FutureAction.prototype.schedule = function(state, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      if (this.isUnsubscribed) {
        return this;
      }
      return this._schedule(state, delay);
    };
    FutureAction.prototype._schedule = function(state, delay) {
      var _this = this;
      if (delay === void 0) {
        delay = 0;
      }
      this.state = state;
      this.pending = true;
      var id = this.id;
      if (id != null && this.delay === delay) {
        return this;
      }
      this.delay = delay;
      if (id != null) {
        this.id = null;
        root_1.root.clearInterval(id);
      }
      this.id = root_1.root.setInterval(function() {
        _this.pending = false;
        var _a = _this,
            id = _a.id,
            scheduler = _a.scheduler;
        scheduler.actions.push(_this);
        scheduler.flush();
        if (_this.pending === false && id != null) {
          _this.id = null;
          root_1.root.clearInterval(id);
        }
      }, delay);
      return this;
    };
    FutureAction.prototype._unsubscribe = function() {
      this.pending = false;
      var _a = this,
          id = _a.id,
          scheduler = _a.scheduler;
      var actions = scheduler.actions;
      var index = actions.indexOf(this);
      if (id != null) {
        this.id = null;
        root_1.root.clearInterval(id);
      }
      if (index !== -1) {
        actions.splice(index, 1);
      }
      this.work = null;
      this.state = null;
      this.scheduler = null;
    };
    return FutureAction;
  }(Subscription_1.Subscription));
  exports.FutureAction = FutureAction;
  return module.exports;
});

$__System.registerDynamic("116", ["118", "114"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var QueueAction_1 = $__require('118');
  var FutureAction_1 = $__require('114');
  var QueueScheduler = (function() {
    function QueueScheduler() {
      this.active = false;
      this.actions = [];
      this.scheduledId = null;
    }
    QueueScheduler.prototype.now = function() {
      return Date.now();
    };
    QueueScheduler.prototype.flush = function() {
      if (this.active || this.scheduledId) {
        return;
      }
      this.active = true;
      var actions = this.actions;
      for (var action = null; action = actions.shift(); ) {
        action.execute();
        if (action.error) {
          this.active = false;
          throw action.error;
        }
      }
      this.active = false;
    };
    QueueScheduler.prototype.schedule = function(work, delay, state) {
      if (delay === void 0) {
        delay = 0;
      }
      return (delay <= 0) ? this.scheduleNow(work, state) : this.scheduleLater(work, delay, state);
    };
    QueueScheduler.prototype.scheduleNow = function(work, state) {
      return new QueueAction_1.QueueAction(this, work).schedule(state);
    };
    QueueScheduler.prototype.scheduleLater = function(work, delay, state) {
      return new FutureAction_1.FutureAction(this, work).schedule(state, delay);
    };
    return QueueScheduler;
  }());
  exports.QueueScheduler = QueueScheduler;
  return module.exports;
});

$__System.registerDynamic("10f", ["116"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var QueueScheduler_1 = $__require('116');
  exports.queue = new QueueScheduler_1.QueueScheduler();
  return module.exports;
});

$__System.registerDynamic("2e", ["2b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var root_1 = $__require('2b');
  var Symbol = root_1.root.Symbol;
  if (typeof Symbol === 'function') {
    if (Symbol.iterator) {
      exports.$$iterator = Symbol.iterator;
    } else if (typeof Symbol.for === 'function') {
      exports.$$iterator = Symbol.for('iterator');
    }
  } else {
    if (root_1.root.Set && typeof new root_1.root.Set()['@@iterator'] === 'function') {
      exports.$$iterator = '@@iterator';
    } else if (root_1.root.Map) {
      var keys = Object.getOwnPropertyNames(root_1.root.Map.prototype);
      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        if (key !== 'entries' && key !== 'size' && root_1.root.Map.prototype[key] === root_1.root.Map.prototype['entries']) {
          exports.$$iterator = key;
          break;
        }
      }
    } else {
      exports.$$iterator = '@@iterator';
    }
  }
  return module.exports;
});

$__System.registerDynamic("119", ["4", "7", "15", "18", "19", "1d", "22", "25", "29", "38", "3c", "3f", "41", "46", "49", "4a", "4f", "51", "54", "57", "5b", "5e", "60", "63", "65", "67", "69", "6c", "6e", "70", "71", "72", "75", "78", "7b", "7d", "7f", "81", "83", "85", "88", "8a", "8c", "8e", "90", "91", "94", "97", "9c", "9e", "a0", "a2", "a4", "a6", "a8", "a9", "ac", "ae", "af", "b0", "b1", "b2", "b3", "b5", "b8", "ba", "bc", "bf", "c1", "c3", "c4", "c6", "c8", "ca", "cc", "ce", "d0", "d2", "d5", "d7", "d9", "db", "dd", "df", "e3", "e5", "e7", "e9", "ec", "ee", "f0", "f2", "f4", "f6", "f8", "fa", "fc", "fd", "ff", "101", "103", "105", "107", "109", "10a", "10d", "10e", "3a", "62", "13", "c0", "be", "d3", "87", "96", "eb", "111", "11a", "e1", "44", "10f", "11b", "35", "2e"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Subject_1 = $__require('4');
  exports.Subject = Subject_1.Subject;
  var Observable_1 = $__require('7');
  exports.Observable = Observable_1.Observable;
  $__require('15');
  $__require('18');
  $__require('19');
  $__require('1d');
  $__require('22');
  $__require('25');
  $__require('29');
  $__require('38');
  $__require('3c');
  $__require('3f');
  $__require('41');
  $__require('46');
  $__require('49');
  $__require('4a');
  $__require('4f');
  $__require('51');
  $__require('54');
  $__require('57');
  $__require('5b');
  $__require('5e');
  $__require('60');
  $__require('63');
  $__require('65');
  $__require('67');
  $__require('69');
  $__require('6c');
  $__require('6e');
  $__require('70');
  $__require('71');
  $__require('72');
  $__require('75');
  $__require('78');
  $__require('7b');
  $__require('7d');
  $__require('7f');
  $__require('81');
  $__require('83');
  $__require('85');
  $__require('88');
  $__require('8a');
  $__require('8c');
  $__require('8e');
  $__require('90');
  $__require('91');
  $__require('94');
  $__require('97');
  $__require('9c');
  $__require('9e');
  $__require('a0');
  $__require('a2');
  $__require('a4');
  $__require('a6');
  $__require('a8');
  $__require('a9');
  $__require('ac');
  $__require('ae');
  $__require('af');
  $__require('b0');
  $__require('b1');
  $__require('b2');
  $__require('b3');
  $__require('b5');
  $__require('b8');
  $__require('ba');
  $__require('bc');
  $__require('bf');
  $__require('c1');
  $__require('c3');
  $__require('c4');
  $__require('c6');
  $__require('c8');
  $__require('ca');
  $__require('cc');
  $__require('ce');
  $__require('d0');
  $__require('d2');
  $__require('d5');
  $__require('d7');
  $__require('d9');
  $__require('db');
  $__require('dd');
  $__require('df');
  $__require('e3');
  $__require('e5');
  $__require('e7');
  $__require('e9');
  $__require('ec');
  $__require('ee');
  $__require('f0');
  $__require('f2');
  $__require('f4');
  $__require('f6');
  $__require('f8');
  $__require('fa');
  $__require('fc');
  $__require('fd');
  $__require('ff');
  $__require('101');
  $__require('103');
  $__require('105');
  $__require('107');
  $__require('109');
  $__require('10a');
  $__require('10d');
  var Operator_1 = $__require('10e');
  exports.Operator = Operator_1.Operator;
  var Subscription_1 = $__require('3a');
  exports.Subscription = Subscription_1.Subscription;
  var Subscriber_1 = $__require('62');
  exports.Subscriber = Subscriber_1.Subscriber;
  var AsyncSubject_1 = $__require('13');
  exports.AsyncSubject = AsyncSubject_1.AsyncSubject;
  var ReplaySubject_1 = $__require('c0');
  exports.ReplaySubject = ReplaySubject_1.ReplaySubject;
  var BehaviorSubject_1 = $__require('be');
  exports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;
  var ConnectableObservable_1 = $__require('d3');
  exports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;
  var Notification_1 = $__require('87');
  exports.Notification = Notification_1.Notification;
  var EmptyError_1 = $__require('96');
  exports.EmptyError = EmptyError_1.EmptyError;
  var ArgumentOutOfRangeError_1 = $__require('eb');
  exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
  var ObjectUnsubscribedError_1 = $__require('111');
  exports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;
  var UnsubscriptionError_1 = $__require('11a');
  exports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;
  var asap_1 = $__require('e1');
  var async_1 = $__require('44');
  var queue_1 = $__require('10f');
  var rxSubscriber_1 = $__require('11b');
  var observable_1 = $__require('35');
  var iterator_1 = $__require('2e');
  var Scheduler = {
    asap: asap_1.asap,
    async: async_1.async,
    queue: queue_1.queue
  };
  exports.Scheduler = Scheduler;
  var Symbol = {
    rxSubscriber: rxSubscriber_1.$$rxSubscriber,
    observable: observable_1.$$observable,
    iterator: iterator_1.$$iterator
  };
  exports.Symbol = Symbol;
  return module.exports;
});

$__System.registerDynamic("d", ["3", "119"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var Rx_1 = $__require('119');
  var NotificationsService = (function() {
    function NotificationsService() {
      this.emitter = new Rx_1.Subject();
    }
    NotificationsService.prototype.set = function(notification, to) {
      notification.id = notification.override && notification.override.id ? notification.override.id : Math.random().toString(36).substring(3);
      this.emitter.next({
        command: "set",
        notification: notification,
        add: to
      });
      return notification;
    };
    ;
    NotificationsService.prototype.getChangeEmitter = function() {
      return this.emitter;
    };
    NotificationsService.prototype.success = function(title, content, override) {
      return this.set({
        title: title,
        content: content,
        type: "success",
        override: override
      }, true);
    };
    NotificationsService.prototype.error = function(title, content, override) {
      return this.set({
        title: title,
        content: content,
        type: "error",
        override: override
      }, true);
    };
    NotificationsService.prototype.alert = function(title, content, override) {
      return this.set({
        title: title,
        content: content,
        type: "alert",
        override: override
      }, true);
    };
    NotificationsService.prototype.info = function(title, content, override) {
      return this.set({
        title: title,
        content: content,
        type: "info",
        override: override
      }, true);
    };
    NotificationsService.prototype.bare = function(title, content, override) {
      return this.set({
        title: title,
        content: content,
        type: "bare",
        override: override
      }, true);
    };
    NotificationsService.prototype.create = function(title, content, type, override) {
      return this.set({
        title: title,
        content: content,
        type: type,
        override: override
      }, true);
    };
    NotificationsService.prototype.html = function(html, type, override) {
      return this.set({
        html: html,
        type: type,
        override: override,
        title: null,
        content: null
      }, true);
    };
    NotificationsService.prototype.remove = function(id) {
      if (id)
        this.emitter.next({
          command: "clean",
          id: id
        });
      else
        this.emitter.next({command: "cleanAll"});
    };
    NotificationsService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [])], NotificationsService);
    return NotificationsService;
  }());
  exports.NotificationsService = NotificationsService;
  return module.exports;
});

$__System.registerDynamic("11c", ["3a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscription_1 = $__require('3a');
  var SubjectSubscription = (function(_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, observer) {
      _super.call(this);
      this.subject = subject;
      this.observer = observer;
      this.isUnsubscribed = false;
    }
    SubjectSubscription.prototype.unsubscribe = function() {
      if (this.isUnsubscribed) {
        return;
      }
      this.isUnsubscribed = true;
      var subject = this.subject;
      var observers = subject.observers;
      this.subject = null;
      if (!observers || observers.length === 0 || subject.isUnsubscribed) {
        return;
      }
      var subscriberIndex = observers.indexOf(this.observer);
      if (subscriberIndex !== -1) {
        observers.splice(subscriberIndex, 1);
      }
    };
    return SubjectSubscription;
  }(Subscription_1.Subscription));
  exports.SubjectSubscription = SubjectSubscription;
  return module.exports;
});

$__System.registerDynamic("110", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function throwError(e) {
    throw e;
  }
  exports.throwError = throwError;
  return module.exports;
});

$__System.registerDynamic("111", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ObjectUnsubscribedError = (function(_super) {
    __extends(ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
      _super.call(this, 'object unsubscribed');
      this.name = 'ObjectUnsubscribedError';
    }
    return ObjectUnsubscribedError;
  }(Error));
  exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
  return module.exports;
});

$__System.registerDynamic("4", ["7", "62", "3a", "11c", "11b", "110", "111"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('7');
  var Subscriber_1 = $__require('62');
  var Subscription_1 = $__require('3a');
  var SubjectSubscription_1 = $__require('11c');
  var rxSubscriber_1 = $__require('11b');
  var throwError_1 = $__require('110');
  var ObjectUnsubscribedError_1 = $__require('111');
  var Subject = (function(_super) {
    __extends(Subject, _super);
    function Subject(destination, source) {
      _super.call(this);
      this.destination = destination;
      this.source = source;
      this.observers = [];
      this.isUnsubscribed = false;
      this.isStopped = false;
      this.hasErrored = false;
      this.dispatching = false;
      this.hasCompleted = false;
      this.source = source;
    }
    Subject.prototype.lift = function(operator) {
      var subject = new Subject(this.destination || this, this);
      subject.operator = operator;
      return subject;
    };
    Subject.prototype.add = function(subscription) {
      return Subscription_1.Subscription.prototype.add.call(this, subscription);
    };
    Subject.prototype.remove = function(subscription) {
      Subscription_1.Subscription.prototype.remove.call(this, subscription);
    };
    Subject.prototype.unsubscribe = function() {
      Subscription_1.Subscription.prototype.unsubscribe.call(this);
    };
    Subject.prototype._subscribe = function(subscriber) {
      if (this.source) {
        return this.source.subscribe(subscriber);
      } else {
        if (subscriber.isUnsubscribed) {
          return;
        } else if (this.hasErrored) {
          return subscriber.error(this.errorValue);
        } else if (this.hasCompleted) {
          return subscriber.complete();
        }
        this.throwIfUnsubscribed();
        var subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        this.observers.push(subscriber);
        return subscription;
      }
    };
    Subject.prototype._unsubscribe = function() {
      this.source = null;
      this.isStopped = true;
      this.observers = null;
      this.destination = null;
    };
    Subject.prototype.next = function(value) {
      this.throwIfUnsubscribed();
      if (this.isStopped) {
        return;
      }
      this.dispatching = true;
      this._next(value);
      this.dispatching = false;
      if (this.hasErrored) {
        this._error(this.errorValue);
      } else if (this.hasCompleted) {
        this._complete();
      }
    };
    Subject.prototype.error = function(err) {
      this.throwIfUnsubscribed();
      if (this.isStopped) {
        return;
      }
      this.isStopped = true;
      this.hasErrored = true;
      this.errorValue = err;
      if (this.dispatching) {
        return;
      }
      this._error(err);
    };
    Subject.prototype.complete = function() {
      this.throwIfUnsubscribed();
      if (this.isStopped) {
        return;
      }
      this.isStopped = true;
      this.hasCompleted = true;
      if (this.dispatching) {
        return;
      }
      this._complete();
    };
    Subject.prototype.asObservable = function() {
      var observable = new SubjectObservable(this);
      return observable;
    };
    Subject.prototype._next = function(value) {
      if (this.destination) {
        this.destination.next(value);
      } else {
        this._finalNext(value);
      }
    };
    Subject.prototype._finalNext = function(value) {
      var index = -1;
      var observers = this.observers.slice(0);
      var len = observers.length;
      while (++index < len) {
        observers[index].next(value);
      }
    };
    Subject.prototype._error = function(err) {
      if (this.destination) {
        this.destination.error(err);
      } else {
        this._finalError(err);
      }
    };
    Subject.prototype._finalError = function(err) {
      var index = -1;
      var observers = this.observers;
      this.observers = null;
      this.isUnsubscribed = true;
      if (observers) {
        var len = observers.length;
        while (++index < len) {
          observers[index].error(err);
        }
      }
      this.isUnsubscribed = false;
      this.unsubscribe();
    };
    Subject.prototype._complete = function() {
      if (this.destination) {
        this.destination.complete();
      } else {
        this._finalComplete();
      }
    };
    Subject.prototype._finalComplete = function() {
      var index = -1;
      var observers = this.observers;
      this.observers = null;
      this.isUnsubscribed = true;
      if (observers) {
        var len = observers.length;
        while (++index < len) {
          observers[index].complete();
        }
      }
      this.isUnsubscribed = false;
      this.unsubscribe();
    };
    Subject.prototype.throwIfUnsubscribed = function() {
      if (this.isUnsubscribed) {
        throwError_1.throwError(new ObjectUnsubscribedError_1.ObjectUnsubscribedError());
      }
    };
    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function() {
      return new Subscriber_1.Subscriber(this);
    };
    Subject.create = function(destination, source) {
      return new Subject(destination, source);
    };
    return Subject;
  }(Observable_1.Observable));
  exports.Subject = Subject;
  var SubjectObservable = (function(_super) {
    __extends(SubjectObservable, _super);
    function SubjectObservable(source) {
      _super.call(this);
      this.source = source;
    }
    return SubjectObservable;
  }(Observable_1.Observable));
  return module.exports;
});

$__System.registerDynamic("5", ["2b", "7"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var root_1 = $__require('2b');
  var Observable_1 = $__require('7');
  var PromiseObservable = (function(_super) {
    __extends(PromiseObservable, _super);
    function PromiseObservable(promise, scheduler) {
      if (scheduler === void 0) {
        scheduler = null;
      }
      _super.call(this);
      this.promise = promise;
      this.scheduler = scheduler;
    }
    PromiseObservable.create = function(promise, scheduler) {
      if (scheduler === void 0) {
        scheduler = null;
      }
      return new PromiseObservable(promise, scheduler);
    };
    PromiseObservable.prototype._subscribe = function(subscriber) {
      var _this = this;
      var promise = this.promise;
      var scheduler = this.scheduler;
      if (scheduler == null) {
        if (this._isScalar) {
          if (!subscriber.isUnsubscribed) {
            subscriber.next(this.value);
            subscriber.complete();
          }
        } else {
          promise.then(function(value) {
            _this.value = value;
            _this._isScalar = true;
            if (!subscriber.isUnsubscribed) {
              subscriber.next(value);
              subscriber.complete();
            }
          }, function(err) {
            if (!subscriber.isUnsubscribed) {
              subscriber.error(err);
            }
          }).then(null, function(err) {
            root_1.root.setTimeout(function() {
              throw err;
            });
          });
        }
      } else {
        if (this._isScalar) {
          if (!subscriber.isUnsubscribed) {
            return scheduler.schedule(dispatchNext, 0, {
              value: this.value,
              subscriber: subscriber
            });
          }
        } else {
          promise.then(function(value) {
            _this.value = value;
            _this._isScalar = true;
            if (!subscriber.isUnsubscribed) {
              subscriber.add(scheduler.schedule(dispatchNext, 0, {
                value: value,
                subscriber: subscriber
              }));
            }
          }, function(err) {
            if (!subscriber.isUnsubscribed) {
              subscriber.add(scheduler.schedule(dispatchError, 0, {
                err: err,
                subscriber: subscriber
              }));
            }
          }).then(null, function(err) {
            root_1.root.setTimeout(function() {
              throw err;
            });
          });
        }
      }
    };
    return PromiseObservable;
  }(Observable_1.Observable));
  exports.PromiseObservable = PromiseObservable;
  function dispatchNext(arg) {
    var value = arg.value,
        subscriber = arg.subscriber;
    if (!subscriber.isUnsubscribed) {
      subscriber.next(value);
      subscriber.complete();
    }
  }
  function dispatchError(arg) {
    var err = arg.err,
        subscriber = arg.subscriber;
    if (!subscriber.isUnsubscribed) {
      subscriber.error(err);
    }
  }
  return module.exports;
});

$__System.registerDynamic("6", ["2b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var root_1 = $__require('2b');
  function toPromise(PromiseCtor) {
    var _this = this;
    if (!PromiseCtor) {
      if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
        PromiseCtor = root_1.root.Rx.config.Promise;
      } else if (root_1.root.Promise) {
        PromiseCtor = root_1.root.Promise;
      }
    }
    if (!PromiseCtor) {
      throw new Error('no Promise impl found');
    }
    return new PromiseCtor(function(resolve, reject) {
      var value;
      _this.subscribe(function(x) {
        return value = x;
      }, function(err) {
        return reject(err);
      }, function() {
        return resolve(value);
      });
    });
  }
  exports.toPromise = toPromise;
  return module.exports;
});

$__System.registerDynamic("35", ["2b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var root_1 = $__require('2b');
  var Symbol = root_1.root.Symbol;
  if (typeof Symbol === 'function') {
    if (Symbol.observable) {
      exports.$$observable = Symbol.observable;
    } else {
      if (typeof Symbol.for === 'function') {
        exports.$$observable = Symbol.for('observable');
      } else {
        exports.$$observable = Symbol('observable');
      }
      Symbol.observable = exports.$$observable;
    }
  } else {
    exports.$$observable = '@@observable';
  }
  return module.exports;
});

$__System.registerDynamic("27", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.isArray = Array.isArray || (function(x) {
    return x && typeof x.length === 'number';
  });
  return module.exports;
});

$__System.registerDynamic("2c", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function isObject(x) {
    return x != null && typeof x === 'object';
  }
  exports.isObject = isObject;
  return module.exports;
});

$__System.registerDynamic("2d", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function isFunction(x) {
    return typeof x === 'function';
  }
  exports.isFunction = isFunction;
  return module.exports;
});

$__System.registerDynamic("11", ["12"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var errorObject_1 = $__require('12');
  var tryCatchTarget;
  function tryCatcher() {
    try {
      return tryCatchTarget.apply(this, arguments);
    } catch (e) {
      errorObject_1.errorObject.e = e;
      return errorObject_1.errorObject;
    }
  }
  function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
  }
  exports.tryCatch = tryCatch;
  ;
  return module.exports;
});

$__System.registerDynamic("12", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.errorObject = {e: {}};
  return module.exports;
});

$__System.registerDynamic("11a", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var UnsubscriptionError = (function(_super) {
    __extends(UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
      _super.call(this);
      this.errors = errors;
      this.name = 'UnsubscriptionError';
      this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
        return ((i + 1) + ") " + err.toString());
      }).join('\n') : '';
    }
    return UnsubscriptionError;
  }(Error));
  exports.UnsubscriptionError = UnsubscriptionError;
  return module.exports;
});

$__System.registerDynamic("3a", ["27", "2c", "2d", "11", "12", "11a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isArray_1 = $__require('27');
  var isObject_1 = $__require('2c');
  var isFunction_1 = $__require('2d');
  var tryCatch_1 = $__require('11');
  var errorObject_1 = $__require('12');
  var UnsubscriptionError_1 = $__require('11a');
  var Subscription = (function() {
    function Subscription(unsubscribe) {
      this.isUnsubscribed = false;
      if (unsubscribe) {
        this._unsubscribe = unsubscribe;
      }
    }
    Subscription.prototype.unsubscribe = function() {
      var hasErrors = false;
      var errors;
      if (this.isUnsubscribed) {
        return;
      }
      this.isUnsubscribed = true;
      var _a = this,
          _unsubscribe = _a._unsubscribe,
          _subscriptions = _a._subscriptions;
      this._subscriptions = null;
      if (isFunction_1.isFunction(_unsubscribe)) {
        var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
        if (trial === errorObject_1.errorObject) {
          hasErrors = true;
          (errors = errors || []).push(errorObject_1.errorObject.e);
        }
      }
      if (isArray_1.isArray(_subscriptions)) {
        var index = -1;
        var len = _subscriptions.length;
        while (++index < len) {
          var sub = _subscriptions[index];
          if (isObject_1.isObject(sub)) {
            var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
            if (trial === errorObject_1.errorObject) {
              hasErrors = true;
              errors = errors || [];
              var err = errorObject_1.errorObject.e;
              if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                errors = errors.concat(err.errors);
              } else {
                errors.push(err);
              }
            }
          }
        }
      }
      if (hasErrors) {
        throw new UnsubscriptionError_1.UnsubscriptionError(errors);
      }
    };
    Subscription.prototype.add = function(teardown) {
      if (!teardown || (teardown === this) || (teardown === Subscription.EMPTY)) {
        return;
      }
      var sub = teardown;
      switch (typeof teardown) {
        case 'function':
          sub = new Subscription(teardown);
        case 'object':
          if (sub.isUnsubscribed || typeof sub.unsubscribe !== 'function') {
            break;
          } else if (this.isUnsubscribed) {
            sub.unsubscribe();
          } else {
            (this._subscriptions || (this._subscriptions = [])).push(sub);
          }
          break;
        default:
          throw new Error('Unrecognized teardown ' + teardown + ' added to Subscription.');
      }
      return sub;
    };
    Subscription.prototype.remove = function(subscription) {
      if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {
        return;
      }
      var subscriptions = this._subscriptions;
      if (subscriptions) {
        var subscriptionIndex = subscriptions.indexOf(subscription);
        if (subscriptionIndex !== -1) {
          subscriptions.splice(subscriptionIndex, 1);
        }
      }
    };
    Subscription.EMPTY = (function(empty) {
      empty.isUnsubscribed = true;
      return empty;
    }(new Subscription()));
    return Subscription;
  }());
  exports.Subscription = Subscription;
  return module.exports;
});

$__System.registerDynamic("11d", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.empty = {
    isUnsubscribed: true,
    next: function(value) {},
    error: function(err) {
      throw err;
    },
    complete: function() {}
  };
  return module.exports;
});

$__System.registerDynamic("62", ["2d", "3a", "11b", "11d"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var isFunction_1 = $__require('2d');
  var Subscription_1 = $__require('3a');
  var rxSubscriber_1 = $__require('11b');
  var Observer_1 = $__require('11d');
  var Subscriber = (function(_super) {
    __extends(Subscriber, _super);
    function Subscriber(destinationOrNext, error, complete) {
      _super.call(this);
      this.syncErrorValue = null;
      this.syncErrorThrown = false;
      this.syncErrorThrowable = false;
      this.isStopped = false;
      switch (arguments.length) {
        case 0:
          this.destination = Observer_1.empty;
          break;
        case 1:
          if (!destinationOrNext) {
            this.destination = Observer_1.empty;
            break;
          }
          if (typeof destinationOrNext === 'object') {
            if (destinationOrNext instanceof Subscriber) {
              this.destination = destinationOrNext;
              this.destination.add(this);
            } else {
              this.syncErrorThrowable = true;
              this.destination = new SafeSubscriber(this, destinationOrNext);
            }
            break;
          }
        default:
          this.syncErrorThrowable = true;
          this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
          break;
      }
    }
    Subscriber.create = function(next, error, complete) {
      var subscriber = new Subscriber(next, error, complete);
      subscriber.syncErrorThrowable = false;
      return subscriber;
    };
    Subscriber.prototype.next = function(value) {
      if (!this.isStopped) {
        this._next(value);
      }
    };
    Subscriber.prototype.error = function(err) {
      if (!this.isStopped) {
        this.isStopped = true;
        this._error(err);
      }
    };
    Subscriber.prototype.complete = function() {
      if (!this.isStopped) {
        this.isStopped = true;
        this._complete();
      }
    };
    Subscriber.prototype.unsubscribe = function() {
      if (this.isUnsubscribed) {
        return;
      }
      this.isStopped = true;
      _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function(value) {
      this.destination.next(value);
    };
    Subscriber.prototype._error = function(err) {
      this.destination.error(err);
      this.unsubscribe();
    };
    Subscriber.prototype._complete = function() {
      this.destination.complete();
      this.unsubscribe();
    };
    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function() {
      return this;
    };
    return Subscriber;
  }(Subscription_1.Subscription));
  exports.Subscriber = Subscriber;
  var SafeSubscriber = (function(_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parent, observerOrNext, error, complete) {
      _super.call(this);
      this._parent = _parent;
      var next;
      var context = this;
      if (isFunction_1.isFunction(observerOrNext)) {
        next = observerOrNext;
      } else if (observerOrNext) {
        context = observerOrNext;
        next = observerOrNext.next;
        error = observerOrNext.error;
        complete = observerOrNext.complete;
        if (isFunction_1.isFunction(context.unsubscribe)) {
          this.add(context.unsubscribe.bind(context));
        }
        context.unsubscribe = this.unsubscribe.bind(this);
      }
      this._context = context;
      this._next = next;
      this._error = error;
      this._complete = complete;
    }
    SafeSubscriber.prototype.next = function(value) {
      if (!this.isStopped && this._next) {
        var _parent = this._parent;
        if (!_parent.syncErrorThrowable) {
          this.__tryOrUnsub(this._next, value);
        } else if (this.__tryOrSetError(_parent, this._next, value)) {
          this.unsubscribe();
        }
      }
    };
    SafeSubscriber.prototype.error = function(err) {
      if (!this.isStopped) {
        var _parent = this._parent;
        if (this._error) {
          if (!_parent.syncErrorThrowable) {
            this.__tryOrUnsub(this._error, err);
            this.unsubscribe();
          } else {
            this.__tryOrSetError(_parent, this._error, err);
            this.unsubscribe();
          }
        } else if (!_parent.syncErrorThrowable) {
          this.unsubscribe();
          throw err;
        } else {
          _parent.syncErrorValue = err;
          _parent.syncErrorThrown = true;
          this.unsubscribe();
        }
      }
    };
    SafeSubscriber.prototype.complete = function() {
      if (!this.isStopped) {
        var _parent = this._parent;
        if (this._complete) {
          if (!_parent.syncErrorThrowable) {
            this.__tryOrUnsub(this._complete);
            this.unsubscribe();
          } else {
            this.__tryOrSetError(_parent, this._complete);
            this.unsubscribe();
          }
        } else {
          this.unsubscribe();
        }
      }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function(fn, value) {
      try {
        fn.call(this._context, value);
      } catch (err) {
        this.unsubscribe();
        throw err;
      }
    };
    SafeSubscriber.prototype.__tryOrSetError = function(parent, fn, value) {
      try {
        fn.call(this._context, value);
      } catch (err) {
        parent.syncErrorValue = err;
        parent.syncErrorThrown = true;
        return true;
      }
      return false;
    };
    SafeSubscriber.prototype._unsubscribe = function() {
      var _parent = this._parent;
      this._context = null;
      this._parent = null;
      _parent.unsubscribe();
    };
    return SafeSubscriber;
  }(Subscriber));
  return module.exports;
});

$__System.registerDynamic("2b", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };
  exports.root = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
  var freeGlobal = objectTypes[typeof global] && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    exports.root = freeGlobal;
  }
  return module.exports;
});

$__System.registerDynamic("11b", ["2b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var root_1 = $__require('2b');
  var Symbol = root_1.root.Symbol;
  exports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ? Symbol.for('rxSubscriber') : '@@rxSubscriber';
  return module.exports;
});

$__System.registerDynamic("11e", ["62", "11b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Subscriber_1 = $__require('62');
  var rxSubscriber_1 = $__require('11b');
  function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver && typeof nextOrObserver === 'object') {
      if (nextOrObserver instanceof Subscriber_1.Subscriber) {
        return nextOrObserver;
      } else if (typeof nextOrObserver[rxSubscriber_1.$$rxSubscriber] === 'function') {
        return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
      }
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
  }
  exports.toSubscriber = toSubscriber;
  return module.exports;
});

$__System.registerDynamic("7", ["2b", "35", "11e"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var root_1 = $__require('2b');
  var observable_1 = $__require('35');
  var toSubscriber_1 = $__require('11e');
  var Observable = (function() {
    function Observable(subscribe) {
      this._isScalar = false;
      if (subscribe) {
        this._subscribe = subscribe;
      }
    }
    Observable.prototype.lift = function(operator) {
      var observable = new Observable();
      observable.source = this;
      observable.operator = operator;
      return observable;
    };
    Observable.prototype.subscribe = function(observerOrNext, error, complete) {
      var operator = this.operator;
      var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
      sink.add(operator ? operator.call(sink, this) : this._subscribe(sink));
      if (sink.syncErrorThrowable) {
        sink.syncErrorThrowable = false;
        if (sink.syncErrorThrown) {
          throw sink.syncErrorValue;
        }
      }
      return sink;
    };
    Observable.prototype.forEach = function(next, PromiseCtor) {
      var _this = this;
      if (!PromiseCtor) {
        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
          PromiseCtor = root_1.root.Rx.config.Promise;
        } else if (root_1.root.Promise) {
          PromiseCtor = root_1.root.Promise;
        }
      }
      if (!PromiseCtor) {
        throw new Error('no Promise impl found');
      }
      return new PromiseCtor(function(resolve, reject) {
        var subscription = _this.subscribe(function(value) {
          if (subscription) {
            try {
              next(value);
            } catch (err) {
              reject(err);
              subscription.unsubscribe();
            }
          } else {
            next(value);
          }
        }, reject, resolve);
      });
    };
    Observable.prototype._subscribe = function(subscriber) {
      return this.source.subscribe(subscriber);
    };
    Observable.prototype[observable_1.$$observable] = function() {
      return this;
    };
    Observable.create = function(subscribe) {
      return new Observable(subscribe);
    };
    return Observable;
  }());
  exports.Observable = Observable;
  return module.exports;
});

(function() {
var define = $__System.amdDefine;
var __extends = this && this.__extends || function(d, b) {
  function __() {
    this.constructor = d;
  }
  for (var p in b)
    b.hasOwnProperty(p) && (d[p] = b[p]);
  d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __);
};
!function(global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("rxjs/Subject"), require("rxjs/observable/PromiseObservable"), require("rxjs/operator/toPromise"), require("rxjs/Observable")) : "function" == typeof define && define.amd ? define("3", ["exports", "4", "5", "6", "7"], factory) : factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}), global.Rx, global.Rx, global.Rx.Observable.prototype, global.Rx);
}(this, function(exports, rxjs_Subject, rxjs_observable_PromiseObservable, rxjs_operator_toPromise, rxjs_Observable) {
  "use strict";
  function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask("scheduleMicrotask", fn);
  }
  function getTypeNameForDebugging(type) {
    return type.name ? type.name : typeof type;
  }
  function isPresent(obj) {
    return void 0 !== obj && null !== obj;
  }
  function isBlank(obj) {
    return void 0 === obj || null === obj;
  }
  function isString(obj) {
    return "string" == typeof obj;
  }
  function isFunction(obj) {
    return "function" == typeof obj;
  }
  function isType(obj) {
    return isFunction(obj);
  }
  function isPromise(obj) {
    return obj instanceof global$1.Promise;
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function noop() {}
  function stringify(token) {
    if ("string" == typeof token)
      return token;
    if (void 0 === token || null === token)
      return "" + token;
    if (token.name)
      return token.name;
    if (token.overriddenName)
      return token.overriddenName;
    var res = token.toString(),
        newLineIndex = res.indexOf("\n");
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function looseIdentical(a, b) {
    return a === b || "number" == typeof a && "number" == typeof b && isNaN(a) && isNaN(b);
  }
  function getMapKey(value) {
    return value;
  }
  function normalizeBool(obj) {
    return !isBlank(obj) && obj;
  }
  function isJsObject(o) {
    return null !== o && ("function" == typeof o || "object" == typeof o);
  }
  function print(obj) {
    console.log(obj);
  }
  function warn(obj) {
    console.warn(obj);
  }
  function getSymbolIterator() {
    if (isBlank(_symbolIterator))
      if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator))
        _symbolIterator = Symbol.iterator;
      else
        for (var keys = Object.getOwnPropertyNames(Map.prototype),
            i = 0; i < keys.length; ++i) {
          var key = keys[i];
          "entries" !== key && "size" !== key && Map.prototype[key] === Map.prototype.entries && (_symbolIterator = key);
        }
    return _symbolIterator;
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function forwardRef(forwardRefFn) {
    return forwardRefFn.__forward_ref__ = forwardRef, forwardRefFn.toString = function() {
      return stringify(this());
    }, forwardRefFn;
  }
  function resolveForwardRef(type) {
    return isFunction(type) && type.hasOwnProperty("__forward_ref__") && type.__forward_ref__ === forwardRef ? type() : type;
  }
  function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return isBlank(changeDetectionStrategy) || changeDetectionStrategy === exports.ChangeDetectionStrategy.Default;
  }
  function extractAnnotation(annotation) {
    return isFunction(annotation) && annotation.hasOwnProperty("annotation") && (annotation = annotation.annotation), annotation;
  }
  function applyParams(fnOrArray, key) {
    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array)
      throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
    if (isFunction(fnOrArray))
      return fnOrArray;
    if (fnOrArray instanceof Array) {
      var annotations = fnOrArray,
          fn = fnOrArray[fnOrArray.length - 1];
      if (!isFunction(fn))
        throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
      var annoLength = annotations.length - 1;
      if (annoLength != fn.length)
        throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
      for (var paramsAnnotations = [],
          i = 0,
          ii = annotations.length - 1; i < ii; i++) {
        var paramAnnotations = [];
        paramsAnnotations.push(paramAnnotations);
        var annotation = annotations[i];
        if (annotation instanceof Array)
          for (var j = 0; j < annotation.length; j++)
            paramAnnotations.push(extractAnnotation(annotation[j]));
        else
          isFunction(annotation) ? paramAnnotations.push(extractAnnotation(annotation)) : paramAnnotations.push(annotation);
      }
      return Reflect.defineMetadata("parameters", paramsAnnotations, fn), fn;
    }
    throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
  }
  function Class(clsDef) {
    var constructor = applyParams(clsDef.hasOwnProperty("constructor") ? clsDef.constructor : void 0, "constructor"),
        proto = constructor.prototype;
    if (clsDef.hasOwnProperty("extends")) {
      if (!isFunction(clsDef.extends))
        throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
      constructor.prototype = proto = Object.create(clsDef.extends.prototype);
    }
    for (var key in clsDef)
      "extends" != key && "prototype" != key && clsDef.hasOwnProperty(key) && (proto[key] = applyParams(clsDef[key], key));
    return this && this.annotations instanceof Array && Reflect.defineMetadata("annotations", this.annotations, constructor), constructor.name || (constructor.overriddenName = "class" + _nextClassId++), constructor;
  }
  function makeDecorator(annotationCls, chainFn) {
    function DecoratorFactory(objOrType) {
      var annotationInstance = new annotationCls(objOrType);
      if (this instanceof annotationCls)
        return annotationInstance;
      var chainAnnotation = isFunction(this) && this.annotations instanceof Array ? this.annotations : [];
      chainAnnotation.push(annotationInstance);
      var TypeDecorator = function(cls) {
        var annotations = Reflect.getOwnMetadata("annotations", cls);
        return annotations = annotations || [], annotations.push(annotationInstance), Reflect.defineMetadata("annotations", annotations, cls), cls;
      };
      return TypeDecorator.annotations = chainAnnotation, TypeDecorator.Class = Class, chainFn && chainFn(TypeDecorator), TypeDecorator;
    }
    return void 0 === chainFn && (chainFn = null), DecoratorFactory.prototype = Object.create(annotationCls.prototype), DecoratorFactory.annotationCls = annotationCls, DecoratorFactory;
  }
  function makeParamDecorator(annotationCls) {
    function ParamDecoratorFactory() {
      function ParamDecorator(cls, unusedKey, index) {
        var parameters = Reflect.getMetadata("parameters", cls);
        for (parameters = parameters || []; parameters.length <= index; )
          parameters.push(null);
        parameters[index] = parameters[index] || [];
        var annotationsForParam = parameters[index];
        return annotationsForParam.push(annotationInstance), Reflect.defineMetadata("parameters", parameters, cls), cls;
      }
      for (var args = [],
          _i = 0; _i < arguments.length; _i++)
        args[_i - 0] = arguments[_i];
      var annotationInstance = Object.create(annotationCls.prototype);
      return annotationCls.apply(annotationInstance, args), this instanceof annotationCls ? annotationInstance : (ParamDecorator.annotation = annotationInstance, ParamDecorator);
    }
    return ParamDecoratorFactory.prototype = Object.create(annotationCls.prototype), ParamDecoratorFactory.annotationCls = annotationCls, ParamDecoratorFactory;
  }
  function makePropDecorator(annotationCls) {
    function PropDecoratorFactory() {
      for (var args = [],
          _i = 0; _i < arguments.length; _i++)
        args[_i - 0] = arguments[_i];
      var decoratorInstance = Object.create(annotationCls.prototype);
      return annotationCls.apply(decoratorInstance, args), this instanceof annotationCls ? decoratorInstance : function(target, name) {
        var meta = Reflect.getOwnMetadata("propMetadata", target.constructor);
        meta = meta || {}, meta[name] = meta[name] || [], meta[name].unshift(decoratorInstance), Reflect.defineMetadata("propMetadata", meta, target.constructor);
      };
    }
    return PropDecoratorFactory.prototype = Object.create(annotationCls.prototype), PropDecoratorFactory.annotationCls = annotationCls, PropDecoratorFactory;
  }
  function _flattenArray(source, target) {
    if (isPresent(source))
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        isArray(item) ? _flattenArray(item, target) : target.push(item);
      }
    return target;
  }
  function isListLikeIterable(obj) {
    return !!isJsObject(obj) && (isArray(obj) || !(obj instanceof Map$1) && getSymbolIterator() in obj);
  }
  function areIterablesEqual(a, b, comparator) {
    for (var iterator1 = a[getSymbolIterator()](),
        iterator2 = b[getSymbolIterator()](); ; ) {
      var item1 = iterator1.next(),
          item2 = iterator2.next();
      if (item1.done && item2.done)
        return !0;
      if (item1.done || item2.done)
        return !1;
      if (!comparator(item1.value, item2.value))
        return !1;
    }
  }
  function iterateListLike(obj, fn) {
    if (isArray(obj))
      for (var i = 0; i < obj.length; i++)
        fn(obj[i]);
    else
      for (var item,
          iterator = obj[getSymbolIterator()](); !(item = iterator.next()).done; )
        fn(item.value);
  }
  function unimplemented() {
    throw new BaseException("unimplemented");
  }
  function findFirstClosedCycle(keys) {
    for (var res = [],
        i = 0; i < keys.length; ++i) {
      if (ListWrapper.contains(res, keys[i]))
        return res.push(keys[i]), res;
      res.push(keys[i]);
    }
    return res;
  }
  function constructResolvingPath(keys) {
    if (keys.length > 1) {
      var reversed = findFirstClosedCycle(ListWrapper.reversed(keys)),
          tokenStrs = reversed.map(function(k) {
            return stringify(k.token);
          });
      return " (" + tokenStrs.join(" -> ") + ")";
    }
    return "";
  }
  function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
    return decoratorInvocations ? decoratorInvocations.map(function(decoratorInvocation) {
      var decoratorType = decoratorInvocation.type,
          annotationCls = decoratorType.annotationCls,
          annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [],
          annotation = Object.create(annotationCls.prototype);
      return annotationCls.apply(annotation, annotationArgs), annotation;
    }) : [];
  }
  function _mergeMaps(target, config) {
    StringMapWrapper.forEach(config, function(v, k) {
      return target.set(k, v);
    });
  }
  function bind(token) {
    return new ProviderBuilder(token);
  }
  function provide(token, _a) {
    var useClass = _a.useClass,
        useValue = _a.useValue,
        useExisting = _a.useExisting,
        useFactory = _a.useFactory,
        deps = _a.deps,
        multi = _a.multi;
    return new Provider(token, {
      useClass: useClass,
      useValue: useValue,
      useExisting: useExisting,
      useFactory: useFactory,
      deps: deps,
      multi: multi
    });
  }
  function isProviderLiteral(obj) {
    return obj && "object" == typeof obj && obj.provide;
  }
  function createProvider(obj) {
    return new Provider(obj.provide, obj);
  }
  function resolveReflectiveFactory(provider) {
    var factoryFn,
        resolvedDeps;
    if (isPresent(provider.useClass)) {
      var useClass = resolveForwardRef(provider.useClass);
      factoryFn = reflector.factory(useClass), resolvedDeps = _dependenciesFor(useClass);
    } else
      isPresent(provider.useExisting) ? (factoryFn = function(aliasInstance) {
        return aliasInstance;
      }, resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))]) : isPresent(provider.useFactory) ? (factoryFn = provider.useFactory, resolvedDeps = constructDependencies(provider.useFactory, provider.dependencies)) : (factoryFn = function() {
        return provider.useValue;
      }, resolvedDeps = _EMPTY_LIST);
    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
  }
  function resolveReflectiveProvider(provider) {
    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.token), [resolveReflectiveFactory(provider)], provider.multi);
  }
  function resolveReflectiveProviders(providers) {
    var normalized = _normalizeProviders(providers, []),
        resolved = normalized.map(resolveReflectiveProvider);
    return MapWrapper.values(mergeResolvedReflectiveProviders(resolved, new Map));
  }
  function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
    for (var i = 0; i < providers.length; i++) {
      var provider = providers[i],
          existing = normalizedProvidersMap.get(provider.key.id);
      if (isPresent(existing)) {
        if (provider.multiProvider !== existing.multiProvider)
          throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);
        if (provider.multiProvider)
          for (var j = 0; j < provider.resolvedFactories.length; j++)
            existing.resolvedFactories.push(provider.resolvedFactories[j]);
        else
          normalizedProvidersMap.set(provider.key.id, provider);
      } else {
        var resolvedProvider;
        resolvedProvider = provider.multiProvider ? new ResolvedReflectiveProvider_(provider.key, ListWrapper.clone(provider.resolvedFactories), provider.multiProvider) : provider, normalizedProvidersMap.set(provider.key.id, resolvedProvider);
      }
    }
    return normalizedProvidersMap;
  }
  function _normalizeProviders(providers, res) {
    return providers.forEach(function(b) {
      if (b instanceof Type)
        res.push(provide(b, {useClass: b}));
      else if (b instanceof Provider)
        res.push(b);
      else if (isProviderLiteral(b))
        res.push(createProvider(b));
      else {
        if (!(b instanceof Array))
          throw new InvalidProviderError(b instanceof ProviderBuilder ? b.token : b);
        _normalizeProviders(b, res);
      }
    }), res;
  }
  function constructDependencies(typeOrFunc, dependencies) {
    if (isBlank(dependencies))
      return _dependenciesFor(typeOrFunc);
    var params = dependencies.map(function(t) {
      return [t];
    });
    return dependencies.map(function(t) {
      return _extractToken(typeOrFunc, t, params);
    });
  }
  function _dependenciesFor(typeOrFunc) {
    var params = reflector.parameters(typeOrFunc);
    if (isBlank(params))
      return [];
    if (params.some(isBlank))
      throw new NoAnnotationError(typeOrFunc, params);
    return params.map(function(p) {
      return _extractToken(typeOrFunc, p, params);
    });
  }
  function _extractToken(typeOrFunc, metadata, params) {
    var depProps = [],
        token = null,
        optional = !1;
    if (!isArray(metadata))
      return metadata instanceof InjectMetadata ? _createDependency(metadata.token, optional, null, null, depProps) : _createDependency(metadata, optional, null, null, depProps);
    for (var lowerBoundVisibility = null,
        upperBoundVisibility = null,
        i = 0; i < metadata.length; ++i) {
      var paramMetadata = metadata[i];
      paramMetadata instanceof Type ? token = paramMetadata : paramMetadata instanceof InjectMetadata ? token = paramMetadata.token : paramMetadata instanceof OptionalMetadata ? optional = !0 : paramMetadata instanceof SelfMetadata ? upperBoundVisibility = paramMetadata : paramMetadata instanceof HostMetadata ? upperBoundVisibility = paramMetadata : paramMetadata instanceof SkipSelfMetadata ? lowerBoundVisibility = paramMetadata : paramMetadata instanceof DependencyMetadata && (isPresent(paramMetadata.token) && (token = paramMetadata.token), depProps.push(paramMetadata));
    }
    if (token = resolveForwardRef(token), isPresent(token))
      return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
    throw new NoAnnotationError(typeOrFunc, params);
  }
  function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
    return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
  }
  function _mapProviders(injector, fn) {
    for (var res = new Array(injector._proto.numberOfProviders),
        i = 0; i < injector._proto.numberOfProviders; ++i)
      res[i] = fn(injector._proto.getProviderAtIndex(i));
    return res;
  }
  function _appIdRandomProviderFactory() {
    return "" + _randomChar() + _randomChar() + _randomChar();
  }
  function _randomChar() {
    return StringWrapper.fromCharCode(97 + Math.floor(25 * Math.random()));
  }
  function devModeEqual(a, b) {
    return isListLikeIterable(a) && isListLikeIterable(b) ? areIterablesEqual(a, b, devModeEqual) : !(isListLikeIterable(a) || isPrimitive(a) || isListLikeIterable(b) || isPrimitive(b)) || looseIdentical(a, b);
  }
  function detectWTF() {
    var wtf = global$1.wtf;
    return !(!wtf || !(trace = wtf.trace)) && (events = trace.events, !0);
  }
  function createScope(signature, flags) {
    return void 0 === flags && (flags = null), events.createScope(signature, flags);
  }
  function leave(scope, returnValue) {
    return trace.leaveScope(scope, returnValue), returnValue;
  }
  function startTimeRange(rangeType, action) {
    return trace.beginTimeRange(rangeType, action);
  }
  function endTimeRange(range) {
    trace.endTimeRange(range);
  }
  function noopScope(arg0, arg1) {
    return null;
  }
  function flattenNestedViewRenderNodes(nodes) {
    return _flattenNestedViewRenderNodes(nodes, []);
  }
  function _flattenNestedViewRenderNodes(nodes, renderNodes) {
    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      if (node instanceof AppElement) {
        var appEl = node;
        if (renderNodes.push(appEl.nativeElement), isPresent(appEl.nestedViews))
          for (var k = 0; k < appEl.nestedViews.length; k++)
            _flattenNestedViewRenderNodes(appEl.nestedViews[k].rootNodesOrAppElements, renderNodes);
      } else
        renderNodes.push(node);
    }
    return renderNodes;
  }
  function ensureSlotCount(projectableNodes, expectedSlotCount) {
    var res;
    if (isBlank(projectableNodes))
      res = EMPTY_ARR;
    else if (projectableNodes.length < expectedSlotCount) {
      var givenSlotCount = projectableNodes.length;
      res = ListWrapper.createFixedSize(expectedSlotCount);
      for (var i = 0; i < expectedSlotCount; i++)
        res[i] = i < givenSlotCount ? projectableNodes[i] : EMPTY_ARR;
    } else
      res = projectableNodes;
    return res;
  }
  function interpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
    switch (valueCount) {
      case 1:
        return c0 + _toStringWithNull(a1) + c1;
      case 2:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
      case 3:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;
      case 4:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;
      case 5:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
      case 6:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
      case 7:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;
      case 8:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
      case 9:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
      default:
        throw new BaseException("Does not support more than 9 expressions");
    }
  }
  function _toStringWithNull(v) {
    return null != v ? v.toString() : "";
  }
  function checkBinding(throwOnChange, oldValue, newValue) {
    if (throwOnChange) {
      if (!devModeEqual(oldValue, newValue))
        throw new ExpressionChangedAfterItHasBeenCheckedException(oldValue, newValue, null);
      return !1;
    }
    return !looseIdentical(oldValue, newValue);
  }
  function castByValue(input, value) {
    return input;
  }
  function pureProxy1(fn) {
    var result,
        v0;
    return v0 = uninitialized, function(p0) {
      return looseIdentical(v0, p0) || (v0 = p0, result = fn(p0)), result;
    };
  }
  function pureProxy2(fn) {
    var result,
        v0,
        v1;
    return v0 = v1 = uninitialized, function(p0, p1) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) || (v0 = p0, v1 = p1, result = fn(p0, p1)), result;
    };
  }
  function pureProxy3(fn) {
    var result,
        v0,
        v1,
        v2;
    return v0 = v1 = v2 = uninitialized, function(p0, p1, p2) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) || (v0 = p0, v1 = p1, v2 = p2, result = fn(p0, p1, p2)), result;
    };
  }
  function pureProxy4(fn) {
    var result,
        v0,
        v1,
        v2,
        v3;
    return v0 = v1 = v2 = v3 = uninitialized, function(p0, p1, p2, p3) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, result = fn(p0, p1, p2, p3)), result;
    };
  }
  function pureProxy5(fn) {
    var result,
        v0,
        v1,
        v2,
        v3,
        v4;
    return v0 = v1 = v2 = v3 = v4 = uninitialized, function(p0, p1, p2, p3, p4) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, result = fn(p0, p1, p2, p3, p4)), result;
    };
  }
  function pureProxy6(fn) {
    var result,
        v0,
        v1,
        v2,
        v3,
        v4,
        v5;
    return v0 = v1 = v2 = v3 = v4 = v5 = uninitialized, function(p0, p1, p2, p3, p4, p5) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) && looseIdentical(v5, p5) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, result = fn(p0, p1, p2, p3, p4, p5)), result;
    };
  }
  function pureProxy7(fn) {
    var result,
        v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6;
    return v0 = v1 = v2 = v3 = v4 = v5 = v6 = uninitialized, function(p0, p1, p2, p3, p4, p5, p6) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) && looseIdentical(v5, p5) && looseIdentical(v6, p6) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, v6 = p6, result = fn(p0, p1, p2, p3, p4, p5, p6)), result;
    };
  }
  function pureProxy8(fn) {
    var result,
        v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7;
    return v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = uninitialized, function(p0, p1, p2, p3, p4, p5, p6, p7) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) && looseIdentical(v5, p5) && looseIdentical(v6, p6) && looseIdentical(v7, p7) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, v6 = p6, v7 = p7, result = fn(p0, p1, p2, p3, p4, p5, p6, p7)), result;
    };
  }
  function pureProxy9(fn) {
    var result,
        v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7,
        v8;
    return v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = uninitialized, function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) && looseIdentical(v5, p5) && looseIdentical(v6, p6) && looseIdentical(v7, p7) && looseIdentical(v8, p8) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, v6 = p6, v7 = p7, v8 = p8, result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8)), result;
    };
  }
  function pureProxy10(fn) {
    var result,
        v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7,
        v8,
        v9;
    return v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = uninitialized, function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) && looseIdentical(v5, p5) && looseIdentical(v6, p6) && looseIdentical(v7, p7) && looseIdentical(v8, p8) && looseIdentical(v9, p9) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, v6 = p6, v7 = p7, v8 = p8, v9 = p9, result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)), result;
    };
  }
  function _isComponentFactory(type) {
    return type instanceof ComponentFactory;
  }
  function setTestabilityGetter(getter) {
    _testabilityGetter = getter;
  }
  function createNgZone() {
    return new NgZone({enableLongStackTrace: isDevMode()});
  }
  function enableProdMode() {
    if (_runModeLocked)
      throw new BaseException("Cannot enable prod mode after platform setup.");
    _devMode = !1;
  }
  function isDevMode() {
    if (!_runModeLocked)
      throw new BaseException("Dev mode can't be read before bootstrap!");
    return _devMode;
  }
  function lockRunMode() {
    _runModeLocked = !0;
  }
  function createPlatform(injector) {
    if (_inPlatformCreate)
      throw new BaseException("Already creating a platform...");
    if (isPresent(_platform) && !_platform.disposed)
      throw new BaseException("There can be only one platform. Destroy the previous one to create a new one.");
    lockRunMode(), _inPlatformCreate = !0;
    try {
      _platform = injector.get(PlatformRef);
    } finally {
      _inPlatformCreate = !1;
    }
    return _platform;
  }
  function assertPlatform(requiredToken) {
    var platform = getPlatform();
    if (isBlank(platform))
      throw new BaseException("No platform exists!");
    if (isPresent(platform) && isBlank(platform.injector.get(requiredToken, null)))
      throw new BaseException("A platform with a different configuration has been created. Please destroy it first.");
    return platform;
  }
  function disposePlatform() {
    isPresent(_platform) && !_platform.disposed && _platform.dispose();
  }
  function getPlatform() {
    return isPresent(_platform) && !_platform.disposed ? _platform : null;
  }
  function coreBootstrap(componentFactory, injector) {
    var appRef = injector.get(ApplicationRef);
    return appRef.bootstrap(componentFactory);
  }
  function coreLoadAndBootstrap(componentType, injector) {
    var appRef = injector.get(ApplicationRef);
    return appRef.run(function() {
      var componentResolver = injector.get(ComponentResolver);
      return PromiseWrapper.all([componentResolver.resolveComponent(componentType), appRef.waitForAsyncInitializers()]).then(function(arr) {
        return appRef.bootstrap(arr[0]);
      });
    });
  }
  function asNativeElements(debugEls) {
    return debugEls.map(function(el) {
      return el.nativeElement;
    });
  }
  function _queryElementChildren(element, predicate, matches) {
    element.childNodes.forEach(function(node) {
      node instanceof DebugElement && (predicate(node) && matches.push(node), _queryElementChildren(node, predicate, matches));
    });
  }
  function _queryNodeChildren(parentNode, predicate, matches) {
    parentNode instanceof DebugElement && parentNode.childNodes.forEach(function(node) {
      predicate(node) && matches.push(node), node instanceof DebugElement && _queryNodeChildren(node, predicate, matches);
    });
  }
  function getDebugNode(nativeNode) {
    return _nativeNodeToDebugNode.get(nativeNode);
  }
  function indexDebugNode(node) {
    _nativeNodeToDebugNode.set(node.nativeNode, node);
  }
  function removeDebugNodeFromIndex(node) {
    _nativeNodeToDebugNode.delete(node.nativeNode);
  }
  function _reflector() {
    return reflector;
  }
  function animate(timing, styles) {
    void 0 === styles && (styles = null);
    var stylesEntry = styles;
    if (!isPresent(stylesEntry)) {
      var EMPTY_STYLE = {};
      stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);
    }
    return new AnimationAnimateMetadata(timing, stylesEntry);
  }
  function group(steps) {
    return new AnimationGroupMetadata(steps);
  }
  function sequence(steps) {
    return new AnimationSequenceMetadata(steps);
  }
  function style(tokens) {
    var input,
        offset = null;
    return isString(tokens) ? input = [tokens] : (input = isArray(tokens) ? tokens : [tokens], input.forEach(function(entry) {
      var entryOffset = entry.offset;
      isPresent(entryOffset) && (offset = null == offset ? NumberWrapper.parseFloat(entryOffset) : offset);
    })), new AnimationStyleMetadata(input, offset);
  }
  function state(stateNameExpr, styles) {
    return new AnimationStateDeclarationMetadata(stateNameExpr, styles);
  }
  function keyframes(steps) {
    return new AnimationKeyframesSequenceMetadata(steps);
  }
  function transition(stateChangeExpr, steps) {
    var animationData = isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;
    return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);
  }
  function trigger(name, animation) {
    return new AnimationEntryMetadata(name, animation);
  }
  function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
    void 0 === nullValue && (nullValue = null);
    var finalStyles = {};
    return StringMapWrapper.forEach(newStyles, function(value, prop) {
      finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();
    }), StringMapWrapper.forEach(previousStyles, function(value, prop) {
      isPresent(finalStyles[prop]) || (finalStyles[prop] = nullValue);
    }), finalStyles;
  }
  function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {
    var limit = keyframes.length - 1,
        firstKeyframe = keyframes[0],
        flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles),
        extraFirstKeyframeStyles = {},
        hasExtraFirstStyles = !1;
    StringMapWrapper.forEach(collectedStyles, function(value, prop) {
      flatenedFirstKeyframeStyles[prop] || (flatenedFirstKeyframeStyles[prop] = value, extraFirstKeyframeStyles[prop] = value, hasExtraFirstStyles = !0);
    });
    var keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles),
        finalKeyframe = keyframes[limit];
    ListWrapper.insert(finalKeyframe.styles.styles, 0, finalStateStyles);
    var flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles),
        extraFinalKeyframeStyles = {},
        hasExtraFinalStyles = !1;
    return StringMapWrapper.forEach(keyframeCollectedStyles, function(value, prop) {
      isPresent(flatenedFinalKeyframeStyles[prop]) || (extraFinalKeyframeStyles[prop] = AUTO_STYLE, hasExtraFinalStyles = !0);
    }), hasExtraFinalStyles && finalKeyframe.styles.styles.push(extraFinalKeyframeStyles), StringMapWrapper.forEach(flatenedFinalKeyframeStyles, function(value, prop) {
      isPresent(flatenedFirstKeyframeStyles[prop]) || (extraFirstKeyframeStyles[prop] = AUTO_STYLE, hasExtraFirstStyles = !0);
    }), hasExtraFirstStyles && firstKeyframe.styles.styles.push(extraFirstKeyframeStyles), keyframes;
  }
  function clearStyles(styles) {
    var finalStyles = {};
    return StringMapWrapper.keys(styles).forEach(function(key) {
      finalStyles[key] = null;
    }), finalStyles;
  }
  function collectAndResolveStyles(collection, styles) {
    return styles.map(function(entry) {
      var stylesObj = {};
      return StringMapWrapper.forEach(entry, function(value, prop) {
        value == FILL_STYLE_FLAG && (value = collection[prop], isPresent(value) || (value = AUTO_STYLE)), collection[prop] = value, stylesObj[prop] = value;
      }), stylesObj;
    });
  }
  function renderStyles(element, renderer, styles) {
    StringMapWrapper.forEach(styles, function(value, prop) {
      renderer.setElementStyle(element, prop, value);
    });
  }
  function flattenStyles(styles) {
    var finalStyles = {};
    return styles.forEach(function(entry) {
      StringMapWrapper.forEach(entry, function(value, prop) {
        finalStyles[prop] = value;
      });
    }), finalStyles;
  }
  function _findLastRenderNode(node) {
    var lastNode;
    if (node instanceof AppElement) {
      var appEl = node;
      if (lastNode = appEl.nativeElement, isPresent(appEl.nestedViews))
        for (var i = appEl.nestedViews.length - 1; i >= 0; i--) {
          var nestedView = appEl.nestedViews[i];
          nestedView.rootNodesOrAppElements.length > 0 && (lastNode = _findLastRenderNode(nestedView.rootNodesOrAppElements[nestedView.rootNodesOrAppElements.length - 1]));
        }
    } else
      lastNode = node;
    return lastNode;
  }
  function wtfInit() {}
  var globalScope;
  globalScope = "undefined" == typeof window ? "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : global : window;
  var IS_DART = !1,
      global$1 = globalScope,
      Type = Function,
      Math = global$1.Math;
  global$1.assert = function(condition) {};
  var StringWrapper = function() {
    function StringWrapper() {}
    return StringWrapper.fromCharCode = function(code) {
      return String.fromCharCode(code);
    }, StringWrapper.charCodeAt = function(s, index) {
      return s.charCodeAt(index);
    }, StringWrapper.split = function(s, regExp) {
      return s.split(regExp);
    }, StringWrapper.equals = function(s, s2) {
      return s === s2;
    }, StringWrapper.stripLeft = function(s, charVal) {
      if (s && s.length) {
        for (var pos = 0,
            i = 0; i < s.length && s[i] == charVal; i++)
          pos++;
        s = s.substring(pos);
      }
      return s;
    }, StringWrapper.stripRight = function(s, charVal) {
      if (s && s.length) {
        for (var pos = s.length,
            i = s.length - 1; i >= 0 && s[i] == charVal; i--)
          pos--;
        s = s.substring(0, pos);
      }
      return s;
    }, StringWrapper.replace = function(s, from, replace) {
      return s.replace(from, replace);
    }, StringWrapper.replaceAll = function(s, from, replace) {
      return s.replace(from, replace);
    }, StringWrapper.slice = function(s, from, to) {
      return void 0 === from && (from = 0), void 0 === to && (to = null), s.slice(from, null === to ? void 0 : to);
    }, StringWrapper.replaceAllMapped = function(s, from, cb) {
      return s.replace(from, function() {
        for (var matches = [],
            _i = 0; _i < arguments.length; _i++)
          matches[_i - 0] = arguments[_i];
        return matches.splice(-2, 2), cb(matches);
      });
    }, StringWrapper.contains = function(s, substr) {
      return s.indexOf(substr) != -1;
    }, StringWrapper.compare = function(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }, StringWrapper;
  }(),
      NumberParseError = function(_super) {
        function NumberParseError(message) {
          _super.call(this), this.message = message;
        }
        return __extends(NumberParseError, _super), NumberParseError.prototype.toString = function() {
          return this.message;
        }, NumberParseError;
      }(Error),
      NumberWrapper = function() {
        function NumberWrapper() {}
        return NumberWrapper.toFixed = function(n, fractionDigits) {
          return n.toFixed(fractionDigits);
        }, NumberWrapper.equal = function(a, b) {
          return a === b;
        }, NumberWrapper.parseIntAutoRadix = function(text) {
          var result = parseInt(text);
          if (isNaN(result))
            throw new NumberParseError("Invalid integer literal when parsing " + text);
          return result;
        }, NumberWrapper.parseInt = function(text, radix) {
          if (10 == radix) {
            if (/^(\-|\+)?[0-9]+$/.test(text))
              return parseInt(text, radix);
          } else if (16 == radix) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text))
              return parseInt(text, radix);
          } else {
            var result = parseInt(text, radix);
            if (!isNaN(result))
              return result;
          }
          throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
        }, NumberWrapper.parseFloat = function(text) {
          return parseFloat(text);
        }, Object.defineProperty(NumberWrapper, "NaN", {
          get: function() {
            return NaN;
          },
          enumerable: !0,
          configurable: !0
        }), NumberWrapper.isNumeric = function(value) {
          return !isNaN(value - parseFloat(value));
        }, NumberWrapper.isNaN = function(value) {
          return isNaN(value);
        }, NumberWrapper.isInteger = function(value) {
          return Number.isInteger(value);
        }, NumberWrapper;
      }(),
      _symbolIterator = null,
      InjectMetadata = function() {
        function InjectMetadata(token) {
          this.token = token;
        }
        return InjectMetadata.prototype.toString = function() {
          return "@Inject(" + stringify(this.token) + ")";
        }, InjectMetadata;
      }(),
      OptionalMetadata = function() {
        function OptionalMetadata() {}
        return OptionalMetadata.prototype.toString = function() {
          return "@Optional()";
        }, OptionalMetadata;
      }(),
      DependencyMetadata = function() {
        function DependencyMetadata() {}
        return Object.defineProperty(DependencyMetadata.prototype, "token", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), DependencyMetadata;
      }(),
      InjectableMetadata = function() {
        function InjectableMetadata() {}
        return InjectableMetadata;
      }(),
      SelfMetadata = function() {
        function SelfMetadata() {}
        return SelfMetadata.prototype.toString = function() {
          return "@Self()";
        }, SelfMetadata;
      }(),
      SkipSelfMetadata = function() {
        function SkipSelfMetadata() {}
        return SkipSelfMetadata.prototype.toString = function() {
          return "@SkipSelf()";
        }, SkipSelfMetadata;
      }(),
      HostMetadata = function() {
        function HostMetadata() {}
        return HostMetadata.prototype.toString = function() {
          return "@Host()";
        }, HostMetadata;
      }(),
      AttributeMetadata = function(_super) {
        function AttributeMetadata(attributeName) {
          _super.call(this), this.attributeName = attributeName;
        }
        return __extends(AttributeMetadata, _super), Object.defineProperty(AttributeMetadata.prototype, "token", {
          get: function() {
            return this;
          },
          enumerable: !0,
          configurable: !0
        }), AttributeMetadata.prototype.toString = function() {
          return "@Attribute(" + stringify(this.attributeName) + ")";
        }, AttributeMetadata;
      }(DependencyMetadata),
      QueryMetadata = function(_super) {
        function QueryMetadata(_selector, _a) {
          var _b = void 0 === _a ? {} : _a,
              _c = _b.descendants,
              descendants = void 0 !== _c && _c,
              _d = _b.first,
              first = void 0 !== _d && _d,
              _e = _b.read,
              read = void 0 === _e ? null : _e;
          _super.call(this), this._selector = _selector, this.descendants = descendants, this.first = first, this.read = read;
        }
        return __extends(QueryMetadata, _super), Object.defineProperty(QueryMetadata.prototype, "isViewQuery", {
          get: function() {
            return !1;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(QueryMetadata.prototype, "selector", {
          get: function() {
            return resolveForwardRef(this._selector);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(QueryMetadata.prototype, "isVarBindingQuery", {
          get: function() {
            return isString(this.selector);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(QueryMetadata.prototype, "varBindings", {
          get: function() {
            return StringWrapper.split(this.selector, /\s*,\s*/g);
          },
          enumerable: !0,
          configurable: !0
        }), QueryMetadata.prototype.toString = function() {
          return "@Query(" + stringify(this.selector) + ")";
        }, QueryMetadata;
      }(DependencyMetadata),
      ContentChildrenMetadata = function(_super) {
        function ContentChildrenMetadata(_selector, _a) {
          var _b = void 0 === _a ? {} : _a,
              _c = _b.descendants,
              descendants = void 0 !== _c && _c,
              _d = _b.read,
              read = void 0 === _d ? null : _d;
          _super.call(this, _selector, {
            descendants: descendants,
            read: read
          });
        }
        return __extends(ContentChildrenMetadata, _super), ContentChildrenMetadata;
      }(QueryMetadata),
      ContentChildMetadata = function(_super) {
        function ContentChildMetadata(_selector, _a) {
          var _b = (void 0 === _a ? {} : _a).read,
              read = void 0 === _b ? null : _b;
          _super.call(this, _selector, {
            descendants: !0,
            first: !0,
            read: read
          });
        }
        return __extends(ContentChildMetadata, _super), ContentChildMetadata;
      }(QueryMetadata),
      ViewQueryMetadata = function(_super) {
        function ViewQueryMetadata(_selector, _a) {
          var _b = void 0 === _a ? {} : _a,
              _c = _b.descendants,
              descendants = void 0 !== _c && _c,
              _d = _b.first,
              first = void 0 !== _d && _d,
              _e = _b.read,
              read = void 0 === _e ? null : _e;
          _super.call(this, _selector, {
            descendants: descendants,
            first: first,
            read: read
          });
        }
        return __extends(ViewQueryMetadata, _super), Object.defineProperty(ViewQueryMetadata.prototype, "isViewQuery", {
          get: function() {
            return !0;
          },
          enumerable: !0,
          configurable: !0
        }), ViewQueryMetadata.prototype.toString = function() {
          return "@ViewQuery(" + stringify(this.selector) + ")";
        }, ViewQueryMetadata;
      }(QueryMetadata),
      ViewChildrenMetadata = function(_super) {
        function ViewChildrenMetadata(_selector, _a) {
          var _b = (void 0 === _a ? {} : _a).read,
              read = void 0 === _b ? null : _b;
          _super.call(this, _selector, {
            descendants: !0,
            read: read
          });
        }
        return __extends(ViewChildrenMetadata, _super), ViewChildrenMetadata;
      }(ViewQueryMetadata),
      ViewChildMetadata = function(_super) {
        function ViewChildMetadata(_selector, _a) {
          var _b = (void 0 === _a ? {} : _a).read,
              read = void 0 === _b ? null : _b;
          _super.call(this, _selector, {
            descendants: !0,
            first: !0,
            read: read
          });
        }
        return __extends(ViewChildMetadata, _super), ViewChildMetadata;
      }(ViewQueryMetadata);
  exports.ChangeDetectionStrategy, function(ChangeDetectionStrategy) {
    ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush = 0] = "OnPush", ChangeDetectionStrategy[ChangeDetectionStrategy.Default = 1] = "Default";
  }(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));
  var ChangeDetectorStatus;
  !function(ChangeDetectorStatus) {
    ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce = 0] = "CheckOnce", ChangeDetectorStatus[ChangeDetectorStatus.Checked = 1] = "Checked", ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways = 2] = "CheckAlways", ChangeDetectorStatus[ChangeDetectorStatus.Detached = 3] = "Detached", ChangeDetectorStatus[ChangeDetectorStatus.Errored = 4] = "Errored", ChangeDetectorStatus[ChangeDetectorStatus.Destroyed = 5] = "Destroyed";
  }(ChangeDetectorStatus || (ChangeDetectorStatus = {}));
  var CHANGE_DETECTION_STRATEGY_VALUES = [exports.ChangeDetectionStrategy.OnPush, exports.ChangeDetectionStrategy.Default],
      DirectiveMetadata = function(_super) {
        function DirectiveMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              selector = _b.selector,
              inputs = _b.inputs,
              outputs = _b.outputs,
              properties = _b.properties,
              events = _b.events,
              host = _b.host,
              providers = _b.providers,
              exportAs = _b.exportAs,
              queries = _b.queries;
          _super.call(this), this.selector = selector, this._inputs = inputs, this._properties = properties, this._outputs = outputs, this._events = events, this.host = host, this.exportAs = exportAs, this.queries = queries, this._providers = providers;
        }
        return __extends(DirectiveMetadata, _super), Object.defineProperty(DirectiveMetadata.prototype, "inputs", {
          get: function() {
            return isPresent(this._properties) && this._properties.length > 0 ? this._properties : this._inputs;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DirectiveMetadata.prototype, "properties", {
          get: function() {
            return this.inputs;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DirectiveMetadata.prototype, "outputs", {
          get: function() {
            return isPresent(this._events) && this._events.length > 0 ? this._events : this._outputs;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DirectiveMetadata.prototype, "events", {
          get: function() {
            return this.outputs;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DirectiveMetadata.prototype, "providers", {
          get: function() {
            return this._providers;
          },
          enumerable: !0,
          configurable: !0
        }), DirectiveMetadata;
      }(InjectableMetadata),
      ComponentMetadata = function(_super) {
        function ComponentMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              selector = _b.selector,
              inputs = _b.inputs,
              outputs = _b.outputs,
              properties = _b.properties,
              events = _b.events,
              host = _b.host,
              exportAs = _b.exportAs,
              moduleId = _b.moduleId,
              providers = _b.providers,
              viewProviders = _b.viewProviders,
              _c = _b.changeDetection,
              changeDetection = void 0 === _c ? exports.ChangeDetectionStrategy.Default : _c,
              queries = _b.queries,
              templateUrl = _b.templateUrl,
              template = _b.template,
              styleUrls = _b.styleUrls,
              styles = _b.styles,
              animations = _b.animations,
              directives = _b.directives,
              pipes = _b.pipes,
              encapsulation = _b.encapsulation,
              interpolation = _b.interpolation,
              precompile = _b.precompile;
          _super.call(this, {
            selector: selector,
            inputs: inputs,
            outputs: outputs,
            properties: properties,
            events: events,
            host: host,
            exportAs: exportAs,
            providers: providers,
            queries: queries
          }), this.changeDetection = changeDetection, this._viewProviders = viewProviders, this.templateUrl = templateUrl, this.template = template, this.styleUrls = styleUrls, this.styles = styles, this.directives = directives, this.pipes = pipes, this.encapsulation = encapsulation, this.moduleId = moduleId, this.animations = animations, this.interpolation = interpolation, this.precompile = precompile;
        }
        return __extends(ComponentMetadata, _super), Object.defineProperty(ComponentMetadata.prototype, "viewProviders", {
          get: function() {
            return this._viewProviders;
          },
          enumerable: !0,
          configurable: !0
        }), ComponentMetadata;
      }(DirectiveMetadata),
      PipeMetadata = function(_super) {
        function PipeMetadata(_a) {
          var name = _a.name,
              pure = _a.pure;
          _super.call(this), this.name = name, this._pure = pure;
        }
        return __extends(PipeMetadata, _super), Object.defineProperty(PipeMetadata.prototype, "pure", {
          get: function() {
            return !isPresent(this._pure) || this._pure;
          },
          enumerable: !0,
          configurable: !0
        }), PipeMetadata;
      }(InjectableMetadata),
      InputMetadata = function() {
        function InputMetadata(bindingPropertyName) {
          this.bindingPropertyName = bindingPropertyName;
        }
        return InputMetadata;
      }(),
      OutputMetadata = function() {
        function OutputMetadata(bindingPropertyName) {
          this.bindingPropertyName = bindingPropertyName;
        }
        return OutputMetadata;
      }(),
      HostBindingMetadata = function() {
        function HostBindingMetadata(hostPropertyName) {
          this.hostPropertyName = hostPropertyName;
        }
        return HostBindingMetadata;
      }(),
      HostListenerMetadata = function() {
        function HostListenerMetadata(eventName, args) {
          this.eventName = eventName, this.args = args;
        }
        return HostListenerMetadata;
      }();
  exports.ViewEncapsulation, function(ViewEncapsulation) {
    ViewEncapsulation[ViewEncapsulation.Emulated = 0] = "Emulated", ViewEncapsulation[ViewEncapsulation.Native = 1] = "Native", ViewEncapsulation[ViewEncapsulation.None = 2] = "None";
  }(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
  var LifecycleHooks,
      VIEW_ENCAPSULATION_VALUES = [exports.ViewEncapsulation.Emulated, exports.ViewEncapsulation.Native, exports.ViewEncapsulation.None],
      ViewMetadata = function() {
        function ViewMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              templateUrl = _b.templateUrl,
              template = _b.template,
              directives = _b.directives,
              pipes = _b.pipes,
              encapsulation = _b.encapsulation,
              styles = _b.styles,
              styleUrls = _b.styleUrls,
              animations = _b.animations,
              interpolation = _b.interpolation;
          this.templateUrl = templateUrl, this.template = template, this.styleUrls = styleUrls, this.styles = styles, this.directives = directives, this.pipes = pipes, this.encapsulation = encapsulation, this.animations = animations, this.interpolation = interpolation;
        }
        return ViewMetadata;
      }();
  !function(LifecycleHooks) {
    LifecycleHooks[LifecycleHooks.OnInit = 0] = "OnInit", LifecycleHooks[LifecycleHooks.OnDestroy = 1] = "OnDestroy", LifecycleHooks[LifecycleHooks.DoCheck = 2] = "DoCheck", LifecycleHooks[LifecycleHooks.OnChanges = 3] = "OnChanges", LifecycleHooks[LifecycleHooks.AfterContentInit = 4] = "AfterContentInit", LifecycleHooks[LifecycleHooks.AfterContentChecked = 5] = "AfterContentChecked", LifecycleHooks[LifecycleHooks.AfterViewInit = 6] = "AfterViewInit", LifecycleHooks[LifecycleHooks.AfterViewChecked = 7] = "AfterViewChecked";
  }(LifecycleHooks || (LifecycleHooks = {}));
  var LIFECYCLE_HOOKS_VALUES = [LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked],
      OnChanges = function() {
        function OnChanges() {}
        return OnChanges;
      }(),
      OnInit = function() {
        function OnInit() {}
        return OnInit;
      }(),
      DoCheck = function() {
        function DoCheck() {}
        return DoCheck;
      }(),
      OnDestroy = function() {
        function OnDestroy() {}
        return OnDestroy;
      }(),
      AfterContentInit = function() {
        function AfterContentInit() {}
        return AfterContentInit;
      }(),
      AfterContentChecked = function() {
        function AfterContentChecked() {}
        return AfterContentChecked;
      }(),
      AfterViewInit = function() {
        function AfterViewInit() {}
        return AfterViewInit;
      }(),
      AfterViewChecked = function() {
        function AfterViewChecked() {}
        return AfterViewChecked;
      }(),
      _nextClassId = 0,
      Reflect = global$1.Reflect,
      Component = makeDecorator(ComponentMetadata, function(fn) {
        return fn.View = View;
      }),
      Directive = makeDecorator(DirectiveMetadata),
      View = makeDecorator(ViewMetadata, function(fn) {
        return fn.View = View;
      }),
      Attribute = makeParamDecorator(AttributeMetadata),
      Query = makeParamDecorator(QueryMetadata),
      ContentChildren = makePropDecorator(ContentChildrenMetadata),
      ContentChild = makePropDecorator(ContentChildMetadata),
      ViewChildren = makePropDecorator(ViewChildrenMetadata),
      ViewChild = makePropDecorator(ViewChildMetadata),
      ViewQuery = makeParamDecorator(ViewQueryMetadata),
      Pipe = makeDecorator(PipeMetadata),
      Input = makePropDecorator(InputMetadata),
      Output = makePropDecorator(OutputMetadata),
      HostBinding = makePropDecorator(HostBindingMetadata),
      HostListener = makePropDecorator(HostListenerMetadata),
      Inject = makeParamDecorator(InjectMetadata),
      Optional = makeParamDecorator(OptionalMetadata),
      Injectable = makeDecorator(InjectableMetadata),
      Self = makeParamDecorator(SelfMetadata),
      Host = makeParamDecorator(HostMetadata),
      SkipSelf = makeParamDecorator(SkipSelfMetadata),
      BaseWrappedException = function(_super) {
        function BaseWrappedException(message) {
          _super.call(this, message);
        }
        return __extends(BaseWrappedException, _super), Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
          get: function() {
            return "";
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(BaseWrappedException.prototype, "originalException", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(BaseWrappedException.prototype, "context", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(BaseWrappedException.prototype, "message", {
          get: function() {
            return "";
          },
          enumerable: !0,
          configurable: !0
        }), BaseWrappedException;
      }(Error),
      Map$1 = global$1.Map,
      Set = global$1.Set,
      createMapFromPairs = function() {
        try {
          if (1 === new Map$1([[1, 2]]).size)
            return function(pairs) {
              return new Map$1(pairs);
            };
        } catch (e) {}
        return function(pairs) {
          for (var map = new Map$1,
              i = 0; i < pairs.length; i++) {
            var pair = pairs[i];
            map.set(pair[0], pair[1]);
          }
          return map;
        };
      }(),
      createMapFromMap = function() {
        try {
          if (new Map$1(new Map$1))
            return function(m) {
              return new Map$1(m);
            };
        } catch (e) {}
        return function(m) {
          var map = new Map$1;
          return m.forEach(function(v, k) {
            map.set(k, v);
          }), map;
        };
      }(),
      _clearValues = function() {
        return (new Map$1).keys().next ? function(m) {
          for (var k,
              keyIterator = m.keys(); !(k = keyIterator.next()).done; )
            m.set(k.value, null);
        } : function(m) {
          m.forEach(function(v, k) {
            m.set(k, null);
          });
        };
      }(),
      _arrayFromMap = function() {
        try {
          if ((new Map$1).values().next)
            return function(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
        } catch (e) {}
        return function(m, getValues) {
          var res = ListWrapper.createFixedSize(m.size),
              i = 0;
          return m.forEach(function(v, k) {
            res[i] = getValues ? v : k, i++;
          }), res;
        };
      }(),
      MapWrapper = function() {
        function MapWrapper() {}
        return MapWrapper.clone = function(m) {
          return createMapFromMap(m);
        }, MapWrapper.createFromStringMap = function(stringMap) {
          var result = new Map$1;
          for (var prop in stringMap)
            result.set(prop, stringMap[prop]);
          return result;
        }, MapWrapper.toStringMap = function(m) {
          var r = {};
          return m.forEach(function(v, k) {
            return r[k] = v;
          }), r;
        }, MapWrapper.createFromPairs = function(pairs) {
          return createMapFromPairs(pairs);
        }, MapWrapper.clearValues = function(m) {
          _clearValues(m);
        }, MapWrapper.iterable = function(m) {
          return m;
        }, MapWrapper.keys = function(m) {
          return _arrayFromMap(m, !1);
        }, MapWrapper.values = function(m) {
          return _arrayFromMap(m, !0);
        }, MapWrapper;
      }(),
      StringMapWrapper = function() {
        function StringMapWrapper() {}
        return StringMapWrapper.create = function() {
          return {};
        }, StringMapWrapper.contains = function(map, key) {
          return map.hasOwnProperty(key);
        }, StringMapWrapper.get = function(map, key) {
          return map.hasOwnProperty(key) ? map[key] : void 0;
        }, StringMapWrapper.set = function(map, key, value) {
          map[key] = value;
        }, StringMapWrapper.keys = function(map) {
          return Object.keys(map);
        }, StringMapWrapper.values = function(map) {
          return Object.keys(map).reduce(function(r, a) {
            return r.push(map[a]), r;
          }, []);
        }, StringMapWrapper.isEmpty = function(map) {
          for (var prop in map)
            return !1;
          return !0;
        }, StringMapWrapper.delete = function(map, key) {
          delete map[key];
        }, StringMapWrapper.forEach = function(map, callback) {
          for (var prop in map)
            map.hasOwnProperty(prop) && callback(map[prop], prop);
        }, StringMapWrapper.merge = function(m1, m2) {
          var m = {};
          for (var attr in m1)
            m1.hasOwnProperty(attr) && (m[attr] = m1[attr]);
          for (var attr in m2)
            m2.hasOwnProperty(attr) && (m[attr] = m2[attr]);
          return m;
        }, StringMapWrapper.equals = function(m1, m2) {
          var k1 = Object.keys(m1),
              k2 = Object.keys(m2);
          if (k1.length != k2.length)
            return !1;
          for (var key,
              i = 0; i < k1.length; i++)
            if (key = k1[i], m1[key] !== m2[key])
              return !1;
          return !0;
        }, StringMapWrapper;
      }(),
      ListWrapper = function() {
        function ListWrapper() {}
        return ListWrapper.createFixedSize = function(size) {
          return new Array(size);
        }, ListWrapper.createGrowableSize = function(size) {
          return new Array(size);
        }, ListWrapper.clone = function(array) {
          return array.slice(0);
        }, ListWrapper.forEachWithIndex = function(array, fn) {
          for (var i = 0; i < array.length; i++)
            fn(array[i], i);
        }, ListWrapper.first = function(array) {
          return array ? array[0] : null;
        }, ListWrapper.last = function(array) {
          return array && 0 != array.length ? array[array.length - 1] : null;
        }, ListWrapper.indexOf = function(array, value, startIndex) {
          return void 0 === startIndex && (startIndex = 0), array.indexOf(value, startIndex);
        }, ListWrapper.contains = function(list, el) {
          return list.indexOf(el) !== -1;
        }, ListWrapper.reversed = function(array) {
          var a = ListWrapper.clone(array);
          return a.reverse();
        }, ListWrapper.concat = function(a, b) {
          return a.concat(b);
        }, ListWrapper.insert = function(list, index, value) {
          list.splice(index, 0, value);
        }, ListWrapper.removeAt = function(list, index) {
          var res = list[index];
          return list.splice(index, 1), res;
        }, ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        }, ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          return index > -1 && (list.splice(index, 1), !0);
        }, ListWrapper.clear = function(list) {
          list.length = 0;
        }, ListWrapper.isEmpty = function(list) {
          return 0 == list.length;
        }, ListWrapper.fill = function(list, value, start, end) {
          void 0 === start && (start = 0), void 0 === end && (end = null), list.fill(value, start, null === end ? list.length : end);
        }, ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return !1;
          for (var i = 0; i < a.length; ++i)
            if (a[i] !== b[i])
              return !1;
          return !0;
        }, ListWrapper.slice = function(l, from, to) {
          return void 0 === from && (from = 0), void 0 === to && (to = null), l.slice(from, null === to ? void 0 : to);
        }, ListWrapper.splice = function(l, from, length) {
          return l.splice(from, length);
        }, ListWrapper.sort = function(l, compareFn) {
          isPresent(compareFn) ? l.sort(compareFn) : l.sort();
        }, ListWrapper.toString = function(l) {
          return l.toString();
        }, ListWrapper.toJSON = function(l) {
          return JSON.stringify(l);
        }, ListWrapper.maximum = function(list, predicate) {
          if (0 == list.length)
            return null;
          for (var solution = null,
              maxValue = -(1 / 0),
              index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (!isBlank(candidate)) {
              var candidateValue = predicate(candidate);
              candidateValue > maxValue && (solution = candidate, maxValue = candidateValue);
            }
          }
          return solution;
        }, ListWrapper.flatten = function(list) {
          var target = [];
          return _flattenArray(list, target), target;
        }, ListWrapper.addAll = function(list, source) {
          for (var i = 0; i < source.length; i++)
            list.push(source[i]);
        }, ListWrapper;
      }(),
      createSetFromList = function() {
        var test = new Set([1, 2, 3]);
        return 3 === test.size ? function(lst) {
          return new Set(lst);
        } : function(lst) {
          var res = new Set(lst);
          if (res.size !== lst.length)
            for (var i = 0; i < lst.length; i++)
              res.add(lst[i]);
          return res;
        };
      }(),
      SetWrapper = function() {
        function SetWrapper() {}
        return SetWrapper.createFromList = function(lst) {
          return createSetFromList(lst);
        }, SetWrapper.has = function(s, key) {
          return s.has(key);
        }, SetWrapper.delete = function(m, k) {
          m.delete(k);
        }, SetWrapper;
      }(),
      _ArrayLogger = function() {
        function _ArrayLogger() {
          this.res = [];
        }
        return _ArrayLogger.prototype.log = function(s) {
          this.res.push(s);
        }, _ArrayLogger.prototype.logError = function(s) {
          this.res.push(s);
        }, _ArrayLogger.prototype.logGroup = function(s) {
          this.res.push(s);
        }, _ArrayLogger.prototype.logGroupEnd = function() {}, _ArrayLogger;
      }(),
      ExceptionHandler = function() {
        function ExceptionHandler(_logger, _rethrowException) {
          void 0 === _rethrowException && (_rethrowException = !0), this._logger = _logger, this._rethrowException = _rethrowException;
        }
        return ExceptionHandler.exceptionToString = function(exception, stackTrace, reason) {
          void 0 === stackTrace && (stackTrace = null), void 0 === reason && (reason = null);
          var l = new _ArrayLogger,
              e = new ExceptionHandler(l, (!1));
          return e.call(exception, stackTrace, reason), l.res.join("\n");
        }, ExceptionHandler.prototype.call = function(exception, stackTrace, reason) {
          void 0 === stackTrace && (stackTrace = null), void 0 === reason && (reason = null);
          var originalException = this._findOriginalException(exception),
              originalStack = this._findOriginalStack(exception),
              context = this._findContext(exception);
          if (this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception)), isPresent(stackTrace) && isBlank(originalStack) && (this._logger.logError("STACKTRACE:"), this._logger.logError(this._longStackTrace(stackTrace))), isPresent(reason) && this._logger.logError("REASON: " + reason), isPresent(originalException) && this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException)), isPresent(originalStack) && (this._logger.logError("ORIGINAL STACKTRACE:"), this._logger.logError(this._longStackTrace(originalStack))), isPresent(context) && (this._logger.logError("ERROR CONTEXT:"), this._logger.logError(context)), this._logger.logGroupEnd(), this._rethrowException)
            throw exception;
        }, ExceptionHandler.prototype._extractMessage = function(exception) {
          return exception instanceof BaseWrappedException ? exception.wrapperMessage : exception.toString();
        }, ExceptionHandler.prototype._longStackTrace = function(stackTrace) {
          return isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") : stackTrace.toString();
        }, ExceptionHandler.prototype._findContext = function(exception) {
          try {
            return exception instanceof BaseWrappedException ? isPresent(exception.context) ? exception.context : this._findContext(exception.originalException) : null;
          } catch (e) {
            return null;
          }
        }, ExceptionHandler.prototype._findOriginalException = function(exception) {
          if (!(exception instanceof BaseWrappedException))
            return null;
          for (var e = exception.originalException; e instanceof BaseWrappedException && isPresent(e.originalException); )
            e = e.originalException;
          return e;
        }, ExceptionHandler.prototype._findOriginalStack = function(exception) {
          if (!(exception instanceof BaseWrappedException))
            return null;
          for (var e = exception,
              stack = exception.originalStack; e instanceof BaseWrappedException && isPresent(e.originalException); )
            e = e.originalException, e instanceof BaseWrappedException && isPresent(e.originalException) && (stack = e.originalStack);
          return stack;
        }, ExceptionHandler;
      }(),
      BaseException = function(_super) {
        function BaseException(message) {
          void 0 === message && (message = "--"), _super.call(this, message), this.message = message, this.stack = new Error(message).stack;
        }
        return __extends(BaseException, _super), BaseException.prototype.toString = function() {
          return this.message;
        }, BaseException;
      }(Error),
      WrappedException = function(_super) {
        function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {
          _super.call(this, _wrapperMessage), this._wrapperMessage = _wrapperMessage, this._originalException = _originalException, this._originalStack = _originalStack, this._context = _context, this._wrapperStack = new Error(_wrapperMessage).stack;
        }
        return __extends(WrappedException, _super), Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
          get: function() {
            return this._wrapperMessage;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(WrappedException.prototype, "wrapperStack", {
          get: function() {
            return this._wrapperStack;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(WrappedException.prototype, "originalException", {
          get: function() {
            return this._originalException;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(WrappedException.prototype, "originalStack", {
          get: function() {
            return this._originalStack;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(WrappedException.prototype, "context", {
          get: function() {
            return this._context;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(WrappedException.prototype, "message", {
          get: function() {
            return ExceptionHandler.exceptionToString(this);
          },
          enumerable: !0,
          configurable: !0
        }), WrappedException.prototype.toString = function() {
          return this.message;
        }, WrappedException;
      }(BaseWrappedException),
      _THROW_IF_NOT_FOUND = new Object,
      THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND,
      Injector = function() {
        function Injector() {}
        return Injector.prototype.get = function(token, notFoundValue) {
          return unimplemented();
        }, Injector;
      }();
  Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
  var AbstractProviderError = function(_super) {
    function AbstractProviderError(injector, key, constructResolvingMessage) {
      _super.call(this, "DI Exception"), this.keys = [key], this.injectors = [injector], this.constructResolvingMessage = constructResolvingMessage, this.message = this.constructResolvingMessage(this.keys);
    }
    return __extends(AbstractProviderError, _super), AbstractProviderError.prototype.addKey = function(injector, key) {
      this.injectors.push(injector), this.keys.push(key), this.message = this.constructResolvingMessage(this.keys);
    }, Object.defineProperty(AbstractProviderError.prototype, "context", {
      get: function() {
        return this.injectors[this.injectors.length - 1].debugContext();
      },
      enumerable: !0,
      configurable: !0
    }), AbstractProviderError;
  }(BaseException),
      NoProviderError = function(_super) {
        function NoProviderError(injector, key) {
          _super.call(this, injector, key, function(keys) {
            var first = stringify(ListWrapper.first(keys).token);
            return "No provider for " + first + "!" + constructResolvingPath(keys);
          });
        }
        return __extends(NoProviderError, _super), NoProviderError;
      }(AbstractProviderError),
      CyclicDependencyError = function(_super) {
        function CyclicDependencyError(injector, key) {
          _super.call(this, injector, key, function(keys) {
            return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
          });
        }
        return __extends(CyclicDependencyError, _super), CyclicDependencyError;
      }(AbstractProviderError),
      InstantiationError = function(_super) {
        function InstantiationError(injector, originalException, originalStack, key) {
          _super.call(this, "DI Exception", originalException, originalStack, null), this.keys = [key], this.injectors = [injector];
        }
        return __extends(InstantiationError, _super), InstantiationError.prototype.addKey = function(injector, key) {
          this.injectors.push(injector), this.keys.push(key);
        }, Object.defineProperty(InstantiationError.prototype, "wrapperMessage", {
          get: function() {
            var first = stringify(ListWrapper.first(this.keys).token);
            return "Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(InstantiationError.prototype, "causeKey", {
          get: function() {
            return this.keys[0];
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(InstantiationError.prototype, "context", {
          get: function() {
            return this.injectors[this.injectors.length - 1].debugContext();
          },
          enumerable: !0,
          configurable: !0
        }), InstantiationError;
      }(WrappedException),
      InvalidProviderError = function(_super) {
        function InvalidProviderError(provider) {
          _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
        }
        return __extends(InvalidProviderError, _super), InvalidProviderError;
      }(BaseException),
      NoAnnotationError = function(_super) {
        function NoAnnotationError(typeOrFunc, params) {
          _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
        }
        return __extends(NoAnnotationError, _super), NoAnnotationError._genMessage = function(typeOrFunc, params) {
          for (var signature = [],
              i = 0,
              ii = params.length; i < ii; i++) {
            var parameter = params[i];
            isBlank(parameter) || 0 == parameter.length ? signature.push("?") : signature.push(parameter.map(stringify).join(" "));
          }
          return "Cannot resolve all parameters for '" + stringify(typeOrFunc) + "'(" + signature.join(", ") + "). Make sure that all the parameters are decorated with Inject or have valid type annotations and that '" + stringify(typeOrFunc) + "' is decorated with Injectable.";
        }, NoAnnotationError;
      }(BaseException),
      OutOfBoundsError = function(_super) {
        function OutOfBoundsError(index) {
          _super.call(this, "Index " + index + " is out-of-bounds.");
        }
        return __extends(OutOfBoundsError, _super), OutOfBoundsError;
      }(BaseException),
      MixingMultiProvidersWithRegularProvidersError = function(_super) {
        function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
          _super.call(this, "Cannot mix multi providers and regular providers, got: " + provider1.toString() + " " + provider2.toString());
        }
        return __extends(MixingMultiProvidersWithRegularProvidersError, _super), MixingMultiProvidersWithRegularProvidersError;
      }(BaseException),
      ReflectiveKey = function() {
        function ReflectiveKey(token, id) {
          if (this.token = token, this.id = id, isBlank(token))
            throw new BaseException("Token must be defined!");
        }
        return Object.defineProperty(ReflectiveKey.prototype, "displayName", {
          get: function() {
            return stringify(this.token);
          },
          enumerable: !0,
          configurable: !0
        }), ReflectiveKey.get = function(token) {
          return _globalKeyRegistry.get(resolveForwardRef(token));
        }, Object.defineProperty(ReflectiveKey, "numberOfKeys", {
          get: function() {
            return _globalKeyRegistry.numberOfKeys;
          },
          enumerable: !0,
          configurable: !0
        }), ReflectiveKey;
      }(),
      KeyRegistry = function() {
        function KeyRegistry() {
          this._allKeys = new Map;
        }
        return KeyRegistry.prototype.get = function(token) {
          if (token instanceof ReflectiveKey)
            return token;
          if (this._allKeys.has(token))
            return this._allKeys.get(token);
          var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
          return this._allKeys.set(token, newKey), newKey;
        }, Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
          get: function() {
            return this._allKeys.size;
          },
          enumerable: !0,
          configurable: !0
        }), KeyRegistry;
      }(),
      _globalKeyRegistry = new KeyRegistry,
      ReflectionCapabilities = function() {
        function ReflectionCapabilities(reflect) {
          this._reflect = isPresent(reflect) ? reflect : global$1.Reflect;
        }
        return ReflectionCapabilities.prototype.isReflectionEnabled = function() {
          return !0;
        }, ReflectionCapabilities.prototype.factory = function(t) {
          switch (t.length) {
            case 0:
              return function() {
                return new t;
              };
            case 1:
              return function(a1) {
                return new t(a1);
              };
            case 2:
              return function(a1, a2) {
                return new t(a1, a2);
              };
            case 3:
              return function(a1, a2, a3) {
                return new t(a1, a2, a3);
              };
            case 4:
              return function(a1, a2, a3, a4) {
                return new t(a1, a2, a3, a4);
              };
            case 5:
              return function(a1, a2, a3, a4, a5) {
                return new t(a1, a2, a3, a4, a5);
              };
            case 6:
              return function(a1, a2, a3, a4, a5, a6) {
                return new t(a1, a2, a3, a4, a5, a6);
              };
            case 7:
              return function(a1, a2, a3, a4, a5, a6, a7) {
                return new t(a1, a2, a3, a4, a5, a6, a7);
              };
            case 8:
              return function(a1, a2, a3, a4, a5, a6, a7, a8) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8);
              };
            case 9:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9);
              };
            case 10:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
              };
            case 11:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
              };
            case 12:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              };
            case 13:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
              };
            case 14:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
              };
            case 15:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
              };
            case 16:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
              };
            case 17:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
              };
            case 18:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
              };
            case 19:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
              };
            case 20:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
              };
          }
          throw new Error("Cannot create a factory for '" + stringify(t) + "' because its constructor has more than 20 arguments");
        }, ReflectionCapabilities.prototype._zipTypesAndAnnotations = function(paramTypes, paramAnnotations) {
          var result;
          result = "undefined" == typeof paramTypes ? new Array(paramAnnotations.length) : new Array(paramTypes.length);
          for (var i = 0; i < result.length; i++)
            "undefined" == typeof paramTypes ? result[i] = [] : paramTypes[i] != Object ? result[i] = [paramTypes[i]] : result[i] = [], isPresent(paramAnnotations) && isPresent(paramAnnotations[i]) && (result[i] = result[i].concat(paramAnnotations[i]));
          return result;
        }, ReflectionCapabilities.prototype.parameters = function(typeOrFunc) {
          if (isPresent(typeOrFunc.parameters))
            return typeOrFunc.parameters;
          if (isPresent(typeOrFunc.ctorParameters)) {
            var ctorParameters = typeOrFunc.ctorParameters,
                paramTypes_1 = ctorParameters.map(function(ctorParam) {
                  return ctorParam && ctorParam.type;
                }),
                paramAnnotations_1 = ctorParameters.map(function(ctorParam) {
                  return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
                });
            return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);
          }
          if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
            var paramAnnotations = this._reflect.getMetadata("parameters", typeOrFunc),
                paramTypes = this._reflect.getMetadata("design:paramtypes", typeOrFunc);
            if (isPresent(paramTypes) || isPresent(paramAnnotations))
              return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
          }
          var parameters = new Array(typeOrFunc.length);
          return parameters.fill(void 0), parameters;
        }, ReflectionCapabilities.prototype.annotations = function(typeOrFunc) {
          if (isPresent(typeOrFunc.annotations)) {
            var annotations = typeOrFunc.annotations;
            return isFunction(annotations) && annotations.annotations && (annotations = annotations.annotations), annotations;
          }
          if (isPresent(typeOrFunc.decorators))
            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
          if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
            var annotations = this._reflect.getMetadata("annotations", typeOrFunc);
            if (isPresent(annotations))
              return annotations;
          }
          return [];
        }, ReflectionCapabilities.prototype.propMetadata = function(typeOrFunc) {
          if (isPresent(typeOrFunc.propMetadata)) {
            var propMetadata = typeOrFunc.propMetadata;
            return isFunction(propMetadata) && propMetadata.propMetadata && (propMetadata = propMetadata.propMetadata), propMetadata;
          }
          if (isPresent(typeOrFunc.propDecorators)) {
            var propDecorators_1 = typeOrFunc.propDecorators,
                propMetadata_1 = {};
            return Object.keys(propDecorators_1).forEach(function(prop) {
              propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
            }), propMetadata_1;
          }
          if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
            var propMetadata = this._reflect.getMetadata("propMetadata", typeOrFunc);
            if (isPresent(propMetadata))
              return propMetadata;
          }
          return {};
        }, ReflectionCapabilities.prototype.interfaces = function(type) {
          return [];
        }, ReflectionCapabilities.prototype.hasLifecycleHook = function(type, lcInterface, lcProperty) {
          if (!(type instanceof Type))
            return !1;
          var proto = type.prototype;
          return !!proto[lcProperty];
        }, ReflectionCapabilities.prototype.getter = function(name) {
          return new Function("o", "return o." + name + ";");
        }, ReflectionCapabilities.prototype.setter = function(name) {
          return new Function("o", "v", "return o." + name + " = v;");
        }, ReflectionCapabilities.prototype.method = function(name) {
          var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
          return new Function("o", "args", functionBody);
        }, ReflectionCapabilities.prototype.importUri = function(type) {
          return "object" == typeof type && type.filePath ? type.filePath : "./" + stringify(type);
        }, ReflectionCapabilities;
      }(),
      ReflectorReader = function() {
        function ReflectorReader() {}
        return ReflectorReader;
      }(),
      Reflector = function(_super) {
        function Reflector(reflectionCapabilities) {
          _super.call(this), this._injectableInfo = new Map$1, this._getters = new Map$1, this._setters = new Map$1, this._methods = new Map$1, this._usedKeys = null, this.reflectionCapabilities = reflectionCapabilities;
        }
        return __extends(Reflector, _super), Reflector.prototype.updateCapabilities = function(caps) {
          this.reflectionCapabilities = caps;
        }, Reflector.prototype.isReflectionEnabled = function() {
          return this.reflectionCapabilities.isReflectionEnabled();
        }, Reflector.prototype.trackUsage = function() {
          this._usedKeys = new Set;
        }, Reflector.prototype.listUnusedKeys = function() {
          var _this = this;
          if (null == this._usedKeys)
            throw new BaseException("Usage tracking is disabled");
          var allTypes = MapWrapper.keys(this._injectableInfo);
          return allTypes.filter(function(key) {
            return !SetWrapper.has(_this._usedKeys, key);
          });
        }, Reflector.prototype.registerFunction = function(func, funcInfo) {
          this._injectableInfo.set(func, funcInfo);
        }, Reflector.prototype.registerType = function(type, typeInfo) {
          this._injectableInfo.set(type, typeInfo);
        }, Reflector.prototype.registerGetters = function(getters) {
          _mergeMaps(this._getters, getters);
        }, Reflector.prototype.registerSetters = function(setters) {
          _mergeMaps(this._setters, setters);
        }, Reflector.prototype.registerMethods = function(methods) {
          _mergeMaps(this._methods, methods);
        }, Reflector.prototype.factory = function(type) {
          if (this._containsReflectionInfo(type)) {
            var res = this._getReflectionInfo(type).factory;
            return isPresent(res) ? res : null;
          }
          return this.reflectionCapabilities.factory(type);
        }, Reflector.prototype.parameters = function(typeOrFunc) {
          if (this._injectableInfo.has(typeOrFunc)) {
            var res = this._getReflectionInfo(typeOrFunc).parameters;
            return isPresent(res) ? res : [];
          }
          return this.reflectionCapabilities.parameters(typeOrFunc);
        }, Reflector.prototype.annotations = function(typeOrFunc) {
          if (this._injectableInfo.has(typeOrFunc)) {
            var res = this._getReflectionInfo(typeOrFunc).annotations;
            return isPresent(res) ? res : [];
          }
          return this.reflectionCapabilities.annotations(typeOrFunc);
        }, Reflector.prototype.propMetadata = function(typeOrFunc) {
          if (this._injectableInfo.has(typeOrFunc)) {
            var res = this._getReflectionInfo(typeOrFunc).propMetadata;
            return isPresent(res) ? res : {};
          }
          return this.reflectionCapabilities.propMetadata(typeOrFunc);
        }, Reflector.prototype.interfaces = function(type) {
          if (this._injectableInfo.has(type)) {
            var res = this._getReflectionInfo(type).interfaces;
            return isPresent(res) ? res : [];
          }
          return this.reflectionCapabilities.interfaces(type);
        }, Reflector.prototype.hasLifecycleHook = function(type, lcInterface, lcProperty) {
          var interfaces = this.interfaces(type);
          return interfaces.indexOf(lcInterface) !== -1 || this.reflectionCapabilities.hasLifecycleHook(type, lcInterface, lcProperty);
        }, Reflector.prototype.getter = function(name) {
          return this._getters.has(name) ? this._getters.get(name) : this.reflectionCapabilities.getter(name);
        }, Reflector.prototype.setter = function(name) {
          return this._setters.has(name) ? this._setters.get(name) : this.reflectionCapabilities.setter(name);
        }, Reflector.prototype.method = function(name) {
          return this._methods.has(name) ? this._methods.get(name) : this.reflectionCapabilities.method(name);
        }, Reflector.prototype._getReflectionInfo = function(typeOrFunc) {
          return isPresent(this._usedKeys) && this._usedKeys.add(typeOrFunc), this._injectableInfo.get(typeOrFunc);
        }, Reflector.prototype._containsReflectionInfo = function(typeOrFunc) {
          return this._injectableInfo.has(typeOrFunc);
        }, Reflector.prototype.importUri = function(type) {
          return this.reflectionCapabilities.importUri(type);
        }, Reflector;
      }(ReflectorReader),
      reflector = new Reflector(new ReflectionCapabilities),
      Provider = function() {
        function Provider(token, _a) {
          var useClass = _a.useClass,
              useValue = _a.useValue,
              useExisting = _a.useExisting,
              useFactory = _a.useFactory,
              deps = _a.deps,
              multi = _a.multi;
          this.token = token, this.useClass = useClass, this.useValue = useValue, this.useExisting = useExisting, this.useFactory = useFactory, this.dependencies = deps, this._multi = multi;
        }
        return Object.defineProperty(Provider.prototype, "multi", {
          get: function() {
            return normalizeBool(this._multi);
          },
          enumerable: !0,
          configurable: !0
        }), Provider;
      }(),
      Binding = function(_super) {
        function Binding(token, _a) {
          var toClass = _a.toClass,
              toValue = _a.toValue,
              toAlias = _a.toAlias,
              toFactory = _a.toFactory,
              deps = _a.deps,
              multi = _a.multi;
          _super.call(this, token, {
            useClass: toClass,
            useValue: toValue,
            useExisting: toAlias,
            useFactory: toFactory,
            deps: deps,
            multi: multi
          });
        }
        return __extends(Binding, _super), Object.defineProperty(Binding.prototype, "toClass", {
          get: function() {
            return this.useClass;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(Binding.prototype, "toAlias", {
          get: function() {
            return this.useExisting;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(Binding.prototype, "toFactory", {
          get: function() {
            return this.useFactory;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(Binding.prototype, "toValue", {
          get: function() {
            return this.useValue;
          },
          enumerable: !0,
          configurable: !0
        }), Binding;
      }(Provider),
      ProviderBuilder = function() {
        function ProviderBuilder(token) {
          this.token = token;
        }
        return ProviderBuilder.prototype.toClass = function(type) {
          if (!isType(type))
            throw new BaseException('Trying to create a class provider but "' + stringify(type) + '" is not a class!');
          return new Provider(this.token, {useClass: type});
        }, ProviderBuilder.prototype.toValue = function(value) {
          return new Provider(this.token, {useValue: value});
        }, ProviderBuilder.prototype.toAlias = function(aliasToken) {
          if (isBlank(aliasToken))
            throw new BaseException("Can not alias " + stringify(this.token) + " to a blank value!");
          return new Provider(this.token, {useExisting: aliasToken});
        }, ProviderBuilder.prototype.toFactory = function(factory, dependencies) {
          if (!isFunction(factory))
            throw new BaseException('Trying to create a factory provider but "' + stringify(factory) + '" is not a function!');
          return new Provider(this.token, {
            useFactory: factory,
            deps: dependencies
          });
        }, ProviderBuilder;
      }(),
      ReflectiveDependency = function() {
        function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
          this.key = key, this.optional = optional, this.lowerBoundVisibility = lowerBoundVisibility, this.upperBoundVisibility = upperBoundVisibility, this.properties = properties;
        }
        return ReflectiveDependency.fromKey = function(key) {
          return new ReflectiveDependency(key, (!1), null, null, []);
        }, ReflectiveDependency;
      }(),
      _EMPTY_LIST = [],
      ResolvedReflectiveProvider_ = function() {
        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
          this.key = key, this.resolvedFactories = resolvedFactories, this.multiProvider = multiProvider;
        }
        return Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
          get: function() {
            return this.resolvedFactories[0];
          },
          enumerable: !0,
          configurable: !0
        }), ResolvedReflectiveProvider_;
      }(),
      ResolvedReflectiveFactory = function() {
        function ResolvedReflectiveFactory(factory, dependencies) {
          this.factory = factory, this.dependencies = dependencies;
        }
        return ResolvedReflectiveFactory;
      }(),
      _MAX_CONSTRUCTION_COUNTER = 10,
      UNDEFINED = new Object,
      ReflectiveProtoInjectorInlineStrategy = function() {
        function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
          this.provider0 = null, this.provider1 = null, this.provider2 = null, this.provider3 = null, this.provider4 = null, this.provider5 = null, this.provider6 = null, this.provider7 = null, this.provider8 = null, this.provider9 = null, this.keyId0 = null, this.keyId1 = null, this.keyId2 = null, this.keyId3 = null, this.keyId4 = null, this.keyId5 = null, this.keyId6 = null, this.keyId7 = null, this.keyId8 = null, this.keyId9 = null;
          var length = providers.length;
          length > 0 && (this.provider0 = providers[0], this.keyId0 = providers[0].key.id), length > 1 && (this.provider1 = providers[1], this.keyId1 = providers[1].key.id), length > 2 && (this.provider2 = providers[2], this.keyId2 = providers[2].key.id), length > 3 && (this.provider3 = providers[3], this.keyId3 = providers[3].key.id), length > 4 && (this.provider4 = providers[4], this.keyId4 = providers[4].key.id), length > 5 && (this.provider5 = providers[5], this.keyId5 = providers[5].key.id), length > 6 && (this.provider6 = providers[6], this.keyId6 = providers[6].key.id), length > 7 && (this.provider7 = providers[7], this.keyId7 = providers[7].key.id), length > 8 && (this.provider8 = providers[8], this.keyId8 = providers[8].key.id), length > 9 && (this.provider9 = providers[9], this.keyId9 = providers[9].key.id);
        }
        return ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function(index) {
          if (0 == index)
            return this.provider0;
          if (1 == index)
            return this.provider1;
          if (2 == index)
            return this.provider2;
          if (3 == index)
            return this.provider3;
          if (4 == index)
            return this.provider4;
          if (5 == index)
            return this.provider5;
          if (6 == index)
            return this.provider6;
          if (7 == index)
            return this.provider7;
          if (8 == index)
            return this.provider8;
          if (9 == index)
            return this.provider9;
          throw new OutOfBoundsError(index);
        }, ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function(injector) {
          return new ReflectiveInjectorInlineStrategy(injector, this);
        }, ReflectiveProtoInjectorInlineStrategy;
      }(),
      ReflectiveProtoInjectorDynamicStrategy = function() {
        function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
          this.providers = providers;
          var len = providers.length;
          this.keyIds = ListWrapper.createFixedSize(len);
          for (var i = 0; i < len; i++)
            this.keyIds[i] = providers[i].key.id;
        }
        return ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function(index) {
          if (index < 0 || index >= this.providers.length)
            throw new OutOfBoundsError(index);
          return this.providers[index];
        }, ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function(ei) {
          return new ReflectiveInjectorDynamicStrategy(this, ei);
        }, ReflectiveProtoInjectorDynamicStrategy;
      }(),
      ReflectiveProtoInjector = function() {
        function ReflectiveProtoInjector(providers) {
          this.numberOfProviders = providers.length, this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ? new ReflectiveProtoInjectorDynamicStrategy(this, providers) : new ReflectiveProtoInjectorInlineStrategy(this, providers);
        }
        return ReflectiveProtoInjector.fromResolvedProviders = function(providers) {
          return new ReflectiveProtoInjector(providers);
        }, ReflectiveProtoInjector.prototype.getProviderAtIndex = function(index) {
          return this._strategy.getProviderAtIndex(index);
        }, ReflectiveProtoInjector;
      }(),
      ReflectiveInjectorInlineStrategy = function() {
        function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
          this.injector = injector, this.protoStrategy = protoStrategy, this.obj0 = UNDEFINED, this.obj1 = UNDEFINED, this.obj2 = UNDEFINED, this.obj3 = UNDEFINED, this.obj4 = UNDEFINED, this.obj5 = UNDEFINED, this.obj6 = UNDEFINED, this.obj7 = UNDEFINED, this.obj8 = UNDEFINED, this.obj9 = UNDEFINED;
        }
        return ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function() {
          this.injector._constructionCounter = 0;
        }, ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function(provider) {
          return this.injector._new(provider);
        }, ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function(keyId) {
          var p = this.protoStrategy,
              inj = this.injector;
          return p.keyId0 === keyId ? (this.obj0 === UNDEFINED && (this.obj0 = inj._new(p.provider0)), this.obj0) : p.keyId1 === keyId ? (this.obj1 === UNDEFINED && (this.obj1 = inj._new(p.provider1)), this.obj1) : p.keyId2 === keyId ? (this.obj2 === UNDEFINED && (this.obj2 = inj._new(p.provider2)), this.obj2) : p.keyId3 === keyId ? (this.obj3 === UNDEFINED && (this.obj3 = inj._new(p.provider3)), this.obj3) : p.keyId4 === keyId ? (this.obj4 === UNDEFINED && (this.obj4 = inj._new(p.provider4)), this.obj4) : p.keyId5 === keyId ? (this.obj5 === UNDEFINED && (this.obj5 = inj._new(p.provider5)), this.obj5) : p.keyId6 === keyId ? (this.obj6 === UNDEFINED && (this.obj6 = inj._new(p.provider6)), this.obj6) : p.keyId7 === keyId ? (this.obj7 === UNDEFINED && (this.obj7 = inj._new(p.provider7)), this.obj7) : p.keyId8 === keyId ? (this.obj8 === UNDEFINED && (this.obj8 = inj._new(p.provider8)), this.obj8) : p.keyId9 === keyId ? (this.obj9 === UNDEFINED && (this.obj9 = inj._new(p.provider9)), this.obj9) : UNDEFINED;
        }, ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function(index) {
          if (0 == index)
            return this.obj0;
          if (1 == index)
            return this.obj1;
          if (2 == index)
            return this.obj2;
          if (3 == index)
            return this.obj3;
          if (4 == index)
            return this.obj4;
          if (5 == index)
            return this.obj5;
          if (6 == index)
            return this.obj6;
          if (7 == index)
            return this.obj7;
          if (8 == index)
            return this.obj8;
          if (9 == index)
            return this.obj9;
          throw new OutOfBoundsError(index);
        }, ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function() {
          return _MAX_CONSTRUCTION_COUNTER;
        }, ReflectiveInjectorInlineStrategy;
      }(),
      ReflectiveInjectorDynamicStrategy = function() {
        function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
          this.protoStrategy = protoStrategy, this.injector = injector, this.objs = ListWrapper.createFixedSize(protoStrategy.providers.length), ListWrapper.fill(this.objs, UNDEFINED);
        }
        return ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function() {
          this.injector._constructionCounter = 0;
        }, ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function(provider) {
          return this.injector._new(provider);
        }, ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function(keyId) {
          for (var p = this.protoStrategy,
              i = 0; i < p.keyIds.length; i++)
            if (p.keyIds[i] === keyId)
              return this.objs[i] === UNDEFINED && (this.objs[i] = this.injector._new(p.providers[i])), this.objs[i];
          return UNDEFINED;
        }, ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function(index) {
          if (index < 0 || index >= this.objs.length)
            throw new OutOfBoundsError(index);
          return this.objs[index];
        }, ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function() {
          return this.objs.length;
        }, ReflectiveInjectorDynamicStrategy;
      }(),
      ReflectiveInjector = function() {
        function ReflectiveInjector() {}
        return ReflectiveInjector.resolve = function(providers) {
          return resolveReflectiveProviders(providers);
        }, ReflectiveInjector.resolveAndCreate = function(providers, parent) {
          void 0 === parent && (parent = null);
          var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
          return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
        }, ReflectiveInjector.fromResolvedProviders = function(providers, parent) {
          return void 0 === parent && (parent = null), new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
        }, ReflectiveInjector.fromResolvedBindings = function(providers) {
          return ReflectiveInjector.fromResolvedProviders(providers);
        }, Object.defineProperty(ReflectiveInjector.prototype, "parent", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), ReflectiveInjector.prototype.debugContext = function() {
          return null;
        }, ReflectiveInjector.prototype.resolveAndCreateChild = function(providers) {
          return unimplemented();
        }, ReflectiveInjector.prototype.createChildFromResolved = function(providers) {
          return unimplemented();
        }, ReflectiveInjector.prototype.resolveAndInstantiate = function(provider) {
          return unimplemented();
        }, ReflectiveInjector.prototype.instantiateResolved = function(provider) {
          return unimplemented();
        }, ReflectiveInjector;
      }(),
      ReflectiveInjector_ = function() {
        function ReflectiveInjector_(_proto, _parent, _debugContext) {
          void 0 === _parent && (_parent = null), void 0 === _debugContext && (_debugContext = null), this._debugContext = _debugContext, this._constructionCounter = 0, this._proto = _proto, this._parent = _parent, this._strategy = _proto._strategy.createInjectorStrategy(this);
        }
        return ReflectiveInjector_.prototype.debugContext = function() {
          return this._debugContext();
        }, ReflectiveInjector_.prototype.get = function(token, notFoundValue) {
          return void 0 === notFoundValue && (notFoundValue = THROW_IF_NOT_FOUND), this._getByKey(ReflectiveKey.get(token), null, null, notFoundValue);
        }, ReflectiveInjector_.prototype.getAt = function(index) {
          return this._strategy.getObjAtIndex(index);
        }, Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
          get: function() {
            return this._parent;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
          get: function() {
            return this._strategy;
          },
          enumerable: !0,
          configurable: !0
        }), ReflectiveInjector_.prototype.resolveAndCreateChild = function(providers) {
          var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
          return this.createChildFromResolved(ResolvedReflectiveProviders);
        }, ReflectiveInjector_.prototype.createChildFromResolved = function(providers) {
          var proto = new ReflectiveProtoInjector(providers),
              inj = new ReflectiveInjector_(proto);
          return inj._parent = this, inj;
        }, ReflectiveInjector_.prototype.resolveAndInstantiate = function(provider) {
          return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
        }, ReflectiveInjector_.prototype.instantiateResolved = function(provider) {
          return this._instantiateProvider(provider);
        }, ReflectiveInjector_.prototype._new = function(provider) {
          if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects())
            throw new CyclicDependencyError(this, provider.key);
          return this._instantiateProvider(provider);
        }, ReflectiveInjector_.prototype._instantiateProvider = function(provider) {
          if (provider.multiProvider) {
            for (var res = ListWrapper.createFixedSize(provider.resolvedFactories.length),
                i = 0; i < provider.resolvedFactories.length; ++i)
              res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
            return res;
          }
          return this._instantiate(provider, provider.resolvedFactories[0]);
        }, ReflectiveInjector_.prototype._instantiate = function(provider, ResolvedReflectiveFactory) {
          var d0,
              d1,
              d2,
              d3,
              d4,
              d5,
              d6,
              d7,
              d8,
              d9,
              d10,
              d11,
              d12,
              d13,
              d14,
              d15,
              d16,
              d17,
              d18,
              d19,
              factory = ResolvedReflectiveFactory.factory,
              deps = ResolvedReflectiveFactory.dependencies,
              length = deps.length;
          try {
            d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null, d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null, d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null, d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null, d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null, d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null, d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null, d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null, d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null, d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null, d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null, d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null, d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null, d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null, d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null, d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null, d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null, d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null, d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null, d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
          } catch (e) {
            throw (e instanceof AbstractProviderError || e instanceof InstantiationError) && e.addKey(this, provider.key), e;
          }
          var obj;
          try {
            switch (length) {
              case 0:
                obj = factory();
                break;
              case 1:
                obj = factory(d0);
                break;
              case 2:
                obj = factory(d0, d1);
                break;
              case 3:
                obj = factory(d0, d1, d2);
                break;
              case 4:
                obj = factory(d0, d1, d2, d3);
                break;
              case 5:
                obj = factory(d0, d1, d2, d3, d4);
                break;
              case 6:
                obj = factory(d0, d1, d2, d3, d4, d5);
                break;
              case 7:
                obj = factory(d0, d1, d2, d3, d4, d5, d6);
                break;
              case 8:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
                break;
              case 9:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
                break;
              case 10:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
                break;
              case 11:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
                break;
              case 12:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
                break;
              case 13:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
                break;
              case 14:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
                break;
              case 15:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
                break;
              case 16:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
                break;
              case 17:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
                break;
              case 18:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
                break;
              case 19:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
                break;
              case 20:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
                break;
              default:
                throw new BaseException("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
            }
          } catch (e) {
            throw new InstantiationError(this, e, e.stack, provider.key);
          }
          return obj;
        }, ReflectiveInjector_.prototype._getByReflectiveDependency = function(provider, dep) {
          return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : THROW_IF_NOT_FOUND);
        }, ReflectiveInjector_.prototype._getByKey = function(key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
          return key === INJECTOR_KEY ? this : upperBoundVisibility instanceof SelfMetadata ? this._getByKeySelf(key, notFoundValue) : this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
        }, ReflectiveInjector_.prototype._throwOrNull = function(key, notFoundValue) {
          if (notFoundValue !== THROW_IF_NOT_FOUND)
            return notFoundValue;
          throw new NoProviderError(this, key);
        }, ReflectiveInjector_.prototype._getByKeySelf = function(key, notFoundValue) {
          var obj = this._strategy.getObjByKeyId(key.id);
          return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);
        }, ReflectiveInjector_.prototype._getByKeyDefault = function(key, notFoundValue, lowerBoundVisibility) {
          var inj;
          for (inj = lowerBoundVisibility instanceof SkipSelfMetadata ? this._parent : this; inj instanceof ReflectiveInjector_; ) {
            var inj_ = inj,
                obj = inj_._strategy.getObjByKeyId(key.id);
            if (obj !== UNDEFINED)
              return obj;
            inj = inj_._parent;
          }
          return null !== inj ? inj.get(key.token, notFoundValue) : this._throwOrNull(key, notFoundValue);
        }, Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
          get: function() {
            var providers = _mapProviders(this, function(b) {
              return ' "' + b.key.displayName + '" ';
            }).join(", ");
            return "ReflectiveInjector(providers: [" + providers + "])";
          },
          enumerable: !0,
          configurable: !0
        }), ReflectiveInjector_.prototype.toString = function() {
          return this.displayName;
        }, ReflectiveInjector_;
      }(),
      INJECTOR_KEY = ReflectiveKey.get(Injector),
      OpaqueToken = function() {
        function OpaqueToken(_desc) {
          this._desc = _desc;
        }
        return OpaqueToken.prototype.toString = function() {
          return "Token " + this._desc;
        }, OpaqueToken;
      }(),
      PromiseCompleter = function() {
        function PromiseCompleter() {
          var _this = this;
          this.promise = new Promise(function(res, rej) {
            _this.resolve = res, _this.reject = rej;
          });
        }
        return PromiseCompleter;
      }(),
      PromiseWrapper = function() {
        function PromiseWrapper() {}
        return PromiseWrapper.resolve = function(obj) {
          return Promise.resolve(obj);
        }, PromiseWrapper.reject = function(obj, _) {
          return Promise.reject(obj);
        }, PromiseWrapper.catchError = function(promise, onError) {
          return promise.catch(onError);
        }, PromiseWrapper.all = function(promises) {
          return 0 == promises.length ? Promise.resolve([]) : Promise.all(promises);
        }, PromiseWrapper.then = function(promise, success, rejection) {
          return promise.then(success, rejection);
        }, PromiseWrapper.wrap = function(computation) {
          return new Promise(function(res, rej) {
            try {
              res(computation());
            } catch (e) {
              rej(e);
            }
          });
        }, PromiseWrapper.scheduleMicrotask = function(computation) {
          PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function(_) {});
        }, PromiseWrapper.completer = function() {
          return new PromiseCompleter;
        }, PromiseWrapper;
      }(),
      ObservableWrapper = function() {
        function ObservableWrapper() {}
        return ObservableWrapper.subscribe = function(emitter, onNext, onError, onComplete) {
          return void 0 === onComplete && (onComplete = function() {}), onError = "function" == typeof onError && onError || noop, onComplete = "function" == typeof onComplete && onComplete || noop, emitter.subscribe({
            next: onNext,
            error: onError,
            complete: onComplete
          });
        }, ObservableWrapper.isObservable = function(obs) {
          return !!obs.subscribe;
        }, ObservableWrapper.hasSubscribers = function(obs) {
          return obs.observers.length > 0;
        }, ObservableWrapper.dispose = function(subscription) {
          subscription.unsubscribe();
        }, ObservableWrapper.callNext = function(emitter, value) {
          emitter.emit(value);
        }, ObservableWrapper.callEmit = function(emitter, value) {
          emitter.emit(value);
        }, ObservableWrapper.callError = function(emitter, error) {
          emitter.error(error);
        }, ObservableWrapper.callComplete = function(emitter) {
          emitter.complete();
        }, ObservableWrapper.fromPromise = function(promise) {
          return rxjs_observable_PromiseObservable.PromiseObservable.create(promise);
        }, ObservableWrapper.toPromise = function(obj) {
          return rxjs_operator_toPromise.toPromise.call(obj);
        }, ObservableWrapper;
      }(),
      EventEmitter = function(_super) {
        function EventEmitter(isAsync) {
          void 0 === isAsync && (isAsync = !1), _super.call(this), this.__isAsync = isAsync;
        }
        return __extends(EventEmitter, _super), EventEmitter.prototype.emit = function(value) {
          _super.prototype.next.call(this, value);
        }, EventEmitter.prototype.next = function(value) {
          _super.prototype.next.call(this, value);
        }, EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
          var schedulerFn,
              errorFn = function(err) {
                return null;
              },
              completeFn = function() {
                return null;
              };
          return generatorOrNext && "object" == typeof generatorOrNext ? (schedulerFn = this.__isAsync ? function(value) {
            setTimeout(function() {
              return generatorOrNext.next(value);
            });
          } : function(value) {
            generatorOrNext.next(value);
          }, generatorOrNext.error && (errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return generatorOrNext.error(err);
            });
          } : function(err) {
            generatorOrNext.error(err);
          }), generatorOrNext.complete && (completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return generatorOrNext.complete();
            });
          } : function() {
            generatorOrNext.complete();
          })) : (schedulerFn = this.__isAsync ? function(value) {
            setTimeout(function() {
              return generatorOrNext(value);
            });
          } : function(value) {
            generatorOrNext(value);
          }, error && (errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return error(err);
            });
          } : function(err) {
            error(err);
          }), complete && (completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return complete();
            });
          } : function() {
            complete();
          })), _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
        }, EventEmitter;
      }(rxjs_Subject.Subject),
      APP_ID = new OpaqueToken("AppId"),
      APP_ID_RANDOM_PROVIDER = {
        provide: APP_ID,
        useFactory: _appIdRandomProviderFactory,
        deps: []
      },
      PLATFORM_INITIALIZER = new OpaqueToken("Platform Initializer"),
      APP_INITIALIZER = new OpaqueToken("Application Initializer"),
      PACKAGE_ROOT_URL = new OpaqueToken("Application Packages Root URL"),
      _warnImpl = warn,
      Console = function() {
        function Console() {}
        return Console.prototype.log = function(message) {
          print(message);
        }, Console.prototype.warn = function(message) {
          _warnImpl(message);
        }, Console;
      }();
  Console.decorators = [{type: Injectable}];
  var SecurityContext,
      DefaultIterableDifferFactory = function() {
        function DefaultIterableDifferFactory() {}
        return DefaultIterableDifferFactory.prototype.supports = function(obj) {
          return isListLikeIterable(obj);
        }, DefaultIterableDifferFactory.prototype.create = function(cdRef, trackByFn) {
          return new DefaultIterableDiffer(trackByFn);
        }, DefaultIterableDifferFactory;
      }(),
      trackByIdentity = function(index, item) {
        return item;
      },
      DefaultIterableDiffer = function() {
        function DefaultIterableDiffer(_trackByFn) {
          this._trackByFn = _trackByFn, this._length = null, this._collection = null, this._linkedRecords = null, this._unlinkedRecords = null, this._previousItHead = null, this._itHead = null, this._itTail = null, this._additionsHead = null, this._additionsTail = null, this._movesHead = null, this._movesTail = null, this._removalsHead = null, this._removalsTail = null, this._identityChangesHead = null, this._identityChangesTail = null, this._trackByFn = isPresent(this._trackByFn) ? this._trackByFn : trackByIdentity;
        }
        return Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
          get: function() {
            return this._collection;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
          get: function() {
            return this._length;
          },
          enumerable: !0,
          configurable: !0
        }), DefaultIterableDiffer.prototype.forEachItem = function(fn) {
          var record;
          for (record = this._itHead; null !== record; record = record._next)
            fn(record);
        }, DefaultIterableDiffer.prototype.forEachPreviousItem = function(fn) {
          var record;
          for (record = this._previousItHead; null !== record; record = record._nextPrevious)
            fn(record);
        }, DefaultIterableDiffer.prototype.forEachAddedItem = function(fn) {
          var record;
          for (record = this._additionsHead; null !== record; record = record._nextAdded)
            fn(record);
        }, DefaultIterableDiffer.prototype.forEachMovedItem = function(fn) {
          var record;
          for (record = this._movesHead; null !== record; record = record._nextMoved)
            fn(record);
        }, DefaultIterableDiffer.prototype.forEachRemovedItem = function(fn) {
          var record;
          for (record = this._removalsHead; null !== record; record = record._nextRemoved)
            fn(record);
        }, DefaultIterableDiffer.prototype.forEachIdentityChange = function(fn) {
          var record;
          for (record = this._identityChangesHead; null !== record; record = record._nextIdentityChange)
            fn(record);
        }, DefaultIterableDiffer.prototype.diff = function(collection) {
          if (isBlank(collection) && (collection = []), !isListLikeIterable(collection))
            throw new BaseException("Error trying to diff '" + collection + "'");
          return this.check(collection) ? this : null;
        }, DefaultIterableDiffer.prototype.onDestroy = function() {}, DefaultIterableDiffer.prototype.check = function(collection) {
          var _this = this;
          this._reset();
          var index,
              item,
              itemTrackBy,
              record = this._itHead,
              mayBeDirty = !1;
          if (isArray(collection)) {
            var list = collection;
            for (this._length = collection.length, index = 0; index < this._length; index++)
              item = list[index], itemTrackBy = this._trackByFn(index, item), null !== record && looseIdentical(record.trackById, itemTrackBy) ? (mayBeDirty && (record = this._verifyReinsertion(record, item, itemTrackBy, index)), looseIdentical(record.item, item) || this._addIdentityChange(record, item)) : (record = this._mismatch(record, item, itemTrackBy, index), mayBeDirty = !0), record = record._next;
          } else
            index = 0, iterateListLike(collection, function(item) {
              itemTrackBy = _this._trackByFn(index, item), null !== record && looseIdentical(record.trackById, itemTrackBy) ? (mayBeDirty && (record = _this._verifyReinsertion(record, item, itemTrackBy, index)), looseIdentical(record.item, item) || _this._addIdentityChange(record, item)) : (record = _this._mismatch(record, item, itemTrackBy, index), mayBeDirty = !0), record = record._next, index++;
            }), this._length = index;
          return this._truncate(record), this._collection = collection, this.isDirty;
        }, Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
          get: function() {
            return null !== this._additionsHead || null !== this._movesHead || null !== this._removalsHead || null !== this._identityChangesHead;
          },
          enumerable: !0,
          configurable: !0
        }), DefaultIterableDiffer.prototype._reset = function() {
          if (this.isDirty) {
            var record,
                nextRecord;
            for (record = this._previousItHead = this._itHead; null !== record; record = record._next)
              record._nextPrevious = record._next;
            for (record = this._additionsHead; null !== record; record = record._nextAdded)
              record.previousIndex = record.currentIndex;
            for (this._additionsHead = this._additionsTail = null, record = this._movesHead; null !== record; record = nextRecord)
              record.previousIndex = record.currentIndex, nextRecord = record._nextMoved;
            this._movesHead = this._movesTail = null, this._removalsHead = this._removalsTail = null, this._identityChangesHead = this._identityChangesTail = null;
          }
        }, DefaultIterableDiffer.prototype._mismatch = function(record, item, itemTrackBy, index) {
          var previousRecord;
          return null === record ? previousRecord = this._itTail : (previousRecord = record._prev, this._remove(record)), record = null === this._linkedRecords ? null : this._linkedRecords.get(itemTrackBy, index), null !== record ? (looseIdentical(record.item, item) || this._addIdentityChange(record, item), this._moveAfter(record, previousRecord, index)) : (record = null === this._unlinkedRecords ? null : this._unlinkedRecords.get(itemTrackBy), null !== record ? (looseIdentical(record.item, item) || this._addIdentityChange(record, item), this._reinsertAfter(record, previousRecord, index)) : record = this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index)), record;
        }, DefaultIterableDiffer.prototype._verifyReinsertion = function(record, item, itemTrackBy, index) {
          var reinsertRecord = null === this._unlinkedRecords ? null : this._unlinkedRecords.get(itemTrackBy);
          return null !== reinsertRecord ? record = this._reinsertAfter(reinsertRecord, record._prev, index) : record.currentIndex != index && (record.currentIndex = index, this._addToMoves(record, index)), record;
        }, DefaultIterableDiffer.prototype._truncate = function(record) {
          for (; null !== record; ) {
            var nextRecord = record._next;
            this._addToRemovals(this._unlink(record)), record = nextRecord;
          }
          null !== this._unlinkedRecords && this._unlinkedRecords.clear(), null !== this._additionsTail && (this._additionsTail._nextAdded = null), null !== this._movesTail && (this._movesTail._nextMoved = null), null !== this._itTail && (this._itTail._next = null), null !== this._removalsTail && (this._removalsTail._nextRemoved = null), null !== this._identityChangesTail && (this._identityChangesTail._nextIdentityChange = null);
        }, DefaultIterableDiffer.prototype._reinsertAfter = function(record, prevRecord, index) {
          null !== this._unlinkedRecords && this._unlinkedRecords.remove(record);
          var prev = record._prevRemoved,
              next = record._nextRemoved;
          return null === prev ? this._removalsHead = next : prev._nextRemoved = next, null === next ? this._removalsTail = prev : next._prevRemoved = prev, this._insertAfter(record, prevRecord, index), this._addToMoves(record, index), record;
        }, DefaultIterableDiffer.prototype._moveAfter = function(record, prevRecord, index) {
          return this._unlink(record), this._insertAfter(record, prevRecord, index), this._addToMoves(record, index), record;
        }, DefaultIterableDiffer.prototype._addAfter = function(record, prevRecord, index) {
          return this._insertAfter(record, prevRecord, index), null === this._additionsTail ? this._additionsTail = this._additionsHead = record : this._additionsTail = this._additionsTail._nextAdded = record, record;
        }, DefaultIterableDiffer.prototype._insertAfter = function(record, prevRecord, index) {
          var next = null === prevRecord ? this._itHead : prevRecord._next;
          return record._next = next, record._prev = prevRecord, null === next ? this._itTail = record : next._prev = record, null === prevRecord ? this._itHead = record : prevRecord._next = record, null === this._linkedRecords && (this._linkedRecords = new _DuplicateMap), this._linkedRecords.put(record), record.currentIndex = index, record;
        }, DefaultIterableDiffer.prototype._remove = function(record) {
          return this._addToRemovals(this._unlink(record));
        }, DefaultIterableDiffer.prototype._unlink = function(record) {
          null !== this._linkedRecords && this._linkedRecords.remove(record);
          var prev = record._prev,
              next = record._next;
          return null === prev ? this._itHead = next : prev._next = next, null === next ? this._itTail = prev : next._prev = prev, record;
        }, DefaultIterableDiffer.prototype._addToMoves = function(record, toIndex) {
          return record.previousIndex === toIndex ? record : (null === this._movesTail ? this._movesTail = this._movesHead = record : this._movesTail = this._movesTail._nextMoved = record, record);
        }, DefaultIterableDiffer.prototype._addToRemovals = function(record) {
          return null === this._unlinkedRecords && (this._unlinkedRecords = new _DuplicateMap), this._unlinkedRecords.put(record), record.currentIndex = null, record._nextRemoved = null, null === this._removalsTail ? (this._removalsTail = this._removalsHead = record, record._prevRemoved = null) : (record._prevRemoved = this._removalsTail, this._removalsTail = this._removalsTail._nextRemoved = record), record;
        }, DefaultIterableDiffer.prototype._addIdentityChange = function(record, item) {
          return record.item = item, null === this._identityChangesTail ? this._identityChangesTail = this._identityChangesHead = record : this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record, record;
        }, DefaultIterableDiffer.prototype.toString = function() {
          var list = [];
          this.forEachItem(function(record) {
            return list.push(record);
          });
          var previous = [];
          this.forEachPreviousItem(function(record) {
            return previous.push(record);
          });
          var additions = [];
          this.forEachAddedItem(function(record) {
            return additions.push(record);
          });
          var moves = [];
          this.forEachMovedItem(function(record) {
            return moves.push(record);
          });
          var removals = [];
          this.forEachRemovedItem(function(record) {
            return removals.push(record);
          });
          var identityChanges = [];
          return this.forEachIdentityChange(function(record) {
            return identityChanges.push(record);
          }), "collection: " + list.join(", ") + "\nprevious: " + previous.join(", ") + "\nadditions: " + additions.join(", ") + "\nmoves: " + moves.join(", ") + "\nremovals: " + removals.join(", ") + "\nidentityChanges: " + identityChanges.join(", ") + "\n";
        }, DefaultIterableDiffer;
      }(),
      CollectionChangeRecord = function() {
        function CollectionChangeRecord(item, trackById) {
          this.item = item, this.trackById = trackById, this.currentIndex = null, this.previousIndex = null, this._nextPrevious = null, this._prev = null, this._next = null, this._prevDup = null, this._nextDup = null, this._prevRemoved = null, this._nextRemoved = null, this._nextAdded = null, this._nextMoved = null, this._nextIdentityChange = null;
        }
        return CollectionChangeRecord.prototype.toString = function() {
          return this.previousIndex === this.currentIndex ? stringify(this.item) : stringify(this.item) + "[" + stringify(this.previousIndex) + "->" + stringify(this.currentIndex) + "]";
        }, CollectionChangeRecord;
      }(),
      _DuplicateItemRecordList = function() {
        function _DuplicateItemRecordList() {
          this._head = null, this._tail = null;
        }
        return _DuplicateItemRecordList.prototype.add = function(record) {
          null === this._head ? (this._head = this._tail = record, record._nextDup = null, record._prevDup = null) : (this._tail._nextDup = record, record._prevDup = this._tail, record._nextDup = null, this._tail = record);
        }, _DuplicateItemRecordList.prototype.get = function(trackById, afterIndex) {
          var record;
          for (record = this._head; null !== record; record = record._nextDup)
            if ((null === afterIndex || afterIndex < record.currentIndex) && looseIdentical(record.trackById, trackById))
              return record;
          return null;
        }, _DuplicateItemRecordList.prototype.remove = function(record) {
          var prev = record._prevDup,
              next = record._nextDup;
          return null === prev ? this._head = next : prev._nextDup = next, null === next ? this._tail = prev : next._prevDup = prev, null === this._head;
        }, _DuplicateItemRecordList;
      }(),
      _DuplicateMap = function() {
        function _DuplicateMap() {
          this.map = new Map;
        }
        return _DuplicateMap.prototype.put = function(record) {
          var key = getMapKey(record.trackById),
              duplicates = this.map.get(key);
          isPresent(duplicates) || (duplicates = new _DuplicateItemRecordList, this.map.set(key, duplicates)), duplicates.add(record);
        }, _DuplicateMap.prototype.get = function(trackById, afterIndex) {
          void 0 === afterIndex && (afterIndex = null);
          var key = getMapKey(trackById),
              recordList = this.map.get(key);
          return isBlank(recordList) ? null : recordList.get(trackById, afterIndex);
        }, _DuplicateMap.prototype.remove = function(record) {
          var key = getMapKey(record.trackById),
              recordList = this.map.get(key);
          return recordList.remove(record) && this.map.delete(key), record;
        }, Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
          get: function() {
            return 0 === this.map.size;
          },
          enumerable: !0,
          configurable: !0
        }), _DuplicateMap.prototype.clear = function() {
          this.map.clear();
        }, _DuplicateMap.prototype.toString = function() {
          return "_DuplicateMap(" + stringify(this.map) + ")";
        }, _DuplicateMap;
      }(),
      DefaultKeyValueDifferFactory = function() {
        function DefaultKeyValueDifferFactory() {}
        return DefaultKeyValueDifferFactory.prototype.supports = function(obj) {
          return obj instanceof Map || isJsObject(obj);
        }, DefaultKeyValueDifferFactory.prototype.create = function(cdRef) {
          return new DefaultKeyValueDiffer;
        }, DefaultKeyValueDifferFactory;
      }(),
      DefaultKeyValueDiffer = function() {
        function DefaultKeyValueDiffer() {
          this._records = new Map, this._mapHead = null, this._previousMapHead = null, this._changesHead = null, this._changesTail = null, this._additionsHead = null, this._additionsTail = null, this._removalsHead = null, this._removalsTail = null;
        }
        return Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
          get: function() {
            return null !== this._additionsHead || null !== this._changesHead || null !== this._removalsHead;
          },
          enumerable: !0,
          configurable: !0
        }), DefaultKeyValueDiffer.prototype.forEachItem = function(fn) {
          var record;
          for (record = this._mapHead; null !== record; record = record._next)
            fn(record);
        }, DefaultKeyValueDiffer.prototype.forEachPreviousItem = function(fn) {
          var record;
          for (record = this._previousMapHead; null !== record; record = record._nextPrevious)
            fn(record);
        }, DefaultKeyValueDiffer.prototype.forEachChangedItem = function(fn) {
          var record;
          for (record = this._changesHead; null !== record; record = record._nextChanged)
            fn(record);
        }, DefaultKeyValueDiffer.prototype.forEachAddedItem = function(fn) {
          var record;
          for (record = this._additionsHead; null !== record; record = record._nextAdded)
            fn(record);
        }, DefaultKeyValueDiffer.prototype.forEachRemovedItem = function(fn) {
          var record;
          for (record = this._removalsHead; null !== record; record = record._nextRemoved)
            fn(record);
        }, DefaultKeyValueDiffer.prototype.diff = function(map) {
          if (isBlank(map) && (map = MapWrapper.createFromPairs([])), !(map instanceof Map || isJsObject(map)))
            throw new BaseException("Error trying to diff '" + map + "'");
          return this.check(map) ? this : null;
        }, DefaultKeyValueDiffer.prototype.onDestroy = function() {}, DefaultKeyValueDiffer.prototype.check = function(map) {
          var _this = this;
          this._reset();
          var records = this._records,
              oldSeqRecord = this._mapHead,
              lastOldSeqRecord = null,
              lastNewSeqRecord = null,
              seqChanged = !1;
          return this._forEach(map, function(value, key) {
            var newSeqRecord;
            null !== oldSeqRecord && key === oldSeqRecord.key ? (newSeqRecord = oldSeqRecord, looseIdentical(value, oldSeqRecord.currentValue) || (oldSeqRecord.previousValue = oldSeqRecord.currentValue, oldSeqRecord.currentValue = value, _this._addToChanges(oldSeqRecord))) : (seqChanged = !0, null !== oldSeqRecord && (oldSeqRecord._next = null, _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord), _this._addToRemovals(oldSeqRecord)), records.has(key) ? newSeqRecord = records.get(key) : (newSeqRecord = new KeyValueChangeRecord(key), records.set(key, newSeqRecord), newSeqRecord.currentValue = value, _this._addToAdditions(newSeqRecord))), seqChanged && (_this._isInRemovals(newSeqRecord) && _this._removeFromRemovals(newSeqRecord), null == lastNewSeqRecord ? _this._mapHead = newSeqRecord : lastNewSeqRecord._next = newSeqRecord), lastOldSeqRecord = oldSeqRecord, lastNewSeqRecord = newSeqRecord, oldSeqRecord = null === oldSeqRecord ? null : oldSeqRecord._next;
          }), this._truncate(lastOldSeqRecord, oldSeqRecord), this.isDirty;
        }, DefaultKeyValueDiffer.prototype._reset = function() {
          if (this.isDirty) {
            var record;
            for (record = this._previousMapHead = this._mapHead; null !== record; record = record._next)
              record._nextPrevious = record._next;
            for (record = this._changesHead; null !== record; record = record._nextChanged)
              record.previousValue = record.currentValue;
            for (record = this._additionsHead; null != record; record = record._nextAdded)
              record.previousValue = record.currentValue;
            this._changesHead = this._changesTail = null, this._additionsHead = this._additionsTail = null, this._removalsHead = this._removalsTail = null;
          }
        }, DefaultKeyValueDiffer.prototype._truncate = function(lastRecord, record) {
          for (; null !== record; ) {
            null === lastRecord ? this._mapHead = null : lastRecord._next = null;
            var nextRecord = record._next;
            this._addToRemovals(record), lastRecord = record, record = nextRecord;
          }
          for (var rec = this._removalsHead; null !== rec; rec = rec._nextRemoved)
            rec.previousValue = rec.currentValue, rec.currentValue = null, this._records.delete(rec.key);
        }, DefaultKeyValueDiffer.prototype._isInRemovals = function(record) {
          return record === this._removalsHead || null !== record._nextRemoved || null !== record._prevRemoved;
        }, DefaultKeyValueDiffer.prototype._addToRemovals = function(record) {
          null === this._removalsHead ? this._removalsHead = this._removalsTail = record : (this._removalsTail._nextRemoved = record, record._prevRemoved = this._removalsTail, this._removalsTail = record);
        }, DefaultKeyValueDiffer.prototype._removeFromSeq = function(prev, record) {
          var next = record._next;
          null === prev ? this._mapHead = next : prev._next = next;
        }, DefaultKeyValueDiffer.prototype._removeFromRemovals = function(record) {
          var prev = record._prevRemoved,
              next = record._nextRemoved;
          null === prev ? this._removalsHead = next : prev._nextRemoved = next, null === next ? this._removalsTail = prev : next._prevRemoved = prev, record._prevRemoved = record._nextRemoved = null;
        }, DefaultKeyValueDiffer.prototype._addToAdditions = function(record) {
          null === this._additionsHead ? this._additionsHead = this._additionsTail = record : (this._additionsTail._nextAdded = record, this._additionsTail = record);
        }, DefaultKeyValueDiffer.prototype._addToChanges = function(record) {
          null === this._changesHead ? this._changesHead = this._changesTail = record : (this._changesTail._nextChanged = record, this._changesTail = record);
        }, DefaultKeyValueDiffer.prototype.toString = function() {
          var record,
              items = [],
              previous = [],
              changes = [],
              additions = [],
              removals = [];
          for (record = this._mapHead; null !== record; record = record._next)
            items.push(stringify(record));
          for (record = this._previousMapHead; null !== record; record = record._nextPrevious)
            previous.push(stringify(record));
          for (record = this._changesHead; null !== record; record = record._nextChanged)
            changes.push(stringify(record));
          for (record = this._additionsHead; null !== record; record = record._nextAdded)
            additions.push(stringify(record));
          for (record = this._removalsHead; null !== record; record = record._nextRemoved)
            removals.push(stringify(record));
          return "map: " + items.join(", ") + "\nprevious: " + previous.join(", ") + "\nadditions: " + additions.join(", ") + "\nchanges: " + changes.join(", ") + "\nremovals: " + removals.join(", ") + "\n";
        }, DefaultKeyValueDiffer.prototype._forEach = function(obj, fn) {
          obj instanceof Map ? obj.forEach(fn) : StringMapWrapper.forEach(obj, fn);
        }, DefaultKeyValueDiffer;
      }(),
      KeyValueChangeRecord = function() {
        function KeyValueChangeRecord(key) {
          this.key = key, this.previousValue = null, this.currentValue = null, this._nextPrevious = null, this._next = null, this._nextAdded = null, this._nextRemoved = null, this._prevRemoved = null, this._nextChanged = null;
        }
        return KeyValueChangeRecord.prototype.toString = function() {
          return looseIdentical(this.previousValue, this.currentValue) ? stringify(this.key) : stringify(this.key) + "[" + stringify(this.previousValue) + "->" + stringify(this.currentValue) + "]";
        }, KeyValueChangeRecord;
      }(),
      IterableDiffers = function() {
        function IterableDiffers(factories) {
          this.factories = factories;
        }
        return IterableDiffers.create = function(factories, parent) {
          if (isPresent(parent)) {
            var copied = ListWrapper.clone(parent.factories);
            return factories = factories.concat(copied), new IterableDiffers(factories);
          }
          return new IterableDiffers(factories);
        }, IterableDiffers.extend = function(factories) {
          return new Provider(IterableDiffers, {
            useFactory: function(parent) {
              if (isBlank(parent))
                throw new BaseException("Cannot extend IterableDiffers without a parent injector");
              return IterableDiffers.create(factories, parent);
            },
            deps: [[IterableDiffers, new SkipSelfMetadata, new OptionalMetadata]]
          });
        }, IterableDiffers.prototype.find = function(iterable) {
          var factory = this.factories.find(function(f) {
            return f.supports(iterable);
          });
          if (isPresent(factory))
            return factory;
          throw new BaseException("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
        }, IterableDiffers;
      }(),
      KeyValueDiffers = function() {
        function KeyValueDiffers(factories) {
          this.factories = factories;
        }
        return KeyValueDiffers.create = function(factories, parent) {
          if (isPresent(parent)) {
            var copied = ListWrapper.clone(parent.factories);
            return factories = factories.concat(copied), new KeyValueDiffers(factories);
          }
          return new KeyValueDiffers(factories);
        }, KeyValueDiffers.extend = function(factories) {
          return new Provider(KeyValueDiffers, {
            useFactory: function(parent) {
              if (isBlank(parent))
                throw new BaseException("Cannot extend KeyValueDiffers without a parent injector");
              return KeyValueDiffers.create(factories, parent);
            },
            deps: [[KeyValueDiffers, new SkipSelfMetadata, new OptionalMetadata]]
          });
        }, KeyValueDiffers.prototype.find = function(kv) {
          var factory = this.factories.find(function(f) {
            return f.supports(kv);
          });
          if (isPresent(factory))
            return factory;
          throw new BaseException("Cannot find a differ supporting object '" + kv + "'");
        }, KeyValueDiffers;
      }(),
      uninitialized = new Object,
      WrappedValue = function() {
        function WrappedValue(wrapped) {
          this.wrapped = wrapped;
        }
        return WrappedValue.wrap = function(value) {
          return new WrappedValue(value);
        }, WrappedValue;
      }(),
      ValueUnwrapper = function() {
        function ValueUnwrapper() {
          this.hasWrappedValue = !1;
        }
        return ValueUnwrapper.prototype.unwrap = function(value) {
          return value instanceof WrappedValue ? (this.hasWrappedValue = !0, value.wrapped) : value;
        }, ValueUnwrapper.prototype.reset = function() {
          this.hasWrappedValue = !1;
        }, ValueUnwrapper;
      }(),
      SimpleChange = function() {
        function SimpleChange(previousValue, currentValue) {
          this.previousValue = previousValue, this.currentValue = currentValue;
        }
        return SimpleChange.prototype.isFirstChange = function() {
          return this.previousValue === uninitialized;
        }, SimpleChange;
      }(),
      ChangeDetectorRef = function() {
        function ChangeDetectorRef() {}
        return ChangeDetectorRef;
      }(),
      keyValDiff = [new DefaultKeyValueDifferFactory],
      iterableDiff = [new DefaultIterableDifferFactory],
      defaultIterableDiffers = new IterableDiffers(iterableDiff),
      defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff),
      RenderComponentType = function() {
        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles) {
          this.id = id, this.templateUrl = templateUrl, this.slotCount = slotCount, this.encapsulation = encapsulation, this.styles = styles;
        }
        return RenderComponentType;
      }(),
      RenderDebugInfo = function() {
        function RenderDebugInfo() {}
        return Object.defineProperty(RenderDebugInfo.prototype, "injector", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderDebugInfo.prototype, "component", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderDebugInfo.prototype, "references", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderDebugInfo.prototype, "context", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderDebugInfo.prototype, "source", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), RenderDebugInfo;
      }(),
      Renderer = function() {
        function Renderer() {}
        return Renderer;
      }(),
      RootRenderer = function() {
        function RootRenderer() {}
        return RootRenderer;
      }();
  !function(SecurityContext) {
    SecurityContext[SecurityContext.NONE = 0] = "NONE", SecurityContext[SecurityContext.HTML = 1] = "HTML", SecurityContext[SecurityContext.STYLE = 2] = "STYLE", SecurityContext[SecurityContext.SCRIPT = 3] = "SCRIPT", SecurityContext[SecurityContext.URL = 4] = "URL", SecurityContext[SecurityContext.RESOURCE_URL = 5] = "RESOURCE_URL";
  }(SecurityContext || (SecurityContext = {}));
  var trace,
      events,
      ViewType,
      SanitizationService = function() {
        function SanitizationService() {}
        return SanitizationService;
      }(),
      ElementRef = function() {
        function ElementRef(nativeElement) {
          this.nativeElement = nativeElement;
        }
        return ElementRef;
      }(),
      wtfEnabled = detectWTF(),
      wtfCreateScope = wtfEnabled ? createScope : function(signature, flags) {
        return noopScope;
      },
      wtfLeave = wtfEnabled ? leave : function(s, r) {
        return r;
      },
      wtfStartTimeRange = wtfEnabled ? startTimeRange : function(rangeType, action) {
        return null;
      },
      wtfEndTimeRange = wtfEnabled ? endTimeRange : function(r) {
        return null;
      },
      ViewContainerRef = function() {
        function ViewContainerRef() {}
        return Object.defineProperty(ViewContainerRef.prototype, "element", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewContainerRef.prototype, "injector", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewContainerRef.prototype, "length", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), ViewContainerRef;
      }(),
      ViewContainerRef_ = function() {
        function ViewContainerRef_(_element) {
          this._element = _element, this._createComponentInContainerScope = wtfCreateScope("ViewContainerRef#createComponent()"), this._insertScope = wtfCreateScope("ViewContainerRef#insert()"), this._removeScope = wtfCreateScope("ViewContainerRef#remove()"), this._detachScope = wtfCreateScope("ViewContainerRef#detach()");
        }
        return ViewContainerRef_.prototype.get = function(index) {
          return this._element.nestedViews[index].ref;
        }, Object.defineProperty(ViewContainerRef_.prototype, "length", {
          get: function() {
            var views = this._element.nestedViews;
            return isPresent(views) ? views.length : 0;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewContainerRef_.prototype, "element", {
          get: function() {
            return this._element.elementRef;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewContainerRef_.prototype, "injector", {
          get: function() {
            return this._element.injector;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
          get: function() {
            return this._element.parentInjector;
          },
          enumerable: !0,
          configurable: !0
        }), ViewContainerRef_.prototype.createEmbeddedView = function(templateRef, context, index) {
          void 0 === context && (context = null), void 0 === index && (index = -1);
          var viewRef = templateRef.createEmbeddedView(context);
          return this.insert(viewRef, index), viewRef;
        }, ViewContainerRef_.prototype.createComponent = function(componentFactory, index, injector, projectableNodes) {
          void 0 === index && (index = -1), void 0 === injector && (injector = null), void 0 === projectableNodes && (projectableNodes = null);
          var s = this._createComponentInContainerScope(),
              contextInjector = isPresent(injector) ? injector : this._element.parentInjector,
              componentRef = componentFactory.create(contextInjector, projectableNodes);
          return this.insert(componentRef.hostView, index), wtfLeave(s, componentRef);
        }, ViewContainerRef_.prototype.insert = function(viewRef, index) {
          void 0 === index && (index = -1);
          var s = this._insertScope();
          index == -1 && (index = this.length);
          var viewRef_ = viewRef;
          return this._element.attachView(viewRef_.internalView, index), wtfLeave(s, viewRef_);
        }, ViewContainerRef_.prototype.indexOf = function(viewRef) {
          return ListWrapper.indexOf(this._element.nestedViews, viewRef.internalView);
        }, ViewContainerRef_.prototype.remove = function(index) {
          void 0 === index && (index = -1);
          var s = this._removeScope();
          index == -1 && (index = this.length - 1);
          var view = this._element.detachView(index);
          view.destroy(), wtfLeave(s);
        }, ViewContainerRef_.prototype.detach = function(index) {
          void 0 === index && (index = -1);
          var s = this._detachScope();
          index == -1 && (index = this.length - 1);
          var view = this._element.detachView(index);
          return wtfLeave(s, view.ref);
        }, ViewContainerRef_.prototype.clear = function() {
          for (var i = this.length - 1; i >= 0; i--)
            this.remove(i);
        }, ViewContainerRef_;
      }();
  !function(ViewType) {
    ViewType[ViewType.HOST = 0] = "HOST", ViewType[ViewType.COMPONENT = 1] = "COMPONENT", ViewType[ViewType.EMBEDDED = 2] = "EMBEDDED";
  }(ViewType || (ViewType = {}));
  var AppElement = function() {
    function AppElement(index, parentIndex, parentView, nativeElement) {
      this.index = index, this.parentIndex = parentIndex, this.parentView = parentView, this.nativeElement = nativeElement, this.nestedViews = null, this.componentView = null;
    }
    return Object.defineProperty(AppElement.prototype, "elementRef", {
      get: function() {
        return new ElementRef(this.nativeElement);
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(AppElement.prototype, "vcRef", {
      get: function() {
        return new ViewContainerRef_(this);
      },
      enumerable: !0,
      configurable: !0
    }), AppElement.prototype.initComponent = function(component, componentConstructorViewQueries, view) {
      this.component = component, this.componentConstructorViewQueries = componentConstructorViewQueries, this.componentView = view;
    }, Object.defineProperty(AppElement.prototype, "parentInjector", {
      get: function() {
        return this.parentView.injector(this.parentIndex);
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(AppElement.prototype, "injector", {
      get: function() {
        return this.parentView.injector(this.index);
      },
      enumerable: !0,
      configurable: !0
    }), AppElement.prototype.mapNestedViews = function(nestedViewClass, callback) {
      var result = [];
      return isPresent(this.nestedViews) && this.nestedViews.forEach(function(nestedView) {
        nestedView.clazz === nestedViewClass && result.push(callback(nestedView));
      }), result;
    }, AppElement.prototype.attachView = function(view, viewIndex) {
      if (view.type === ViewType.COMPONENT)
        throw new BaseException("Component views can't be moved!");
      var nestedViews = this.nestedViews;
      null == nestedViews && (nestedViews = [], this.nestedViews = nestedViews), ListWrapper.insert(nestedViews, viewIndex, view);
      var refRenderNode;
      if (viewIndex > 0) {
        var prevView = nestedViews[viewIndex - 1];
        refRenderNode = prevView.lastRootNode;
      } else
        refRenderNode = this.nativeElement;
      isPresent(refRenderNode) && view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes), view.addToContentChildren(this);
    }, AppElement.prototype.detachView = function(viewIndex) {
      var view = ListWrapper.removeAt(this.nestedViews, viewIndex);
      if (view.type === ViewType.COMPONENT)
        throw new BaseException("Component views can't be moved!");
      return view.detach(), view.removeFromContentChildren(this), view;
    }, AppElement;
  }(),
      ExpressionChangedAfterItHasBeenCheckedException = function(_super) {
        function ExpressionChangedAfterItHasBeenCheckedException(oldValue, currValue, context) {
          _super.call(this, "Expression has changed after it was checked. " + ("Previous value: '" + oldValue + "'. Current value: '" + currValue + "'"));
        }
        return __extends(ExpressionChangedAfterItHasBeenCheckedException, _super), ExpressionChangedAfterItHasBeenCheckedException;
      }(BaseException),
      ViewWrappedException = function(_super) {
        function ViewWrappedException(originalException, originalStack, context) {
          _super.call(this, "Error in " + context.source, originalException, originalStack, context);
        }
        return __extends(ViewWrappedException, _super), ViewWrappedException;
      }(WrappedException),
      ViewDestroyedException = function(_super) {
        function ViewDestroyedException(details) {
          _super.call(this, "Attempt to use a destroyed view: " + details);
        }
        return __extends(ViewDestroyedException, _super), ViewDestroyedException;
      }(BaseException),
      ViewUtils = function() {
        function ViewUtils(_renderer, _appId, sanitizer) {
          this._renderer = _renderer, this._appId = _appId, this._nextCompTypeId = 0, this.sanitizer = sanitizer;
        }
        return ViewUtils.prototype.createRenderComponentType = function(templateUrl, slotCount, encapsulation, styles) {
          return new RenderComponentType(this._appId + "-" + this._nextCompTypeId++, templateUrl, slotCount, encapsulation, styles);
        }, ViewUtils.prototype.renderComponent = function(renderComponentType) {
          return this._renderer.renderComponent(renderComponentType);
        }, ViewUtils;
      }();
  ViewUtils.decorators = [{type: Injectable}], ViewUtils.ctorParameters = [{type: RootRenderer}, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [APP_ID]
    }]
  }, {type: SanitizationService}];
  var EMPTY_ARR = [],
      MAX_INTERPOLATION_VALUES = 9,
      EMPTY_ARRAY = [],
      EMPTY_MAP = {},
      ComponentRef = function() {
        function ComponentRef() {}
        return Object.defineProperty(ComponentRef.prototype, "location", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef.prototype, "injector", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef.prototype, "instance", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef.prototype, "hostView", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef.prototype, "componentType", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), ComponentRef;
      }(),
      ComponentRef_ = function(_super) {
        function ComponentRef_(_hostElement, _componentType) {
          _super.call(this), this._hostElement = _hostElement, this._componentType = _componentType;
        }
        return __extends(ComponentRef_, _super), Object.defineProperty(ComponentRef_.prototype, "location", {
          get: function() {
            return this._hostElement.elementRef;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef_.prototype, "injector", {
          get: function() {
            return this._hostElement.injector;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef_.prototype, "instance", {
          get: function() {
            return this._hostElement.component;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef_.prototype, "hostView", {
          get: function() {
            return this._hostElement.parentView.ref;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
          get: function() {
            return this._hostElement.parentView.ref;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef_.prototype, "componentType", {
          get: function() {
            return this._componentType;
          },
          enumerable: !0,
          configurable: !0
        }), ComponentRef_.prototype.destroy = function() {
          this._hostElement.parentView.destroy();
        }, ComponentRef_.prototype.onDestroy = function(callback) {
          this.hostView.onDestroy(callback);
        }, ComponentRef_;
      }(ComponentRef),
      EMPTY_CONTEXT = new Object,
      ComponentFactory = function() {
        function ComponentFactory(selector, _viewFactory, _componentType) {
          this.selector = selector, this._viewFactory = _viewFactory, this._componentType = _componentType;
        }
        return Object.defineProperty(ComponentFactory.prototype, "componentType", {
          get: function() {
            return this._componentType;
          },
          enumerable: !0,
          configurable: !0
        }), ComponentFactory.prototype.create = function(injector, projectableNodes, rootSelectorOrNode) {
          void 0 === projectableNodes && (projectableNodes = null), void 0 === rootSelectorOrNode && (rootSelectorOrNode = null);
          var vu = injector.get(ViewUtils);
          isBlank(projectableNodes) && (projectableNodes = []);
          var hostView = this._viewFactory(vu, injector, null),
              hostElement = hostView.create(EMPTY_CONTEXT, projectableNodes, rootSelectorOrNode);
          return new ComponentRef_(hostElement, this._componentType);
        }, ComponentFactory;
      }(),
      ComponentResolver = function() {
        function ComponentResolver() {}
        return ComponentResolver;
      }(),
      ReflectorComponentResolver = function(_super) {
        function ReflectorComponentResolver() {
          _super.apply(this, arguments);
        }
        return __extends(ReflectorComponentResolver, _super), ReflectorComponentResolver.prototype.resolveComponent = function(component) {
          if (isString(component))
            return PromiseWrapper.reject(new BaseException("Cannot resolve component using '" + component + "'."), null);
          var metadatas = reflector.annotations(component),
              componentFactory = metadatas.find(_isComponentFactory);
          if (isBlank(componentFactory))
            throw new BaseException("No precompiled component " + stringify(component) + " found");
          return PromiseWrapper.resolve(componentFactory);
        }, ReflectorComponentResolver.prototype.clearCache = function() {}, ReflectorComponentResolver;
      }(ComponentResolver);
  ReflectorComponentResolver.decorators = [{type: Injectable}];
  var NgZoneError = function() {
    function NgZoneError(error, stackTrace) {
      this.error = error, this.stackTrace = stackTrace;
    }
    return NgZoneError;
  }(),
      NgZoneImpl = function() {
        function NgZoneImpl(_a) {
          var _this = this,
              trace = _a.trace,
              onEnter = _a.onEnter,
              onLeave = _a.onLeave,
              setMicrotask = _a.setMicrotask,
              setMacrotask = _a.setMacrotask,
              onError = _a.onError;
          if (this.onEnter = onEnter, this.onLeave = onLeave, this.setMicrotask = setMicrotask, this.setMacrotask = setMacrotask, this.onError = onError, !Zone)
            throw new Error("Angular requires Zone.js polyfill.");
          this.outer = this.inner = Zone.current, Zone.wtfZoneSpec && (this.inner = this.inner.fork(Zone.wtfZoneSpec)), trace && Zone.longStackTraceZoneSpec && (this.inner = this.inner.fork(Zone.longStackTraceZoneSpec)), this.inner = this.inner.fork({
            name: "angular",
            properties: {isAngularZone: !0},
            onInvokeTask: function(delegate, current, target, task, applyThis, applyArgs) {
              try {
                return _this.onEnter(), delegate.invokeTask(target, task, applyThis, applyArgs);
              } finally {
                _this.onLeave();
              }
            },
            onInvoke: function(delegate, current, target, callback, applyThis, applyArgs, source) {
              try {
                return _this.onEnter(), delegate.invoke(target, callback, applyThis, applyArgs, source);
              } finally {
                _this.onLeave();
              }
            },
            onHasTask: function(delegate, current, target, hasTaskState) {
              delegate.hasTask(target, hasTaskState), current == target && ("microTask" == hasTaskState.change ? _this.setMicrotask(hasTaskState.microTask) : "macroTask" == hasTaskState.change && _this.setMacrotask(hasTaskState.macroTask));
            },
            onHandleError: function(delegate, current, target, error) {
              return delegate.handleError(target, error), _this.onError(new NgZoneError(error, error.stack)), !1;
            }
          });
        }
        return NgZoneImpl.isInAngularZone = function() {
          return Zone.current.get("isAngularZone") === !0;
        }, NgZoneImpl.prototype.runInner = function(fn) {
          return this.inner.run(fn);
        }, NgZoneImpl.prototype.runInnerGuarded = function(fn) {
          return this.inner.runGuarded(fn);
        }, NgZoneImpl.prototype.runOuter = function(fn) {
          return this.outer.run(fn);
        }, NgZoneImpl;
      }(),
      NgZone = function() {
        function NgZone(_a) {
          var _this = this,
              _b = _a.enableLongStackTrace,
              enableLongStackTrace = void 0 !== _b && _b;
          this._hasPendingMicrotasks = !1, this._hasPendingMacrotasks = !1, this._isStable = !0, this._nesting = 0, this._onUnstable = new EventEmitter((!1)), this._onMicrotaskEmpty = new EventEmitter((!1)), this._onStable = new EventEmitter((!1)), this._onErrorEvents = new EventEmitter((!1)), this._zoneImpl = new NgZoneImpl({
            trace: enableLongStackTrace,
            onEnter: function() {
              _this._nesting++, _this._isStable && (_this._isStable = !1, _this._onUnstable.emit(null));
            },
            onLeave: function() {
              _this._nesting--, _this._checkStable();
            },
            setMicrotask: function(hasMicrotasks) {
              _this._hasPendingMicrotasks = hasMicrotasks, _this._checkStable();
            },
            setMacrotask: function(hasMacrotasks) {
              _this._hasPendingMacrotasks = hasMacrotasks;
            },
            onError: function(error) {
              return _this._onErrorEvents.emit(error);
            }
          });
        }
        return NgZone.isInAngularZone = function() {
          return NgZoneImpl.isInAngularZone();
        }, NgZone.assertInAngularZone = function() {
          if (!NgZoneImpl.isInAngularZone())
            throw new BaseException("Expected to be in Angular Zone, but it is not!");
        }, NgZone.assertNotInAngularZone = function() {
          if (NgZoneImpl.isInAngularZone())
            throw new BaseException("Expected to not be in Angular Zone, but it is!");
        }, NgZone.prototype._checkStable = function() {
          var _this = this;
          if (0 == this._nesting && !this._hasPendingMicrotasks && !this._isStable)
            try {
              this._nesting++, this._onMicrotaskEmpty.emit(null);
            } finally {
              if (this._nesting--, !this._hasPendingMicrotasks)
                try {
                  this.runOutsideAngular(function() {
                    return _this._onStable.emit(null);
                  });
                } finally {
                  this._isStable = !0;
                }
            }
        }, Object.defineProperty(NgZone.prototype, "onUnstable", {
          get: function() {
            return this._onUnstable;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
          get: function() {
            return this._onMicrotaskEmpty;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgZone.prototype, "onStable", {
          get: function() {
            return this._onStable;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgZone.prototype, "onError", {
          get: function() {
            return this._onErrorEvents;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgZone.prototype, "isStable", {
          get: function() {
            return this._isStable;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
          get: function() {
            return this._hasPendingMicrotasks;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
          get: function() {
            return this._hasPendingMacrotasks;
          },
          enumerable: !0,
          configurable: !0
        }), NgZone.prototype.run = function(fn) {
          return this._zoneImpl.runInner(fn);
        }, NgZone.prototype.runGuarded = function(fn) {
          return this._zoneImpl.runInnerGuarded(fn);
        }, NgZone.prototype.runOutsideAngular = function(fn) {
          return this._zoneImpl.runOuter(fn);
        }, NgZone;
      }(),
      Testability = function() {
        function Testability(_ngZone) {
          this._ngZone = _ngZone, this._pendingCount = 0, this._isZoneStable = !0, this._didWork = !1, this._callbacks = [], this._watchAngularEvents();
        }
        return Testability.prototype._watchAngularEvents = function() {
          var _this = this;
          ObservableWrapper.subscribe(this._ngZone.onUnstable, function(_) {
            _this._didWork = !0, _this._isZoneStable = !1;
          }), this._ngZone.runOutsideAngular(function() {
            ObservableWrapper.subscribe(_this._ngZone.onStable, function(_) {
              NgZone.assertNotInAngularZone(), scheduleMicroTask(function() {
                _this._isZoneStable = !0, _this._runCallbacksIfReady();
              });
            });
          });
        }, Testability.prototype.increasePendingRequestCount = function() {
          return this._pendingCount += 1, this._didWork = !0, this._pendingCount;
        }, Testability.prototype.decreasePendingRequestCount = function() {
          if (this._pendingCount -= 1, this._pendingCount < 0)
            throw new BaseException("pending async requests below zero");
          return this._runCallbacksIfReady(), this._pendingCount;
        }, Testability.prototype.isStable = function() {
          return this._isZoneStable && 0 == this._pendingCount && !this._ngZone.hasPendingMacrotasks;
        }, Testability.prototype._runCallbacksIfReady = function() {
          var _this = this;
          this.isStable() ? scheduleMicroTask(function() {
            for (; 0 !== _this._callbacks.length; )
              _this._callbacks.pop()(_this._didWork);
            _this._didWork = !1;
          }) : this._didWork = !0;
        }, Testability.prototype.whenStable = function(callback) {
          this._callbacks.push(callback), this._runCallbacksIfReady();
        }, Testability.prototype.getPendingRequestCount = function() {
          return this._pendingCount;
        }, Testability.prototype.findBindings = function(using, provider, exactMatch) {
          return [];
        }, Testability.prototype.findProviders = function(using, provider, exactMatch) {
          return [];
        }, Testability;
      }();
  Testability.decorators = [{type: Injectable}], Testability.ctorParameters = [{type: NgZone}];
  var TestabilityRegistry = function() {
    function TestabilityRegistry() {
      this._applications = new Map$1, _testabilityGetter.addToWindow(this);
    }
    return TestabilityRegistry.prototype.registerApplication = function(token, testability) {
      this._applications.set(token, testability);
    }, TestabilityRegistry.prototype.getTestability = function(elem) {
      return this._applications.get(elem);
    }, TestabilityRegistry.prototype.getAllTestabilities = function() {
      return MapWrapper.values(this._applications);
    }, TestabilityRegistry.prototype.getAllRootElements = function() {
      return MapWrapper.keys(this._applications);
    }, TestabilityRegistry.prototype.findTestabilityInTree = function(elem, findInAncestors) {
      return void 0 === findInAncestors && (findInAncestors = !0), _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
    }, TestabilityRegistry;
  }();
  TestabilityRegistry.decorators = [{type: Injectable}], TestabilityRegistry.ctorParameters = [];
  var _platform,
      _NoopGetTestability = function() {
        function _NoopGetTestability() {}
        return _NoopGetTestability.prototype.addToWindow = function(registry) {}, _NoopGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
          return null;
        }, _NoopGetTestability;
      }(),
      _testabilityGetter = new _NoopGetTestability,
      _devMode = !0,
      _runModeLocked = !1,
      _inPlatformCreate = !1,
      PlatformRef = function() {
        function PlatformRef() {}
        return Object.defineProperty(PlatformRef.prototype, "injector", {
          get: function() {
            throw unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(PlatformRef.prototype, "disposed", {
          get: function() {
            throw unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), PlatformRef;
      }(),
      PlatformRef_ = function(_super) {
        function PlatformRef_(_injector) {
          if (_super.call(this), this._injector = _injector, this._applications = [], this._disposeListeners = [], this._disposed = !1, !_inPlatformCreate)
            throw new BaseException("Platforms have to be created via `createPlatform`!");
          var inits = _injector.get(PLATFORM_INITIALIZER, null);
          isPresent(inits) && inits.forEach(function(init) {
            return init();
          });
        }
        return __extends(PlatformRef_, _super), PlatformRef_.prototype.registerDisposeListener = function(dispose) {
          this._disposeListeners.push(dispose);
        }, Object.defineProperty(PlatformRef_.prototype, "injector", {
          get: function() {
            return this._injector;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(PlatformRef_.prototype, "disposed", {
          get: function() {
            return this._disposed;
          },
          enumerable: !0,
          configurable: !0
        }), PlatformRef_.prototype.addApplication = function(appRef) {
          this._applications.push(appRef);
        }, PlatformRef_.prototype.dispose = function() {
          ListWrapper.clone(this._applications).forEach(function(app) {
            return app.dispose();
          }), this._disposeListeners.forEach(function(dispose) {
            return dispose();
          }), this._disposed = !0;
        }, PlatformRef_.prototype._applicationDisposed = function(app) {
          ListWrapper.remove(this._applications, app);
        }, PlatformRef_;
      }(PlatformRef);
  PlatformRef_.decorators = [{type: Injectable}], PlatformRef_.ctorParameters = [{type: Injector}];
  var ApplicationRef = function() {
    function ApplicationRef() {}
    return Object.defineProperty(ApplicationRef.prototype, "injector", {
      get: function() {
        return unimplemented();
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(ApplicationRef.prototype, "zone", {
      get: function() {
        return unimplemented();
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
      get: function() {
        return unimplemented();
      },
      enumerable: !0,
      configurable: !0
    }), ApplicationRef;
  }(),
      ApplicationRef_ = function(_super) {
        function ApplicationRef_(_platform, _zone, _injector) {
          var _this = this;
          _super.call(this), this._platform = _platform, this._zone = _zone, this._injector = _injector, this._bootstrapListeners = [], this._disposeListeners = [], this._rootComponents = [], this._rootComponentTypes = [], this._changeDetectorRefs = [], this._runningTick = !1, this._enforceNoNewChanges = !1;
          var zone = _injector.get(NgZone);
          this._enforceNoNewChanges = isDevMode(), zone.run(function() {
            _this._exceptionHandler = _injector.get(ExceptionHandler);
          }), this._asyncInitDonePromise = this.run(function() {
            var asyncInitDonePromise,
                inits = _injector.get(APP_INITIALIZER, null),
                asyncInitResults = [];
            if (isPresent(inits))
              for (var i = 0; i < inits.length; i++) {
                var initResult = inits[i]();
                isPromise(initResult) && asyncInitResults.push(initResult);
              }
            return asyncInitResults.length > 0 ? (asyncInitDonePromise = PromiseWrapper.all(asyncInitResults).then(function(_) {
              return _this._asyncInitDone = !0;
            }), _this._asyncInitDone = !1) : (_this._asyncInitDone = !0, asyncInitDonePromise = PromiseWrapper.resolve(!0)), asyncInitDonePromise;
          }), ObservableWrapper.subscribe(zone.onError, function(error) {
            _this._exceptionHandler.call(error.error, error.stackTrace);
          }), ObservableWrapper.subscribe(this._zone.onMicrotaskEmpty, function(_) {
            _this._zone.run(function() {
              _this.tick();
            });
          });
        }
        return __extends(ApplicationRef_, _super), ApplicationRef_.prototype.registerBootstrapListener = function(listener) {
          this._bootstrapListeners.push(listener);
        }, ApplicationRef_.prototype.registerDisposeListener = function(dispose) {
          this._disposeListeners.push(dispose);
        }, ApplicationRef_.prototype.registerChangeDetector = function(changeDetector) {
          this._changeDetectorRefs.push(changeDetector);
        }, ApplicationRef_.prototype.unregisterChangeDetector = function(changeDetector) {
          ListWrapper.remove(this._changeDetectorRefs, changeDetector);
        }, ApplicationRef_.prototype.waitForAsyncInitializers = function() {
          return this._asyncInitDonePromise;
        }, ApplicationRef_.prototype.run = function(callback) {
          var result,
              _this = this,
              zone = this.injector.get(NgZone),
              completer = PromiseWrapper.completer();
          return zone.run(function() {
            try {
              result = callback(), isPromise(result) && PromiseWrapper.then(result, function(ref) {
                completer.resolve(ref);
              }, function(err, stackTrace) {
                completer.reject(err, stackTrace), _this._exceptionHandler.call(err, stackTrace);
              });
            } catch (e) {
              throw _this._exceptionHandler.call(e, e.stack), e;
            }
          }), isPromise(result) ? completer.promise : result;
        }, ApplicationRef_.prototype.bootstrap = function(componentFactory) {
          var _this = this;
          if (!this._asyncInitDone)
            throw new BaseException("Cannot bootstrap as there are still asynchronous initializers running. Wait for them using waitForAsyncInitializers().");
          return this.run(function() {
            _this._rootComponentTypes.push(componentFactory.componentType);
            var compRef = componentFactory.create(_this._injector, [], componentFactory.selector);
            compRef.onDestroy(function() {
              _this._unloadComponent(compRef);
            });
            var testability = compRef.injector.get(Testability, null);
            isPresent(testability) && compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability), _this._loadComponent(compRef);
            var c = _this._injector.get(Console);
            if (isDevMode()) {
              var prodDescription = IS_DART ? "Production mode is disabled in Dart." : "Call enableProdMode() to enable the production mode.";
              c.log("Angular 2 is running in the development mode. " + prodDescription);
            }
            return compRef;
          });
        }, ApplicationRef_.prototype._loadComponent = function(componentRef) {
          this._changeDetectorRefs.push(componentRef.changeDetectorRef), this.tick(), this._rootComponents.push(componentRef), this._bootstrapListeners.forEach(function(listener) {
            return listener(componentRef);
          });
        }, ApplicationRef_.prototype._unloadComponent = function(componentRef) {
          ListWrapper.contains(this._rootComponents, componentRef) && (this.unregisterChangeDetector(componentRef.changeDetectorRef), ListWrapper.remove(this._rootComponents, componentRef));
        }, Object.defineProperty(ApplicationRef_.prototype, "injector", {
          get: function() {
            return this._injector;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ApplicationRef_.prototype, "zone", {
          get: function() {
            return this._zone;
          },
          enumerable: !0,
          configurable: !0
        }), ApplicationRef_.prototype.tick = function() {
          if (this._runningTick)
            throw new BaseException("ApplicationRef.tick is called recursively");
          var s = ApplicationRef_._tickScope();
          try {
            this._runningTick = !0, this._changeDetectorRefs.forEach(function(detector) {
              return detector.detectChanges();
            }), this._enforceNoNewChanges && this._changeDetectorRefs.forEach(function(detector) {
              return detector.checkNoChanges();
            });
          } finally {
            this._runningTick = !1, wtfLeave(s);
          }
        }, ApplicationRef_.prototype.dispose = function() {
          ListWrapper.clone(this._rootComponents).forEach(function(ref) {
            return ref.destroy();
          }), this._disposeListeners.forEach(function(dispose) {
            return dispose();
          }), this._platform._applicationDisposed(this);
        }, Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
          get: function() {
            return this._rootComponentTypes;
          },
          enumerable: !0,
          configurable: !0
        }), ApplicationRef_;
      }(ApplicationRef);
  ApplicationRef_._tickScope = wtfCreateScope("ApplicationRef#tick()"), ApplicationRef_.decorators = [{type: Injectable}], ApplicationRef_.ctorParameters = [{type: PlatformRef_}, {type: NgZone}, {type: Injector}];
  var PLATFORM_CORE_PROVIDERS = [PlatformRef_, {
    provide: PlatformRef,
    useExisting: PlatformRef_
  }],
      APPLICATION_CORE_PROVIDERS = [{
        provide: NgZone,
        useFactory: createNgZone,
        deps: []
      }, ApplicationRef_, {
        provide: ApplicationRef,
        useExisting: ApplicationRef_
      }],
      Compiler = function() {
        function Compiler() {}
        return Compiler.prototype.compileComponentAsync = function(component) {
          throw new BaseException("Runtime compiler is not loaded. Tried to compile " + stringify(component));
        }, Compiler.prototype.compileComponentSync = function(component) {
          throw new BaseException("Runtime compiler is not loaded. Tried to compile " + stringify(component));
        }, Compiler.prototype.clearCache = function() {}, Compiler.prototype.clearCacheFor = function(compType) {}, Compiler;
      }(),
      NoComponentFactoryError = function(_super) {
        function NoComponentFactoryError(component) {
          _super.call(this, "No component factory found for " + stringify(component)), this.component = component;
        }
        return __extends(NoComponentFactoryError, _super), NoComponentFactoryError;
      }(BaseException),
      _NullComponentFactoryResolver = function() {
        function _NullComponentFactoryResolver() {}
        return _NullComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
          throw new NoComponentFactoryError(component);
        }, _NullComponentFactoryResolver;
      }(),
      ComponentFactoryResolver = function() {
        function ComponentFactoryResolver() {}
        return ComponentFactoryResolver;
      }();
  ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver;
  var CodegenComponentFactoryResolver = function() {
    function CodegenComponentFactoryResolver(factories, _parent) {
      this._parent = _parent, this._factories = new Map;
      for (var i = 0; i < factories.length; i++) {
        var factory = factories[i];
        this._factories.set(factory.componentType, factory);
      }
    }
    return CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
      var result = this._factories.get(component);
      return result || (result = this._parent.resolveComponentFactory(component)), result;
    }, CodegenComponentFactoryResolver;
  }(),
      DynamicComponentLoader = function() {
        function DynamicComponentLoader() {}
        return DynamicComponentLoader;
      }(),
      DynamicComponentLoader_ = function(_super) {
        function DynamicComponentLoader_(_compiler) {
          _super.call(this), this._compiler = _compiler;
        }
        return __extends(DynamicComponentLoader_, _super), DynamicComponentLoader_.prototype.loadAsRoot = function(type, overrideSelectorOrNode, injector, onDispose, projectableNodes) {
          return this._compiler.resolveComponent(type).then(function(componentFactory) {
            var componentRef = componentFactory.create(injector, projectableNodes, isPresent(overrideSelectorOrNode) ? overrideSelectorOrNode : componentFactory.selector);
            return isPresent(onDispose) && componentRef.onDestroy(onDispose), componentRef;
          });
        }, DynamicComponentLoader_.prototype.loadNextToLocation = function(type, location, providers, projectableNodes) {
          return void 0 === providers && (providers = null), void 0 === projectableNodes && (projectableNodes = null), this._compiler.resolveComponent(type).then(function(componentFactory) {
            var contextInjector = location.parentInjector,
                childInjector = isPresent(providers) && providers.length > 0 ? ReflectiveInjector.fromResolvedProviders(providers, contextInjector) : contextInjector;
            return location.createComponent(componentFactory, location.length, childInjector, projectableNodes);
          });
        }, DynamicComponentLoader_;
      }(DynamicComponentLoader);
  DynamicComponentLoader_.decorators = [{type: Injectable}], DynamicComponentLoader_.ctorParameters = [{type: ComponentResolver}];
  var QueryList = function() {
    function QueryList() {
      this._dirty = !0, this._results = [], this._emitter = new EventEmitter;
    }
    return Object.defineProperty(QueryList.prototype, "changes", {
      get: function() {
        return this._emitter;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(QueryList.prototype, "length", {
      get: function() {
        return this._results.length;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(QueryList.prototype, "first", {
      get: function() {
        return this._results[0];
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(QueryList.prototype, "last", {
      get: function() {
        return this._results[this.length - 1];
      },
      enumerable: !0,
      configurable: !0
    }), QueryList.prototype.map = function(fn) {
      return this._results.map(fn);
    }, QueryList.prototype.filter = function(fn) {
      return this._results.filter(fn);
    }, QueryList.prototype.reduce = function(fn, init) {
      return this._results.reduce(fn, init);
    }, QueryList.prototype.forEach = function(fn) {
      this._results.forEach(fn);
    }, QueryList.prototype.some = function(fn) {
      return this._results.some(fn);
    }, QueryList.prototype.toArray = function() {
      return this._results.slice();
    }, QueryList.prototype[getSymbolIterator()] = function() {
      return this._results[getSymbolIterator()]();
    }, QueryList.prototype.toString = function() {
      return this._results.toString();
    }, QueryList.prototype.reset = function(res) {
      this._results = ListWrapper.flatten(res), this._dirty = !1;
    }, QueryList.prototype.notifyOnChanges = function() {
      this._emitter.emit(this);
    }, QueryList.prototype.setDirty = function() {
      this._dirty = !0;
    }, Object.defineProperty(QueryList.prototype, "dirty", {
      get: function() {
        return this._dirty;
      },
      enumerable: !0,
      configurable: !0
    }), QueryList;
  }(),
      _SEPARATOR = "#",
      SystemJsComponentResolver = function() {
        function SystemJsComponentResolver(_resolver) {
          this._resolver = _resolver;
        }
        return SystemJsComponentResolver.prototype.resolveComponent = function(componentType) {
          var _this = this;
          if (isString(componentType)) {
            var _a = componentType.split(_SEPARATOR),
                module = _a[0],
                component_1 = _a[1];
            return void 0 === component_1 && (component_1 = "default"), global$1.System.import(module).then(function(module) {
              return _this._resolver.resolveComponent(module[component_1]);
            });
          }
          return this._resolver.resolveComponent(componentType);
        }, SystemJsComponentResolver.prototype.clearCache = function() {}, SystemJsComponentResolver;
      }(),
      FACTORY_MODULE_SUFFIX = ".ngfactory",
      FACTORY_CLASS_SUFFIX = "NgFactory",
      SystemJsCmpFactoryResolver = function() {
        function SystemJsCmpFactoryResolver() {}
        return SystemJsCmpFactoryResolver.prototype.resolveComponent = function(componentType) {
          if (isString(componentType)) {
            var _a = componentType.split(_SEPARATOR),
                module = _a[0],
                factory_1 = _a[1];
            return global$1.System.import(module + FACTORY_MODULE_SUFFIX).then(function(module) {
              return module[factory_1 + FACTORY_CLASS_SUFFIX];
            });
          }
          return Promise.resolve(null);
        }, SystemJsCmpFactoryResolver.prototype.clearCache = function() {}, SystemJsCmpFactoryResolver;
      }(),
      EMPTY_CONTEXT$1 = new Object,
      TemplateRef = function() {
        function TemplateRef() {}
        return Object.defineProperty(TemplateRef.prototype, "elementRef", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), TemplateRef;
      }(),
      TemplateRef_ = function(_super) {
        function TemplateRef_(_appElement, _viewFactory) {
          _super.call(this), this._appElement = _appElement, this._viewFactory = _viewFactory;
        }
        return __extends(TemplateRef_, _super), TemplateRef_.prototype.createEmbeddedView = function(context) {
          var view = this._viewFactory(this._appElement.parentView.viewUtils, this._appElement.parentInjector, this._appElement);
          return isBlank(context) && (context = EMPTY_CONTEXT$1), view.create(context, null, null), view.ref;
        }, Object.defineProperty(TemplateRef_.prototype, "elementRef", {
          get: function() {
            return this._appElement.elementRef;
          },
          enumerable: !0,
          configurable: !0
        }), TemplateRef_;
      }(TemplateRef),
      ViewRef = function() {
        function ViewRef() {}
        return Object.defineProperty(ViewRef.prototype, "destroyed", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), ViewRef;
      }(),
      EmbeddedViewRef = function(_super) {
        function EmbeddedViewRef() {
          _super.apply(this, arguments);
        }
        return __extends(EmbeddedViewRef, _super), Object.defineProperty(EmbeddedViewRef.prototype, "context", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), EmbeddedViewRef;
      }(ViewRef),
      ViewRef_ = function() {
        function ViewRef_(_view) {
          this._view = _view, this._view = _view, this._originalMode = this._view.cdMode;
        }
        return Object.defineProperty(ViewRef_.prototype, "internalView", {
          get: function() {
            return this._view;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewRef_.prototype, "rootNodes", {
          get: function() {
            return this._view.flatRootNodes;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewRef_.prototype, "context", {
          get: function() {
            return this._view.context;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewRef_.prototype, "destroyed", {
          get: function() {
            return this._view.destroyed;
          },
          enumerable: !0,
          configurable: !0
        }), ViewRef_.prototype.markForCheck = function() {
          this._view.markPathToRootAsCheckOnce();
        }, ViewRef_.prototype.detach = function() {
          this._view.cdMode = ChangeDetectorStatus.Detached;
        }, ViewRef_.prototype.detectChanges = function() {
          this._view.detectChanges(!1);
        }, ViewRef_.prototype.checkNoChanges = function() {
          this._view.detectChanges(!0);
        }, ViewRef_.prototype.reattach = function() {
          this._view.cdMode = this._originalMode, this.markForCheck();
        }, ViewRef_.prototype.onDestroy = function(callback) {
          this._view.disposables.push(callback);
        }, ViewRef_.prototype.destroy = function() {
          this._view.destroy();
        }, ViewRef_;
      }(),
      EventListener = function() {
        function EventListener(name, callback) {
          this.name = name, this.callback = callback;
        }
        return EventListener;
      }(),
      DebugNode = function() {
        function DebugNode(nativeNode, parent, _debugInfo) {
          this._debugInfo = _debugInfo, this.nativeNode = nativeNode, isPresent(parent) && parent instanceof DebugElement ? parent.addChild(this) : this.parent = null, this.listeners = [];
        }
        return Object.defineProperty(DebugNode.prototype, "injector", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.injector : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugNode.prototype, "componentInstance", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.component : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugNode.prototype, "context", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.context : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugNode.prototype, "references", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.references : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugNode.prototype, "providerTokens", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.providerTokens : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugNode.prototype, "source", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.source : null;
          },
          enumerable: !0,
          configurable: !0
        }), DebugNode.prototype.inject = function(token) {
          return this.injector.get(token);
        }, DebugNode;
      }(),
      DebugElement = function(_super) {
        function DebugElement(nativeNode, parent, _debugInfo) {
          _super.call(this, nativeNode, parent, _debugInfo), this.properties = {}, this.attributes = {}, this.classes = {}, this.styles = {}, this.childNodes = [], this.nativeElement = nativeNode;
        }
        return __extends(DebugElement, _super), DebugElement.prototype.addChild = function(child) {
          isPresent(child) && (this.childNodes.push(child), child.parent = this);
        }, DebugElement.prototype.removeChild = function(child) {
          var childIndex = this.childNodes.indexOf(child);
          childIndex !== -1 && (child.parent = null, this.childNodes.splice(childIndex, 1));
        }, DebugElement.prototype.insertChildrenAfter = function(child, newChildren) {
          var siblingIndex = this.childNodes.indexOf(child);
          if (siblingIndex !== -1) {
            var previousChildren = this.childNodes.slice(0, siblingIndex + 1),
                nextChildren = this.childNodes.slice(siblingIndex + 1);
            this.childNodes = ListWrapper.concat(ListWrapper.concat(previousChildren, newChildren), nextChildren);
            for (var i = 0; i < newChildren.length; ++i) {
              var newChild = newChildren[i];
              isPresent(newChild.parent) && newChild.parent.removeChild(newChild), newChild.parent = this;
            }
          }
        }, DebugElement.prototype.query = function(predicate) {
          var results = this.queryAll(predicate);
          return results.length > 0 ? results[0] : null;
        }, DebugElement.prototype.queryAll = function(predicate) {
          var matches = [];
          return _queryElementChildren(this, predicate, matches), matches;
        }, DebugElement.prototype.queryAllNodes = function(predicate) {
          var matches = [];
          return _queryNodeChildren(this, predicate, matches), matches;
        }, Object.defineProperty(DebugElement.prototype, "children", {
          get: function() {
            var children = [];
            return this.childNodes.forEach(function(node) {
              node instanceof DebugElement && children.push(node);
            }), children;
          },
          enumerable: !0,
          configurable: !0
        }), DebugElement.prototype.triggerEventHandler = function(eventName, eventObj) {
          this.listeners.forEach(function(listener) {
            listener.name == eventName && listener.callback(eventObj);
          });
        }, DebugElement;
      }(DebugNode),
      _nativeNodeToDebugNode = new Map,
      PLATFORM_DIRECTIVES = new OpaqueToken("Platform Directives"),
      PLATFORM_PIPES = new OpaqueToken("Platform Pipes"),
      PLATFORM_COMMON_PROVIDERS = [PLATFORM_CORE_PROVIDERS, {
        provide: Reflector,
        useFactory: _reflector,
        deps: []
      }, {
        provide: ReflectorReader,
        useExisting: Reflector
      }, TestabilityRegistry, Console],
      APPLICATION_COMMON_PROVIDERS = [APPLICATION_CORE_PROVIDERS, {
        provide: ComponentResolver,
        useClass: ReflectorComponentResolver
      }, {
        provide: ComponentFactoryResolver,
        useValue: ComponentFactoryResolver.NULL
      }, APP_ID_RANDOM_PROVIDER, ViewUtils, {
        provide: IterableDiffers,
        useValue: defaultIterableDiffers
      }, {
        provide: KeyValueDiffers,
        useValue: defaultKeyValueDiffers
      }, {
        provide: DynamicComponentLoader,
        useClass: DynamicComponentLoader_
      }],
      FILL_STYLE_FLAG = "true",
      ANY_STATE = "*",
      DEFAULT_STATE = "*",
      EMPTY_STATE = "void",
      AnimationPlayer = function() {
        function AnimationPlayer() {}
        return Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
          get: function() {
            throw new BaseException("NOT IMPLEMENTED: Base Class");
          },
          set: function(player) {
            throw new BaseException("NOT IMPLEMENTED: Base Class");
          },
          enumerable: !0,
          configurable: !0
        }), AnimationPlayer;
      }(),
      NoOpAnimationPlayer = function() {
        function NoOpAnimationPlayer() {
          var _this = this;
          this._subscriptions = [], this.parentPlayer = null, scheduleMicroTask(function() {
            return _this._onFinish();
          });
        }
        return NoOpAnimationPlayer.prototype._onFinish = function() {
          this._subscriptions.forEach(function(entry) {
            entry();
          }), this._subscriptions = [];
        }, NoOpAnimationPlayer.prototype.onDone = function(fn) {
          this._subscriptions.push(fn);
        }, NoOpAnimationPlayer.prototype.play = function() {}, NoOpAnimationPlayer.prototype.pause = function() {}, NoOpAnimationPlayer.prototype.restart = function() {}, NoOpAnimationPlayer.prototype.finish = function() {
          this._onFinish();
        }, NoOpAnimationPlayer.prototype.destroy = function() {}, NoOpAnimationPlayer.prototype.reset = function() {}, NoOpAnimationPlayer.prototype.setPosition = function(p) {}, NoOpAnimationPlayer.prototype.getPosition = function() {
          return 0;
        }, NoOpAnimationPlayer;
      }(),
      AnimationDriver = function() {
        function AnimationDriver() {}
        return AnimationDriver;
      }(),
      NoOpAnimationDriver = function(_super) {
        function NoOpAnimationDriver() {
          _super.apply(this, arguments);
        }
        return __extends(NoOpAnimationDriver, _super), NoOpAnimationDriver.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
          return new NoOpAnimationPlayer;
        }, NoOpAnimationDriver;
      }(AnimationDriver),
      Math$1 = global$1.Math,
      AnimationGroupPlayer = function() {
        function AnimationGroupPlayer(_players) {
          var _this = this;
          this._players = _players, this._subscriptions = [], this._finished = !1, this.parentPlayer = null;
          var count = 0,
              total = this._players.length;
          0 == total ? scheduleMicroTask(function() {
            return _this._onFinish();
          }) : this._players.forEach(function(player) {
            player.parentPlayer = _this, player.onDone(function() {
              ++count >= total && _this._onFinish();
            });
          });
        }
        return AnimationGroupPlayer.prototype._onFinish = function() {
          this._finished || (this._finished = !0, isPresent(this.parentPlayer) || this.destroy(), this._subscriptions.forEach(function(subscription) {
            return subscription();
          }), this._subscriptions = []);
        }, AnimationGroupPlayer.prototype.onDone = function(fn) {
          this._subscriptions.push(fn);
        }, AnimationGroupPlayer.prototype.play = function() {
          this._players.forEach(function(player) {
            return player.play();
          });
        }, AnimationGroupPlayer.prototype.pause = function() {
          this._players.forEach(function(player) {
            return player.pause();
          });
        }, AnimationGroupPlayer.prototype.restart = function() {
          this._players.forEach(function(player) {
            return player.restart();
          });
        }, AnimationGroupPlayer.prototype.finish = function() {
          this._onFinish(), this._players.forEach(function(player) {
            return player.finish();
          });
        }, AnimationGroupPlayer.prototype.destroy = function() {
          this._onFinish(), this._players.forEach(function(player) {
            return player.destroy();
          });
        }, AnimationGroupPlayer.prototype.reset = function() {
          this._players.forEach(function(player) {
            return player.reset();
          });
        }, AnimationGroupPlayer.prototype.setPosition = function(p) {
          this._players.forEach(function(player) {
            player.setPosition(p);
          });
        }, AnimationGroupPlayer.prototype.getPosition = function() {
          var min = 0;
          return this._players.forEach(function(player) {
            var p = player.getPosition();
            min = Math$1.min(p, min);
          }), min;
        }, AnimationGroupPlayer;
      }(),
      AnimationKeyframe = function() {
        function AnimationKeyframe(offset, styles) {
          this.offset = offset, this.styles = styles;
        }
        return AnimationKeyframe;
      }(),
      AnimationSequencePlayer = function() {
        function AnimationSequencePlayer(_players) {
          var _this = this;
          this._players = _players, this._currentIndex = 0, this._subscriptions = [], this._finished = !1, this.parentPlayer = null, this._players.forEach(function(player) {
            player.parentPlayer = _this;
          }), this._onNext(!1);
        }
        return AnimationSequencePlayer.prototype._onNext = function(start) {
          var _this = this;
          if (!this._finished)
            if (0 == this._players.length)
              this._activePlayer = new NoOpAnimationPlayer, scheduleMicroTask(function() {
                return _this._onFinish();
              });
            else if (this._currentIndex >= this._players.length)
              this._activePlayer = new NoOpAnimationPlayer, this._onFinish();
            else {
              var player = this._players[this._currentIndex++];
              player.onDone(function() {
                return _this._onNext(!0);
              }), this._activePlayer = player, start && player.play();
            }
        }, AnimationSequencePlayer.prototype._onFinish = function() {
          this._finished || (this._finished = !0, isPresent(this.parentPlayer) || this.destroy(), this._subscriptions.forEach(function(subscription) {
            return subscription();
          }), this._subscriptions = []);
        }, AnimationSequencePlayer.prototype.onDone = function(fn) {
          this._subscriptions.push(fn);
        }, AnimationSequencePlayer.prototype.play = function() {
          this._activePlayer.play();
        }, AnimationSequencePlayer.prototype.pause = function() {
          this._activePlayer.pause();
        }, AnimationSequencePlayer.prototype.restart = function() {
          this._players.length > 0 && (this.reset(), this._players[0].restart());
        }, AnimationSequencePlayer.prototype.reset = function() {
          this._players.forEach(function(player) {
            return player.reset();
          });
        }, AnimationSequencePlayer.prototype.finish = function() {
          this._onFinish(), this._players.forEach(function(player) {
            return player.finish();
          });
        }, AnimationSequencePlayer.prototype.destroy = function() {
          this._onFinish(), this._players.forEach(function(player) {
            return player.destroy();
          });
        }, AnimationSequencePlayer.prototype.setPosition = function(p) {
          this._players[0].setPosition(p);
        }, AnimationSequencePlayer.prototype.getPosition = function() {
          return this._players[0].getPosition();
        }, AnimationSequencePlayer;
      }(),
      AUTO_STYLE = "*",
      AnimationEntryMetadata = function() {
        function AnimationEntryMetadata(name, definitions) {
          this.name = name, this.definitions = definitions;
        }
        return AnimationEntryMetadata;
      }(),
      AnimationStateMetadata = function() {
        function AnimationStateMetadata() {}
        return AnimationStateMetadata;
      }(),
      AnimationStateDeclarationMetadata = function(_super) {
        function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
          _super.call(this), this.stateNameExpr = stateNameExpr, this.styles = styles;
        }
        return __extends(AnimationStateDeclarationMetadata, _super), AnimationStateDeclarationMetadata;
      }(AnimationStateMetadata),
      AnimationStateTransitionMetadata = function(_super) {
        function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
          _super.call(this), this.stateChangeExpr = stateChangeExpr, this.steps = steps;
        }
        return __extends(AnimationStateTransitionMetadata, _super), AnimationStateTransitionMetadata;
      }(AnimationStateMetadata),
      AnimationMetadata = function() {
        function AnimationMetadata() {}
        return AnimationMetadata;
      }(),
      AnimationKeyframesSequenceMetadata = function(_super) {
        function AnimationKeyframesSequenceMetadata(steps) {
          _super.call(this), this.steps = steps;
        }
        return __extends(AnimationKeyframesSequenceMetadata, _super), AnimationKeyframesSequenceMetadata;
      }(AnimationMetadata),
      AnimationStyleMetadata = function(_super) {
        function AnimationStyleMetadata(styles, offset) {
          void 0 === offset && (offset = null), _super.call(this), this.styles = styles, this.offset = offset;
        }
        return __extends(AnimationStyleMetadata, _super), AnimationStyleMetadata;
      }(AnimationMetadata),
      AnimationAnimateMetadata = function(_super) {
        function AnimationAnimateMetadata(timings, styles) {
          _super.call(this), this.timings = timings, this.styles = styles;
        }
        return __extends(AnimationAnimateMetadata, _super), AnimationAnimateMetadata;
      }(AnimationMetadata),
      AnimationWithStepsMetadata = function(_super) {
        function AnimationWithStepsMetadata() {
          _super.call(this);
        }
        return __extends(AnimationWithStepsMetadata, _super), Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
          get: function() {
            throw new BaseException("NOT IMPLEMENTED: Base Class");
          },
          enumerable: !0,
          configurable: !0
        }), AnimationWithStepsMetadata;
      }(AnimationMetadata),
      AnimationSequenceMetadata = function(_super) {
        function AnimationSequenceMetadata(_steps) {
          _super.call(this), this._steps = _steps;
        }
        return __extends(AnimationSequenceMetadata, _super), Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
          get: function() {
            return this._steps;
          },
          enumerable: !0,
          configurable: !0
        }), AnimationSequenceMetadata;
      }(AnimationWithStepsMetadata),
      AnimationGroupMetadata = function(_super) {
        function AnimationGroupMetadata(_steps) {
          _super.call(this), this._steps = _steps;
        }
        return __extends(AnimationGroupMetadata, _super), Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
          get: function() {
            return this._steps;
          },
          enumerable: !0,
          configurable: !0
        }), AnimationGroupMetadata;
      }(AnimationWithStepsMetadata),
      AnimationStyles = function() {
        function AnimationStyles(styles) {
          this.styles = styles;
        }
        return AnimationStyles;
      }(),
      DebugDomRootRenderer = function() {
        function DebugDomRootRenderer(_delegate) {
          this._delegate = _delegate;
        }
        return DebugDomRootRenderer.prototype.renderComponent = function(componentProto) {
          return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
        }, DebugDomRootRenderer;
      }(),
      DebugDomRenderer = function() {
        function DebugDomRenderer(_delegate) {
          this._delegate = _delegate;
        }
        return DebugDomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
          var nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo),
              debugEl = new DebugElement(nativeEl, null, debugInfo);
          return indexDebugNode(debugEl), nativeEl;
        }, DebugDomRenderer.prototype.createElement = function(parentElement, name, debugInfo) {
          var nativeEl = this._delegate.createElement(parentElement, name, debugInfo),
              debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);
          return debugEl.name = name, indexDebugNode(debugEl), nativeEl;
        }, DebugDomRenderer.prototype.createViewRoot = function(hostElement) {
          return this._delegate.createViewRoot(hostElement);
        }, DebugDomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
          var comment = this._delegate.createTemplateAnchor(parentElement, debugInfo),
              debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);
          return indexDebugNode(debugEl), comment;
        }, DebugDomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
          var text = this._delegate.createText(parentElement, value, debugInfo),
              debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);
          return indexDebugNode(debugEl), text;
        }, DebugDomRenderer.prototype.projectNodes = function(parentElement, nodes) {
          var debugParent = getDebugNode(parentElement);
          if (isPresent(debugParent) && debugParent instanceof DebugElement) {
            var debugElement_1 = debugParent;
            nodes.forEach(function(node) {
              debugElement_1.addChild(getDebugNode(node));
            });
          }
          this._delegate.projectNodes(parentElement, nodes);
        }, DebugDomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
          var debugNode = getDebugNode(node);
          if (isPresent(debugNode)) {
            var debugParent = debugNode.parent;
            if (viewRootNodes.length > 0 && isPresent(debugParent)) {
              var debugViewRootNodes = [];
              viewRootNodes.forEach(function(rootNode) {
                return debugViewRootNodes.push(getDebugNode(rootNode));
              }), debugParent.insertChildrenAfter(debugNode, debugViewRootNodes);
            }
          }
          this._delegate.attachViewAfter(node, viewRootNodes);
        }, DebugDomRenderer.prototype.detachView = function(viewRootNodes) {
          viewRootNodes.forEach(function(node) {
            var debugNode = getDebugNode(node);
            isPresent(debugNode) && isPresent(debugNode.parent) && debugNode.parent.removeChild(debugNode);
          }), this._delegate.detachView(viewRootNodes);
        }, DebugDomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
          viewAllNodes.forEach(function(node) {
            removeDebugNodeFromIndex(getDebugNode(node));
          }), this._delegate.destroyView(hostElement, viewAllNodes);
        }, DebugDomRenderer.prototype.listen = function(renderElement, name, callback) {
          var debugEl = getDebugNode(renderElement);
          return isPresent(debugEl) && debugEl.listeners.push(new EventListener(name, callback)), this._delegate.listen(renderElement, name, callback);
        }, DebugDomRenderer.prototype.listenGlobal = function(target, name, callback) {
          return this._delegate.listenGlobal(target, name, callback);
        }, DebugDomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
          var debugEl = getDebugNode(renderElement);
          isPresent(debugEl) && debugEl instanceof DebugElement && (debugEl.properties[propertyName] = propertyValue), this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
        }, DebugDomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
          var debugEl = getDebugNode(renderElement);
          isPresent(debugEl) && debugEl instanceof DebugElement && (debugEl.attributes[attributeName] = attributeValue), this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
        }, DebugDomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
          this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
        }, DebugDomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
          var debugEl = getDebugNode(renderElement);
          isPresent(debugEl) && debugEl instanceof DebugElement && (debugEl.classes[className] = isAdd), this._delegate.setElementClass(renderElement, className, isAdd);
        }, DebugDomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
          var debugEl = getDebugNode(renderElement);
          isPresent(debugEl) && debugEl instanceof DebugElement && (debugEl.styles[styleName] = styleValue), this._delegate.setElementStyle(renderElement, styleName, styleValue);
        }, DebugDomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
          this._delegate.invokeElementMethod(renderElement, methodName, args);
        }, DebugDomRenderer.prototype.setText = function(renderNode, text) {
          this._delegate.setText(renderNode, text);
        }, DebugDomRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
          return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing);
        }, DebugDomRenderer;
      }(),
      StaticNodeDebugInfo = function() {
        function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
          this.providerTokens = providerTokens, this.componentToken = componentToken, this.refTokens = refTokens;
        }
        return StaticNodeDebugInfo;
      }(),
      DebugContext = function() {
        function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
          this._view = _view, this._nodeIndex = _nodeIndex, this._tplRow = _tplRow, this._tplCol = _tplCol;
        }
        return Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
          get: function() {
            return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "context", {
          get: function() {
            return this._view.context;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "component", {
          get: function() {
            var staticNodeInfo = this._staticNodeInfo;
            return isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken) ? this.injector.get(staticNodeInfo.componentToken) : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
          get: function() {
            for (var componentView = this._view; isPresent(componentView.declarationAppElement) && componentView.type !== ViewType.COMPONENT; )
              componentView = componentView.declarationAppElement.parentView;
            return isPresent(componentView.declarationAppElement) ? componentView.declarationAppElement.nativeElement : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "injector", {
          get: function() {
            return this._view.injector(this._nodeIndex);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "renderNode", {
          get: function() {
            return isPresent(this._nodeIndex) && isPresent(this._view.allNodes) ? this._view.allNodes[this._nodeIndex] : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "providerTokens", {
          get: function() {
            var staticNodeInfo = this._staticNodeInfo;
            return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "source", {
          get: function() {
            return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "references", {
          get: function() {
            var _this = this,
                varValues = {},
                staticNodeInfo = this._staticNodeInfo;
            if (isPresent(staticNodeInfo)) {
              var refs = staticNodeInfo.refTokens;
              StringMapWrapper.forEach(refs, function(refToken, refName) {
                var varValue;
                varValue = isBlank(refToken) ? isPresent(_this._view.allNodes) ? _this._view.allNodes[_this._nodeIndex] : null : _this._view.injectorGet(refToken, _this._nodeIndex, null), varValues[refName] = varValue;
              });
            }
            return varValues;
          },
          enumerable: !0,
          configurable: !0
        }), DebugContext;
      }(),
      _UNDEFINED = new Object,
      ElementInjector = function(_super) {
        function ElementInjector(_view, _nodeIndex) {
          _super.call(this), this._view = _view, this._nodeIndex = _nodeIndex;
        }
        return __extends(ElementInjector, _super), ElementInjector.prototype.get = function(token, notFoundValue) {
          void 0 === notFoundValue && (notFoundValue = THROW_IF_NOT_FOUND);
          var result = _UNDEFINED;
          return result === _UNDEFINED && (result = this._view.injectorGet(token, this._nodeIndex, _UNDEFINED)), result === _UNDEFINED && (result = this._view.parentInjector.get(token, notFoundValue)), result;
        }, ElementInjector;
      }(Injector),
      ActiveAnimationPlayersMap = function() {
        function ActiveAnimationPlayersMap() {
          this._map = new Map$1, this._allPlayers = [];
        }
        return Object.defineProperty(ActiveAnimationPlayersMap.prototype, "length", {
          get: function() {
            return this.getAllPlayers().length;
          },
          enumerable: !0,
          configurable: !0
        }), ActiveAnimationPlayersMap.prototype.find = function(element, animationName) {
          var playersByAnimation = this._map.get(element);
          if (isPresent(playersByAnimation))
            return playersByAnimation[animationName];
        }, ActiveAnimationPlayersMap.prototype.findAllPlayersByElement = function(element) {
          var players = [];
          return StringMapWrapper.forEach(this._map.get(element), function(player) {
            return players.push(player);
          }), players;
        }, ActiveAnimationPlayersMap.prototype.set = function(element, animationName, player) {
          var playersByAnimation = this._map.get(element);
          isPresent(playersByAnimation) || (playersByAnimation = {});
          var existingEntry = playersByAnimation[animationName];
          isPresent(existingEntry) && this.remove(element, animationName), playersByAnimation[animationName] = player, this._allPlayers.push(player), this._map.set(element, playersByAnimation);
        }, ActiveAnimationPlayersMap.prototype.getAllPlayers = function() {
          return this._allPlayers;
        }, ActiveAnimationPlayersMap.prototype.remove = function(element, animationName) {
          var playersByAnimation = this._map.get(element);
          if (isPresent(playersByAnimation)) {
            var player = playersByAnimation[animationName];
            delete playersByAnimation[animationName];
            var index = this._allPlayers.indexOf(player);
            ListWrapper.removeAt(this._allPlayers, index), StringMapWrapper.isEmpty(playersByAnimation) && this._map.delete(element);
          }
        }, ActiveAnimationPlayersMap;
      }(),
      _scope_check = wtfCreateScope("AppView#check(ascii id)"),
      AppView = function() {
        function AppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode) {
          this.clazz = clazz, this.componentType = componentType, this.type = type, this.viewUtils = viewUtils, this.parentInjector = parentInjector, this.declarationAppElement = declarationAppElement, this.cdMode = cdMode, this.contentChildren = [], this.viewChildren = [], this.viewContainerElement = null, this.numberOfChecks = 0, this.activeAnimationPlayers = new ActiveAnimationPlayersMap, this.ref = new ViewRef_(this), type === ViewType.COMPONENT || type === ViewType.HOST ? this.renderer = viewUtils.renderComponent(componentType) : this.renderer = declarationAppElement.parentView.renderer;
        }
        return Object.defineProperty(AppView.prototype, "destroyed", {
          get: function() {
            return this.cdMode === ChangeDetectorStatus.Destroyed;
          },
          enumerable: !0,
          configurable: !0
        }), AppView.prototype.cancelActiveAnimation = function(element, animationName, removeAllAnimations) {
          if (void 0 === removeAllAnimations && (removeAllAnimations = !1), removeAllAnimations)
            this.activeAnimationPlayers.findAllPlayersByElement(element).forEach(function(player) {
              return player.destroy();
            });
          else {
            var player = this.activeAnimationPlayers.find(element, animationName);
            isPresent(player) && player.destroy();
          }
        }, AppView.prototype.registerAndStartAnimation = function(element, animationName, player) {
          var _this = this;
          this.activeAnimationPlayers.set(element, animationName, player), player.onDone(function() {
            _this.activeAnimationPlayers.remove(element, animationName);
          }), player.play();
        }, AppView.prototype.create = function(context, givenProjectableNodes, rootSelectorOrNode) {
          this.context = context;
          var projectableNodes;
          switch (this.type) {
            case ViewType.COMPONENT:
              projectableNodes = ensureSlotCount(givenProjectableNodes, this.componentType.slotCount);
              break;
            case ViewType.EMBEDDED:
              projectableNodes = this.declarationAppElement.parentView.projectableNodes;
              break;
            case ViewType.HOST:
              projectableNodes = givenProjectableNodes;
          }
          return this._hasExternalHostElement = isPresent(rootSelectorOrNode), this.projectableNodes = projectableNodes, this.createInternal(rootSelectorOrNode);
        }, AppView.prototype.createInternal = function(rootSelectorOrNode) {
          return null;
        }, AppView.prototype.init = function(rootNodesOrAppElements, allNodes, disposables, subscriptions) {
          this.rootNodesOrAppElements = rootNodesOrAppElements, this.allNodes = allNodes, this.disposables = disposables, this.subscriptions = subscriptions, this.type === ViewType.COMPONENT && (this.declarationAppElement.parentView.viewChildren.push(this), this.dirtyParentQueriesInternal());
        }, AppView.prototype.selectOrCreateHostElement = function(elementName, rootSelectorOrNode, debugInfo) {
          var hostElement;
          return hostElement = isPresent(rootSelectorOrNode) ? this.renderer.selectRootElement(rootSelectorOrNode, debugInfo) : this.renderer.createElement(null, elementName, debugInfo);
        }, AppView.prototype.injectorGet = function(token, nodeIndex, notFoundResult) {
          return this.injectorGetInternal(token, nodeIndex, notFoundResult);
        }, AppView.prototype.injectorGetInternal = function(token, nodeIndex, notFoundResult) {
          return notFoundResult;
        }, AppView.prototype.injector = function(nodeIndex) {
          return isPresent(nodeIndex) ? new ElementInjector(this, nodeIndex) : this.parentInjector;
        }, AppView.prototype.destroy = function() {
          this._hasExternalHostElement ? this.renderer.detachView(this.flatRootNodes) : isPresent(this.viewContainerElement) && this.viewContainerElement.detachView(this.viewContainerElement.nestedViews.indexOf(this)), this._destroyRecurse();
        }, AppView.prototype._destroyRecurse = function() {
          if (this.cdMode !== ChangeDetectorStatus.Destroyed) {
            for (var children = this.contentChildren,
                i = 0; i < children.length; i++)
              children[i]._destroyRecurse();
            children = this.viewChildren;
            for (var i = 0; i < children.length; i++)
              children[i]._destroyRecurse();
            this.destroyLocal(), this.cdMode = ChangeDetectorStatus.Destroyed;
          }
        }, AppView.prototype.destroyLocal = function() {
          for (var _this = this,
              hostElement = this.type === ViewType.COMPONENT ? this.declarationAppElement.nativeElement : null,
              i = 0; i < this.disposables.length; i++)
            this.disposables[i]();
          for (var i = 0; i < this.subscriptions.length; i++)
            ObservableWrapper.dispose(this.subscriptions[i]);
          if (this.destroyInternal(), this.dirtyParentQueriesInternal(), 0 == this.activeAnimationPlayers.length)
            this.renderer.destroyView(hostElement, this.allNodes);
          else {
            var player = new AnimationGroupPlayer(this.activeAnimationPlayers.getAllPlayers());
            player.onDone(function() {
              _this.renderer.destroyView(hostElement, _this.allNodes);
            });
          }
        }, AppView.prototype.destroyInternal = function() {}, AppView.prototype.detachInternal = function() {}, AppView.prototype.detach = function() {
          var _this = this;
          if (this.detachInternal(), 0 == this.activeAnimationPlayers.length)
            this.renderer.detachView(this.flatRootNodes);
          else {
            var player = new AnimationGroupPlayer(this.activeAnimationPlayers.getAllPlayers());
            player.onDone(function() {
              _this.renderer.detachView(_this.flatRootNodes);
            });
          }
        }, Object.defineProperty(AppView.prototype, "changeDetectorRef", {
          get: function() {
            return this.ref;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AppView.prototype, "parent", {
          get: function() {
            return isPresent(this.declarationAppElement) ? this.declarationAppElement.parentView : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AppView.prototype, "flatRootNodes", {
          get: function() {
            return flattenNestedViewRenderNodes(this.rootNodesOrAppElements);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AppView.prototype, "lastRootNode", {
          get: function() {
            var lastNode = this.rootNodesOrAppElements.length > 0 ? this.rootNodesOrAppElements[this.rootNodesOrAppElements.length - 1] : null;
            return _findLastRenderNode(lastNode);
          },
          enumerable: !0,
          configurable: !0
        }), AppView.prototype.dirtyParentQueriesInternal = function() {}, AppView.prototype.detectChanges = function(throwOnChange) {
          var s = _scope_check(this.clazz);
          this.cdMode !== ChangeDetectorStatus.Checked && this.cdMode !== ChangeDetectorStatus.Errored && (this.cdMode === ChangeDetectorStatus.Destroyed && this.throwDestroyedError("detectChanges"), this.detectChangesInternal(throwOnChange), this.cdMode === ChangeDetectorStatus.CheckOnce && (this.cdMode = ChangeDetectorStatus.Checked), this.numberOfChecks++, wtfLeave(s));
        }, AppView.prototype.detectChangesInternal = function(throwOnChange) {
          this.detectContentChildrenChanges(throwOnChange), this.detectViewChildrenChanges(throwOnChange);
        }, AppView.prototype.detectContentChildrenChanges = function(throwOnChange) {
          for (var i = 0; i < this.contentChildren.length; ++i) {
            var child = this.contentChildren[i];
            child.cdMode !== ChangeDetectorStatus.Detached && child.detectChanges(throwOnChange);
          }
        }, AppView.prototype.detectViewChildrenChanges = function(throwOnChange) {
          for (var i = 0; i < this.viewChildren.length; ++i) {
            var child = this.viewChildren[i];
            child.cdMode !== ChangeDetectorStatus.Detached && child.detectChanges(throwOnChange);
          }
        }, AppView.prototype.addToContentChildren = function(renderAppElement) {
          renderAppElement.parentView.contentChildren.push(this), this.viewContainerElement = renderAppElement, this.dirtyParentQueriesInternal();
        }, AppView.prototype.removeFromContentChildren = function(renderAppElement) {
          ListWrapper.remove(renderAppElement.parentView.contentChildren, this), this.dirtyParentQueriesInternal(), this.viewContainerElement = null;
        }, AppView.prototype.markAsCheckOnce = function() {
          this.cdMode = ChangeDetectorStatus.CheckOnce;
        }, AppView.prototype.markPathToRootAsCheckOnce = function() {
          for (var c = this; isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached; ) {
            c.cdMode === ChangeDetectorStatus.Checked && (c.cdMode = ChangeDetectorStatus.CheckOnce);
            var parentEl = c.type === ViewType.COMPONENT ? c.declarationAppElement : c.viewContainerElement;
            c = isPresent(parentEl) ? parentEl.parentView : null;
          }
        }, AppView.prototype.eventHandler = function(cb) {
          return cb;
        }, AppView.prototype.throwDestroyedError = function(details) {
          throw new ViewDestroyedException(details);
        }, AppView;
      }(),
      DebugAppView = function(_super) {
        function DebugAppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode, staticNodeDebugInfos) {
          _super.call(this, clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode), this.staticNodeDebugInfos = staticNodeDebugInfos, this._currentDebugContext = null;
        }
        return __extends(DebugAppView, _super), DebugAppView.prototype.create = function(context, givenProjectableNodes, rootSelectorOrNode) {
          this._resetDebug();
          try {
            return _super.prototype.create.call(this, context, givenProjectableNodes, rootSelectorOrNode);
          } catch (e) {
            throw this._rethrowWithContext(e, e.stack), e;
          }
        }, DebugAppView.prototype.injectorGet = function(token, nodeIndex, notFoundResult) {
          this._resetDebug();
          try {
            return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
          } catch (e) {
            throw this._rethrowWithContext(e, e.stack), e;
          }
        }, DebugAppView.prototype.detach = function() {
          this._resetDebug();
          try {
            _super.prototype.detach.call(this);
          } catch (e) {
            throw this._rethrowWithContext(e, e.stack), e;
          }
        }, DebugAppView.prototype.destroyLocal = function() {
          this._resetDebug();
          try {
            _super.prototype.destroyLocal.call(this);
          } catch (e) {
            throw this._rethrowWithContext(e, e.stack), e;
          }
        }, DebugAppView.prototype.detectChanges = function(throwOnChange) {
          this._resetDebug();
          try {
            _super.prototype.detectChanges.call(this, throwOnChange);
          } catch (e) {
            throw this._rethrowWithContext(e, e.stack), e;
          }
        }, DebugAppView.prototype._resetDebug = function() {
          this._currentDebugContext = null;
        }, DebugAppView.prototype.debug = function(nodeIndex, rowNum, colNum) {
          return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
        }, DebugAppView.prototype._rethrowWithContext = function(e, stack) {
          if (!(e instanceof ViewWrappedException) && (e instanceof ExpressionChangedAfterItHasBeenCheckedException || (this.cdMode = ChangeDetectorStatus.Errored), isPresent(this._currentDebugContext)))
            throw new ViewWrappedException(e, stack, this._currentDebugContext);
        }, DebugAppView.prototype.eventHandler = function(cb) {
          var _this = this,
              superHandler = _super.prototype.eventHandler.call(this, cb);
          return function(event) {
            _this._resetDebug();
            try {
              return superHandler(event);
            } catch (e) {
              throw _this._rethrowWithContext(e, e.stack), e;
            }
          };
        }, DebugAppView;
      }(AppView),
      __core_private__ = {
        isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
        ChangeDetectorStatus: ChangeDetectorStatus,
        CHANGE_DETECTION_STRATEGY_VALUES: CHANGE_DETECTION_STRATEGY_VALUES,
        constructDependencies: constructDependencies,
        LifecycleHooks: LifecycleHooks,
        LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,
        ReflectorReader: ReflectorReader,
        ReflectorComponentResolver: ReflectorComponentResolver,
        CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
        AppElement: AppElement,
        AppView: AppView,
        DebugAppView: DebugAppView,
        ViewType: ViewType,
        MAX_INTERPOLATION_VALUES: MAX_INTERPOLATION_VALUES,
        checkBinding: checkBinding,
        flattenNestedViewRenderNodes: flattenNestedViewRenderNodes,
        interpolate: interpolate,
        ViewUtils: ViewUtils,
        VIEW_ENCAPSULATION_VALUES: VIEW_ENCAPSULATION_VALUES,
        DebugContext: DebugContext,
        StaticNodeDebugInfo: StaticNodeDebugInfo,
        devModeEqual: devModeEqual,
        uninitialized: uninitialized,
        ValueUnwrapper: ValueUnwrapper,
        RenderDebugInfo: RenderDebugInfo,
        SecurityContext: SecurityContext,
        SanitizationService: SanitizationService,
        TemplateRef_: TemplateRef_,
        wtfInit: wtfInit,
        ReflectionCapabilities: ReflectionCapabilities,
        makeDecorator: makeDecorator,
        DebugDomRootRenderer: DebugDomRootRenderer,
        createProvider: createProvider,
        isProviderLiteral: isProviderLiteral,
        EMPTY_ARRAY: EMPTY_ARRAY,
        EMPTY_MAP: EMPTY_MAP,
        pureProxy1: pureProxy1,
        pureProxy2: pureProxy2,
        pureProxy3: pureProxy3,
        pureProxy4: pureProxy4,
        pureProxy5: pureProxy5,
        pureProxy6: pureProxy6,
        pureProxy7: pureProxy7,
        pureProxy8: pureProxy8,
        pureProxy9: pureProxy9,
        pureProxy10: pureProxy10,
        castByValue: castByValue,
        Console: Console,
        reflector: reflector,
        Reflector: Reflector,
        NoOpAnimationPlayer: NoOpAnimationPlayer,
        AnimationPlayer: AnimationPlayer,
        NoOpAnimationDriver: NoOpAnimationDriver,
        AnimationDriver: AnimationDriver,
        AnimationSequencePlayer: AnimationSequencePlayer,
        AnimationGroupPlayer: AnimationGroupPlayer,
        AnimationKeyframe: AnimationKeyframe,
        prepareFinalAnimationStyles: prepareFinalAnimationStyles,
        balanceAnimationKeyframes: balanceAnimationKeyframes,
        flattenStyles: flattenStyles,
        clearStyles: clearStyles,
        renderStyles: renderStyles,
        collectAndResolveStyles: collectAndResolveStyles,
        AnimationStyles: AnimationStyles,
        ANY_STATE: ANY_STATE,
        DEFAULT_STATE: DEFAULT_STATE,
        EMPTY_STATE: EMPTY_STATE,
        FILL_STYLE_FLAG: FILL_STYLE_FLAG
      };
  exports.createPlatform = createPlatform, exports.assertPlatform = assertPlatform, exports.disposePlatform = disposePlatform, exports.getPlatform = getPlatform, exports.coreBootstrap = coreBootstrap, exports.coreLoadAndBootstrap = coreLoadAndBootstrap, exports.createNgZone = createNgZone, exports.PlatformRef = PlatformRef, exports.ApplicationRef = ApplicationRef, exports.enableProdMode = enableProdMode, exports.lockRunMode = lockRunMode, exports.isDevMode = isDevMode, exports.APP_ID = APP_ID, exports.APP_INITIALIZER = APP_INITIALIZER, exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL, exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER, exports.DebugElement = DebugElement, exports.DebugNode = DebugNode, exports.asNativeElements = asNativeElements, exports.getDebugNode = getDebugNode, exports.wtfCreateScope = wtfCreateScope, exports.wtfLeave = wtfLeave, exports.wtfStartTimeRange = wtfStartTimeRange, exports.wtfEndTimeRange = wtfEndTimeRange, exports.Type = Type, exports.EventEmitter = EventEmitter, exports.ExceptionHandler = ExceptionHandler, exports.WrappedException = WrappedException, exports.BaseException = BaseException, exports.AnimationPlayer = AnimationPlayer, exports.Component = Component, exports.Directive = Directive, exports.Attribute = Attribute, exports.Query = Query, exports.ContentChildren = ContentChildren, exports.ContentChild = ContentChild, exports.ViewChildren = ViewChildren, exports.ViewChild = ViewChild, exports.ViewQuery = ViewQuery, exports.Pipe = Pipe, exports.Input = Input, exports.Output = Output, exports.HostBinding = HostBinding, exports.HostListener = HostListener, exports.AttributeMetadata = AttributeMetadata, exports.ContentChildMetadata = ContentChildMetadata, exports.ContentChildrenMetadata = ContentChildrenMetadata, exports.QueryMetadata = QueryMetadata, exports.ViewChildMetadata = ViewChildMetadata, exports.ViewChildrenMetadata = ViewChildrenMetadata, exports.ViewQueryMetadata = ViewQueryMetadata, exports.ComponentMetadata = ComponentMetadata, exports.DirectiveMetadata = DirectiveMetadata, exports.HostBindingMetadata = HostBindingMetadata, exports.HostListenerMetadata = HostListenerMetadata, exports.InputMetadata = InputMetadata, exports.OutputMetadata = OutputMetadata, exports.PipeMetadata = PipeMetadata, exports.AfterContentChecked = AfterContentChecked, exports.AfterContentInit = AfterContentInit, exports.AfterViewChecked = AfterViewChecked, exports.AfterViewInit = AfterViewInit, exports.DoCheck = DoCheck, exports.OnChanges = OnChanges, exports.OnDestroy = OnDestroy, exports.OnInit = OnInit, exports.ViewMetadata = ViewMetadata, exports.Class = Class, exports.HostMetadata = HostMetadata, exports.InjectMetadata = InjectMetadata, exports.InjectableMetadata = InjectableMetadata, exports.OptionalMetadata = OptionalMetadata, exports.SelfMetadata = SelfMetadata, exports.SkipSelfMetadata = SkipSelfMetadata, exports.forwardRef = forwardRef, exports.resolveForwardRef = resolveForwardRef, exports.Injector = Injector, exports.ReflectiveInjector = ReflectiveInjector, exports.Binding = Binding, exports.ProviderBuilder = ProviderBuilder, exports.bind = bind, exports.Provider = Provider, exports.provide = provide, exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory, exports.ReflectiveKey = ReflectiveKey, exports.NoProviderError = NoProviderError, exports.AbstractProviderError = AbstractProviderError, exports.CyclicDependencyError = CyclicDependencyError, exports.InstantiationError = InstantiationError, exports.InvalidProviderError = InvalidProviderError, exports.NoAnnotationError = NoAnnotationError, exports.OutOfBoundsError = OutOfBoundsError, exports.OpaqueToken = OpaqueToken, exports.Inject = Inject, exports.Optional = Optional, exports.Injectable = Injectable, exports.Self = Self, exports.Host = Host, exports.SkipSelf = SkipSelf, exports.NgZone = NgZone, exports.NgZoneError = NgZoneError, exports.RenderComponentType = RenderComponentType, exports.Renderer = Renderer, exports.RootRenderer = RootRenderer, exports.Compiler = Compiler, exports.ComponentFactory = ComponentFactory, exports.ComponentRef = ComponentRef, exports.ComponentFactoryResolver = ComponentFactoryResolver, exports.NoComponentFactoryError = NoComponentFactoryError, exports.ComponentResolver = ComponentResolver, exports.DynamicComponentLoader = DynamicComponentLoader, exports.ElementRef = ElementRef, exports.ExpressionChangedAfterItHasBeenCheckedException = ExpressionChangedAfterItHasBeenCheckedException, exports.QueryList = QueryList, exports.SystemJsCmpFactoryResolver = SystemJsCmpFactoryResolver, exports.SystemJsComponentResolver = SystemJsComponentResolver, exports.TemplateRef = TemplateRef, exports.ViewContainerRef = ViewContainerRef, exports.EmbeddedViewRef = EmbeddedViewRef, exports.ViewRef = ViewRef, exports.Testability = Testability, exports.TestabilityRegistry = TestabilityRegistry, exports.setTestabilityGetter = setTestabilityGetter, exports.ChangeDetectorRef = ChangeDetectorRef, exports.CollectionChangeRecord = CollectionChangeRecord, exports.DefaultIterableDiffer = DefaultIterableDiffer, exports.IterableDiffers = IterableDiffers, exports.KeyValueChangeRecord = KeyValueChangeRecord, exports.KeyValueDiffers = KeyValueDiffers, exports.SimpleChange = SimpleChange, exports.WrappedValue = WrappedValue, exports.PLATFORM_DIRECTIVES = PLATFORM_DIRECTIVES, exports.PLATFORM_PIPES = PLATFORM_PIPES, exports.PLATFORM_COMMON_PROVIDERS = PLATFORM_COMMON_PROVIDERS, exports.APPLICATION_COMMON_PROVIDERS = APPLICATION_COMMON_PROVIDERS, exports.__core_private__ = __core_private__, exports.AUTO_STYLE = AUTO_STYLE, exports.AnimationEntryMetadata = AnimationEntryMetadata, exports.AnimationStateMetadata = AnimationStateMetadata, exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata, exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata, exports.AnimationMetadata = AnimationMetadata, exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata, exports.AnimationStyleMetadata = AnimationStyleMetadata, exports.AnimationAnimateMetadata = AnimationAnimateMetadata, exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata, exports.AnimationSequenceMetadata = AnimationSequenceMetadata, exports.AnimationGroupMetadata = AnimationGroupMetadata, exports.animate = animate, exports.group = group, exports.sequence = sequence, exports.style = style, exports.state = state, exports.keyframes = keyframes, exports.transition = transition, exports.trigger = trigger;
});

})();
$__System.registerDynamic("11f", ["3"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var PushNotificationsService = (function() {
    function PushNotificationsService() {
      this.canActivate = false;
    }
    PushNotificationsService.prototype.activate = function() {
      var _this = this;
      if (!("Notification" in window))
        return {
          success: false,
          message: "This browser does not support desktop notification."
        };
      if (Notification.permission === "granted")
        return {
          success: true,
          message: "Permission already granted."
        };
      else if (Notification.permission !== "denied") {
        Notification.requestPermission().then(function(a) {
          if (a === "denied")
            console.log("Permission wasn't granted");
          else if (a === "default")
            console.log("The permission request was dismissed.");
          else
            _this.createBuffered();
        });
      }
    };
    PushNotificationsService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [])], PushNotificationsService);
    return PushNotificationsService;
  }());
  exports.PushNotificationsService = PushNotificationsService;
  return module.exports;
});

$__System.registerDynamic("f", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.defaultIcons = {
    alert: "\n        <svg class=\"simple-notification-svg\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n            <path d=\"M22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM12.5 8H11v6l4.75 2.85.75-1.23-4-2.37V8zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\"/>\n        </svg>",
    error: "\n        <svg class=\"simple-notification-svg\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n            <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n            <path d=\"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/>\n        </svg>\n    ",
    info: "\n        <svg class=\"simple-notification-svg\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n            <path d=\"M11 17h2v-6h-2v6zm1-15C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zM11 9h2V7h-2v2z\"/>\n        </svg>\n    ",
    success: "\n        <svg class=\"simple-notification-svg\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n            <path d=\"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\"/>\n        </svg>\n    "
  };
  return module.exports;
});

$__System.registerDynamic("120", [], false, function ($__require, $__exports, $__module) {
  var _retrieveGlobal = $__System.get("@@global-helpers").prepareGlobal($__module.id, null, null);

  (function ($__global) {})(this);

  return _retrieveGlobal();
});
$__System.registerDynamic("121", [], false, function ($__require, $__exports, $__module) {
  var _retrieveGlobal = $__System.get("@@global-helpers").prepareGlobal($__module.id, null, null);

  (function ($__global) {})(this);

  return _retrieveGlobal();
});
$__System.registerDynamic("122", ["e", "d", "11f", "f", "120", "121"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.SimpleNotificationsComponent = $__require('e').SimpleNotificationsComponent;
  exports.NotificationsService = $__require('d').NotificationsService;
  exports.PushNotificationsService = $__require('11f').PushNotificationsService;
  exports.Icons = $__require('f').Icons;
  exports.Options = $__require('120').Options;
  exports.Notification = $__require('121').Notification;
  return module.exports;
});

$__System.registerDynamic("1", ["3", "8", "122"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var platform_browser_dynamic_1 = $__require('8');
  var notifications_1 = $__require('122');
  var AppComponent = (function() {
    function AppComponent(_service) {
      this._service = _service;
      this.options = {
        timeOut: 5000,
        lastOnBottom: true,
        clickToClose: true,
        maxLength: 0,
        maxStack: 7,
        showProgressBar: true,
        pauseOnHover: true,
        preventDuplicates: false,
        preventLastDuplicates: false
      };
      this.title = 'just a title';
      this.content = 'just content';
      this.type = 'success';
      this.logs = [];
      this.over = {
        timeOut: 5000,
        clickToClose: true,
        maxLength: 100,
        showProgressBar: true,
        pauseOnHover: true
      };
    }
    AppComponent.prototype.create = function() {
      switch (this.type) {
        case 'success':
          this._service.success(this.title, this.content);
          break;
        case 'alert':
          this._service.alert(this.title, this.content);
          break;
        case 'error':
          this._service.error(this.title, this.content);
          break;
        case 'info':
          this._service.info(this.title, this.content);
          break;
        case 'html':
          this._service.html(this.content, 'bare');
          break;
        case 'bare':
          this._service.bare(this.title, this.content);
          break;
      }
    };
    AppComponent.prototype.removeAll = function() {
      this._service.remove();
    };
    AppComponent.prototype.override = function() {
      this._service.set({
        title: 'Override',
        content: 'This notification has overridden options',
        type: 'alert',
        override: {
          timeOut: this.over.timeOut,
          clickToClose: this.over.clickToClose,
          maxLength: this.over.maxLength,
          showProgressBar: this.over.showProgressBar,
          pauseOnHover: this.over.pauseOnHover
        }
      }, true);
    };
    AppComponent.prototype.loger = function(event) {
      this.logs.push(event);
    };
    AppComponent = __decorate([core_1.Component({
      moduleId: module.id,
      selector: 'app',
      template: '<simple-notifications [options]="options" (onCreate)="loger($event)" (onDestroy)="loger($event)"></simple-notifications><div class="container"><div class="row"><h1 class="center">Angular2 Notifications Library</h1><p class="center sub">A light and easy to use notifications library for Angular 2.</p></div><div class="row"><div class="columns six"><div class="row"><h3>Create a Notification</h3><p class="sub">Notifications created using this form will use the standard settings set in the component.</p><pre><code>\r\n                    public options = {\r\n                    timeOut: 5000,\r\n                    lastOnBottom: true,\r\n                    clickToClose: true,\r\n                    maxLength: 0,\r\n                    maxStack: 7,\r\n                    showProgressBar: true,\r\n                    pauseOnHover: true\r\n                    };\r\n                </code></pre><form (ngSubmit)="create()"><div class="row"><label for="type">Type</label><select class="u-full-width" [(ngModel)]="type" id="type"><option value="success" selected>Success</option><option value="error">Error</option><option value="alert">Alert</option><option value="info">Info</option><option value="bare">Bare</option><option value="html">HTML</option></select></div><div class="row" *ngIf="type != \'html\'"><label for="title">Title</label> <input type="text" id="title" class="u-full-width" [(ngModel)]="title"></div><div class="row"><label for="content" *ngIf="type == \'html\'">HTML</label> <label for="content" *ngIf="type != \'html\'">Message</label> <textarea class="u-full-width" id="content" [(ngModel)]="content"></textarea></div><div class="row"><div class="row"><button class="button-primary" type="submit">Create</button></div></div></form></div><div class="row"><p>You can also clear all notifications from with in the component by calling:</p></div><div class="row"><div class="columns four"><pre><code>this._service.remove()</code></pre></div></div><div class="row"><p>If you pass an id to the remove() method you can remove a single notification.</p></div><div class="row"><button (click)="removeAll()">Clear all notifications</button></div></div><div class="columns six"><div class="row"><h3>With overrides</h3><p class="sub">With this form you can create a notification with custom options.</p><form (ngSubmit)="override()"><div class="row"><div class="six columns"><label for="timeOut">Time Out</label> <input type="number" id="timeOut" class="u-full-width" [(ngModel)]="over.timeOut"></div><div class="six columns"><label for="maxLength">Maximum Length</label> <input type="number" id="maxLength" class="u-full-width" [(ngModel)]="over.maxLength"></div></div><div class="row"><div class="columns four"><input type="checkbox" [(ngModel)]="over.showProgressBar"> <span class="label-body">Show Progress Bar?</span></div><div class="columns four"><input type="checkbox" [(ngModel)]="over.clickToClose"> <span class="label-body">Click To Close?</span></div><div class="columns four"><input type="checkbox" [(ngModel)]="over.pauseOnHover"> <span class="label-body">Pause On Hover?</span></div></div><div class="row"><button class="button-primary" type="submit">Create</button></div></form></div><div class="row"><h3>Logs</h3><p>Keeps Track of all created and destroyed notifications. It uses the onCreate and onDestroy Event Emitters.</p><div class="logs" *ngIf="logs.length > 0"><div class="log" *ngFor="let log of logs" [ngClass]="{\'destroyed\': log.destroyedOn}"><span>{{log.title}}</span> <span>{{log.html}}</span> <span>CreatedOn: {{log.createdOn | date:\'mediumTime\'}}</span> <span *ngIf="log.destroyedOn">DestroyedOn: {{log.destroyedOn | date:\'mediumTime\'}}</span></div></div></div></div></div></div>',
      directives: [notifications_1.SimpleNotificationsComponent],
      providers: [notifications_1.NotificationsService]
    }), __metadata('design:paramtypes', [(typeof(_a = typeof notifications_1.NotificationsService !== 'undefined' && notifications_1.NotificationsService) === 'function' && _a) || Object])], AppComponent);
    return AppComponent;
    var _a;
  }());
  platform_browser_dynamic_1.bootstrap(AppComponent);
  return module.exports;
});

})
(function(factory) {
  if (typeof define == 'function' && define.amd)
    define([], factory);
  else if (typeof module == 'object' && module.exports && typeof require == 'function')
    module.exports = factory();
  else
    factory();
});